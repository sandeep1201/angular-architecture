USE [master]
GO
/****** Object:  Database [WWPDEV]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE DATABASE [WWPDEV]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'WWPDEV', FILENAME = N'E:\mssql\data\WWPDEV.mdf' , SIZE = 1167360KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'WWPDEV_log', FILENAME = N'E:\mssql\SQLlogs\WWPDEV_log.ldf' , SIZE = 473984KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
GO
ALTER DATABASE [WWPDEV] SET COMPATIBILITY_LEVEL = 120
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [WWPDEV].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [WWPDEV] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [WWPDEV] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [WWPDEV] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [WWPDEV] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [WWPDEV] SET ARITHABORT OFF 
GO
ALTER DATABASE [WWPDEV] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [WWPDEV] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [WWPDEV] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [WWPDEV] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [WWPDEV] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [WWPDEV] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [WWPDEV] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [WWPDEV] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [WWPDEV] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [WWPDEV] SET  DISABLE_BROKER 
GO
ALTER DATABASE [WWPDEV] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [WWPDEV] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [WWPDEV] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [WWPDEV] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [WWPDEV] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [WWPDEV] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [WWPDEV] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [WWPDEV] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [WWPDEV] SET  MULTI_USER 
GO
ALTER DATABASE [WWPDEV] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [WWPDEV] SET DB_CHAINING OFF 
GO
ALTER DATABASE [WWPDEV] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [WWPDEV] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [WWPDEV] SET DELAYED_DURABILITY = DISABLED 
GO
EXEC sys.sp_db_vardecimal_storage_format N'WWPDEV', N'ON'
GO
USE [WWPDEV]
GO
/****** Object:  User [WWPDev_App]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [WWPDev_App] FOR LOGIN [WWPDev_App] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCFINT\DCF_WWP_SQL_DB_DEVELOPERS]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [DCFINT\DCF_WWP_SQL_DB_DEVELOPERS] FOR LOGIN [DCFINT\DCF_WWP_SQL_DB_DEVELOPERS]
GO
/****** Object:  User [DCFINT\DCF_BRITS_SQL_DW_USERS]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [DCFINT\DCF_BRITS_SQL_DW_USERS] FOR LOGIN [DCFINT\DCF_BRITS_SQL_DW_USERS]
GO
/****** Object:  User [DCFINT\christopher.hujanen]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [DCFINT\christopher.hujanen] FOR LOGIN [DCFINT\christopher.hujanen] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [DCF_WWP_Read]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [DCF_WWP_Read] FOR LOGIN [DCF_WWP_Read] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [cdc]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [cdc] WITHOUT LOGIN WITH DEFAULT_SCHEMA=[cdc]
GO
/****** Object:  User [ACCOUNTS\tholksxofs]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [ACCOUNTS\tholksxofs] FOR LOGIN [ACCOUNTS\tholksxofs] WITH DEFAULT_SCHEMA=[ACCOUNTS\tholksxofs]
GO
/****** Object:  User [ACCOUNTS\kayyasxuer]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [ACCOUNTS\kayyasxuer] FOR LOGIN [ACCOUNTS\kayyasxuer] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [Accounts\GACC_DCF_WWP_SQL_DB_DEVELOPERS]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [Accounts\GACC_DCF_WWP_SQL_DB_DEVELOPERS] FOR LOGIN [ACCOUNTS\GACC_DCF_WWP_SQL_DB_DEVELOPERS]
GO
/****** Object:  User [Accounts\GACC_DCF_BRITS_SQL_DW_USERS]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [Accounts\GACC_DCF_BRITS_SQL_DW_USERS] FOR LOGIN [ACCOUNTS\GACC_DCF_BRITS_SQL_DW_USERS]
GO
/****** Object:  User [Accounts\chidapxpoy]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE USER [Accounts\chidapxpoy] FOR LOGIN [ACCOUNTS\chidapxpoy] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  DatabaseRole [sp_exec]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE ROLE [sp_exec]
GO
/****** Object:  DatabaseRole [CDCRole]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE ROLE [CDCRole]
GO
ALTER ROLE [sp_exec] ADD MEMBER [WWPDev_App]
GO
ALTER ROLE [CDCRole] ADD MEMBER [WWPDev_App]
GO
ALTER ROLE [db_datareader] ADD MEMBER [WWPDev_App]
GO
ALTER ROLE [db_datawriter] ADD MEMBER [WWPDev_App]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCFINT\DCF_WWP_SQL_DB_DEVELOPERS]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCFINT\DCF_BRITS_SQL_DW_USERS]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCFINT\DCF_BRITS_SQL_DW_USERS]
GO
ALTER ROLE [db_owner] ADD MEMBER [DCFINT\christopher.hujanen]
GO
ALTER ROLE [db_datareader] ADD MEMBER [DCF_WWP_Read]
GO
ALTER ROLE [db_owner] ADD MEMBER [cdc]
GO
ALTER ROLE [db_owner] ADD MEMBER [ACCOUNTS\kayyasxuer]
GO
ALTER ROLE [db_owner] ADD MEMBER [Accounts\GACC_DCF_WWP_SQL_DB_DEVELOPERS]
GO
ALTER ROLE [db_owner] ADD MEMBER [Accounts\GACC_DCF_BRITS_SQL_DW_USERS]
GO
ALTER ROLE [db_datareader] ADD MEMBER [Accounts\GACC_DCF_BRITS_SQL_DW_USERS]
GO
ALTER ROLE [db_owner] ADD MEMBER [Accounts\chidapxpoy]
GO
/****** Object:  Schema [ACCOUNTS\tholksxofs]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [ACCOUNTS\tholksxofs]
GO
/****** Object:  Schema [cdc]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [cdc]
GO
/****** Object:  Schema [hst]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [hst]
GO
/****** Object:  Schema [onet]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [onet]
GO
/****** Object:  Schema [sec]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [sec]
GO
/****** Object:  Schema [tbd]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [tbd]
GO
/****** Object:  Schema [tlm]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [tlm]
GO
/****** Object:  Schema [wwp]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE SCHEMA [wwp]
GO
/****** Object:  PartitionFunction [T0459_FUNC]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE PARTITION FUNCTION [T0459_FUNC](decimal(10,0)) AS RANGE RIGHT FOR VALUES (502750000, 505200000, 508500000, 515000000, 535000000, 999999999, 1502750000, 1505200000, 1508500000, 1515000000, 1535000000, 1999999999, 2502750000, 2505200000, 2508500000, 2515000000, 2535000000, 2999999999, 3502750000, 3505200000, 3508500000, 3515000000, 3535000000, 3999999999, 4502750000, 4505200000, 4508500000, 4515000000, 4535000000, 4999999999, 5502750000, 5505200000, 5508500000, 5515000000, 5535000000, 5999999999, 6502750000, 6505200000, 6508500000, 6515000000, 6535000000, 6999999999, 7502750000, 7505200000, 7508500000, 7515000000, 7535000000, 7999999999, 8502750000, 8505200000, 8508500000, 8515000000, 8535000000, 8999999999, 9502750000, 9505200000, 9508500000, 9515000000, 9535000000, 9999999999)
GO
/****** Object:  PartitionFunction [T0460_FUNC]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE PARTITION FUNCTION [T0460_FUNC](decimal(10,0)) AS RANGE RIGHT FOR VALUES (502750000, 505200000, 508500000, 515000000, 535000000, 999999999, 1502750000, 1505200000, 1508500000, 1515000000, 1535000000, 1999999999, 2502750000, 2505200000, 2508500000, 2515000000, 2535000000, 2999999999, 3502750000, 3505200000, 3508500000, 3515000000, 3535000000, 3999999999, 4502750000, 4505200000, 4508500000, 4515000000, 4535000000, 4999999999, 5502750000, 5505200000, 5508500000, 5515000000, 5535000000, 5999999999, 6502750000, 6505200000, 6508500000, 6515000000, 6535000000, 6999999999, 7502750000, 7505200000, 7508500000, 7515000000, 7535000000, 7999999999, 8502750000, 8505200000, 8508500000, 8515000000, 8535000000, 8999999999, 9502750000, 9505200000, 9508500000, 9515000000, 9535000000, 9999999999)
GO
/****** Object:  PartitionScheme [TS0459]    Script Date: 2/7/2020 4:02:33 PM ******/

GO
/****** Object:  PartitionScheme [TS0460]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE PARTITION SCHEME [TS0460] AS PARTITION [T0460_FUNC] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY])
GO
/****** Object:  UserDefinedTableType [ACCOUNTS\tholksxofs].[TestTableType]    Script Date: 2/7/2020 4:02:33 PM ******/
CREATE TYPE [ACCOUNTS\tholksxofs].[TestTableType] AS TABLE(
	[id] [int] NULL
)
GO
/****** Object:  UserDefinedFunction [wwp].[FN_GetComputedBusniessDays]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 04/30/2018
-- Description:	Calculate the nth business day from the given date
-- =============================================

/* Sample Execute
SELECT [wwp].[FN_GetComputedBusniessDays]('12/21/2018', 10) [NthBusinessDay]
*/

CREATE FUNCTION [wwp].[FN_GetComputedBusniessDays] (@StartDate date, @NoofDays int)
RETURNS date
AS
BEGIN
	DECLARE @StartDate1 date = @StartDate
	DECLARE @EndDate date
	DECLARE @Temp TABLE (Id int IDENTITY(1,1), EndDate date)

	WHILE ((SELECT COUNT(*) FROM @Temp) < (@NoofDays + 1))
	BEGIN
		IF (DATEPART(DW, @StartDate) <> 1) AND (DATEPART(DW, @StartDate) <> 7) AND @StartDate NOT IN (SELECT [Date] FROM wwp.HolidayLookUp WHERE [CARESHoliday] = 1)
		BEGIN
			INSERT INTO @Temp VALUES (@StartDate)
			--PRINT 'Inserted ' + CAST(@StartDate AS VARCHAR(10))
		END

		SELECT @StartDate = DATEADD(D, 1, @StartDate)
		--PRINT 'Incremented ' + CAST(@StartDate AS VARCHAR(10))
	END

	IF ((DATEPART(DW, @StartDate1) = 1) OR (DATEPART(DW, @StartDate1) = 7) OR @StartDate1 IN (SELECT [Date] FROM wwp.HolidayLookUp WHERE [CARESHoliday] = 1))
		SELECT @EndDate = EndDate
		FROM @Temp
		WHERE Id = @NoofDays
	ELSE
		SELECT @EndDate = EndDate
		FROM @Temp
		WHERE Id = (@NoofDays + 1)

	--SELECT * FROM #Temp
	--SELECT @EndDate

	RETURN @EndDate
END
GO
/****** Object:  UserDefinedFunction [wwp].[GetComputedWageRateUnit]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--DROP FUNCTION [dbo].[GetComputedWageRateUnit]

CREATE FUNCTION [wwp].[GetComputedWageRateUnit] ( @intervalTypeId INT )
RETURNS VARCHAR(50)
AS
    BEGIN
	-- Declare the return variable here
        DECLARE @resultVar VARCHAR(50);

		-- Look up the IntervalTYpe
        SELECT  @resultVar = Name
        FROM    wwp.IntervalType
        WHERE   Id = @intervalTypeId

        IF @resultVar <> 'Irregular'
            BEGIN
                SET @resultVar = 'Hour'
            END

	-- Return the result of the function
        RETURN @resultVar;

    END;



GO
/****** Object:  UserDefinedFunction [wwp].[GetComputedWageRateValue]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--DROP FUNCTION [dbo].[GetComputedWageRateValue]

CREATE FUNCTION [wwp].[GetComputedWageRateValue] ( @rate DECIMAL(7,2), @intervalTypeId INT )
RETURNS DECIMAL(7,2)
AS
    BEGIN
	-- Declare the return variable here
        DECLARE @resultVar DECIMAL(7,2);
		Declare @intervalName VarChar(50);
		  SELECT  @intervalName = Name
        FROM    wwp.IntervalType
        WHERE   Id = @intervalTypeId
		  SELECT 
		  @resultVar =  
		   Case 
		        when @intervalName = 'Hour' 
		           then @rate
		        when @intervalName = 'Day'
		            then @rate/8 
				when @intervalName = 'Week' 
		            then @rate/40 
			    when  @intervalName = 'Semi-Monthly' 
		            then @rate/80   
                when   @intervalName = 'Bi-Weekly'
		            then @rate/86  
				when   @intervalName = 'Monthly'
				    then @rate/172 
			    when   @intervalName = 'Irregular'
		            then @rate   
		   End
   FROM wwp.WageHour; 
     IF (@rate IS NULL)   
        SET @resultVar = NULL;  
		-- Look up the IntervalTYpe
		--SELECT  * FROM wwp.IntervalType WHERE Id = @intervalTypeId
		-- Look up the IntervalTYpe
      

        --IF @resultVar <> 'Irregular'
        --    BEGIN
        --        SET @resultVar = 'Hour'
        --    END

	-- Return the result of the function
        RETURN @resultVar;

    END;



GO
/****** Object:  UserDefinedFunction [wwp].[ProperCase]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [wwp].[ProperCase](@Text AS VARCHAR(8000))
RETURNS VARCHAR(8000)
AS
BEGIN
  DECLARE @Reset BIT
  DECLARE @Ret VARCHAR(8000)
  DECLARE @i INT
  DECLARE @c CHAR(1)

  IF @Text IS NULL
    RETURN NULL

  SELECT @Reset = 1, @i = 1, @Ret = '';

  WHILE (@i <= LEN(@Text))
    SELECT @c = SUBSTRING(@Text, @i, 1),
      @Ret = @Ret + CASE WHEN @Reset = 1 THEN UPPER(@c) ELSE LOWER(@c) end,
      @Reset = CASE WHEN @c LIKE '[a-zA-Z]' THEN 0 ELSE 1 END,
      @i = @i + 1
  RETURN @Ret
END
GO
/****** Object:  UserDefinedFunction [wwp].[SplitCSV]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [wwp].[SplitCSV](@String VARCHAR(MAX), @Delimiter CHAR(1))
RETURNS @TempTable TABLE (Items VARCHAR(MAX))
AS
BEGIN
	DECLARE @Idx INT
	DECLARE @Slice VARCHAR(MAX)
    
	SELECT @Idx = 1     
	IF LEN(@String) < 1 OR @String IS NULL
		RETURN
    
	WHILE @Idx != 0
	BEGIN
		SET @Idx = CHARINDEX(@Delimiter, @String)
		IF @Idx != 0
			SET @Slice = LEFT(@String, @Idx - 1)
		ELSE
			SET @Slice = @String
		
		IF(LEN(@Slice) > 0)
			INSERT INTO @TempTable (Items) VALUES(@Slice)

			SET @String = RIGHT(@String, LEN(@String) - @Idx)
			IF LEN(@String) = 0
				BREAK
	END
	RETURN
END
GO
/****** Object:  UserDefinedFunction [wwp].[UFN_GetSpecificWeekDaysBetweenDates]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================
-- Author		: Tholkappian, Silambholi
-- Create date	: 02/05/2020
-- Description	: Get Specific Week Days Between Two Dates
-- ===============================================================================

/* Sample Execute
SELECT *
FROM wwp.UFN_GetSpecificWeekDaysBetweenDates ('20200201', '20200229')
*/

CREATE FUNCTION [wwp].[UFN_GetSpecificWeekDaysBetweenDates]
(
	@DateFrom DATE,
	@DateTo DATE,
	@IsDateRange BIT
)
RETURNS @Dates TABLE (Dt DATE)
AS
BEGIN
	DECLARE @Temp TABLE (Dt DATE);
	WITH CTE(Dt)
	AS
	(
		SELECT @DateFrom
		UNION ALL
		SELECT DATEADD(D, 1, Dt)
		FROM CTE
		WHERE Dt < @DateTo
	)

	INSERT INTO @Temp
	SELECT Dt
	FROM CTE
	OPTION (MAXRECURSION 2500)

	IF (@IsDateRange = 0)
		INSERT INTO @Dates
		SELECT Dt
		FROM @Temp
		WHERE DATEPART(DW, Dt) = 1
	ELSE
		INSERT INTO @Dates
		SELECT Dt
		FROM @Temp

	RETURN
END
GO
/****** Object:  Table [cdc].[wwp_OtherJobInformation_Temp]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [cdc].[wwp_OtherJobInformation_Temp](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ExpectedScheduleDetails] [varchar](1000) NULL,
	[JobSectorId] [int] NULL,
	[JobFoundMethodId] [int] NULL,
	[WorkerId] [varchar](120) NULL,
	[JobFoundMethodDetails] [varchar](500) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL,
	[WorkProgramId] [int] NULL,
	[__$command_id] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[AuditChangeLog]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuditChangeLog](
	[ChangeLogID] [int] IDENTITY(1,1) NOT NULL,
	[CreateDate] [datetime] NULL,
	[LoginName] [sysname] NULL,
	[ComputerName] [sysname] NULL,
	[ProgramName] [nvarchar](255) NULL,
	[DBName] [sysname] NOT NULL,
	[SQLEvent] [sysname] NOT NULL,
	[SchemaName] [sysname] NULL,
	[ObjectName] [sysname] NULL,
	[SQLCmd] [nvarchar](max) NULL,
	[XmlEvent] [xml] NOT NULL,
 CONSTRAINT [PK_ChangeLog] PRIMARY KEY CLUSTERED 
(
	[ChangeLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[cdc_states]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[cdc_states](
	[name] [nvarchar](256) NOT NULL,
	[state] [nvarchar](256) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DataGen]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DataGen](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [varchar](15) NOT NULL,
	[LastName] [varchar](20) NOT NULL,
	[Gender] [char](1) NOT NULL,
 CONSTRAINT [PK_DataGen2] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DataGenF]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DataGenF](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [varchar](15) NOT NULL,
	[LastName] [varchar](20) NOT NULL,
	[Gender] [char](1) NOT NULL,
 CONSTRAINT [PK_DataGen] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DataGenM]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DataGenM](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FirstName] [varchar](15) NOT NULL,
	[LastName] [varchar](20) NOT NULL,
	[Gender] [char](1) NOT NULL,
 CONSTRAINT [PK_DataGenM] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ReferenceTable]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ReferenceTable](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[Desc] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_ReferenceTable_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ReferenceTable_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ReferenceTable_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ReferenceTable_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ReferenceTable] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[captured_columns]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [hst].[captured_columns](
	[object_id] [int] NOT NULL,
	[column_name] [sysname] NOT NULL,
	[column_id] [int] NULL,
	[column_type] [sysname] NOT NULL,
	[column_ordinal] [int] NOT NULL,
	[is_computed] [bit] NULL,
 CONSTRAINT [captured_columns_clustered_idx] PRIMARY KEY CLUSTERED 
(
	[object_id] ASC,
	[column_ordinal] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [hst].[change_tables]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[change_tables](
	[object_id] [int] NOT NULL,
	[version] [int] NULL,
	[source_object_id] [int] NULL,
	[capture_instance] [sysname] NOT NULL,
	[start_lsn] [binary](10) NULL,
	[end_lsn] [binary](10) NULL,
	[supports_net_changes] [bit] NULL,
	[has_drop_pending] [bit] NULL,
	[role_name] [sysname] NULL,
	[index_name] [sysname] NULL,
	[filegroup_name] [sysname] NULL,
	[create_date] [datetime] NULL,
	[partition_switch] [bit] NOT NULL DEFAULT ((0)),
 CONSTRAINT [change_tables_clustered_idx] PRIMARY KEY CLUSTERED 
(
	[object_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[ddl_history]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[ddl_history](
	[source_object_id] [int] NULL,
	[object_id] [int] NOT NULL,
	[required_column_update] [bit] NULL,
	[ddl_command] [nvarchar](max) NULL,
	[ddl_lsn] [binary](10) NOT NULL,
	[ddl_time] [datetime] NULL,
 CONSTRAINT [ddl_history_clustered_idx] PRIMARY KEY CLUSTERED 
(
	[object_id] ASC,
	[ddl_lsn] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[index_columns]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [hst].[index_columns](
	[object_id] [int] NOT NULL,
	[column_name] [sysname] NOT NULL,
	[index_ordinal] [tinyint] NOT NULL,
	[column_id] [int] NOT NULL,
 CONSTRAINT [index_columns_clustered_idx] PRIMARY KEY CLUSTERED 
(
	[object_id] ASC,
	[index_ordinal] ASC,
	[column_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [hst].[lsn_time_mapping]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[lsn_time_mapping](
	[start_lsn] [binary](10) NOT NULL,
	[tran_begin_time] [datetime] NULL,
	[tran_end_time] [datetime] NULL,
	[tran_id] [varbinary](10) NULL,
	[tran_begin_lsn] [binary](10) NULL,
 CONSTRAINT [lsn_time_mapping_clustered_idx] PRIMARY KEY CLUSTERED 
(
	[start_lsn] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_Absence_CT]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_Absence_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[EmploymentInformationId] [int] NULL,
	[BeginDate] [date] NULL,
	[EndDate] [date] NULL,
	[AbsenceReasonId] [int] NULL,
	[Details] [varchar](500) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ActionNeeded_CT]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ActionNeeded_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[ActionNeededPageId] [int] NULL,
	[IsNoActionNeeded] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ActionNeededPageActionItemBridge_CT]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ActionNeededPageActionItemBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ActionNeededPageId] [int] NULL,
	[ActionItemId] [int] NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ActionNeededTask_CT]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ActionNeededTask_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ActionNeededId] [int] NULL,
	[ActionAssigneeId] [int] NULL,
	[ActionItemId] [int] NULL,
	[ActionPriorityId] [int] NULL,
	[FollowUpTask] [varchar](200) NULL,
	[DueDate] [date] NULL,
	[IsNoDueDate] [bit] NULL,
	[CompletionDate] [date] NULL,
	[IsNoCompletionDate] [bit] NULL,
	[Details] [varchar](400) NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_AlternateMailingAddress_CT]    Script Date: 2/7/2020 4:02:33 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_AlternateMailingAddress_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ZipCode] [varchar](10) NULL,
	[CityAddressId] [int] NULL,
	[StateId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[StreetAddressPlaceId] [varchar](1024) NULL,
	[AddressLine1] [varchar](380) NULL,
	[AddressLine2] [varchar](380) NULL,
	[AddressVerificationTypeLookupId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_BarrierAccommodation_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_BarrierAccommodation_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[BarrierDetailsId] [int] NULL,
	[AccommodationId] [int] NULL,
	[BeginDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Details] [varchar](1000) NULL,
	[DeleteReasonId] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_BarrierAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_BarrierAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_BarrierDetail_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_BarrierDetail_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[BarrierTypeId] [int] NULL,
	[BarrierSectionId] [int] NULL,
	[OnsetDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[IsAccommodationNeeded] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[WasClosedAtDisenrollment] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsConverted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_BarrierDetailContactBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_BarrierDetailContactBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[BarrierDetailId] [int] NULL,
	[ContactId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_BarrierSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_BarrierSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[IsPhysicalHealthHardToManageDetails] [varchar](400) NULL,
	[IsPhysicalHealthHardToManageId] [int] NULL,
	[IsPhysicalHealthHardToParticipateDetails] [varchar](400) NULL,
	[IsPhysicalHealthHardToParticipateId] [int] NULL,
	[IsPhysicalHealthTakeMedicationDetails] [varchar](400) NULL,
	[IsPhysicalHealthTakeMedicationId] [int] NULL,
	[IsMentalHealthHardDiagnosedDetails] [varchar](400) NULL,
	[IsMentalHealthHardDiagnosedId] [int] NULL,
	[IsMentalHealthHardToManageDetails] [varchar](400) NULL,
	[IsMentalHealthHardToManageId] [int] NULL,
	[IsMentalHealthHardToParticipateDetails] [varchar](400) NULL,
	[IsMentalHealthHardToParticipateId] [int] NULL,
	[IsMentalHealthTakeMedicationDetails] [varchar](400) NULL,
	[IsMentalHealthTakeMedicationId] [int] NULL,
	[IsAODAHardToManageDetails] [varchar](400) NULL,
	[IsAODAHardToManageId] [int] NULL,
	[IsAODAHardToParticipateDetails] [varchar](400) NULL,
	[IsAODAHardToParticipateId] [int] NULL,
	[IsAODATakeTreatmentDetails] [varchar](400) NULL,
	[IsAODATakeTreatmentId] [int] NULL,
	[IsLearningDisabilityDiagnosedDetails] [varchar](400) NULL,
	[IsLearningDisabilityDiagnosedId] [int] NULL,
	[IsLearningDisabilityHardToManageDetails] [varchar](400) NULL,
	[IsLearningDisabilityHardToManageId] [int] NULL,
	[IsLearningDisabilityHardToParticipateDetails] [varchar](400) NULL,
	[IsLearningDisabilityHardToParticipateId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[Notes] [varchar](1000) NULL,
	[RowVersion] [binary](8) NULL,
	[IsDomesticViolenceHurtingYouOrOthersId] [int] NULL,
	[IsDomesticViolenceHurtingYouOrOthersDetails] [varchar](400) NULL,
	[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId] [int] NULL,
	[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails] [varchar](400) NULL,
	[IsDomesticViolencePartnerControlledMoneyId] [int] NULL,
	[IsDomesticViolencePartnerControlledMoneyDetails] [varchar](400) NULL,
	[IsDomesticViolenceReceivedServicesOrLivedInShelterId] [int] NULL,
	[IsDomesticViolenceReceivedServicesOrLivedInShelterDetails] [varchar](400) NULL,
	[IsDomesticViolenceEmotionallyOrVerballyAbusingId] [int] NULL,
	[IsDomesticViolenceEmotionallyOrVerballyAbusingDetails] [varchar](400) NULL,
	[IsDomesticViolenceCallingHarassingStalkingAtWorkId] [int] NULL,
	[IsDomesticViolenceCallingHarassingStalkingAtWorkDetails] [varchar](400) NULL,
	[IsDomesticViolenceMakingItDifficultToWorkId] [int] NULL,
	[IsDomesticViolenceMakingItDifficultToWorkDetails] [varchar](400) NULL,
	[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId] [int] NULL,
	[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails] [varchar](400) NULL,
	[IsDomesticViolenceInvolvedInCourtsId] [int] NULL,
	[IsDomesticViolenceInvolvedInCourtsDetails] [varchar](400) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_BarrierTypeBarrierSubTypeBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_BarrierTypeBarrierSubTypeBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[BarrierDetailId] [int] NULL,
	[BarrierSubTypeId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_CFRfaDetails_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_CFRfaDetails_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[RequestForAssistanceId] [int] NULL,
	[CourtOrderedCountyId] [int] NULL,
	[CourtOrderEffectiveDate] [date] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_Child_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_Child_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](140) NULL,
	[MiddleInitialName] [char](1) NULL,
	[LastName] [varchar](140) NULL,
	[SuffixName] [char](3) NULL,
	[DateOfBirth] [date] NULL,
	[DateOfDeath] [date] NULL,
	[GenderTypeId] [int] NULL,
	[GenderIndicator] [char](1) NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ChildYouthSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ChildYouthSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[HasChildren12OrUnder] [bit] NULL,
	[HasChildrenOver12WithDisabilityInNeedOfChildCare] [bit] NULL,
	[HasFutureChildCareNeed] [bit] NULL,
	[FutureChildCareNeedNotes] [varchar](1000) NULL,
	[HasChildWelfareWorker] [bit] NULL,
	[ChildWelfareWorkerChildren] [varchar](200) NULL,
	[ChildWelfareWorkerPlanOrRequirements] [varchar](500) NULL,
	[ChildWelfareContactId] [int] NULL,
	[HasWicBenefits] [bit] NULL,
	[IsInHeadStart] [bit] NULL,
	[IsInAfterSchoolOrSummerProgram] [bit] NULL,
	[AfterSchoolProgramDetails] [varchar](1000) NULL,
	[IsInMentoringProgram] [bit] NULL,
	[MentoringProgramDetails] [varchar](1000) NULL,
	[DidOrWillAgeOutOfFosterCare] [bit] NULL,
	[FosterCareDetails] [varchar](1000) NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL,
	[ModifiedDate] [datetime] NULL,
	[IsSpecialNeedsProgramming] [bit] NULL,
	[SpecialNeedsProgrammingDetails] [varchar](500) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ChildYouthSectionChild_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ChildYouthSectionChild_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ChildYouthSectionId] [int] NULL,
	[ChildId] [int] NULL,
	[CareArrangementId] [int] NULL,
	[AgeCategoryId] [int] NULL,
	[IsSpecialNeeds] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[DeleteReasonId] [int] NULL,
	[RowVersion] [binary](8) NULL,
	[ModifiedDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ChildYouthSupportsAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ChildYouthSupportsAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL,
	[ModifiedDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ConfidentialPinInformation_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ConfidentialPinInformation_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[IsConfidential] [bit] NULL,
	[WorkerId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[PinNumber] [decimal](10, 0) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_contact_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_contact_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[TitleId] [int] NULL,
	[CustomTitle] [varchar](140) NULL,
	[Name] [varchar](140) NULL,
	[Email] [varchar](140) NULL,
	[Phone] [varchar](50) NULL,
	[ExtensionNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[ReleaseInformationDate] [datetime] NULL,
	[Address] [varchar](140) NULL,
	[LegalIssuesSectionId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_Conviction_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_Conviction_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[LegalSectionId] [int] NULL,
	[ConvictionTypeID] [int] NULL,
	[IsUnknown] [bit] NULL,
	[DateConvicted] [datetime] NULL,
	[Details] [varchar](1000) NULL,
	[DeleteReasonId] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_CourtDate_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_CourtDate_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[LegalSectionId] [int] NULL,
	[IsUnknown] [bit] NULL,
	[Location] [varchar](200) NULL,
	[Date] [datetime] NULL,
	[Details] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_EducationAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_EducationAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_EducationExam_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_EducationExam_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[ExamTypeId] [int] NULL,
	[DateTaken] [datetime] NULL,
	[Details] [varchar](400) NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_EducationSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_EducationSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[SchoolGraduationStatusId] [int] NULL,
	[SchoolCollegeEstablishmentId] [int] NULL,
	[LastGradeLevelCompletedId] [int] NULL,
	[CertificateIssuingAuthorityId] [int] NULL,
	[CertificateYearAwarded] [int] NULL,
	[HasEverAttendedSchool] [bit] NULL,
	[IsCurrentlyEnrolled] [bit] NULL,
	[IsWorkingOnCertificate] [bit] NULL,
	[LastYearAttended] [int] NULL,
	[HasEducationPlan] [bit] NULL,
	[EducationPlanDetails] [varchar](450) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ElevatedAccess_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ElevatedAccess_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WorkerId] [int] NULL,
	[ParticipantId] [int] NULL,
	[AccessCreateDate] [datetime] NULL,
	[ElevatedAccessReasonId] [int] NULL,
	[Details] [varchar](500) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_EmployerOfRecordInformation_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_EmployerOfRecordInformation_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[EmploymentInformationId] [int] NULL,
	[CompanyName] [varchar](140) NULL,
	[Fein] [varchar](10) NULL,
	[StreetAddress] [varchar](140) NULL,
	[ZipAddress] [varchar](9) NULL,
	[CityId] [int] NULL,
	[JobSectorId] [int] NULL,
	[ContactId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_EmploymentInformation_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_EmploymentInformation_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[WorkHistorySectionId] [int] NULL,
	[JobTypeId] [int] NULL,
	[JobBeginDate] [date] NULL,
	[JobEndDate] [date] NULL,
	[IsCurrentlyEmployed] [bit] NULL,
	[JobPosition] [varchar](140) NULL,
	[CompanyName] [varchar](140) NULL,
	[Fein] [varchar](10) NULL,
	[StreetAddress] [varchar](140) NULL,
	[ZipAddress] [varchar](9) NULL,
	[CityId] [int] NULL,
	[ContactId] [int] NULL,
	[JobDutiesId] [int] NULL,
	[LeavingReasonId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[DeleteReasonId] [int] NULL,
	[OtherJobInformationId] [int] NULL,
	[WageHoursId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[EmploymentProgramtypeId] [int] NULL,
	[LeavingReasonDetails] [varchar](1000) NULL,
	[EmployerOfRecordTypeId] [int] NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[OriginalOfficeNumber] [smallint] NULL,
	[IsConverted] [bit] NULL,
	[IsCurrentJobAtCreation] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_EmploymentInformationBenefitsOfferedTypeBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_EmploymentInformationBenefitsOfferedTypeBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[EmploymentInformationId] [int] NULL,
	[BenefitsOfferedTypeId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_EmploymentInformationJobDutiesDetailsBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_EmploymentInformationJobDutiesDetailsBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[EmploymentInformationId] [int] NULL,
	[JobDutiesId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ExamResult_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ExamResult_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[EducationExamId] [int] NULL,
	[ExamSubjectTypeId] [int] NULL,
	[DatePassed] [datetime] NULL,
	[Score] [int] NULL,
	[MaxScoreRange] [int] NULL,
	[SPLTypeId] [int] NULL,
	[NRSTypeId] [int] NULL,
	[Version] [varchar](75) NULL,
	[ExamEquivalencyTypeId] [int] NULL,
	[GradeEquivalency] [decimal](3, 1) NULL,
	[ExamLevelType] [int] NULL,
	[ExamPassTypeId] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL,
	[Level] [varchar](75) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ExamSubjectTypeBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ExamSubjectTypeBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ExamSubjectTypeId] [int] NULL,
	[ExamTypeId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_FamilyBarriersActionBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_FamilyBarriersActionBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[FamilyBarriersAssessmentSectionId] [int] NULL,
	[ActionNeededId] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_FamilyBarriersAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_FamilyBarriersAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_FamilyBarriersDetail_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_FamilyBarriersDetail_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[Details] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_FamilyBarriersSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_FamilyBarriersSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[HasEverAppliedSsi] [bit] NULL,
	[IsCurrentlyApplyingSsi] [bit] NULL,
	[SsiApplicationStatusId] [int] NULL,
	[SsiApplicationStatusDetailsId] [int] NULL,
	[SsiApplicationDate] [date] NULL,
	[SsiApplicationIsAnyoneHelping] [bit] NULL,
	[SsiApplicationDetailsId] [int] NULL,
	[SsiApplicationContactId] [int] NULL,
	[HasReceivedPastSsi] [bit] NULL,
	[PastSsiDetailsId] [int] NULL,
	[HasDeniedSsi] [bit] NULL,
	[DeniedSsiDate] [date] NULL,
	[DeniedSsiDetailsId] [int] NULL,
	[IsInterestedInLearningMoreSsi] [bit] NULL,
	[InterestedInLearningMoreSsiDetailsId] [int] NULL,
	[HasAnyoneAppliedForSsi] [bit] NULL,
	[IsAnyoneReceivingSsi] [bit] NULL,
	[AnyoneReceivingSsiDetailsId] [int] NULL,
	[IsAnyoneApplyingForSsi] [bit] NULL,
	[AnyoneApplyingForSsiDetailsId] [int] NULL,
	[HasCaretakingResponsibilities] [bit] NULL,
	[HasConcernsAboutCaretakingResponsibilities] [bit] NULL,
	[ConcernsAboutCaretakingResponsibilitiesDetailsId] [int] NULL,
	[DoesHouseholdEngageInRiskyActivities] [bit] NULL,
	[HouseholdEngageInRiskyActivitiesDetailsId] [int] NULL,
	[DoChildrenHaveBehaviourProblems] [bit] NULL,
	[ChildrenHaveBehaviourProblemsDetailsId] [int] NULL,
	[AreChildrenAtRiskOfSchoolSuspension] [bit] NULL,
	[ChildrenAtRiskOfSchoolSuspensionDetailsId] [int] NULL,
	[AreAnyFamilyIssuesAffectWork] [bit] NULL,
	[AnyFamilyIssuesAffectWorkDetailsId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL,
	[ReasonForPastSsiDetailsId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_FamilyMember_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_FamilyMember_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[FamilyBarriersSectionId] [int] NULL,
	[RelationshipId] [int] NULL,
	[FirstName] [varchar](200) NULL,
	[LastName] [varchar](200) NULL,
	[Details] [varchar](500) NULL,
	[DeleteReasonId] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_FCDPRfaDetails_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_FCDPRfaDetails_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[RequestForAssistanceId] [int] NULL,
	[IsVoluntary] [bit] NULL,
	[CourtOrderedCountyId] [int] NULL,
	[CourtOrderEffectiveDate] [date] NULL,
	[KIDSPinNumber] [decimal](10, 0) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[ReferralSource] [varchar](150) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_FormalAssessment_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_FormalAssessment_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[BarrierDetailsId] [int] NULL,
	[ReferralDate] [datetime] NULL,
	[ReferralDeclined] [bit] NULL,
	[ReferralDetails] [varchar](1000) NULL,
	[AssessmentDate] [datetime] NULL,
	[AssessmentNotCompleted] [bit] NULL,
	[AssessmentDetails] [varchar](1000) NULL,
	[SymptomId] [int] NULL,
	[ReassessmentRecommendedDate] [datetime] NULL,
	[IsRecommendedDateNotNeeded] [bit] NULL,
	[SymptomDetails] [varchar](1000) NULL,
	[AssessmentProviderContactId] [int] NULL,
	[HoursParticipantCanParticipate] [int] NULL,
	[HoursParticipantCanParticipateDetails] [varchar](400) NULL,
	[DeleteReasonId] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[HoursParticipantCanParticipateIntervalId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_HousingAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_HousingAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_HousingHistory_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_HousingHistory_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[SortOrder] [int] NULL,
	[HousingSectionId] [int] NULL,
	[HousingSituationId] [int] NULL,
	[BeginDate] [date] NULL,
	[EndDate] [date] NULL,
	[HasEvicted] [bit] NULL,
	[MonthlyAmount] [decimal](7, 2) NULL,
	[IsAmountUnknown] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_HousingSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_HousingSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[HousingSituationId] [int] NULL,
	[CurrentHousingDetails] [varchar](1000) NULL,
	[CurrentHousingBeginDate] [date] NULL,
	[CurrentHousingEndDate] [date] NULL,
	[CurrentMonthlyAmount] [decimal](7, 2) NULL,
	[IsCurrentAmountUnknown] [bit] NULL,
	[HasCurrentEvictionRisk] [bit] NULL,
	[HasBeenEvicted] [bit] NULL,
	[IsCurrentMovingToHistory] [bit] NULL,
	[HasUtilityDisconnectionRisk] [bit] NULL,
	[UtilityDisconnectionRiskNotes] [varchar](1000) NULL,
	[HasDifficultyWorking] [bit] NULL,
	[DifficultyWorkingNotes] [varchar](1000) NULL,
	[Notes] [varchar](1000) NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_InformalAssessment_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_InformalAssessment_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[AssessmentTypeId] [int] NULL,
	[ParticipantId] [int] NULL,
	[LanguageAssessmentSectionId] [int] NULL,
	[WorkHistoryAssessmentSectionId] [int] NULL,
	[WorkProgramAssessmentSectionId] [int] NULL,
	[PostSecondaryEducationAssessmentSectionId] [int] NULL,
	[MilitaryTrainingAssessmentSectionId] [int] NULL,
	[HousingAssessmentSectionId] [int] NULL,
	[TransportationAssessmentSectionId] [int] NULL,
	[LegalIssuesAssessmentSectionId] [int] NULL,
	[BarriersAssessmentSectionId] [int] NULL,
	[ChildYouthSupportsAssessmentSectionId] [int] NULL,
	[FamilyBarriersAssessmentSectionId] [int] NULL,
	[NonCustodialParentsAssessmentSectionId] [int] NULL,
	[NonCustodialParentsReferralAssessmentSectionId] [int] NULL,
	[WorkHistorySectionId] [int] NULL,
	[EndDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[EducationAssessmentSectionId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_InvolvedWorkProgram_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_InvolvedWorkProgram_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WorkProgramSectionId] [int] NULL,
	[WorkProgramStatusId] [int] NULL,
	[WorkProgramId] [int] NULL,
	[CityId] [int] NULL,
	[StartMonth] [date] NULL,
	[EndMonth] [date] NULL,
	[ContactId] [int] NULL,
	[ContactInfo] [varchar](300) NULL,
	[Details] [varchar](400) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_JobDutiesDetails_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_JobDutiesDetails_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[Details] [varchar](1000) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_KnownLanguage_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_KnownLanguage_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[SortOrder] [int] NULL,
	[LanguageSectionId] [int] NULL,
	[LanguageId] [int] NULL,
	[IsPrimary] [bit] NULL,
	[IsAbleToRead] [bit] NULL,
	[IsAbleToWrite] [bit] NULL,
	[IsAbleToSpeak] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[PinNumber] [decimal](10, 0) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_LanguageAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_LanguageAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_LanguageSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_LanguageSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[IsAbleToReadEnglish] [bit] NULL,
	[IsAbleToWriteEnglish] [bit] NULL,
	[IsAbleToSpeakEnglish] [bit] NULL,
	[IsNeedingInterpreter] [bit] NULL,
	[InterpreterDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[PinNumber] [decimal](10, 0) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_LegalIssuesAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_LegalIssuesAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_LegalIssuesSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_LegalIssuesSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[IsConvictedOfCrime] [bit] NULL,
	[IsUnderCommunitySupervision] [bit] NULL,
	[CommunitySupervisonDetails] [varchar](1000) NULL,
	[HasPendingCharges] [bit] NULL,
	[HasFamilyLegalIssues] [bit] NULL,
	[FamilyLegalIssueNotes] [varchar](1000) NULL,
	[HasCourtDates] [bit] NULL,
	[ActionNeededDetails] [varchar](250) NULL,
	[OrderedToPayChildSupport] [bit] NULL,
	[MonthlyAmount] [decimal](7, 2) NULL,
	[IsUnknown] [bit] NULL,
	[OweAnyChildSupportBack] [bit] NULL,
	[ChildSupportDetails] [varchar](1000) NULL,
	[CommunitySupervisonContactId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[HasRestrainingOrders] [bit] NULL,
	[RestrainingOrderNotes] [varchar](500) NULL,
	[HasRestrainingOrderToPrevent] [bit] NULL,
	[RestrainingOrderToPreventNotes] [varchar](500) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_MilitaryTrainingAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_MilitaryTrainingAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_MilitaryTrainingSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_MilitaryTrainingSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[DoesHaveTraining] [bit] NULL,
	[MilitaryRankId] [int] NULL,
	[MilitaryBranchId] [int] NULL,
	[Rate] [varchar](200) NULL,
	[YearsEnlisted] [int] NULL,
	[EnlistmentDate] [datetime] NULL,
	[DischargeDate] [datetime] NULL,
	[IsCurrentlyEnlisted] [bit] NULL,
	[MilitaryDischargeTypeId] [int] NULL,
	[SkillsAndTraining] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[PolarLookupId] [int] NULL,
	[BenefitsDetails] [varchar](500) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialCaretaker_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialCaretaker_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[NonCustodialParentsSectionId] [int] NULL,
	[FirstName] [varchar](150) NULL,
	[IsFirstNameUnknown] [bit] NULL,
	[LastName] [varchar](150) NULL,
	[IsLastNameUnknown] [bit] NULL,
	[NonCustodialParentRelationshipId] [int] NULL,
	[RelationshipDetails] [varchar](400) NULL,
	[ContactIntervalId] [int] NULL,
	[ContactIntervalDetails] [varchar](400) NULL,
	[IsRelationshipChangeRequested] [bit] NULL,
	[RelationshipChangeRequestedDetails] [varchar](400) NULL,
	[IsInterestedInRelationshipReferral] [bit] NULL,
	[InterestedInRelationshipReferralDetails] [varchar](400) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[DeleteReasonId] [int] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialChild_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialChild_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[NonCustodialCaretakerId] [int] NULL,
	[FirstName] [varchar](150) NULL,
	[LastName] [varchar](150) NULL,
	[DateOfBirth] [date] NULL,
	[HasChildSupportOrder] [bit] NULL,
	[ChildSupportOrderDetails] [varchar](400) NULL,
	[ContactIntervalId] [int] NULL,
	[ContactIntervalDetails] [varchar](400) NULL,
	[HasOtherAdultsYesNoUnknownLookupId] [int] NULL,
	[OtherAdultsDetails] [varchar](400) NULL,
	[IsRelationshipChangeRequested] [bit] NULL,
	[RelationshipChangeRequestedDetails] [varchar](400) NULL,
	[IsNeedOfServicesYesNoUnknownLookupId] [int] NULL,
	[NeedOfServicesDetails] [varchar](400) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[DeleteReasonId] [int] NULL,
	[RowVersion] [binary](8) NULL,
	[HasNameOnChildBirthRecord] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialParentsAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialParentsAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL,
	[ModifiedDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialParentsReferralAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialParentsReferralAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL,
	[ModifiedDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialParentsReferralSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialParentsReferralSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[HasChildrenId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialParentsSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialParentsSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[HasChildren] [bit] NULL,
	[ChildSupportPayment] [decimal](7, 2) NULL,
	[HasOwedChildSupport] [bit] NULL,
	[HasInterestInChildServices] [bit] NULL,
	[IsInterestedInReferralServices] [bit] NULL,
	[InterestedInReferralServicesDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialReferralChild_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialReferralChild_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[NonCustodialReferralParentId] [int] NULL,
	[FirstName] [varchar](150) NULL,
	[LastName] [varchar](150) NULL,
	[ReferralContactIntervalId] [int] NULL,
	[ContactIntervalDetails] [varchar](400) NULL,
	[HasChildSupportOrder] [bit] NULL,
	[ChildSupportOrderDetails] [varchar](400) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[DeleteReasonId] [int] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_NonCustodialReferralParent_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_NonCustodialReferralParent_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[NonCustodialReferralParentsSectionId] [int] NULL,
	[FirstName] [varchar](150) NULL,
	[LastName] [varchar](150) NULL,
	[IsAvailableOrWorking] [bit] NULL,
	[AvailableOrWorkingDetails] [varchar](400) NULL,
	[IsInterestedInWorkProgram] [bit] NULL,
	[InterestedInWorkProgramDetails] [varchar](400) NULL,
	[IsContactKnownWithParent] [bit] NULL,
	[ContactId] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[DeleteReasonId] [int] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_OtherJobInformation_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_OtherJobInformation_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ExpectedScheduleDetails] [varchar](1000) NULL,
	[JobSectorId] [int] NULL,
	[JobFoundMethodId] [int] NULL,
	[WorkerId] [varchar](120) NULL,
	[JobFoundMethodDetails] [varchar](500) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL,
	[WorkProgramId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_Participant_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_Participant_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[LastName] [varchar](50) NULL,
	[SuffixName] [char](3) NULL,
	[DateOfBirth] [date] NULL,
	[DateOfDeath] [date] NULL,
	[GenderIndicator] [char](1) NULL,
	[AliasResponse] [char](1) NULL,
	[LanguageCode] [char](1) NULL,
	[MaxHistorySequenceNumber] [smallint] NULL,
	[RaceCode] [char](1) NULL,
	[USCitizenSwitch] [char](1) NULL,
	[AmericanIndianIndicator] [char](1) NULL,
	[AsianIndicator] [char](1) NULL,
	[BlackIndicator] [char](1) NULL,
	[HispanicIndicator] [char](1) NULL,
	[PacificIslanderIndicator] [char](1) NULL,
	[WhiteIndicator] [char](1) NULL,
	[MCI_ID] [decimal](10, 0) NULL,
	[TribalMemberIndicator] [char](1) NULL,
	[TimeLimitStatus] [bit] NULL,
	[ConversionProjectDetails] [varchar](100) NULL,
	[ConversionDate] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[HasBeenThroughClientReg] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ParticipantContactInfo_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ParticipantContactInfo_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[CountyOfResidenceId] [int] NULL,
	[ZipCode] [varchar](10) NULL,
	[CityAddressId] [int] NULL,
	[HomelessIndicator] [bit] NULL,
	[IsHouseHoldMailingAddressSame] [bit] NULL,
	[AlternateMailingAddressId] [int] NULL,
	[PrimaryPhoneNumber] [varchar](10) NULL,
	[CanTextPrimaryPhone] [bit] NULL,
	[CanLeaveVoiceMailPrimaryPhone] [bit] NULL,
	[SecondaryPhoneNumber] [varchar](10) NULL,
	[CanTextSecondaryPhone] [bit] NULL,
	[CanLeaveVoiceMailSecondaryPhone] [bit] NULL,
	[EmailAddress] [varchar](250) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[StreetAddressPlaceId] [varchar](1024) NULL,
	[AddressLine1] [varchar](380) NULL,
	[AddressLine2] [varchar](380) NULL,
	[AddressVerificationTypeLookupId] [int] NULL,
	[__$command_id] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_ParticipantEnrolledProgram_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_ParticipantEnrolledProgram_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[EnrolledProgramId] [int] NULL,
	[EnrolledProgramStatusCodeId] [int] NULL,
	[ReferralDate] [date] NULL,
	[EnrollmentDate] [date] NULL,
	[DisenrollmentDate] [date] NULL,
	[CASENumber] [decimal](10, 0) NULL,
	[ReferralRegistrationCode] [char](1) NULL,
	[CurrentRegCode] [char](1) NULL,
	[AGSequenceNumber] [smallint] NULL,
	[CaseManagerId] [char](6) NULL,
	[WorkerId] [int] NULL,
	[CompletionReasonId] [int] NULL,
	[RequestForAssistanceId] [int] NULL,
	[OfficeId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[RowVersion] [binary](8) NULL,
	[LFFEPId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_PendingCharge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_PendingCharge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[LegalSectionId] [int] NULL,
	[ConvictionTypeID] [int] NULL,
	[ChargeDate] [datetime] NULL,
	[IsUnknown] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_PostSecondaryCollege_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_PostSecondaryCollege_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[PostSecondaryEducationSectionId] [int] NULL,
	[SchoolCollegeEstablishmentId] [int] NULL,
	[HasGraduated] [bit] NULL,
	[LastYearAttended] [int] NULL,
	[CurrentlyAttending] [bit] NULL,
	[Semesters] [int] NULL,
	[Credits] [decimal](18, 10) NULL,
	[Details] [varchar](1000) NULL,
	[OriginId] [int] NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_PostSecondaryDegree_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_PostSecondaryDegree_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[PostSecondaryEducationSectionId] [int] NULL,
	[Name] [varchar](200) NULL,
	[College] [varchar](200) NULL,
	[DegreeTypeId] [int] NULL,
	[YearAttained] [int] NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_PostSecondaryEducationAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_PostSecondaryEducationAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_PostSecondaryEducationSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_PostSecondaryEducationSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[DidAttendCollege] [bit] NULL,
	[IsWorkingOnLicensesOrCertificates] [bit] NULL,
	[DoesHaveDegrees] [bit] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_PostSecondaryLicense_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_PostSecondaryLicense_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[Name] [varchar](200) NULL,
	[Issuer] [varchar](200) NULL,
	[AttainedDate] [datetime] NULL,
	[ExpiredDate] [datetime] NULL,
	[IsInProgress] [bit] NULL,
	[DoesNotExpire] [bit] NULL,
	[ValidInWIPolarLookupId] [int] NULL,
	[LicenseTypeId] [int] NULL,
	[PostSecondaryEducationSectionId] [int] NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_RecentParticipant_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_RecentParticipant_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WorkerId] [int] NULL,
	[ParticipantId] [int] NULL,
	[LastAccessed] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_RequestForAssistance_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_RequestForAssistance_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[RequestForAssistanceStatusId] [int] NULL,
	[RequestForAssistanceStatusDate] [datetime] NULL,
	[RfaNumber] [decimal](12, 0) NULL,
	[EnrolledProgramId] [int] NULL,
	[CountyOfResidenceId] [int] NULL,
	[TjTmjContractorId] [int] NULL,
	[TjTmjApplicationDate] [date] NULL,
	[TjTmjApplicationDueDate] [date] NULL,
	[TjTmjIsUnder18] [bit] NULL,
	[TjTmjHouseholdSizeId] [int] NULL,
	[TjTmjHouseholdIncome] [money] NULL,
	[TjTmjLastEmploymentDate] [date] NULL,
	[TjTmjHasWorkedLessThan16Hours] [bit] NULL,
	[TjTmjIsEligibleForUnemployment] [bit] NULL,
	[TjTmjIsReceivingW2Benefits] [bit] NULL,
	[TjTmjIsCitizen] [bit] NULL,
	[TjTmjHasWorked1040Hours] [bit] NULL,
	[TjTmjIsAppCompleteAndSigned] [bit] NULL,
	[TjTmjHasEligibilityBeenVerified] [bit] NULL,
	[TjTmjIsBenefitFromSubsidizedJob] [bit] NULL,
	[TjTmjBenefitFromSubsidizedJobDetails] [varchar](400) NULL,
	[CfCourtOrderedCountyId] [int] NULL,
	[CfCourtOrderEffectiveDate] [date] NULL,
	[OfficeId] [int] NULL,
	[IsEligible] [bit] NULL,
	[EligibilityCodes] [varchar](100) NULL,
	[PopulationTypeDetails] [varchar](500) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[TjTmjHasNeverEmployed] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_SchoolCollegeEstablishment_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_SchoolCollegeEstablishment_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[Name] [varchar](200) NULL,
	[Street] [varchar](100) NULL,
	[CityId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_TimeLimit_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_TimeLimit_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantID] [int] NULL,
	[EffectiveMonth] [datetime] NULL,
	[TimeLimitTypeId] [int] NULL,
	[TwentyFourMonthLimit] [bit] NULL,
	[StateTimelimit] [bit] NULL,
	[FederalTimeLimit] [bit] NULL,
	[StateId] [int] NULL,
	[ChangeReasonId] [int] NULL,
	[ChangeReasonDetails] [varchar](1000) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[PIN_NUM] [decimal](10, 0) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_TimeLimitExtension_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_TimeLimitExtension_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[ExtensionDecisionId] [int] NULL,
	[TimeLimitTypeId] [int] NULL,
	[DecisionDate] [datetime] NULL,
	[InitialDiscussionDate] [datetime] NULL,
	[ApprovalReasonId] [int] NULL,
	[DenialReasonId] [int] NULL,
	[Details] [varchar](1000) NULL,
	[IsPendingDVR] [bit] NULL,
	[IsReceivingDVR] [bit] NULL,
	[IsPendingSSIorSSDI] [bit] NULL,
	[BeginMonth] [datetime] NULL,
	[EndMonth] [datetime] NULL,
	[ExtensionSequence] [int] NULL,
	[IsBackDatedExtenstion] [int] NULL,
	[DeleteReasonId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[PIN_NUM] [decimal](10, 0) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_TimeLimitSummary_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_TimeLimitSummary_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[FederalUsed] [int] NULL,
	[FederalMax] [int] NULL,
	[StateUsed] [int] NULL,
	[StateMax] [int] NULL,
	[CSJUsed] [int] NULL,
	[CSJMax] [int] NULL,
	[W2TUsed] [int] NULL,
	[W2TMax] [int] NULL,
	[TMPUsed] [int] NULL,
	[TNPUsed] [int] NULL,
	[TempUsed] [int] NULL,
	[TempMax] [int] NULL,
	[CMCUsed] [int] NULL,
	[CMCMax] [int] NULL,
	[OPCUsed] [int] NULL,
	[OPCMax] [int] NULL,
	[OtherUsed] [int] NULL,
	[OtherMax] [int] NULL,
	[OTF] [int] NULL,
	[Tribal] [int] NULL,
	[TJB] [int] NULL,
	[JOBS] [int] NULL,
	[NO24] [int] NULL,
	[FactDetails] [nvarchar](4000) NULL,
	[CSJExtensionDue] [bit] NULL,
	[W2TExtensionDue] [bit] NULL,
	[TempExtensionDue] [bit] NULL,
	[StateExtensionDue] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_TJTMJRfaDetails_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_TJTMJRfaDetails_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[RequestForAssistanceId] [int] NULL,
	[ContractorId] [int] NULL,
	[ApplicationDate] [date] NULL,
	[ApplicationDueDate] [date] NULL,
	[IsUnder18] [bit] NULL,
	[HouseholdSizeId] [int] NULL,
	[HouseholdIncome] [money] NULL,
	[LastEmploymentDate] [date] NULL,
	[HasWorkedLessThan16Hours] [bit] NULL,
	[IsEligibleForUnemployment] [bit] NULL,
	[IsReceivingW2Benefits] [bit] NULL,
	[IsCitizen] [bit] NULL,
	[HasWorked1040Hours] [bit] NULL,
	[IsAppCompleteAndSigned] [bit] NULL,
	[HasEligibilityBeenVerified] [bit] NULL,
	[IsBenefitFromSubsidizedJob] [bit] NULL,
	[BenefitFromSubsidizedJobDetails] [varchar](400) NULL,
	[IsEligible] [bit] NULL,
	[PopulationTypeDetails] [varchar](500) NULL,
	[HasNeverEmployed] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_TransportationAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_TransportationAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_TransportationSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_TransportationSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[TransporationDetails] [varchar](400) NULL,
	[IsVehicleInsuredId] [int] NULL,
	[VehicleInsuredDetails] [varchar](400) NULL,
	[IsVehicleRegistrationCurrentId] [int] NULL,
	[VehicleRegistrationCurrentDetails] [varchar](400) NULL,
	[HasValidDrivingLicense] [bit] NULL,
	[DriversLicenseStateId] [int] NULL,
	[DriversLicenseExpirationDate] [date] NULL,
	[DriversLicenseDetails] [varchar](400) NULL,
	[DriversLicenseInvalidReasonId] [int] NULL,
	[DriversLicenseInvalidDetails] [varchar](400) NULL,
	[HadCommercialDriversLicense] [bit] NULL,
	[IsCommercialDriversLicenseActive] [bit] NULL,
	[CommercialDriversLicenseDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_TransportationSectionMethodBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_TransportationSectionMethodBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[TransportationSectionId] [int] NULL,
	[TransporationTypeId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_WageHour_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_WageHour_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[CurrentEffectiveDate] [date] NULL,
	[CurrentPayTypeDetails] [varchar](1000) NULL,
	[CurrentAverageWeeklyHours] [decimal](3, 0) NULL,
	[CurrentPayRate] [decimal](7, 2) NULL,
	[CurrentPayRateIntervalId] [int] NULL,
	[CurrentHourlySubsidyRate] [decimal](7, 2) NULL,
	[PastBeginPayRate] [decimal](7, 2) NULL,
	[PastBeginPayRateIntervalId] [int] NULL,
	[PastEndPayRateIntervalId] [int] NULL,
	[PastEndPayRate] [decimal](7, 2) NULL,
	[IsUnchangedPastPayRateIndicator] [bit] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL,
	[ComputedCurrentWageRateUnit] [varchar](50) NULL,
	[ComputedCurrentWageRateValue] [decimal](7, 2) NULL,
	[ComputedPastEndWageRateUnit] [varchar](50) NULL,
	[ComputedPastEndWageRateValue] [decimal](7, 2) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_WageHourHistory_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_WageHourHistory_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WageHourId] [int] NULL,
	[HourlySubsidyRate] [decimal](7, 2) NULL,
	[EffectiveDate] [date] NULL,
	[PayTypeDetails] [varchar](1000) NULL,
	[AverageWeeklyHours] [decimal](3, 0) NULL,
	[PayRate] [decimal](7, 2) NULL,
	[PayRateIntervalId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL,
	[ComputedWageRateUnit] [varchar](50) NULL,
	[ComputedWageRateValue] [decimal](7, 2) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_WageHourHistoryWageTypeBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_WageHourHistoryWageTypeBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WageHourHistoryId] [int] NULL,
	[WageTypeId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_WageHourWageTypeBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_WageHourWageTypeBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WageHourId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[IsDeleted] [bit] NULL,
	[WageTypeId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_Worker_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_Worker_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WAMSId] [varchar](50) NULL,
	[MFUserId] [varchar](6) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitial] [varchar](1) NULL,
	[SuffixName] [varchar](3) NULL,
	[Roles] [varchar](100) NULL,
	[WorkerActiveStatusCode] [varchar](50) NULL,
	[LastLogin] [datetime] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[OrganizationId] [int] NULL,
	[WIUID] [varchar](25) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_WorkHistoryAssessmentSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_WorkHistoryAssessmentSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[wwp_WorkHistorySection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[wwp_WorkHistorySection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[EmploymentStatusTypeId] [int] NULL,
	[HasVolunteered] [bit] NULL,
	[NonFullTimeDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[PreventionFactors] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL,
	[HasCareerAssessment] [int] NULL,
	[HasCareerAssessmentNotes] [varchar](500) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_WorkHistorySectionEmploymentPreventionTypeBridge_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_WorkHistorySectionEmploymentPreventionTypeBridge_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[WorkHistorySectionId] [int] NULL,
	[EmploymentPreventionTypeId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [hst].[WWP_WorkProgramSection_CT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [hst].[WWP_WorkProgramSection_CT](
	[__$start_lsn] [binary](10) NOT NULL,
	[__$end_lsn] [binary](10) NULL,
	[__$seqval] [binary](10) NOT NULL,
	[__$operation] [int] NOT NULL,
	[__$update_mask] [varbinary](128) NULL,
	[Id] [int] NULL,
	[ParticipantId] [int] NULL,
	[IsInOtherPrograms] [bit] NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [binary](8) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [sec].[Authorization]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [sec].[Authorization](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Authorization_IsDeleted]  DEFAULT ((0)),
	[DeleteReasonId] [int] NULL,
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Authorization_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Authorization_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Authorization] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_Authorization] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [sec].[Role]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [sec].[Role](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[Code] [varchar](50) NOT NULL,
	[InheritedRoleId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Role_IsDeleted]  DEFAULT ((0)),
	[DeleteReasonId] [int] NULL,
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Role_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Role_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_Role] UNIQUE NONCLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UX_Code] UNIQUE NONCLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [sec].[RoleAuthorization]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [sec].[RoleAuthorization](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RoleId] [int] NOT NULL,
	[AuthorizationId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_RoleAuthorization_IsDeleted]  DEFAULT ((0)),
	[DeleteReasonId] [int] NULL,
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_RoleAuthorization_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_RoleAuthorization_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RoleAuthorization] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_RoleAuthorization] UNIQUE NONCLUSTERED 
(
	[RoleId] ASC,
	[AuthorizationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Agency]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Agency](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AgencyNumber] [smallint] NULL,
	[EntsecAgencyCode] [varchar](5) NULL,
	[AgencyName] [varchar](100) NULL,
	[GeoAreaName] [varchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Agency_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Agency_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Agency_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Agency] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[CARESEmployment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[CARESEmployment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PARTICIPANT] [decimal](10, 0) NULL,
	[EMPLOYMENTSEQUENCENUMBER] [int] NULL,
	[EMPLOYERNAME] [varchar](50) NULL,
	[EMPLOYERADDRESS] [varchar](50) NULL,
	[CITY] [varchar](50) NULL,
	[STATE] [varchar](50) NOT NULL,
	[ZIP] [varchar](9) NULL,
	[PHONENUMBER] [varchar](20) NULL,
	[FAXNUMBER] [varchar](20) NULL,
	[EMPLOYMENTBEGINDATE] [date] NULL,
	[EMPLOYMENTENDDATE] [date] NULL,
	[EMPLOYMENTTYPE] [varchar](30) NULL,
	[PAYFREQUENCY] [varchar](30) NULL,
	[WAGETYPE] [varchar](30) NULL,
	[HOURLYRATEAMOUNT] [varchar](50) NULL,
	[AVERAGEWORKHOURS] [varchar](50) NULL,
	[EMPLOYMENTTYPETOTAL] [varchar](50) NULL,
	[SEQUENCEID] [int] NULL,
 CONSTRAINT [PK_CARESEmployment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[CARESNEWEMPLOYMENT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[CARESNEWEMPLOYMENT](
	[PARTICIPANT] [decimal](10, 0) NULL,
	[EMPLOYMENTSEQUENCENUMBER] [int] NULL,
	[EMPLOYERNAME] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Case]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Case](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [decimal](10, 0) NOT NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleInitial] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[SuffixName] [varchar](50) NULL,
	[StreetNumberAddress] [varchar](50) NULL,
	[DirectionAddress] [varchar](50) NULL,
	[StreetRuralAddress] [varchar](50) NULL,
	[SuffixAddress] [varchar](50) NULL,
	[UnitAddress] [varchar](50) NULL,
	[ApartmentAddress] [varchar](50) NULL,
	[Line2Address] [varchar](50) NULL,
	[CityAddress] [varchar](50) NULL,
	[StateAddress] [varchar](50) NULL,
	[ZipAddress] [varchar](50) NULL,
	[CountyNumber] [int] NULL,
	[PhoneNumber] [varchar](50) NULL,
	[LanguageIndicator] [varchar](50) NULL,
	[MaxHistorySequenceNumber] [int] NULL,
	[RFANumber] [decimal](10, 0) NULL,
	[RFASequenceNumber] [int] NULL,
	[CaresUpdatedDate] [date] NULL,
	[CreatedDate] [date] NULL,
	[ModifiedDate] [date] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[EmailAddress] [varchar](50) NULL,
	[PhoneType] [varchar](20) NULL,
 CONSTRAINT [PK_Case] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_Case] UNIQUE NONCLUSTERED 
(
	[CaseNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[CaseIndividual]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[CaseIndividual](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [decimal](10, 0) NOT NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
	[HistorySequenceNumber] [int] NULL,
	[DeleteReasonCode] [char](2) NULL,
	[HistoryCode] [int] NULL,
	[IndividualSequenceNumber] [int] NULL,
	[PrimaryPersonSwitch] [char](1) NULL,
	[CaresUpdatedDate] [date] NULL,
	[CreatedDate] [date] NULL,
	[ModifiedDate] [date] NULL,
	[ModifiedBy] [char](6) NULL,
	[CaseId] [int] NOT NULL,
	[IndividualId] [int] NOT NULL,
 CONSTRAINT [PK_CasePin] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_CasePin] UNIQUE NONCLUSTERED 
(
	[CaseNumber] ASC,
	[PinNumber] ASC,
	[HistorySequenceNumber] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[CCCEMPLOYMENT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[CCCEMPLOYMENT](
	[PARTICIPANT] [decimal](10, 0) NULL,
	[EMPLOYMENTSEQUENCENUMBER] [int] NULL,
	[EMPLOYERNAME] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[ConfidentialCaseInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[ConfidentialCaseInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[ConfidentialSwitch] [char](1) NULL,
	[WorkerId] [char](6) NULL,
	[CaseloadNumber] [smallint] NULL,
	[WorkerFirstName] [char](15) NULL,
	[WorkerLastName] [char](20) NULL,
	[WorkerMiddleInitial] [char](1) NULL,
	[WorkerSuffixName] [char](3) NULL,
 CONSTRAINT [PK_ConfidentialCaseInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Contractor]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [tbd].[Contractor](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[AgencyId] [int] NOT NULL,
 CONSTRAINT [PK_Contractor] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [tbd].[EligibilityCode]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[EligibilityCode](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](10) NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_EligibilityCode_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EligibilityCode_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EligibilityCode_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EligibilityCode_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EligibilityCode] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[EligibilityOffice]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[EligibilityOffice](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OfficeNumber] [smallint] NULL,
	[CountyNumber] [smallint] NULL,
	[LocationNumber] [smallint] NULL,
	[OfficeDescriptionText] [varchar](40) NULL,
	[OfficeTypeCode] [char](2) NULL,
	[TeamCode] [char](1) NULL,
	[InactivatedDate] [date] NULL,
	[ActiviatedDate] [date] NULL,
	[OfficeActiveSwitch] [char](1) NULL,
	[OfficeValidCode] [char](1) NULL,
	[OfficeCategoryCode] [char](2) NULL,
	[OfficeId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EligibilityOffice_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EligibilityOffice_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EligibilityOffice] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[EligibilityRule]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [tbd].[EligibilityRule](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[MemberName] [nvarchar](100) NOT NULL,
	[TargetValue] [nvarchar](100) NOT NULL,
	[Operator] [nvarchar](20) NOT NULL,
	[Code] [nvarchar](5) NULL,
	[Message] [nvarchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EligibilityRule_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [nvarchar](50) NOT NULL CONSTRAINT [DF_EligibilityRule_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime2](7) NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EligibilityRule] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [tbd].[EmploymentInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[EmploymentInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[WorkHistorySectionId] [int] NULL,
	[JobTypeId] [int] NULL,
	[JobBeginDate] [date] NULL,
	[JobEndDate] [date] NULL,
	[IsCurrentlyEmployed] [bit] NULL,
	[JobPosition] [varchar](140) NULL,
	[CompanyName] [varchar](140) NULL,
	[Fein] [varchar](10) NULL,
	[StreetAddress] [varchar](140) NULL,
	[ZipAddress] [varchar](9) NULL,
	[CityId] [int] NULL,
	[ContactId] [int] NULL,
	[JobDutiesId] [int] NULL,
	[LeavingReasonId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[DeleteReasonId] [int] NULL,
	[OtherJobInformationId] [int] NULL,
	[WageHoursId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[EmploymentProgramtypeId] [int] NULL,
	[LeavingReasonDetails] [varchar](1000) NULL,
	[EmployerOfRecordTypeId] [int] NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[OriginalOfficeNumber] [smallint] NULL,
	[IsConverted] [bit] NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
 CONSTRAINT [PK_EmploymentInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[EmploymentInformationBenefitsOfferedTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[EmploymentInformationBenefitsOfferedTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmploymentInformationId] [int] NULL,
	[BenefitsOfferedTypeId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_OtherJobBenefitsOfferedActionBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_OtherJobBenefitsOfferedActionBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
 CONSTRAINT [PK_OtherJobBenefitsOfferedActionBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[EmploymentInformationJobDutiesDetailsBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[EmploymentInformationJobDutiesDetailsBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmploymentInformationId] [int] NULL,
	[JobDutiesId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EmploymentInformationJobDutiesDetailsBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmploymentInformationJobDutiesDetailsBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
 CONSTRAINT [PK_EmploymentInformationJobDutiesDetailsBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Error]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Error](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [char](20) NULL,
	[Description] [varchar](200) NULL,
 CONSTRAINT [PK_Error] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[ExamVersionType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[ExamVersionType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[VersionNo] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ExamVersionType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[ExceptionAudit]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[ExceptionAudit](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CurrentPage] [varchar](50) NULL,
	[ExceptionTimestamp] [datetime] NULL,
	[PreviousPage] [varchar](50) NULL,
	[IPAddress] [varchar](15) NULL,
	[ServiceName] [varchar](100) NULL,
	[UserId] [varchar](6) NULL,
	[WAMSLoginId] [varchar](36) NULL,
	[ExceptionText] [varchar](2000) NULL,
	[ServiceMessageStackText] [varchar](4000) NULL,
	[ServerName] [varchar](50) NULL,
	[ExceptionSeverity] [int] NULL,
 CONSTRAINT [PK_ExceptionAudit] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[FamilyNeed]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[FamilyNeed](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[HasHealthProblem] [bit] NULL,
	[HasHealthProblemDetailId] [int] NULL,
	[HasHealthConcerns] [bit] NULL,
	[HasHealthConcernsDetailId] [int] NULL,
	[HasRiskBehavior] [bit] NULL,
	[HasRiskBehaviorDetailId] [int] NULL,
	[HasChildrenBehaviorProblem] [bit] NULL,
	[HasChildrenBehaviorProblemDetailId] [int] NULL,
	[HasChildrenSchoolExpulsionRisk] [bit] NULL,
	[HasChildrenSchoolExpulsionRiskDetailId] [int] NULL,
	[HasFamilyIssuesInhibitWork] [bit] NULL,
	[HasFamilyIssuesInhibitWorkDetailId] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FamilyNeed_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FamilyNeed_ModifiedDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FamilyNeed] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[FamilyNeedDetail]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[FamilyNeedDetail](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Details] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FamilyNeedDetail_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FamilyNeedDetail_ModifiedDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FamilyNeedDetail] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[HIST_T_1]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[HIST_T_1](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NAME] [varchar](50) NULL,
	[SALARY] [decimal](7, 0) NULL,
 CONSTRAINT [PK_HIST_T_1] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[hist_test_0]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[hist_test_0](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[name] [varchar](50) NULL,
	[salary] [decimal](10, 3) NULL,
 CONSTRAINT [PK_hist_test_0] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Individual]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Individual](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
	[FirstName] [char](15) NULL,
	[MiddleInitialName] [char](1) NULL,
	[LastName] [char](20) NULL,
	[SuffixName] [char](3) NULL,
	[BirthDate] [date] NULL,
	[DeathDate] [date] NULL,
	[PrimarySSNNumber] [decimal](9, 0) NULL,
	[PseudoSSNNumber] [decimal](9, 0) NULL,
	[RaceCode] [char](1) NULL,
	[GenderIndicator] [char](1) NULL,
	[USCitizenshipSwitch] [char](1) NULL,
	[DeclarationCitizenshipSwitch] [char](1) NULL,
	[LanguageCode] [char](1) NULL,
	[MAIDNumber] [decimal](10, 0) NULL,
	[MaximumHistorySequenceNumber] [int] NULL,
	[CaresUpdatedDate] [date] NULL,
	[CreatedDate] [date] NULL,
	[ModifiedDate] [date] NULL,
	[ModifiedBy] [char](6) NULL,
	[PlacementCodes] [char](3) NULL,
	[WorkProgramsCodes] [varchar](30) NULL,
 CONSTRAINT [PK_Individual] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_Individual] UNIQUE NONCLUSTERED 
(
	[PinNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[IndividualComments]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[IndividualComments](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CommentDate] [datetime] NULL CONSTRAINT [DF_IndividualComments_CommentDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL,
	[CommentTypeId] [int] NOT NULL,
	[CommentText] [varchar](1000) NULL,
	[IndividualId] [int] NULL,
 CONSTRAINT [PK_IndividualComments] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[JobDutiesDetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[JobDutiesDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Details] [varchar](1000) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_JobDuties_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_JobDuties_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
 CONSTRAINT [PK_JobDuties] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Office]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Office](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OfficeNumber] [smallint] NULL,
	[CountyandTribeId] [int] NULL,
	[CountyNumber] [smallint] NULL,
	[AgencyId] [int] NULL,
	[LocationNumber] [smallint] NULL,
	[OfficeDescriptionText] [varchar](40) NULL,
	[OfficeTypeCode] [char](2) NULL,
	[TeamCode] [char](1) NULL,
	[InactivatedDate] [date] NULL,
	[ActiviatedDate] [date] NULL,
	[OfficeActiveSwitch] [char](1) NULL,
	[OfficeValidCode] [char](1) NULL,
	[OfficeCategoryCode] [char](2) NULL,
	[IsDeleted] [bit] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_Office_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Office_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Office] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[OfficeLocation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[OfficeLocation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OfficeId] [int] NULL,
	[AgencyId] [int] NULL,
	[CityAddress] [varchar](15) NULL,
	[ApartmentAddress] [varchar](5) NULL,
	[DescriptionText] [varchar](15) NULL,
	[DirectionAddress] [varchar](2) NULL,
	[FaxNumber] [varchar](10) NULL,
	[Line2Address] [varchar](30) NULL,
	[PhoneNumber] [varchar](10) NULL,
	[StreetRuralAddress] [varchar](20) NULL,
	[StreetSuffixAddress] [varchar](4) NULL,
	[StreetNumber] [varchar](9) NULL,
	[SuffixDirectionAddress] [varchar](2) NULL,
	[TypeCode] [varchar](1) NULL,
	[UnitAddress] [varchar](3) NULL,
	[ZipAddress] [varchar](9) NULL,
	[OfficeNumber] [smallint] NULL,
	[ProviderId] [smallint] NULL,
	[ContactName] [varchar](30) NULL,
	[VerificationFaxNumber] [varchar](10) NULL,
 CONSTRAINT [PK_OfficeLocation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[OtherJobInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[OtherJobInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExpectedScheduleDetails] [varchar](1000) NULL,
	[JobSectorId] [int] NULL,
	[IsLocatedTMIArea] [bit] NULL,
	[JobFoundMethodId] [int] NULL,
	[WorkerId] [varchar](120) NULL,
	[JobFoundMethodDetails] [varchar](500) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_OtherJobInformation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_OtherJobInformation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
 CONSTRAINT [PK_OtherJobInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[PEP]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[PEP](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[EnrolledProgramId] [int] NULL,
	[EnrolledProgramStatusCodeId] [int] NULL,
	[ReferralDate] [date] NULL,
	[EnrollmentDate] [date] NULL,
	[DisenrollmentDate] [date] NULL,
	[CASENumber] [decimal](10, 0) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[WorkProgramGeoArea] [smallint] NULL,
	[RFANumber] [decimal](10, 0) NULL,
	[RFADate] [date] NULL,
	[CompletionDate] [date] NULL,
	[CompletionReasonCode] [char](2) NULL,
	[AuditIndicator] [char](1) NULL,
	[CourtOrderedCountyNumber] [smallint] NULL,
	[CourtOrderedDate] [date] NULL,
	[LastContactDate] [date] NULL,
	[LastDisenrollmentDate] [date] NULL,
	[ReferralRegistrationCode] [char](1) NULL,
	[CurrentRegCode] [char](1) NULL,
	[ConversionDate] [date] NULL,
	[AGSequenceNumber] [smallint] NULL,
	[CaseManagerId] [char](6) NULL,
	[WorkerId] [int] NULL,
	[SpecialCircumstancesCode] [char](2) NULL,
	[DisenrollmentCode] [date] NULL,
	[RegionNumer] [smallint] NULL,
	[CensusTractNumber] [decimal](6, 2) NULL,
	[LatitudeNumber] [decimal](9, 6) NULL,
	[LongitudeNumber] [decimal](9, 6) NULL,
	[OverrideWorkProgramGeoArea] [smallint] NULL,
	[CompletionReasonId] [int] NULL,
	[RequestForAssistanceId] [int] NULL,
	[OfficeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PEP] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_01]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_01](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_01_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Stage_Agency_01_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_01_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Stage_Agency_01] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_02]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_02](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_02_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Stage_Agency_02_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_02_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Stage_Agency_02] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_03]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_03](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_Stage_Agency_03] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_04]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_04](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFWorkerId] [varchar](6) NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_Stage_Agency_04] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_05]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_05](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_05_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Stage_Agency_05_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_05_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Stage_Agency_05] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_06]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_06](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_06_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Stage_Agency_06_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_06_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Stage_Agency_06] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_07]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_07](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_07_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Stage_Agency_07_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_07_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Stage_Agency_07] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_08]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_08](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[ProgramCode] [varchar](5) NULL,
	[LearnFareStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_08_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Stage_Agency_08_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_08_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Stage_Agency_08] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_09]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_09](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[LearnFareStatus] [bit] NULL,
	[ProgramCode] [varchar](5) NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_09_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Stage_Agency_09_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Stage_Agency_09_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Stage_Agency_09] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[Stage_Agency_10]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[Stage_Agency_10](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](200) NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[SuffixName] [char](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPreferralDate] [date] NULL,
	[LearnFareStatus] [bit] NULL,
	[ProgramCode] [varchar](5) NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_Stage_Agency_10] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[T0164WritebackTrigger]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[T0164WritebackTrigger](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticiapntId] [int] NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_T0164WritebackTrigger_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_T0164WritebackTrigger_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_T0164WritebackTrigger_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_T0164WritebackTrigger] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[T1]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[T1](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[VeteranIndicator] [bit] NULL,
	[abc] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[T2]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[T2](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[VeteranIndicator] [bit] NULL,
	[abc] [varchar](50) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[tabtab]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[tabtab](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[name] [char](10) NULL,
 CONSTRAINT [PK_tabtab] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[WageHour]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[WageHour](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CurrentEffectiveDate] [date] NULL,
	[CurrentPayTypeDetails] [varchar](1000) NULL,
	[CurrentAverageWeeklyHours] [decimal](3, 0) NULL,
	[CurrentPayRate] [decimal](7, 2) NULL,
	[CurrentPayRateIntervalId] [int] NULL,
	[CurrentHourlySubsidyRate] [decimal](7, 2) NULL,
	[PastBeginPayRate] [decimal](7, 2) NULL,
	[PastBeginPayRateIntervalId] [int] NULL,
	[PastEndPayRate] [decimal](7, 2) NULL,
	[PastEndPayRateIntervalId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WageHour_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WageHour_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[IsUnchangedPastPayRateIndicator] [bit] NULL,
	[ComputedCurrentWageRateUnit]  AS ([wwp].[GetComputedWageRateUnit]([CurrentPayRateIntervalId])),
	[ComputedCurrentWageRateValue]  AS ([wwp].[GetComputedWageRateValue]([CurrentPayRate],[CurrentPayRateIntervalId])),
	[ComputedPastBeginWageRateUnit]  AS ([wwp].[GetComputedWageRateUnit]([PastBeginPayRateIntervalId])),
	[ComputedPastBeginWageRateValue]  AS ([wwp].[GetComputedWageRateValue]([PastBeginPayRate],[PastBeginPayRateIntervalId])),
	[ComputedPastEndWageRateUnit]  AS ([wwp].[GetComputedWageRateUnit]([PastEndPayRateIntervalId])),
	[ComputedPastEndWageRateValue]  AS ([wwp].[GetComputedWageRateValue]([PastEndPayRate],[PastEndPayRateIntervalId])),
	[EmploymentSequenceNumber] [smallint] NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
 CONSTRAINT [PK_WageHour] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[WorkerPreference]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [tbd].[WorkerPreference](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WorkerId] [int] NOT NULL,
 CONSTRAINT [PK_WorkerPreference] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [tbd].[WorkProgramLogin]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[WorkProgramLogin](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WamsId] [varchar](50) NOT NULL,
	[UserId] [varchar](50) NOT NULL,
	[OfficeName] [varchar](100) NULL,
	[OfficeNumber] [int] NOT NULL,
	[CountyNumber] [int] NOT NULL,
	[AdminUnitLevelId] [int] NOT NULL,
 CONSTRAINT [PK_WorkProgramLogin] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[WPGeoArea]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[WPGeoArea](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[GeoArea] [nchar](10) NULL,
	[GeoAreaName] [varchar](50) NULL,
	[LocationNumer] [smallint] NULL,
	[Type] [char](2) NULL,
	[CountyNumber] [smallint] NULL,
	[CountyName] [varchar](50) NULL,
	[WPOfficeNumber] [smallint] NULL,
	[WPOfficeName] [varchar](50) NULL,
	[WPOfficeType] [char](2) NULL,
	[WPOfficeLocationNumber] [smallint] NULL,
	[WPType] [char](2) NULL,
	[W2EligibilityOffice] [smallint] NULL,
	[W2EligibilityOfficeName] [varchar](50) NULL,
	[W2EligibilityOfficeType] [char](2) NULL,
	[W2EligibilityOfficeLocation] [smallint] NULL,
	[W2Eligibilitytype] [char](2) NULL,
	[SortOrder] [int] NULL,
	[AgencyCode] [varchar](5) NULL,
	[AgencyName] [varchar](50) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WPGeoArea_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WPGeoArea_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WPGeoArea] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [tbd].[WPOrganization]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [tbd].[WPOrganization](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AgencyId] [int] NULL,
	[CountyAndTribeId] [int] NULL,
	[officeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WPOrganization_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WPOrganization_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WPOrganization_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WPOrganization] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Absence]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Absence](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmploymentInformationId] [int] NULL,
	[BeginDate] [date] NULL,
	[EndDate] [date] NULL,
	[AbsenceReasonId] [int] NULL,
	[Details] [varchar](500) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_Absence_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Absence_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_Absence] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AbsenceReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AbsenceReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_AbsenceReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_AbsenceReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_AbsenceReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Accommodation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Accommodation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_Accommodation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Accommodation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_Accommodation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActionAssignee]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActionAssignee](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActionAssignee_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActionAssignee_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActionAssignee_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActionAssignee] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActionItem]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActionItem](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActionItem_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActionItem_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActionItem_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActionItem] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActionNeeded]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActionNeeded](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[ActionNeededPageId] [int] NOT NULL,
	[IsNoActionNeeded] [bit] NOT NULL CONSTRAINT [DF_ActionNeeded_IsNoActionNeeded]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActionNeeded_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_ActionNeeded_CreatedDate]  DEFAULT (getdate()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActionNeeded_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActionNeeded_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActionNeeded] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActionNeededPage]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActionNeededPage](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[Code] [varchar](50) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActionNeededPage_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActionNeededPage_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActionNeededPage_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActionNeededPage] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_ActionNeededPage_Code] UNIQUE NONCLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActionNeededPageActionItemBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActionNeededPageActionItemBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActionNeededPageId] [int] NOT NULL,
	[ActionItemId] [int] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActionNeededPageActionItemBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActionNeededPageActionItemBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActionNeededPageActionItemBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActionNeededPageActionItemBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActionNeededTask]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActionNeededTask](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActionNeededId] [int] NOT NULL,
	[ActionAssigneeId] [int] NULL,
	[ActionItemId] [int] NULL,
	[ActionPriorityId] [int] NULL,
	[FollowUpTask] [varchar](200) NULL,
	[DueDate] [date] NULL,
	[IsNoDueDate] [bit] NOT NULL CONSTRAINT [DF_ActionNeededTask_IsNoDueDate]  DEFAULT ((0)),
	[CompletionDate] [date] NULL,
	[IsNoCompletionDate] [bit] NOT NULL CONSTRAINT [DF_ActionNeededTask_IsNoCompletionDate]  DEFAULT ((0)),
	[Details] [varchar](400) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActionNeededTask_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_ActionNeededTask_CreatedDate]  DEFAULT (getdate()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActionNeededTask_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActionNeededTask_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActionNeededTask] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActionPriority]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActionPriority](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActionPriority_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActionPriority_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActionPriority_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActionPriority] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Activity]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Activity](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActivityTypeId] [int] NOT NULL,
	[Description] [varchar](200) NULL,
	[ActivityLocationId] [int] NULL,
	[Details] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Activity_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Activity_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_Activity_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[ActivityCompletionReasonId] [int] NULL,
	[EndDate] [date] NULL,
	[StartDate] [date] NULL,
 CONSTRAINT [PK_Activity] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActivityCompletionReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActivityCompletionReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](5) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[IsSystemUseOnly] [bit] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[EffectiveDate] [date] NULL,
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActivityCompletionReason_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActivityCompletionReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_ActivityCompletionReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActivityCompletionReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActivityContactBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActivityContactBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActivityId] [int] NULL,
	[ContactId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActivityContactBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActivityContactBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActivityContactBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActivityLocation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActivityLocation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActivityLocation_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActivityLocation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_ActivityLocation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActivityLocation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActivitySchedule]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActivitySchedule](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActivityId] [int] NOT NULL,
	[StartDate] [date] NULL,
	[IsRecurring] [bit] NULL,
	[FrequencyTypeId] [int] NULL,
	[PlannedEndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActivitySchedule_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActivitySchedule_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_ActivitySchedule_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[ActualEndDate] [date] NULL,
	[HoursPerDay] [decimal](3, 1) NULL,
	[EmployabilityPlanId] [int] NULL,
	[BeginTime] [time](7) NULL,
	[EndTime] [time](7) NULL,
 CONSTRAINT [PK_ActivitySchedule] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActivityScheduleFrequencyBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActivityScheduleFrequencyBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActivityScheduleId] [int] NULL,
	[WKFrequencyId] [int] NULL,
	[MRFrequencyId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActivityScheduleFrequencyBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActivityScheduleFrequencyBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ActivityScheduleFrequencyBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ActivityScheduleFrequencyBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ActivityType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ActivityType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](5) NOT NULL,
	[Name] [varchar](255) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ActivityType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ActivityType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_ActivityType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[EffectiveDate] [date] NULL,
	[EndDate] [date] NULL,
 CONSTRAINT [PK_ActivityType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AddressVerificationTypeLookup]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AddressVerificationTypeLookup](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_AddressVerificationTypeLookup_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_AddressVerificationTypeLookup_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_AddressVerificationTypeLookup_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_AddressVerificationTypeLookup] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AgeCategory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AgeCategory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AgeRange] [varchar](25) NULL,
	[DescriptionText] [varchar](250) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_AgeCategory_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_AgeCategory_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_AgeCategory_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_AgeCategory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AKA]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AKA](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[SSNNumber] [decimal](9, 0) NULL,
	[SSNTypeId] [int] NULL,
	[Details] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_AKA_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_AKA_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_AKA_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_AKA_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NULL,
 CONSTRAINT [PK_AKA] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AliasType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AliasType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_AliasType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_AliasType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_AliasType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[Code] [varchar](10) NULL,
 CONSTRAINT [PK_AliasType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AlternateMailingAddress]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AlternateMailingAddress](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ZipCode] [varchar](10) NULL,
	[CityAddressId] [int] NULL,
	[StateId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_AlternateMailingAddress_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_AlternateMailingAddress_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_AlternateMailingAddress_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NULL,
	[StreetAddressPlaceId] [varchar](1024) NULL,
	[AddressLine1] [varchar](380) NULL,
	[AddressLine2] [varchar](380) NULL,
	[AddressVerificationTypeLookupId] [int] NULL,
 CONSTRAINT [PK_AlternateMailingAddress] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ApplicationStatusType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ApplicationStatusType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ApplicationStatusName] [varchar](200) NULL,
	[IsRequired] [bit] NULL,
	[IsDeleted] [bit] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ApplicationStatus_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ApplicationStatusType_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ApplicationStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ApprovalReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ApprovalReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](250) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ApprovalReason_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ApprovalReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[Code] [char](4) NULL,
 CONSTRAINT [PK_ApprovalReason_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ApprovalReasonsMap]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [wwp].[ApprovalReasonsMap](
	[ApprovalReasonId] [int] NOT NULL,
	[TimelimitTypeId] [int] NOT NULL,
 CONSTRAINT [PK_ApprovalReasonsMap] PRIMARY KEY CLUSTERED 
(
	[ApprovalReasonId] ASC,
	[TimelimitTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [wwp].[AssessmentType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AssessmentType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](10) NULL,
	[Name] [varchar](100) NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_AssessmentType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_AssessmentType_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_AssessmentType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AssociatedOrganization]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AssociatedOrganization](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ContractAreaId] [int] NOT NULL,
	[OrganizationId] [int] NOT NULL,
	[ActivatedDate] [date] NOT NULL,
	[InactivatedDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_AssociatedOrganization_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_AssociatedOrganization_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_AssociatedOrganization_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_AssociatedOrganization] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[AuxiliaryPayment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[AuxiliaryPayment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[EffectiveMonth] [datetime] NULL,
	[TimeLimitTypeId] [int] NULL,
	[StateTimelimit] [bit] NULL,
	[FederalTimeLimit] [bit] NULL,
	[TwentyFourMonthLimit] [bit] NULL,
	[CreatedDateFromCARES] [date] NULL,
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[PIN_NUM] [decimal](10, 0) NULL,
	[BENEFIT_MM] [decimal](6, 0) NULL,
	[HISTORY_SEQ_NUM] [smallint] NULL,
	[CLOCK_TYPE_CD] [char](4) NULL,
	[CRE_TRAN_CD] [char](8) NULL,
	[FED_CLOCK_IND] [char](1) NULL,
	[FED_CMP_MTH_NUM] [smallint] NULL,
	[FED_MAX_MTH_NUM] [smallint] NULL,
	[HISTORY_CD] [smallint] NULL,
	[OT_CMP_MTH_NUM] [smallint] NULL,
	[OVERRIDE_REASON_CD] [char](3) NULL,
	[TOT_CMP_MTH_NUM] [smallint] NULL,
	[TOT_MAX_MTH_NUM] [smallint] NULL,
	[UPDATED_DT] [date] NULL,
	[USER_ID] [char](6) NULL,
	[WW_CMP_MTH_NUM] [smallint] NULL,
	[WW_MAX_MTH_NUM] [smallint] NULL,
	[COMMENT_TXT] [varchar](75) NULL,
 CONSTRAINT [PK_AuxPayment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierAccommodation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierAccommodation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BarrierDetailsId] [int] NULL,
	[AccommodationId] [int] NULL,
	[BeginDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[Details] [varchar](1000) NULL,
	[DeleteReasonId] [int] NULL CONSTRAINT [DF_BarrierAccommodation_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_BarrierAccommodation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BarrierAccommodation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_BarrierAccommodation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_BarrierAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_BarrierAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BarrierAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_BarrierAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierDetail]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierDetail](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[BarrierTypeId] [int] NULL,
	[BarrierSectionId] [int] NULL,
	[OnsetDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[IsAccommodationNeeded] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[WasClosedAtDisenrollment] [bit] NOT NULL CONSTRAINT [DF_BarrierDetail_WasClosedAtDisenrollment]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_BarrierDetails_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_BarrierDetails_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BarrierDetails_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsConverted] [bit] NULL,
 CONSTRAINT [PK_BarrierDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierDetailContactBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierDetailContactBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BarrierDetailId] [int] NULL,
	[ContactId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_BarrierDetailContactBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BarrierDetailContactBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_BarrierDetailContactBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[IsPhysicalHealthHardToManageDetails] [varchar](400) NULL,
	[IsPhysicalHealthHardToManageId] [int] NULL,
	[IsPhysicalHealthHardToParticipateDetails] [varchar](400) NULL,
	[IsPhysicalHealthHardToParticipateId] [int] NULL,
	[IsPhysicalHealthTakeMedicationDetails] [varchar](400) NULL,
	[IsPhysicalHealthTakeMedicationId] [int] NULL,
	[IsMentalHealthHardDiagnosedDetails] [varchar](400) NULL,
	[IsMentalHealthHardDiagnosedId] [int] NULL,
	[IsMentalHealthHardToManageDetails] [varchar](400) NULL,
	[IsMentalHealthHardToManageId] [int] NULL,
	[IsMentalHealthHardToParticipateDetails] [varchar](400) NULL,
	[IsMentalHealthHardToParticipateId] [int] NULL,
	[IsMentalHealthTakeMedicationDetails] [varchar](400) NULL,
	[IsMentalHealthTakeMedicationId] [int] NULL,
	[IsAODAHardToManageDetails] [varchar](400) NULL,
	[IsAODAHardToManageId] [int] NULL,
	[IsAODAHardToParticipateDetails] [varchar](400) NULL,
	[IsAODAHardToParticipateId] [int] NULL,
	[IsAODATakeTreatmentDetails] [varchar](400) NULL,
	[IsAODATakeTreatmentId] [int] NULL,
	[IsLearningDisabilityDiagnosedDetails] [varchar](400) NULL,
	[IsLearningDisabilityDiagnosedId] [int] NULL,
	[IsLearningDisabilityHardToManageDetails] [varchar](400) NULL,
	[IsLearningDisabilityHardToManageId] [int] NULL,
	[IsLearningDisabilityHardToParticipateDetails] [varchar](400) NULL,
	[IsLearningDisabilityHardToParticipateId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Barriers_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Barriers_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Barriers_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Barriers_ModifiedDate]  DEFAULT (getdate()),
	[Notes] [varchar](1000) NULL,
	[RowVersion] [timestamp] NOT NULL,
	[IsDomesticViolenceHurtingYouOrOthersId] [int] NULL,
	[IsDomesticViolenceHurtingYouOrOthersDetails] [varchar](400) NULL,
	[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId] [int] NULL,
	[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails] [varchar](400) NULL,
	[IsDomesticViolencePartnerControlledMoneyId] [int] NULL,
	[IsDomesticViolencePartnerControlledMoneyDetails] [varchar](400) NULL,
	[IsDomesticViolenceReceivedServicesOrLivedInShelterId] [int] NULL,
	[IsDomesticViolenceReceivedServicesOrLivedInShelterDetails] [varchar](400) NULL,
	[IsDomesticViolenceEmotionallyOrVerballyAbusingId] [int] NULL,
	[IsDomesticViolenceEmotionallyOrVerballyAbusingDetails] [varchar](400) NULL,
	[IsDomesticViolenceCallingHarassingStalkingAtWorkId] [int] NULL,
	[IsDomesticViolenceCallingHarassingStalkingAtWorkDetails] [varchar](400) NULL,
	[IsDomesticViolenceMakingItDifficultToWorkId] [int] NULL,
	[IsDomesticViolenceMakingItDifficultToWorkDetails] [varchar](400) NULL,
	[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId] [int] NULL,
	[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails] [varchar](400) NULL,
	[IsDomesticViolenceInvolvedInCourtsId] [int] NULL,
	[IsDomesticViolenceInvolvedInCourtsDetails] [varchar](400) NULL,
 CONSTRAINT [PK_Barriers] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierSubtype]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierSubtype](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[DisablesOthersFlag] [bit] NULL,
	[BarrierTypeId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_BarrierSubtype_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BarrierSubtype_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_BarrierSubtype] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[IsRequired] [bit] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_BarrierType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BarrierType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_BarrierType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BarrierTypeBarrierSubTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BarrierTypeBarrierSubTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BarrierDetailId] [int] NULL,
	[BarrierSubTypeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_BarrierTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BarrierTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_BarrierTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[BenefitsOfferedType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[BenefitsOfferedType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[DisablesOthersFlag] [bit] NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_BenefitsOfferedType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_BenefitsOfferedType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_BenefitsOfferedType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CareerAssessment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CareerAssessment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[CompletionDate] [date] NOT NULL,
	[AssessmentProvider] [varchar](120) NOT NULL,
	[AssessmentToolUsed] [varchar](120) NOT NULL,
	[AssessmentResults] [varchar](380) NOT NULL,
	[CareerAssessmentContactId] [int] NULL,
	[RelatedOccupation] [varchar](120) NULL,
	[AssessmentResultAppliedToEP] [varchar](380) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_CareerAssessment_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_CareerAssessment_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_CareerAssessment_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_CareerAssessment_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_CareerAssessment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CareerAssessmentElementBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CareerAssessmentElementBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CareerAssessmentId] [int] NOT NULL,
	[ElementId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_CareerAssessmentElementBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_CareerAssessmentElementBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_CareerAssessmentElementBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_CareerAssessmentElementBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CDOTracking]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CDOTracking](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WUID] [varchar](25) NULL,
	[StartTimestamp] [datetime] NULL,
	[EndTimestamp] [datetime] NULL,
	[CDODate] [date] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_CDOTracking] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CertificateIssuingAuthority]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CertificateIssuingAuthority](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[Code] [varchar](10) NULL,
	[Name] [varchar](50) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_CertificateIssuingAuthority_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_CertificateIssuingAuthority_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_CertificateIssuingAuthority_IsDeleted]  DEFAULT ((0)),
 CONSTRAINT [PK_CertificateIssuingAuthority] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CFRfaDetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CFRfaDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RequestForAssistanceId] [int] NULL,
	[CourtOrderedCountyId] [int] NULL,
	[CourtOrderEffectiveDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_CFRfaDetails_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_CFRfaDetails_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_CFRfaDetails_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_CFRfaDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ChangeReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ChangeReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](250) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ChangeReason_CreatedDate]  DEFAULT (getdate()),
	[IsRequired] [bit] NULL,
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ChangeReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[Code] [char](3) NULL,
 CONSTRAINT [PK_ChangeReason_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Child]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Child](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](140) NULL,
	[MiddleInitialName] [char](1) NULL,
	[LastName] [varchar](140) NULL,
	[SuffixName] [char](3) NULL,
	[DateOfBirth] [date] NULL,
	[DateOfDeath] [date] NULL,
	[GenderTypeId] [int] NULL,
	[GenderIndicator] [char](1) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Child_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Children_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Children_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Children] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ChildCareArrangement]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ChildCareArrangement](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ChildCareArrangement_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ChildCareArrangement_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ChildCareArrangement_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ChildCareArrangement] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ChildYouthSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ChildYouthSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[HasChildren12OrUnder] [bit] NULL,
	[HasChildrenOver12WithDisabilityInNeedOfChildCare] [bit] NULL,
	[HasFutureChildCareNeed] [bit] NULL,
	[FutureChildCareNeedNotes] [varchar](1000) NULL,
	[HasChildWelfareWorker] [bit] NULL,
	[ChildWelfareWorkerChildren] [varchar](200) NULL,
	[ChildWelfareWorkerPlanOrRequirements] [varchar](500) NULL,
	[ChildWelfareContactId] [int] NULL,
	[HasWicBenefits] [bit] NULL,
	[IsInHeadStart] [bit] NULL,
	[IsInAfterSchoolOrSummerProgram] [bit] NULL,
	[AfterSchoolProgramDetails] [varchar](1000) NULL,
	[IsInMentoringProgram] [bit] NULL,
	[MentoringProgramDetails] [varchar](1000) NULL,
	[DidOrWillAgeOutOfFosterCare] [bit] NULL,
	[FosterCareDetails] [varchar](1000) NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ChildCareSection_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ChildYouthSection_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ChildCareSection_ModifiedDate]  DEFAULT (getdate()),
	[IsSpecialNeedsProgramming] [bit] NULL,
	[SpecialNeedsProgrammingDetails] [varchar](500) NULL,
 CONSTRAINT [PK_ChildCareSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ChildYouthSectionChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ChildYouthSectionChild](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ChildYouthSectionId] [int] NULL,
	[ChildId] [int] NULL,
	[CareArrangementId] [int] NULL,
	[AgeCategoryId] [int] NULL,
	[IsSpecialNeeds] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ChildYouthChildren_ModifiedBy]  DEFAULT (suser_sname()),
	[DeleteReasonId] [int] NULL CONSTRAINT [DF_ChildYouthSectionChild_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ChildYouthChildren_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_ChildYouthChildren] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ChildYouthSupportsAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ChildYouthSupportsAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ChildYouthSupportAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ChildYouthSupportsAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ChildYouthSupportAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_ChildYouthSupportAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[City]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[City](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NULL,
	[GooglePlaceId] [varchar](1024) NULL,
	[CountryId] [int] NULL,
	[StateId] [int] NULL,
	[LatitudeNumber] [decimal](12, 9) NULL,
	[LongitudeNumber] [decimal](12, 9) NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_City_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL,
	[RowVersion] [timestamp] NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_City] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CommentType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CommentType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
 CONSTRAINT [PK_Comment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CompletionReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CompletionReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[Code] [varchar](10) NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_CompletionReason_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_CompletionReason_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_CompletionReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_CompletionReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsSystemUseOnly] [bit] NOT NULL CONSTRAINT [DF_CompletionReason_IsSystemUseOnly]  DEFAULT ((0)),
 CONSTRAINT [PK_CompletionReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ConfidentialPinInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ConfidentialPinInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[IsConfidential] [bit] NULL,
	[WorkerId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ConfidentialPinInformation_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ConfidentialPinInformation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_ConfidentialPinInformation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
 CONSTRAINT [PK_ConfidentialPinInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
UNIQUE NONCLUSTERED 
(
	[ParticipantId] ASC,
	[PinNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Contact]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Contact](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[TitleId] [int] NULL,
	[CustomTitle] [varchar](140) NULL,
	[Name] [varchar](140) NULL,
	[Email] [varchar](140) NULL,
	[Phone] [varchar](50) NULL,
	[ExtensionNo] [varchar](50) NULL,
	[FaxNo] [varchar](50) NULL,
	[ReleaseInformationDate] [datetime] NULL,
	[Address] [varchar](140) NULL,
	[LegalIssuesSectionId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Contact_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_Contact] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ContactInterval]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ContactInterval](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Name] [varchar](100) NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ContactInterval_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ContactInterval_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ContactInterval_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ContactInterval] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ContactTitleType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ContactTitleType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Name] [varchar](100) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ContactTitleType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ContactTitleType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ContactTitleType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ContentModule]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ContentModule](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NOT NULL,
	[Title] [varchar](255) NULL,
	[ShowTitle] [bit] NOT NULL CONSTRAINT [DF_ContentModule_ShowTitle]  DEFAULT ((0)),
	[Description] [varchar](1000) NULL,
	[ShowDescription] [bit] NOT NULL CONSTRAINT [DF_ContentModule_ShowDescription]  DEFAULT ((0)),
	[Status] [int] NOT NULL CONSTRAINT [DF_ContentModule_Status]  DEFAULT ((0)),
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_ContentModule_SortOrder]  DEFAULT ((0)),
	[ContentPageId] [int] NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ContentModule_CreatedDate]  DEFAULT (getdate()),
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ContentModule_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ContentModule] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ContentModuleMeta]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ContentModuleMeta](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL,
	[Data] [varchar](max) NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ContentModuleMeta_CreatedDate]  DEFAULT (getdate()),
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ContentModuleMeta_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[ContentModuleId] [int] NULL,
 CONSTRAINT [PK_ContentModuleMeta] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ContentPage]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ContentPage](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [varchar](255) NOT NULL,
	[Description] [varchar](1000) NOT NULL,
	[Slug] [varchar](255) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_ContentPage_SortOrder]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ContentPage_CreatedDate]  DEFAULT (getdate()),
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ContentPage_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ContentPage] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ContractArea]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ContractArea](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ContractAreaName] [varchar](50) NULL,
	[OrganizationId] [int] NULL,
	[EnrolledProgramId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ContractArea_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_ContractArea_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ContractArea_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[ActivatedDate] [date] NULL,
	[InActivatedDate] [date] NULL,
 CONSTRAINT [PK_ContractArea] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Conviction]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Conviction](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LegalSectionId] [int] NULL,
	[ConvictionTypeID] [int] NULL,
	[IsUnknown] [bit] NULL,
	[DateConvicted] [datetime] NULL,
	[Details] [varchar](1000) NULL,
	[DeleteReasonId] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Conviction_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Conviction_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Conviction] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ConvictionType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ConvictionType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Name] [varchar](100) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ConvictionType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ConvictionType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ConvictionType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Country]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Country](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](500) NOT NULL,
	[Code] [varchar](2) NULL,
	[IsNonStandard] [bit] NOT NULL CONSTRAINT [DF_Country_IsGoogleCreated]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_Country_CreatedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Country_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Country] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CountyAndTribe]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CountyAndTribe](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CountyNumber] [smallint] NULL,
	[CountyName] [varchar](50) NULL,
	[IsCounty] [bit] NOT NULL CONSTRAINT [DF_CountyAndTribe_IsCounty]  DEFAULT ((0)),
	[AgencyName] [varchar](40) NULL,
	[LocationNumber] [smallint] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_CountyAndTribe_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_CountyAndTribe_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[SortOrder] [int] NULL,
 CONSTRAINT [PK_CountyAndTribe] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[CourtDate]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[CourtDate](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LegalSectionId] [int] NULL,
	[IsUnknown] [bit] NULL,
	[Location] [varchar](200) NULL,
	[Date] [datetime] NULL,
	[Details] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_CourtDate_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_CourtDate_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_CourtDate] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DegreeType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DegreeType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Code] [varchar](10) NULL,
	[Name] [varchar](100) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_DegreeType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DegreeType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_DegreeType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DeleteReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DeleteReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](250) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_DeleteReason_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_DeleteReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DeleteReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_DeleteReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DeleteReasonByRepeater]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DeleteReasonByRepeater](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Repeater] [varchar](50) NOT NULL,
	[DeleteReasonId] [int] NOT NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_DeleteReasonByRepeater_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_DeleteReasonByRepeater_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DeleteReasonByRepeater_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_DeleteReasonByRepeater_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [DeleteReasonByRepeater_PK] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DenialReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DenialReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](250) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_DenialReason_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_DenialReason_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_DenialReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DenialReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[Code] [char](3) NULL,
 CONSTRAINT [PK_DenialReason_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DenialReasonsMap]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [wwp].[DenialReasonsMap](
	[DenialReasonId] [int] NOT NULL,
	[TimelimitTypeId] [int] NOT NULL,
 CONSTRAINT [PK_DenialReasonsMap] PRIMARY KEY CLUSTERED 
(
	[DenialReasonId] ASC,
	[TimelimitTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [wwp].[DisabledPopulationType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DisabledPopulationType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramOrganizationPopulationTypeBridgeId] [int] NOT NULL,
	[PopulationTypeId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_DisabledPopulationType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_DisabledPopulationType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DisabledPopulationType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_DisabledPopulationType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DriverLicense]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DriverLicense](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StateId] [int] NULL,
	[DriverLicenseTypeId] [int] NULL,
	[ExpiredDate] [datetime] NULL,
	[Details] [varchar](50) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_DriverLicense_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_DriverLicense_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DriverLicense_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_DriverLicense] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DriverLicenseType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DriverLicenseType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_DriverLicenseType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_DriverLicenseType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DriverLicenseType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_DriverLicenseType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DriversLicenseInvalidReasonType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DriversLicenseInvalidReasonType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_DriversLicenseInvalidReasonType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_DriversLicenseInvalidReasonType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_DriversLicenseInvalidReasonType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_DriversLicenseInvalidReasonType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[DriversLicenseState]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[DriversLicenseState](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StateId] [int] NOT NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_DriversLicenseState_SortOrder]  DEFAULT ((1)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_DriversLicenseState_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_DriversLicenseState_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_DriversLicenseState_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_DriversLicenseState] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EducationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EducationAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EducationAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EducationAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EducationAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EducationAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EducationExam]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EducationExam](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[ExamTypeId] [int] NULL,
	[DateTaken] [datetime] NULL,
	[Details] [varchar](400) NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[RowVersion] [timestamp] NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_EducationExam] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EducationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EducationSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[SchoolGraduationStatusId] [int] NULL,
	[SchoolCollegeEstablishmentId] [int] NULL,
	[LastGradeLevelCompletedId] [int] NULL,
	[CertificateIssuingAuthorityId] [int] NULL,
	[CertificateYearAwarded] [int] NULL,
	[HasEverAttendedSchool] [bit] NULL,
	[IsCurrentlyEnrolled] [bit] NULL,
	[IsWorkingOnCertificate] [bit] NULL,
	[LastYearAttended] [int] NULL,
	[HasEducationPlan] [bit] NULL,
	[EducationPlanDetails] [varchar](450) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EducationSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EducationSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EducationSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EducationSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Element]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Element](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[EffectiveDate] [date] NOT NULL,
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Element_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_Element_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_Element_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Element] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ElevatedAccess]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ElevatedAccess](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WorkerId] [int] NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[AccessCreateDate] [datetime] NOT NULL,
	[ElevatedAccessReasonId] [int] NULL,
	[Details] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ElevatedAccess_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ElevatedAccess_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ElevatedAccess_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ElevatedAccess] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ElevatedAccessReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ElevatedAccessReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Reason] [varchar](250) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ElevatedAccessReason_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ElevatedAccessReason_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ElevatedAccessReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ElevatedAccessReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EligibilityByFPL]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EligibilityByFPL](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[GroupSize] [int] NOT NULL,
	[Pct150PerMonth] [decimal](9, 2) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_EligibilityByFPL_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EligibilityByFPL_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EligibilityByFPL_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EligibilityByFPL_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[EffectiveDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
 CONSTRAINT [PK_EligibilityByFPL] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmployabilityPlan]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmployabilityPlan](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[BeginDate] [date] NOT NULL,
	[EndDate] [date] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmployabilityPlan_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EmployabilityPlan_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EmployabilityPlan_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[CreatedDate] [date] NULL CONSTRAINT [DF_EmployabilityPlan_CreatedDate]  DEFAULT (getdate()),
	[Notes] [varchar](500) NULL,
	[EmployabilityPlanStatusTypeId] [int] NULL,
	[ParticipantEnrolledProgramId] [int] NOT NULL,
	[CanSaveWithoutActivity] [bit] NULL,
	[CanSaveWithoutActivityDetails] [varchar](200) NULL,
	[OrganizationId] [int] NULL,
	[SubmitDate] [date] NULL,
 CONSTRAINT [PK_EmployabilityPlan] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmployabilityPlanActivityBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmployabilityPlanActivityBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmployabilityPlanId] [int] NOT NULL,
	[ActivityId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmploybilityPlanActivityBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EmploybilityPlanActivityBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EmploybilityPlanActivityBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EmploybilityPlanActivityBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmployabilityPlanGoalBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmployabilityPlanGoalBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmployabilityPlanId] [int] NOT NULL,
	[GoalId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmployabilityPlanGoalBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EmployabilityPlanGoalBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EmployabilityPlanGoalBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EmployabilityPlanGoalBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmployabilityPlanStatusType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmployabilityPlanStatusType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmployabilityPlanStatusType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EmployabilityPlanStatusType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EmployabilityPlanStatusType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EmployabilityPlanStatusType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmployerOfRecordInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmployerOfRecordInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmploymentInformationId] [int] NOT NULL,
	[CompanyName] [varchar](140) NULL,
	[Fein] [varchar](10) NULL,
	[StreetAddress] [varchar](140) NULL,
	[ZipAddress] [varchar](9) NULL,
	[CityId] [int] NULL,
	[JobSectorId] [int] NULL,
	[ContactId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmployerOfRecordInformation_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EmployerOfRecordInformation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmployerOfRecordInformation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EmployerOfRecordInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmployerOfRecordType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmployerOfRecordType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmployerOfRecordType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EmployerOfRecordType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmployerOfRecordType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EmployerOfRecordType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmploymentInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmploymentInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[WorkHistorySectionId] [int] NULL,
	[JobTypeId] [int] NULL,
	[JobBeginDate] [date] NULL,
	[JobEndDate] [date] NULL,
	[IsCurrentlyEmployed] [bit] NULL,
	[JobPosition] [varchar](140) NULL,
	[CompanyName] [varchar](140) NULL,
	[Fein] [varchar](10) NULL,
	[StreetAddress] [varchar](140) NULL,
	[ZipAddress] [varchar](9) NULL,
	[CityId] [int] NULL,
	[ContactId] [int] NULL,
	[JobDutiesId] [int] NULL,
	[LeavingReasonId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EmploymentInformation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmploymentInformation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[DeleteReasonId] [int] NULL,
	[OtherJobInformationId] [int] NULL,
	[WageHoursId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[EmploymentProgramtypeId] [int] NULL,
	[LeavingReasonDetails] [varchar](1000) NULL,
	[EmployerOfRecordTypeId] [int] NULL,
	[EmploymentSequenceNumber] [smallint] NULL,
	[OriginalOfficeNumber] [smallint] NULL,
	[IsConverted] [bit] NULL,
	[IsCurrentJobAtCreation] [bit] NULL,
 CONSTRAINT [PK_EmploymentInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmploymentInformationBenefitsOfferedTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmploymentInformationBenefitsOfferedTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmploymentInformationId] [int] NULL,
	[BenefitsOfferedTypeId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_OtherJobBenefitsOfferedActionBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_OtherJobBenefitsOfferedActionBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_OtherJobBenefitsOfferedActionBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmploymentInformationJobDutiesDetailsBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmploymentInformationJobDutiesDetailsBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmploymentInformationId] [int] NULL,
	[JobDutiesId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EmploymentInformationJobDutiesDetailsBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmploymentInformationJobDutiesDetailsBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_EmploymentInformationJobDutiesDetailsBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmploymentPreventionType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmploymentPreventionType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmploymentPreventionType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EmploymentPreventionType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmploymentPreventionType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EmploymentPreventionType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmploymentProgramType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmploymentProgramType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EmploymentProgramType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmploymentProgramType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_EmploymentProgramType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EmploymentStatusType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EmploymentStatusType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EmploymentStatusType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EmploymentStatus_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EmploymentStatus_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EmploymentStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgram](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProgramCode] [char](3) NULL,
	[SubProgramCode] [char](1) NULL,
	[ProgramType] [char](20) NULL,
	[DescriptionText] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF__EnrolledP__SortO__3EA9ABCB]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgram_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EnrolledProgram_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL CONSTRAINT [DF_EnrolledProgram_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
	[Name] [varchar](50) NULL,
	[ShortName] [varchar](5) NULL,
 CONSTRAINT [PK_EnrolledProgram] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramActivityCompletionReasonBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramActivityCompletionReasonBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[ActivityCompletionReasonId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgramActivityCompletionReasonBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EnrolledProgramActivityCompletionReasonBridge_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL CONSTRAINT [DF_EnrolledProgramActivityCompletionReasonBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EnrolledProgramActivityCompletionReasonBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramEPActivityTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramEPActivityTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NULL,
	[ActivityTypeId] [int] NULL,
	[IsSelfDirected] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgramEPActivityTypeBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EnrolledProgramEPActivityTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL CONSTRAINT [DF_EnrolledProgramEPActivityTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
	[IsUpfrontActivity] [bit] NULL,
	[IsSanctionable] [bit] NULL,
	[IsAssessmentRelated] [bit] NULL,
 CONSTRAINT [PK_EnrolledProgramEPActivityTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramJobTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramJobTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[JobTypeId] [int] NOT NULL,
	[ActivatedDate] [datetime] NOT NULL,
	[InActivatedDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgramJobTypeBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_EnrolledProgramJobTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EnrolledProgramJobTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EnrolledProgramJobTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramOrganizationPopulationTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramOrganizationPopulationTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[OrganizationId] [int] NULL,
	[PopulationTypeId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgramAgencyPopulationTypeBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EnrolledProgramAgencyPopulationTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EnrolledProgramAgencyPopulationTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EnrolledProgramAgencyPopulationTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramParticipationStatusTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramParticipationStatusTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[ParticipationStatusTypeId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgramParticipationStatusTypeBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EnrolledProgramParticipationStatusTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL CONSTRAINT [DF_EnrolledProgramParticipationStatusTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EnrolledProgramParticipationStatusTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramPinCommentTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramPinCommentTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[PinCommentTypeId] [int] NOT NULL,
	[SystemUseOnly] [bit] NOT NULL,
	[EffectiveDate] [date] NOT NULL,
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgramPinCommentTypeBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_EnrolledProgramPinCommentTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EnrolledProgramPinCommentTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EnrolledProgramPinCommentTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramStatusCode]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramStatusCode](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[StatusCode] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_EnrolledProgramStatusCode_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EnrolledProgramStatusCode_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_EnrolledProgramStatusCode] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EnrolledProgramValidity]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EnrolledProgramValidity](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NULL,
	[MaxDaysCanBackDate] [int] NULL,
	[MaxDaysInProgressStatus] [int] NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_EnrolledProgramEPValidity_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EnrolledProgramEPValidity_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EnrolledProgramEPValidity_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EnrolledProgramEPValidity_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
	[MaxDaysCanBackDatePS] [int] NULL,
 CONSTRAINT [PK_EnrolledProgramValidity] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[EPEIBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[EPEIBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmployabilityPlanId] [int] NULL,
	[EmploymentInformationId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_EPEIBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EPEIBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_EPEIBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_EPEIBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamEquivalencyType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamEquivalencyType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[ModifiedBy] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[RowVersion] [timestamp] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_ExamEquivalencyType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamLevelType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamLevelType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](1000) NULL,
	[Code] [varchar](10) NULL,
	[ExamType] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_TestLevelType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TestLevelType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TestLevelType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamPassType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamPassType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Name] [varchar](100) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ExamPassType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PassType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ExamPassType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamResult]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamResult](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EducationExamId] [int] NULL,
	[ExamSubjectTypeId] [int] NOT NULL,
	[DatePassed] [datetime] NULL,
	[Score] [int] NULL,
	[MaxScoreRange] [int] NULL,
	[SPLTypeId] [int] NULL,
	[NRSTypeId] [int] NULL,
	[Version] [varchar](75) NULL,
	[ExamEquivalencyTypeId] [int] NULL,
	[GradeEquivalency] [decimal](3, 1) NULL,
	[ExamLevelType] [int] NULL,
	[ExamPassTypeId] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[RowVersion] [timestamp] NULL,
	[Level] [varchar](75) NULL,
 CONSTRAINT [PK_Subject] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamSubjectMaxScoreType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamSubjectMaxScoreType](
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ExamSubjectMaxScoreType_CreatedDate]  DEFAULT (getdate()),
	[Id] [int] NOT NULL,
	[ExamTypeId] [int] NULL,
	[ExamSubjectTypeId] [int] NULL,
	[MaxScore] [varchar](10) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ExamSubjectMaxScoreType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_ExamSubjectMaxScoreType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ExamSubjectMaxScoreType_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_ExamSubjectMaxScoreType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamSubjectType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamSubjectType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Name] [varchar](100) NULL,
	[ExamTypeId] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SubjectType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_SubjectType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_SubjectType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamSubjectTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamSubjectTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExamSubjectTypeId] [int] NULL,
	[ExamTypeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ExamSubjectTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ExamSubjectTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ExamSubjectTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExamType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExamType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](500) NULL,
	[FullName] [varchar](1000) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ExamType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ExamType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ExamType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ExamType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ExtensionDecision]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ExtensionDecision](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](250) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ExtensionDecision_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ExtensionDecision_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ExtensionDecision] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FamilyBarriersActionBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FamilyBarriersActionBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FamilyBarriersAssessmentSectionId] [int] NULL,
	[ActionNeededId] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FamilyBarriersActionBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FamilyBarriersActionBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FamilyBarriersActionBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FamilyBarriersAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FamilyBarriersAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_FamilyBarriersAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FamilyBarriersAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FamilyBarriersAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FamilyBarriersAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FamilyBarriersDetail]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FamilyBarriersDetail](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Details] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FamilySupplementalSecurityIncomeNeedDetail_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FamilySupplementalSecurityIncomeNeedDetail_ModifiedDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FamilySupplementalSecurityIncomeNeedDetail] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FamilyBarriersSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FamilyBarriersSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[HasEverAppliedSsi] [bit] NULL,
	[IsCurrentlyApplyingSsi] [bit] NULL,
	[SsiApplicationStatusId] [int] NULL,
	[SsiApplicationStatusDetailsId] [int] NULL,
	[SsiApplicationDate] [date] NULL,
	[SsiApplicationIsAnyoneHelping] [bit] NULL,
	[SsiApplicationDetailsId] [int] NULL,
	[SsiApplicationContactId] [int] NULL,
	[HasReceivedPastSsi] [bit] NULL,
	[PastSsiDetailsId] [int] NULL,
	[HasDeniedSsi] [bit] NULL,
	[DeniedSsiDate] [date] NULL,
	[DeniedSsiDetailsId] [int] NULL,
	[IsInterestedInLearningMoreSsi] [bit] NULL,
	[InterestedInLearningMoreSsiDetailsId] [int] NULL,
	[HasAnyoneAppliedForSsi] [bit] NULL,
	[IsAnyoneReceivingSsi] [bit] NULL,
	[AnyoneReceivingSsiDetailsId] [int] NULL,
	[IsAnyoneApplyingForSsi] [bit] NULL,
	[AnyoneApplyingForSsiDetailsId] [int] NULL,
	[HasCaretakingResponsibilities] [bit] NULL,
	[HasConcernsAboutCaretakingResponsibilities] [bit] NULL,
	[ConcernsAboutCaretakingResponsibilitiesDetailsId] [int] NULL,
	[DoesHouseholdEngageInRiskyActivities] [bit] NULL,
	[HouseholdEngageInRiskyActivitiesDetailsId] [int] NULL,
	[DoChildrenHaveBehaviourProblems] [bit] NULL,
	[ChildrenHaveBehaviourProblemsDetailsId] [int] NULL,
	[AreChildrenAtRiskOfSchoolSuspension] [bit] NULL,
	[ChildrenAtRiskOfSchoolSuspensionDetailsId] [int] NULL,
	[AreAnyFamilyIssuesAffectWork] [bit] NULL,
	[AnyFamilyIssuesAffectWorkDetailsId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FamilyBarriersSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FamilyBarriersSection_ModifiedDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
	[ReasonForPastSsiDetailsId] [int] NULL,
 CONSTRAINT [PK_FamilyBarriersSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FamilyMember]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FamilyMember](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[FamilyBarriersSectionId] [int] NULL,
	[RelationshipId] [int] NULL,
	[FirstName] [varchar](200) NULL,
	[LastName] [varchar](200) NULL,
	[Details] [varchar](500) NULL,
	[DeleteReasonId] [int] NULL CONSTRAINT [DF_FamilyMember_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FamilyMember_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FamilyMember_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FamilyMember] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FCDPRfaDetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FCDPRfaDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RequestForAssistanceId] [int] NULL,
	[IsVoluntary] [bit] NOT NULL,
	[CourtOrderedCountyId] [int] NULL,
	[CourtOrderEffectiveDate] [date] NULL,
	[KIDSPinNumber] [decimal](10, 0) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_FCDPRfaDetails_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FCDPRfaDetails_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FCDPRfaDetails_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[ReferralSource] [varchar](150) NULL,
 CONSTRAINT [PK_FCDPRfaDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FeatureURL]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FeatureURL](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Feature] [varchar](50) NOT NULL,
	[URL] [nvarchar](max) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_FeatureURL_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FeatureURL_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_FeatureURL_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FeatureURL] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FEP_PRE_Bkp]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FEP_PRE_Bkp](
	[WAMS_USER_ID] [int] NULL,
	[WAMS_BEG_DT] [date] NULL,
	[WAMS_EMAIL_ADR] [varchar](50) NULL,
	[WAMS_END_DT] [date] NULL,
	[WAMS_FST_NAM] [varchar](50) NULL,
	[WAMS_LAST_NAM] [varchar](50) NULL,
	[WAMS_MAX_HIST_SEQ_NUM] [smallint] NULL,
	[WAMS_MID_INIT] [char](1) NULL,
	[WAMS_UPDT_USER_ID] [int] NULL,
	[WAMS_UPPR_EMAIL_ADR] [varchar](50) NULL,
	[WAMS_UPPR_FST_NAM] [varchar](50) NULL,
	[WAMS_UPPR_LAST_NAM] [varchar](50) NULL,
	[WAMS_UPPR_WAMS_LOGN_ID] [varchar](20) NULL,
	[WAMS_WAMS_INTL_USER_ID] [decimal](16, 0) NULL,
	[WAMS_WAMS_LOGN_ID] [varchar](20) NULL,
	[WAMS_CMT_TXT] [varchar](200) NULL,
	[BEG_DT] [date] NULL,
	[END_DT] [date] NULL,
	[UPDT_USER_ID] [varchar](50) NULL,
	[WORKER_USER_ID] [varchar](10) NULL,
	[WORKER_AGENCY_BEGIN_DT] [date] NULL,
	[WORKER_AGENCY_END_DT] [date] NULL,
	[WORKER_COUNTY_NUM] [smallint] NULL,
	[WORKER_COUNTY_ONLY_SW] [char](1) NULL,
	[WORKER_JOB_FUNCTION_CD] [char](2) NULL,
	[WORKER_LOCN_NUM] [smallint] NULL,
	[WORKER_OFFICE_BEGIN_HRS] [time](7) NULL,
	[WORKER_OFFICE_END_HRS] [time](7) NULL,
	[WORKER_POSITION_BEGIN_DT] [date] NULL,
	[WORKER_PROFILE1_CD] [char](6) NULL,
	[WORKER_PROFILE2_CD] [char](6) NULL,
	[WORKER_PROVIDER_ID] [smallint] NULL,
	[WORKER_SECURITY_CD] [smallint] NULL,
	[WORKER_SSN_NUM] [decimal](9, 0) NULL,
	[WORKER_SUP_UNIT_NUM] [smallint] NULL,
	[WORKER_WORK_PHONE_NUM] [char](10) NULL,
	[WORKER_WORKER_DES_TXT] [varchar](70) NULL,
	[WORKER_WORKER_FIRST_NAM] [varchar](50) NULL,
	[WORKER_WORKER_LAST_NAM] [varchar](50) NULL,
	[WORKER_WORKER_MIDDLE_NAM] [char](1) NULL,
	[WORKER_WORKER_STS_CD] [char](1) NULL,
	[WORKER_WORKER_SUFFIX_NAM] [char](3) NULL,
	[WORKER_WORKER_TYPE_IND] [char](2) NULL,
	[WORKER_CW_PRFL_ID] [smallint] NULL,
	[WORKER_EMAIL_ADR] [varchar](50) NULL,
	[WORKER_MAX_HIST_SEQ_NUM] [smallint] NULL,
	[WORKER_SA_USER_ID] [int] NULL,
	[WORKER_UPDATED_DT] [date] NULL,
	[WORKER_UPDT_SA_USER_ID] [int] NULL,
	[WORKER_WRKR_EE_TYP] [char](2) NULL,
	[WORKER_WRKR_ER_NAM] [varchar](30) NULL,
	[WORKER_WRKR_PHN_EXTN_NUM] [char](5) NULL,
	[WORKER_CW_PRFL_BEG_DT] [date] NULL,
	[WORKER_CW_PRFL_END_DT] [date] NULL,
	[WORKER_COUNTY_NUM1] [smallint] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FormalAssessment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FormalAssessment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[BarrierDetailsId] [int] NULL,
	[ReferralDate] [datetime] NULL,
	[ReferralDeclined] [bit] NULL,
	[ReferralDetails] [varchar](1000) NULL,
	[AssessmentDate] [datetime] NULL,
	[AssessmentNotCompleted] [bit] NULL,
	[AssessmentDetails] [varchar](1000) NULL,
	[SymptomId] [int] NULL,
	[ReassessmentRecommendedDate] [datetime] NULL,
	[IsRecommendedDateNotNeeded] [bit] NULL,
	[SymptomDetails] [varchar](1000) NULL,
	[AssessmentProviderContactId] [int] NULL,
	[HoursParticipantCanParticipate] [int] NULL,
	[HoursParticipantCanParticipateDetails] [varchar](400) NULL,
	[DeleteReasonId] [int] NULL CONSTRAINT [DF_FormalAssessment_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_FormalAssessment_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_FormalAssessment_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_FormalAssessment_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[HoursParticipantCanParticipateIntervalId] [int] NULL,
 CONSTRAINT [PK_FormalAssessment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Frequency]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Frequency](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](5) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Frequency_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Frequency_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_Frequency_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[ShortName] [varchar](5) NOT NULL,
 CONSTRAINT [PK_Frequency] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_Frequency] UNIQUE NONCLUSTERED 
(
	[ShortName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[FrequencyType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[FrequencyType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_FrequencyType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_FrequencyType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_FrequencyType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_FrequencyType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[GenderType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[GenderType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](10) NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_GenderType_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_GenderType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_GenderType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_GenderType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_GenderType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Goal]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Goal](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[GoalTypeId] [int] NULL,
	[BeginDate] [date] NULL,
	[Name] [varchar](255) NULL,
	[Details] [varchar](500) NULL,
	[IsGoalEnded] [bit] NULL,
	[GoalEndReasonId] [int] NULL,
	[EndReasonDetails] [varchar](500) NULL,
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Goal_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Goal_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_Goal_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Goal] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[GoalEndReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[GoalEndReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_GoalEndReason_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_GoalEndReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_GoalEndReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_GoalEndReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[GoalStep]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[GoalStep](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[GoalId] [int] NOT NULL,
	[Details] [varchar](250) NULL,
	[IsGoalStepCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_GoalStep_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_GoalStep_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_GoalStep_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_GoalStep] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[GoalType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[GoalType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_GoalType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_GoalType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_GoalType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_GoalType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[GoodCauseDeniedReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[GoodCauseDeniedReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](5) NOT NULL,
	[Name] [varchar](250) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsSystemUseOnly] [bit] NOT NULL CONSTRAINT [DF_GoodCauseDeniedReason_IsSystemUseOnly]  DEFAULT ((0)),
	[EffectiveDate] [date] NOT NULL CONSTRAINT [DF_GoodCauseDeniedReason_EffectiveDate]  DEFAULT (CONVERT([date],getdate())),
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_GoodCauseDeniedReason_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_GoodCauseDeniedReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_GoodCauseDeniedReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_GoodCauseDeniedReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[GoodCauseGrantedReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[GoodCauseGrantedReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](5) NOT NULL,
	[Name] [varchar](250) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsSystemUseOnly] [bit] NOT NULL CONSTRAINT [DF_GoodCauseGrantedReason_IsSystemUseOnly]  DEFAULT ((0)),
	[EffectiveDate] [date] NOT NULL CONSTRAINT [DF_GoodCauseGrantedReason_EffectiveDate]  DEFAULT (CONVERT([date],getdate())),
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_GoodCauseGrantedReason_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_GoodCauseGrantedReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_GoodCauseGrantedReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_GoodCauseGrantedReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[HolidayLookUp]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[HolidayLookUp](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Year] [varchar](4) NULL,
	[Date] [date] NULL,
	[CARESHoliday] [bit] NOT NULL CONSTRAINT [DF_HolidayLookUp_CARESHoliday]  DEFAULT ((0)),
	[FederalHoliday] [bit] NOT NULL CONSTRAINT [DF_HolidayLookUp_FederalHoliday]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_HolidayLookUp_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_HolidayLookUp_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_HolidayLookUp_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_HolidayLookUp] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_HolidayLookUp] UNIQUE NONCLUSTERED 
(
	[Year] ASC,
	[Date] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[HousingAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[HousingAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_HousingAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_HousingAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_HousingAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_HousingAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[HousingHistory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[HousingHistory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[HousingSectionId] [int] NULL,
	[HousingSituationId] [int] NULL,
	[BeginDate] [date] NULL,
	[EndDate] [date] NULL,
	[HasEvicted] [bit] NULL,
	[MonthlyAmount] [decimal](7, 2) NULL,
	[IsAmountUnknown] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_HousingHistory_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_HousingHistory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[HousingSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[HousingSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[HousingSituationId] [int] NULL,
	[CurrentHousingDetails] [varchar](1000) NULL,
	[CurrentHousingBeginDate] [date] NULL,
	[CurrentHousingEndDate] [date] NULL,
	[CurrentMonthlyAmount] [decimal](7, 2) NULL,
	[IsCurrentAmountUnknown] [bit] NULL,
	[HasCurrentEvictionRisk] [bit] NULL,
	[HasBeenEvicted] [bit] NULL,
	[IsCurrentMovingToHistory] [bit] NULL,
	[HasUtilityDisconnectionRisk] [bit] NULL,
	[UtilityDisconnectionRiskNotes] [varchar](1000) NULL,
	[HasDifficultyWorking] [bit] NULL,
	[DifficultyWorkingNotes] [varchar](1000) NULL,
	[Notes] [varchar](1000) NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_HousingSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_HousingSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_HousingSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_HousingSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[HousingSituation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[HousingSituation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_HousingSituation_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_HousingSituation_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_HousingSituation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_HousingSituation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_HousingSituation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[InformalAssessment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[InformalAssessment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[AssessmentTypeId] [int] NULL,
	[ParticipantId] [int] NOT NULL,
	[LanguageAssessmentSectionId] [int] NULL,
	[WorkHistoryAssessmentSectionId] [int] NULL,
	[WorkProgramAssessmentSectionId] [int] NULL,
	[PostSecondaryEducationAssessmentSectionId] [int] NULL,
	[MilitaryTrainingAssessmentSectionId] [int] NULL,
	[HousingAssessmentSectionId] [int] NULL,
	[TransportationAssessmentSectionId] [int] NULL,
	[LegalIssuesAssessmentSectionId] [int] NULL,
	[BarriersAssessmentSectionId] [int] NULL,
	[ChildYouthSupportsAssessmentSectionId] [int] NULL,
	[FamilyBarriersAssessmentSectionId] [int] NULL,
	[NonCustodialParentsAssessmentSectionId] [int] NULL,
	[NonCustodialParentsReferralAssessmentSectionId] [int] NULL,
	[WorkHistorySectionId] [int] NULL,
	[EndDate] [datetime] NULL CONSTRAINT [DF_InformalAssessment_EndDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_InformalAssessment_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_InformalAssessment_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_InformalAssessment_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_InformalAssessment_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[EducationAssessmentSectionId] [int] NULL,
 CONSTRAINT [PK_InformalAssessment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[IntervalType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[IntervalType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_IntervalId_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_IntervalId_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_IntervalId] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[InvolvedWorkProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[InvolvedWorkProgram](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WorkProgramSectionId] [int] NULL,
	[WorkProgramStatusId] [int] NULL,
	[WorkProgramId] [int] NULL,
	[CityId] [int] NULL,
	[StartMonth] [date] NULL,
	[EndMonth] [date] NULL,
	[ContactId] [int] NULL,
	[ContactInfo] [varchar](300) NULL,
	[Details] [varchar](400) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_InvolvedWorkProgram_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_InvolvedWorkProgram_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_InvolvedWorkProgram_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_InvolvedWorkProgram] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobDutiesDetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobDutiesDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Details] [varchar](1000) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_JobDuties_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_JobDuties_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_JobDuties] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobFoundMethod]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobFoundMethod](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_JobFoundMethod_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_JobFoundMethod_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_JobFoundMethod] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobQueue]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobQueue](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](255) NULL,
	[QueueType] [int] NOT NULL,
	[Partition] [int] NOT NULL CONSTRAINT [DF_JobQueue_Partition]  DEFAULT ((0)),
	[ItemsToProcessConcurrently] [int] NULL,
	[DefaultMaxRetries] [int] NULL,
	[DefaultRetryTimeBuffer] [int] NULL,
	[DefaultSleepTime] [int] NULL CONSTRAINT [DF_JobQueue_DefaultSleepTime]  DEFAULT ((0)),
	[IsActive] [bit] NOT NULL CONSTRAINT [DF_JobQueue_IsActive]  DEFAULT ((1)),
	[IsSimulation] [bit] NOT NULL CONSTRAINT [DF_JobQueue_IsSimulation]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_JobQueue_CreatedDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JobQueue_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_JobQueue] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobQueueItem]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobQueueItem](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExternalJobId] [varchar](255) NULL,
	[JobQueueId] [int] NOT NULL,
	[JobStatus] [int] NOT NULL CONSTRAINT [DF_JobQueueItem_JobStatus]  DEFAULT ((0)),
	[IsReady] [bit] NULL,
	[IsUrgent] [bit] NOT NULL CONSTRAINT [DF_JobQueueItem_IsUrgent]  DEFAULT ((0)),
	[RetryCount] [int] NULL,
	[MaxRetries] [int] NOT NULL CONSTRAINT [DF_JobQueueItem_MaxRetries]  DEFAULT ((0)),
	[RetryTime] [datetime] NULL,
	[Notes] [varchar](1000) NULL,
	[CreatedDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JobQueueItem_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[JobResult] [varchar](max) NULL,
 CONSTRAINT [PK_JobQueueItem] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobQueueItemHistory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobQueueItemHistory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExternalJobId] [varchar](255) NULL,
	[JobQueueId] [int] NOT NULL,
	[JobStatus] [int] NOT NULL,
	[IsReady] [bit] NULL,
	[IsUrgent] [bit] NOT NULL,
	[RetryCount] [int] NULL,
	[MaxRetries] [int] NOT NULL,
	[RetryTime] [datetime] NULL,
	[Notes] [varchar](1000) NULL,
	[CreatedDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[JobResult] [varchar](max) NULL,
 CONSTRAINT [PK_JobQueueItemHistory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobReadiness]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobReadiness](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JobReadiness_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_JobReadiness_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_JobReadiness_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_JobReadiness_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_JobReadiness] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobSector]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobSector](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_JobSector_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_JobSector_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_JobSector] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JobType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JobType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[IsRequired] [bit] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_JobType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_JobType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[IsUsedForEmploymentOfRecord] [bit] NULL,
 CONSTRAINT [PK_JobType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JRApplicationInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JRApplicationInfo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobReadinessId] [int] NOT NULL,
	[CanSubmitOnline] [bit] NULL,
	[CanSubmitOnlineDetails] [varchar](380) NULL,
	[HaveCurrentResume] [bit] NULL,
	[HaveCurrentResumeDetails] [varchar](380) NULL,
	[HaveProfessionalReference] [bit] NULL,
	[HaveProfessionalReferenceDetails] [varchar](380) NULL,
	[NeedDocumentLookupId] [int] NULL,
	[NeedDocumentDetail] [varchar](380) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JRApplicationInfo_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_JRApplicationInfo_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_JRApplicationInfo_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_JRApplicationInfo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JRContactInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JRContactInfo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobReadinessId] [int] NOT NULL,
	[CanYourPhoneNumberUsed] [bit] NULL,
	[PhoneNumberDetails] [varchar](120) NULL,
	[HaveAccessToVoiceMailOrTextMessages] [bit] NULL,
	[VoiceOrTextMessageDetails] [varchar](120) NULL,
	[HaveEmailAddress] [bit] NULL,
	[EmailAddressDetails] [varchar](120) NULL,
	[HaveAccessDailyToEmail] [bit] NULL,
	[AccessEmailDailyDetails] [varchar](120) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JRContactInfo_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_JRContactInfo_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_JRContactInfo_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_JRContactInfo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JRHistoryInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JRHistoryInfo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobReadinessId] [int] NOT NULL,
	[LastJobDetails] [varchar](380) NULL,
	[AccomplishmentDetails] [varchar](380) NULL,
	[StrengthDetails] [varchar](380) NULL,
	[AreasNeedImprove] [varchar](380) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JRHistoryInfo_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_JRHistoryInfo_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_JRHistoryInfo_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_JRHistoryInfo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JRInterviewInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JRInterviewInfo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobReadinessId] [int] NOT NULL,
	[LastInterviewDetails] [varchar](380) NULL,
	[CanLookAtSocialMedia] [bit] NULL,
	[CanLookAtSocialMediaDetails] [varchar](380) NULL,
	[HaveOutfit] [bit] NULL,
	[HaveOutfitDetails] [varchar](380) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JRInterviewInfo_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_JRInterviewInfo_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_JRInterviewInfo_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_JRInterviewInfo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[JRWorkPreferences]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[JRWorkPreferences](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[JobReadinessId] [int] NOT NULL,
	[KindOfJobDetails] [varchar](380) NULL,
	[JobInterestDetails] [varchar](380) NULL,
	[TrainingNeededForJobDetails] [varchar](380) NULL,
	[SomeOtherPlacesJobAvailableDetails] [varchar](380) NULL,
	[SomeOtherPlacesJobAvailableUnknown] [bit] NULL,
	[SituationsToAvoidDetails] [varchar](380) NULL,
	[WorkScheduleBeginTime] [time](7) NULL,
	[WorkScheduleEndTime] [time](7) NULL,
	[WorkScheduleDetails] [varchar](380) NULL,
	[TravelTimeToWork] [varchar](120) NULL,
	[DistanceHomeToWork] [varchar](120) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_JRWorkPreferences_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_JRWorkPreferences_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_JRWorkPreferences_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_JRWorkPreferences] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[KnownLanguage]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[KnownLanguage](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[LanguageSectionId] [int] NOT NULL,
	[LanguageId] [int] NOT NULL,
	[IsPrimary] [bit] NULL,
	[IsAbleToRead] [bit] NULL,
	[IsAbleToWrite] [bit] NULL,
	[IsAbleToSpeak] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_KnownLanguage_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_EnglishLanguageAssessment_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_EnglishLanguageAssessment_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
 CONSTRAINT [PK_EnglishLanguageAssessment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Language]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Language](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Code] [varchar](2) NULL,
	[Name] [varchar](100) NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Language_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Language_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Language_IsDeleted]  DEFAULT ((0)),
	[MFLanguageCode] [varchar](2) NULL,
 CONSTRAINT [PK_Language] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[LanguageAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[LanguageAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_LanguageAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_LanguageAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_LanguageAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_LanguageAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[LanguageSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[LanguageSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[IsAbleToReadEnglish] [bit] NULL,
	[IsAbleToWriteEnglish] [bit] NULL,
	[IsAbleToSpeakEnglish] [bit] NULL,
	[IsNeedingInterpreter] [bit] NULL,
	[InterpreterDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_LanguageSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_LanguageSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_LanguageSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
 CONSTRAINT [PK_LanguageSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[LeavingReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[LeavingReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_LeavingReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_LeavingReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_LeavingReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[LegalIssuesAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[LegalIssuesAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_LegalIssuesAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_LegalIssuesAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_LegalIssuesAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_LegalIssuesAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[LegalIssuesSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[LegalIssuesSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[IsConvictedOfCrime] [bit] NULL,
	[IsUnderCommunitySupervision] [bit] NULL,
	[CommunitySupervisonDetails] [varchar](1000) NULL,
	[HasPendingCharges] [bit] NULL,
	[HasFamilyLegalIssues] [bit] NULL,
	[FamilyLegalIssueNotes] [varchar](1000) NULL,
	[HasCourtDates] [bit] NULL,
	[ActionNeededDetails] [varchar](250) NULL,
	[OrderedToPayChildSupport] [bit] NULL,
	[MonthlyAmount] [decimal](7, 2) NULL,
	[IsUnknown] [bit] NULL,
	[OweAnyChildSupportBack] [bit] NULL,
	[ChildSupportDetails] [varchar](1000) NULL,
	[CommunitySupervisonContactId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_LegalIssuesSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_LegalIssuesSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_LegalIssuesSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[HasRestrainingOrders] [bit] NULL,
	[RestrainingOrderNotes] [varchar](500) NULL,
	[HasRestrainingOrderToPrevent] [bit] NULL,
	[RestrainingOrderToPreventNotes] [varchar](500) NULL,
 CONSTRAINT [PK_LegalIssuesSection] PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[LicenseType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[LicenseType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Name] [varchar](100) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_LiscenseType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_LiscenseType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_LicenseType_IsDeleted]  DEFAULT ((0)),
 CONSTRAINT [PK_LiscenseType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[LogEvent]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [wwp].[LogEvent](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Message] [nvarchar](max) NULL,
	[MessageTemplate] [nvarchar](max) NULL,
	[Level] [tinyint] NULL,
	[TimeStamp] [datetimeoffset](7) NOT NULL,
	[Exception] [nvarchar](max) NULL,
	[Properties] [xml] NULL,
	[LogEvent] [nvarchar](max) NULL,
 CONSTRAINT [PK_Logs] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [wwp].[MilitaryBranch]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[MilitaryBranch](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_MilitaryBranch_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_MilitaryBranch_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_MilitaryBranch_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_MilitaryBranch] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[MilitaryDischargeType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[MilitaryDischargeType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_MilitaryDischargeType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_MilitaryDischargeType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_MilitaryDischargeType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_MilitaryDischargeType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[MilitaryRank]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[MilitaryRank](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_MilitaryRank] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[MilitaryTrainingAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[MilitaryTrainingAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_MilitaryTrainingAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_MilitaryTrainingAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_MilitaryTrainingAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_MilitaryTrainingAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[MilitaryTrainingSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[MilitaryTrainingSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[DoesHaveTraining] [bit] NULL,
	[MilitaryRankId] [int] NULL,
	[MilitaryBranchId] [int] NULL,
	[Rate] [varchar](200) NULL,
	[YearsEnlisted] [int] NULL,
	[EnlistmentDate] [datetime] NULL,
	[DischargeDate] [datetime] NULL,
	[IsCurrentlyEnlisted] [bit] NULL,
	[MilitaryDischargeTypeId] [int] NULL,
	[SkillsAndTraining] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_MilitaryTrainingSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_MilitaryTrainingSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_MilitaryTrainingSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[PolarLookupId] [int] NULL,
	[BenefitsDetails] [varchar](500) NULL,
 CONSTRAINT [PK_MilitaryTrainingSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialCaretaker]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialCaretaker](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NonCustodialParentsSectionId] [int] NOT NULL,
	[FirstName] [varchar](150) NULL,
	[IsFirstNameUnknown] [bit] NOT NULL CONSTRAINT [DF_NonCustodialCaretaker_IsFirstNameUnknown]  DEFAULT ((0)),
	[LastName] [varchar](150) NULL,
	[IsLastNameUnknown] [bit] NOT NULL CONSTRAINT [DF_NonCustodialCaretaker_IsLastNameUnknown]  DEFAULT ((0)),
	[NonCustodialParentRelationshipId] [int] NULL,
	[RelationshipDetails] [varchar](400) NULL,
	[ContactIntervalId] [int] NULL,
	[ContactIntervalDetails] [varchar](400) NULL,
	[IsRelationshipChangeRequested] [bit] NULL,
	[RelationshipChangeRequestedDetails] [varchar](400) NULL,
	[IsInterestedInRelationshipReferral] [bit] NULL,
	[InterestedInRelationshipReferralDetails] [varchar](400) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialCaretaker_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialCaretaker_ModifiedDate]  DEFAULT (getdate()),
	[DeleteReasonId] [int] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NonCustodialCaretaker] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialChild](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NonCustodialCaretakerId] [int] NOT NULL,
	[FirstName] [varchar](150) NULL,
	[LastName] [varchar](150) NULL,
	[DateOfBirth] [date] NULL,
	[HasChildSupportOrder] [bit] NULL,
	[ChildSupportOrderDetails] [varchar](400) NULL,
	[ContactIntervalId] [int] NULL,
	[ContactIntervalDetails] [varchar](400) NULL,
	[HasOtherAdultsYesNoUnknownLookupId] [int] NULL,
	[OtherAdultsDetails] [varchar](400) NULL,
	[IsRelationshipChangeRequested] [bit] NULL,
	[RelationshipChangeRequestedDetails] [varchar](400) NULL,
	[IsNeedOfServicesYesNoUnknownLookupId] [int] NULL,
	[NeedOfServicesDetails] [varchar](400) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialChild_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialChild_ModifiedDate]  DEFAULT (getdate()),
	[DeleteReasonId] [int] NULL CONSTRAINT [DF_NonCustodialChild_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[HasNameOnChildBirthRecord] [bit] NULL,
 CONSTRAINT [PK_NonCustodialChild] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialParentRelationship]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialParentRelationship](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialParentRelationship_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_NonCustodialParentRelationship_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialParentRelationship_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NonCustodialParentRelationship] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialParentsAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialParentsAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialParentsAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_NonCustodialParentsAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialParentsAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_NonCustodialParentsAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialParentsReferralAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialParentsReferralAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialParentsReferralAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_NonCustodialParentsReferralAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialParentsReferralAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_NonCustodialParentsReferralAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialParentsReferralSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialParentsReferralSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[HasChildrenId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialParentsReferralSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialParentsReferralSection_ModifiedDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_NonCustodialParentsReferralSection_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NonCustodialParentsReferralSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialParentsSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialParentsSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[HasChildren] [bit] NULL,
	[ChildSupportPayment] [decimal](7, 2) NULL,
	[HasOwedChildSupport] [bit] NULL,
	[HasInterestInChildServices] [bit] NULL,
	[IsInterestedInReferralServices] [bit] NULL,
	[InterestedInReferralServicesDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialParentsSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialParentsSection_ModifiedDate]  DEFAULT (getdate()),
	[IsDeleted] [bit] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NonCustodialParentsSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialReferralChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialReferralChild](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NonCustodialReferralParentId] [int] NOT NULL,
	[FirstName] [varchar](150) NULL,
	[LastName] [varchar](150) NULL,
	[ReferralContactIntervalId] [int] NULL,
	[ContactIntervalDetails] [varchar](400) NULL,
	[HasChildSupportOrder] [bit] NULL,
	[ChildSupportOrderDetails] [varchar](400) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialReferralChild_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialReferralChild_ModifiedDate]  DEFAULT (getdate()),
	[DeleteReasonId] [int] NULL CONSTRAINT [DF_NonCustodialReferralChild_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NonCustodialReferralChild] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonCustodialReferralParent]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonCustodialReferralParent](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[NonCustodialReferralParentsSectionId] [int] NOT NULL,
	[FirstName] [varchar](150) NULL,
	[LastName] [varchar](150) NULL,
	[IsAvailableOrWorking] [bit] NULL,
	[AvailableOrWorkingDetails] [varchar](400) NULL,
	[IsInterestedInWorkProgram] [bit] NULL,
	[InterestedInWorkProgramDetails] [varchar](400) NULL,
	[IsContactKnownWithParent] [bit] NULL,
	[ContactId] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonCustodialReferralParent_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NonCustodialReferralParent_ModifiedDate]  DEFAULT (getdate()),
	[DeleteReasonId] [int] NULL CONSTRAINT [DF_NonCustodialReferralParent_IsDeleted]  DEFAULT ((0)),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NonCustodialReferralParent] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonParticipationReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonParticipationReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](5) NOT NULL,
	[Name] [varchar](250) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsSystemUseOnly] [bit] NOT NULL CONSTRAINT [DF_NonParticipationReason_IsSystemUseOnly]  DEFAULT ((0)),
	[EffectiveDate] [date] NOT NULL CONSTRAINT [DF_NonParticipationReason_EffectiveDate]  DEFAULT (CONVERT([date],getdate())),
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_NonParticipationReason_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NonParticipationReason_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_NonParticipationReason_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NonParticipationReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NonSelfDirectedActivity]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NonSelfDirectedActivity](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ActivityId] [int] NOT NULL,
	[BusinessName] [varchar](200) NULL,
	[CityId] [int] NULL,
	[PhoneNumber] [decimal](18, 0) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SelfDirectedActivity_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SelfDirectedActivity_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_SelfDirectedActivity_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[StreetAddress] [varchar](140) NULL,
	[ZipAddress] [varchar](9) NULL,
 CONSTRAINT [PK_SelfDirectedActivity] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[NRSType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[NRSType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](1000) NULL,
	[SortOrder] [int] NULL,
	[Rating] [varchar](10) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_NRSType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_NRSType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_NRSType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_NRSType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[OfficeTransfer]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[OfficeTransfer](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[ParticipantEnrolledProgramId] [int] NOT NULL,
	[SourceOfficeId] [int] NULL,
	[SourceAssignedWorkerId] [int] NULL,
	[DestinationOfficeId] [int] NULL,
	[DestinationAssignedWorkerId] [int] NULL,
	[TransferDate] [datetime] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_OfficeTransfer_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL CONSTRAINT [DF_OfficeTransfer_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_OfficeTransfer] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Organization]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Organization](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EntsecAgencyCode] [varchar](5) NULL,
	[AgencyName] [varchar](100) NULL,
	[DB2AgencyName] [varchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Organization_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Organization_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Organization_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[ActivatedDate] [date] NULL,
	[InActivatedDate] [date] NULL,
 CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_Organization_EntsecAgencyCode] UNIQUE NONCLUSTERED 
(
	[EntsecAgencyCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[OrganizationInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[OrganizationInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[OrganizationId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_OrganizationInformation_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_OrganizationInformation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_OrganizationInformation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_OrganizationInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[OrganizationLocation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[OrganizationLocation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OrganizationInformationId] [int] NOT NULL,
	[AddressLine1] [varchar](380) NOT NULL,
	[CityId] [int] NOT NULL,
	[ZipCode] [varchar](10) NOT NULL,
	[AddressVerificationTypeLookupId] [int] NOT NULL,
	[EffectiveDate] [date] NOT NULL,
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_OrganizationLocation_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_OrganizationLocation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_OrganizationLocation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_OrganizationLocation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[OtherDemographics]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[OtherDemographics](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[HomeLanguageId] [int] NULL,
	[IsInterpreterNeeded] [bit] NULL,
	[InterpreterDetails] [varchar](500) NULL,
	[IsRefugee] [bit] NULL,
	[RefugeeEntryDate] [datetime] NULL,
	[RefugeeEntryDateUnknown] [bit] NULL,
	[CountryOfOriginId] [int] NULL,
	[TribalIndicator] [bit] NULL,
	[TribalId] [int] NULL,
	[TribalDetails] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_OtherDemographics_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_OtherDemographics_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_OtherDemographics_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_OtherDemographics_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NULL,
 CONSTRAINT [PK_OtherDemographics] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[OtherJobInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[OtherJobInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ExpectedScheduleDetails] [varchar](1000) NULL,
	[JobSectorId] [int] NULL,
	[JobFoundMethodId] [int] NULL,
	[WorkerId] [varchar](120) NULL,
	[JobFoundMethodDetails] [varchar](500) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_OtherJobInformation_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_OtherJobInformation_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[WorkProgramId] [int] NULL,
 CONSTRAINT [PK_OtherJobInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Participant]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Participant](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[LastName] [varchar](50) NULL,
	[SuffixName] [char](3) NULL,
	[DateOfBirth] [date] NULL,
	[DateOfDeath] [date] NULL,
	[GenderIndicator] [char](1) NULL,
	[AliasResponse] [char](1) NULL,
	[LanguageCode] [char](1) NULL,
	[MaxHistorySequenceNumber] [smallint] NULL,
	[RaceCode] [char](1) NULL,
	[USCitizenSwitch] [char](1) NULL,
	[AmericanIndianIndicator] [char](1) NULL,
	[AsianIndicator] [char](1) NULL,
	[BlackIndicator] [char](1) NULL,
	[HispanicIndicator] [char](1) NULL,
	[PacificIslanderIndicator] [char](1) NULL,
	[WhiteIndicator] [char](1) NULL,
	[MCI_ID] [decimal](10, 0) NULL,
	[TribalMemberIndicator] [char](1) NULL,
	[TimeLimitStatus] [bit] NULL,
	[ConversionProjectDetails] [varchar](100) NULL,
	[ConversionDate] [datetime] NULL CONSTRAINT [DF_Participant_ConversionDate_1]  DEFAULT (getdate()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Participant_IsDeleted_1]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_Participant_CreatedDate_1]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_Participant_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Participant_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NULL,
	[HasBeenThroughClientReg] [bit] NULL,
 CONSTRAINT [PK_Participant] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Participant_PRE_Bkp]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Participant_PRE_Bkp](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleInitialName] [char](1) NULL,
	[LastName] [varchar](50) NULL,
	[SuffixName] [char](3) NULL,
	[DateOfBirth] [date] NULL,
	[DateOfDeath] [date] NULL,
	[GenderIndicator] [char](1) NULL,
	[AliasResponse] [char](1) NULL,
	[BirthVerificationCode] [char](2) NULL,
	[BirthPlaceCode] [char](2) NULL,
	[CitizenshipVerificationCode] [char](2) NULL,
	[DCLCitizenshipSwitch] [char](1) NULL,
	[DeathVerificationCode] [char](2) NULL,
	[LanguageCode] [char](1) NULL,
	[MaxHistorySequenceNumber] [smallint] NULL,
	[PrimarySSNNumber] [decimal](9, 0) NULL,
	[PseudoSSNNumber] [decimal](9, 0) NULL,
	[RaceCode] [char](1) NULL,
	[SSNAppointmentDate] [date] NULL,
	[SSNAppointmentVerificationCode] [char](2) NULL,
	[SSNValidatedCode] [char](2) NULL,
	[CaresUpdatedDate] [date] NULL,
	[USCitizenSwitch] [char](1) NULL,
	[WorkerAlert1Code] [char](2) NULL,
	[WorkerAlert2Code] [char](2) NULL,
	[MaidNumber] [decimal](10, 0) NULL,
	[ChildElsewhereSwitch] [char](1) NULL,
	[ChildVerificationCode] [char](2) NULL,
	[AmericanIndianIndicator] [char](1) NULL,
	[AsianIndicator] [char](1) NULL,
	[BlackIndicator] [char](1) NULL,
	[HispanicIndicator] [char](1) NULL,
	[PacificIslanderIndicator] [char](1) NULL,
	[WhiteIndicator] [char](1) NULL,
	[MCI_ID] [decimal](10, 0) NULL,
	[MACitizenVerificationCode] [char](2) NULL,
	[TribeChildMemberIndicator] [char](1) NULL,
	[TribeChildVerificationCode] [char](2) NULL,
	[TribalMemberIndicator] [char](1) NULL,
	[TribalMemberVerificationCode] [char](2) NULL,
	[DeathDateSourceCode] [char](2) NULL,
	[WorkerOverideVerificationCode] [char](2) NULL,
	[ConversionProjectDetails] [varchar](100) NULL,
	[ConversionDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NULL,
	[TimeLimitStatus] [bit] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[IsConfidentialCase] [bit] NULL,
	[AssignedWorker] [varchar](50) NULL,
	[OfficeNumber] [smallint] NULL,
	[AgencyCode] [varchar](5) NULL,
	[CountyNumber] [smallint] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ParticipantChildRelationshipBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ParticipantChildRelationshipBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[ChildId] [int] NULL,
	[RelationshipId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ParticipantChildrenRelationshipBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ParticipantContactInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ParticipantContactInfo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[CountyOfResidenceId] [int] NULL,
	[ZipCode] [varchar](10) NULL,
	[CityAddressId] [int] NULL,
	[HomelessIndicator] [bit] NULL,
	[IsHouseHoldMailingAddressSame] [bit] NULL,
	[AlternateMailingAddressId] [int] NULL,
	[PrimaryPhoneNumber] [varchar](10) NULL,
	[CanTextPrimaryPhone] [bit] NULL,
	[CanLeaveVoiceMailPrimaryPhone] [bit] NULL,
	[SecondaryPhoneNumber] [varchar](10) NULL,
	[CanTextSecondaryPhone] [bit] NULL,
	[CanLeaveVoiceMailSecondaryPhone] [bit] NULL,
	[EmailAddress] [varchar](250) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ParticpantContactInfo_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_ParticpantContactInfo_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_ParticpantContactInfo_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ParticpantContactInfo_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NULL,
	[StreetAddressPlaceId] [varchar](1024) NULL,
	[AddressLine1] [varchar](380) NULL,
	[AddressLine2] [varchar](380) NULL,
	[AddressVerificationTypeLookupId] [int] NULL,
 CONSTRAINT [PK_ParticpantContactInfo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ParticipantEnrolledProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ParticipantEnrolledProgram](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[EnrolledProgramId] [int] NULL,
	[EnrolledProgramStatusCodeId] [int] NULL,
	[ReferralDate] [date] NULL,
	[EnrollmentDate] [date] NULL,
	[DisenrollmentDate] [date] NULL,
	[CASENumber] [decimal](10, 0) NULL,
	[ReferralRegistrationCode] [char](1) NULL,
	[CurrentRegCode] [char](1) NULL,
	[AGSequenceNumber] [smallint] NULL,
	[CaseManagerId] [char](6) NULL,
	[WorkerId] [int] NULL,
	[CompletionReasonId] [int] NULL,
	[RequestForAssistanceId] [int] NULL,
	[OfficeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ParticipantEnrolledProgram_ModifiedDate_1]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL CONSTRAINT [DF_ParticipantEnrolledProgram_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
	[LFFEPId] [int] NULL,
 CONSTRAINT [PK_ParticipantEnrolledProgram] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ParticipationEntry]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ParticipationEntry](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[EPId] [int] NOT NULL,
	[ActivityId] [int] NOT NULL,
	[ParticipationDate] [date] NOT NULL,
	[ScheduledHours] [smallint] NOT NULL,
	[ReportedHours] [smallint] NULL,
	[TotalMakeupHours] [smallint] NULL,
	[ParticipatedHours] [smallint] NULL,
	[NonParticipatedHours] [smallint] NULL,
	[GoodCausedHours] [smallint] NULL,
	[NonParticipationReasonId] [int] NULL,
	[NonParticipationReasonDetails] [varchar](120) NULL,
	[GoodCauseGranted] [bit] NULL,
	[GoodCauseGrantedReasonId] [int] NULL,
	[GoodCauseDeniedReasonId] [int] NULL,
	[GoodCauseReasonDetails] [varchar](120) NULL,
	[PlacementTypeId] [int] NULL,
	[FormalAssessmentExists] [bit] NULL,
	[HoursSactionable] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ParticipationEntry_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ParticipationEntry_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_ParticipationEntry_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ParticipationEntry] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ParticipationMakeUpEntry]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ParticipationMakeUpEntry](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipationEntryId] [int] NOT NULL,
	[MakeupDate] [date] NOT NULL,
	[MakeupHours] [smallint] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ParticipationMakeUpEntry] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ParticipationStatus]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ParticipationStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[StatusId] [int] NULL,
	[BeginDate] [date] NULL,
	[EndDate] [date] NULL,
	[Details] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
	[IsCurrent] [bit] NULL,
	[EnrolledProgramId] [int] NULL,
 CONSTRAINT [PK_ParticipantProfileStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ParticipationStatusType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ParticipationStatusType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NULL,
	[Code] [varchar](2) NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
	[EffectiveDate] [date] NULL,
	[EndDate] [date] NULL,
 CONSTRAINT [PK_Status] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PCCTBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PCCTBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinCommentId] [int] NOT NULL,
	[CommentTypeId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PCCTBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_PCCTBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_PCCTBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PCCTBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PendingCharge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PendingCharge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LegalSectionId] [int] NULL,
	[ConvictionTypeID] [int] NULL,
	[ChargeDate] [datetime] NULL,
	[IsUnknown] [bit] NULL,
	[Details] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PendingCharge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PendingCharge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PendingCharge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PEP_PRE_Bkp]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PEP_PRE_Bkp](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[EnrolledProgramId] [int] NULL,
	[ReferralDate] [date] NULL,
	[CurrentRegCode] [char](1) NULL,
	[ModifiedDate] [datetime] NULL,
	[ModifiedBy] [varchar](50) NULL,
	[IsDeleted] [bit] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
	[EnrollmentDate] [date] NULL,
	[DisenrollmentDate] [date] NULL,
	[AGSequenceNumber] [smallint] NULL,
	[CaseManagerId] [char](6) NULL,
	[CASENumber] [decimal](10, 0) NULL,
	[ReferralRegistrationCode] [char](1) NULL,
	[WorkerId] [int] NULL,
	[EnrolledProgramStatusCodeId] [int] NULL,
	[CompletionReasonId] [int] NULL,
	[RequestForAssistanceId] [int] NULL,
	[OfficeId] [int] NULL,
	[LFFEPId] [int] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PEPOtherInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PEPOtherInformation](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PEPId] [int] NULL,
	[CompletionReasonDetails] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PEPOtherInformation_ModifiedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](50) NULL CONSTRAINT [DF_PEPOtherInformation_ModifiedBy]  DEFAULT (suser_sname()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PEPOtherInformation] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PhysicalHealthBarrierBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PhysicalHealthBarrierBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PhysicalHealthId] [int] NULL,
	[BarrierId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_PhysicalHealthBarrierBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PinComment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PinComment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[IsEdited] [bit] NOT NULL,
	[CommentText] [varchar](1000) NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PinComment_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_PinComments_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_PinComment_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_PinComment_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PinComment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PinCommentType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PinCommentType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[EffectiveDate] [date] NOT NULL,
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_CommentType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_CommentType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_CommentType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[SystemUseOnly] [bit] NOT NULL,
 CONSTRAINT [PK_CommentType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PlacementType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PlacementType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](5) NOT NULL,
	[Name] [varchar](250) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsSystemUseOnly] [bit] NOT NULL CONSTRAINT [DF_PlacementType_IsSystemUseOnly]  DEFAULT ((0)),
	[EffectiveDate] [date] NOT NULL CONSTRAINT [DF_PlacementType_EffectiveDate]  DEFAULT (CONVERT([date],getdate())),
	[EndDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PlacementType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PlacementType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_PlacementType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PlacementType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PolarLookup]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PolarLookup](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](3) NULL,
	[Name] [varchar](50) NULL,
 CONSTRAINT [PK_PolarLookup] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PopulationType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PopulationType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_PopulationType_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PopulationType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PopulationType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PopulationType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PopulationType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PostSecondaryCollege]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PostSecondaryCollege](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PostSecondaryEducationSectionId] [int] NOT NULL,
	[SchoolCollegeEstablishmentId] [int] NULL,
	[HasGraduated] [bit] NULL,
	[LastYearAttended] [int] NULL,
	[CurrentlyAttending] [bit] NULL,
	[Semesters] [int] NULL,
	[Credits] [decimal](18, 10) NULL,
	[Details] [varchar](1000) NULL,
	[OriginId] [int] NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PostSecondaryCollege_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PostSecondaryCollege_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PostSecondaryCollege_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PostSecondaryCollege] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PostSecondaryDegree]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PostSecondaryDegree](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PostSecondaryEducationSectionId] [int] NOT NULL,
	[Name] [varchar](200) NULL,
	[College] [varchar](200) NULL,
	[DegreeTypeId] [int] NULL,
	[YearAttained] [int] NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PostSecondaryDegree_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PostSecondaryDegree_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PostSecondaryDegree_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PostSecondaryDegree] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PostSecondaryEducationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PostSecondaryEducationAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PostSecondaryEducationAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PostSecondaryEducationAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PostSecondaryEducationAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PostSecondaryEducationAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PostSecondaryEducationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PostSecondaryEducationSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[DidAttendCollege] [bit] NULL,
	[IsWorkingOnLicensesOrCertificates] [bit] NULL,
	[DoesHaveDegrees] [bit] NULL,
	[Notes] [varchar](1000) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PostSecondaryEducationSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PostSecondaryEducationSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PostSecondaryEducationSection] PRIMARY KEY NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[PostSecondaryLicense]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[PostSecondaryLicense](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NULL,
	[Issuer] [varchar](200) NULL,
	[AttainedDate] [datetime] NULL,
	[ExpiredDate] [datetime] NULL,
	[IsInProgress] [bit] NULL,
	[DoesNotExpire] [bit] NULL,
	[ValidInWIPolarLookupId] [int] NULL,
	[LicenseTypeId] [int] NULL,
	[PostSecondaryEducationSectionId] [int] NOT NULL,
	[OriginId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_PostSecondaryLicense_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_PostSecondaryLicense_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_PostSecondaryLicense_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_PostSecondaryLicense] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RecentParticipant]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RecentParticipant](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WorkerId] [int] NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[LastAccessed] [datetime] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_RecentParticipant_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_RecentParticipant_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_RecentParticipant_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RecentParticipant] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[ReferralContactInterval]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[ReferralContactInterval](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_ReferralContactInterval_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_ReferralContactInterval_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_ReferralContactInterval_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_ReferralContactInterval] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Relationship]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Relationship](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RelationName] [varchar](100) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Relationship_ModifiedBy]  DEFAULT (suser_sname()),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Relationship_IsDeleted]  DEFAULT ((0)),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Relationship_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_Relationship] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RequestForAssistance]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RequestForAssistance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[RequestForAssistanceStatusId] [int] NOT NULL,
	[RequestForAssistanceStatusDate] [datetime] NULL,
	[RfaNumber] [decimal](12, 0) NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[CountyOfResidenceId] [int] NULL,
	[OfficeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_RequestForAssistance_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_RequestForAssistance_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_RequestForAssistance_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RequestForAssistance] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RequestForAssistance_Temp]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RequestForAssistance_Temp](
	[Id] [int] NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[RequestForAssistanceStatusId] [int] NOT NULL,
	[RequestForAssistanceStatusDate] [datetime] NULL,
	[RfaNumber] [decimal](10, 0) NULL,
	[EnrolledProgramId] [int] NOT NULL,
	[CountyOfResidenceId] [int] NULL,
	[TjTmjContractorId] [int] NULL,
	[TjTmjApplicationDate] [date] NULL,
	[TjTmjApplicationDueDate] [date] NULL,
	[TjTmjIsUnder18] [bit] NULL,
	[TjTmjHouseholdSizeId] [int] NULL,
	[TjTmjHouseholdIncome] [money] NULL,
	[TjTmjLastEmploymentDate] [date] NULL,
	[TjTmjHasWorkedLessThan16Hours] [bit] NULL,
	[TjTmjIsEligibleForUnemployment] [bit] NULL,
	[TjTmjIsReceivingW2Benefits] [bit] NULL,
	[TjTmjIsCitizen] [bit] NULL,
	[TjTmjHasWorked1040Hours] [bit] NULL,
	[TjTmjIsAppCompleteAndSigned] [bit] NULL,
	[TjTmjHasEligibilityBeenVerified] [bit] NULL,
	[TjTmjIsBenefitFromSubsidizedJob] [bit] NULL,
	[TjTmjBenefitFromSubsidizedJobDetails] [varchar](400) NULL,
	[CfCourtOrderedCountyId] [int] NULL,
	[CfCourtOrderEffectiveDate] [date] NULL,
	[OfficeId] [int] NULL,
	[IsEligible] [bit] NULL,
	[EligibilityCodes] [varchar](100) NULL,
	[PopulationTypeDetails] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
	[TjTmjHasNeverEmployed] [bit] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RequestForAssistanceChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RequestForAssistanceChild](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RequestForAssistanceId] [int] NOT NULL,
	[ChildId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_RequestForAssistanceChild_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_RequestForAssistanceChild_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_RequestForAssistanceChild_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RequestForAssistanceChild] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RequestForAssistancePopulationTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RequestForAssistancePopulationTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RequestForAssistanceId] [int] NULL,
	[PopulationTypeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_RequestForAssistancePopulationTypeBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NOT NULL CONSTRAINT [DF_RequestForAssistancePopulationTypeBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_RequestForAssistancePopulationTypeBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RequestForAssistancePopulationTypeBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RequestForAssistanceRuleReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RequestForAssistanceRuleReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RequestForAssistanceId] [int] NOT NULL,
	[RuleReasonId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NOT NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RequestForAssistanceRuleReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RequestForAssistanceStatus]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RequestForAssistanceStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_RequestForAssistanceStatus_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_RequestForAssistanceStatus_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_RequestForAssistanceStatus_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RequestForAssistanceStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[RuleReason]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[RuleReason](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Category] [varchar](10) NULL,
	[SubCategory] [varchar](15) NULL,
	[Code] [varchar](10) NULL,
	[Name] [varchar](350) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_RuleCode_SortOrder]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_RuleCode_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_RuleCode_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_RuleCode_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_RuleReason] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SchoolCollegeEstablishment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SchoolCollegeEstablishment](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](200) NULL,
	[Street] [varchar](100) NULL,
	[CityId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SchoolCollegeEstablishment_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_SchoolCollegeEstablishment_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_SchoolCollegeEstablishment] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SchoolGradeLevel]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SchoolGradeLevel](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[Grade] [int] NULL,
	[Name] [varchar](50) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SchoolGradeLevel_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_SchoolGradeLevel_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SchoolGradeLevel_IsDeleted]  DEFAULT ((0)),
 CONSTRAINT [PK_SchoolGradeLevel] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SchoolGraduationStatus]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SchoolGraduationStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[SortOrder] [int] NULL,
	[Name] [varchar](50) NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SchoolGraduationStatus_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_SchoolGraduationStatus_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SchoolGraduationStatus_IsDeleted]  DEFAULT ((0)),
 CONSTRAINT [PK_SchoolGraduationStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_CaseAddressReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_CaseAddressReturnType](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CASE_NUM] [decimal](10, 0) NOT NULL,
	[LINE_1_ADDRESS] [varchar](200) NULL,
	[LINE_2_ADDRESS] [varchar](200) NULL,
	[CITY_ADR] [varchar](50) NULL,
	[STATE_ADR] [varchar](10) NULL,
	[ZIP_ADR] [varchar](10) NULL,
	[COUNTY_NUM] [smallint] NULL,
 CONSTRAINT [PK_SP_CaseAddressReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_CwwReferredParticipantReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_CwwReferredParticipantReturnType](
	[ID] [bigint] NOT NULL,
	[PinNumber] [decimal](10, 0) NOT NULL,
	[FirstName] [varchar](50) NULL,
	[MiddleInitialName] [varchar](1) NULL,
	[LastName] [varchar](50) NULL,
	[DOBDate] [date] NULL,
	[SuffixName] [varchar](3) NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[ReferralStatus] [varchar](50) NULL,
	[WPReferralDate] [date] NULL,
	[ProgramCode] [varchar](50) NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ConfidentialSwitch] [bit] NULL,
	[MFConfidentialWorker] [varchar](6) NULL,
	[WorkerFirstName] [varchar](50) NULL,
	[WorkerMiddleInitial] [varchar](1) NULL,
	[WorkerLastName] [varchar](50) NULL,
 CONSTRAINT [PK_[SP_CwwReferredParticipantReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_DB2_Disenrollment_Parameters]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_DB2_Disenrollment_Parameters](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[EffectiveDate] [date] NULL,
	[CountyNumber] [smallint] NULL,
	[OfficeNumber] [smallint] NULL,
	[MFWorkerId] [varchar](6) NULL,
	[ProgramCode] [varchar](3) NULL,
	[SubProgramCode] [varchar](1) NULL,
	[RegistrationCode] [varchar](1) NULL,
	[CompletionReason] [varchar](2) NULL,
	[AnyOtherProgramOpen] [varchar](1) NULL,
	[SchemaName] [varchar](20) NULL,
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_Test_ModifiedDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Ethnicity] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_DeleteContactReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [wwp].[SP_DeleteContactReturnType](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[Return_Value] [int] NULL,
 CONSTRAINT [PK_SP_DeleteContactReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [wwp].[SP_FSETStatusReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_FSETStatusReturnType](
	[ID] [bigint] NOT NULL,
	[CURRENT_STATUS_CD] [varchar](50) NULL,
	[ENROLLMENT_DATE] [date] NULL,
	[DISENROLLMENT_DATE] [date] NULL,
	[DISENROLLMENT_REASON_CD] [varchar](50) NULL,
 CONSTRAINT [PK_SP_FSETStatusReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_LearnfareStatusReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_LearnfareStatusReturnType](
	[ID] [bigint] NOT NULL,
	[FIRST_NAM] [varchar](50) NULL,
	[LAST_NAM] [varchar](50) NULL,
	[MIDDLE_INITIAL_NAM] [varchar](50) NULL,
	[DOB_DT] [date] NULL,
	[LEARN_FARE_STATUS] [varchar](50) NULL,
 CONSTRAINT [PK_SP_LearnfareStatusReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_ParticipantDetailsReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_ParticipantDetailsReturnType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[FirstName] [varchar](15) NULL,
	[MiddleInitialName] [char](1) NULL,
	[LastName] [varchar](20) NULL,
	[SuffixName] [char](3) NULL,
	[DateOfBirth] [date] NULL,
	[Age] [int] NULL,
	[GenderIndicator] [char](1) NULL,
	[AmericanIndian] [bit] NULL,
	[Asian] [bit] NULL,
	[Black] [bit] NULL,
	[PacificIslander] [bit] NULL,
	[White] [bit] NULL,
	[Hispanic] [bit] NULL,
	[EnrolledProgramId] [int] NULL,
	[EnrolledProgramStatusCodeId] [int] NULL,
	[OfficeNumber] [smallint] NULL,
	[CountyNumber] [smallint] NULL,
	[CaseNumber] [decimal](10, 0) NULL,
	[RefugeeStatusCode] [varchar](2) NULL,
	[RefugeeEntryDate] [date] NULL,
	[CountryOfOrigin] [varchar](50) NULL,
	[LivingArrangement] [varchar](200) NULL,
	[AddressLine1] [varchar](200) NULL,
	[AddressLine2] [varchar](100) NULL,
	[City] [varchar](50) NULL,
	[State] [varchar](50) NULL,
	[ZipCode] [varchar](50) NULL,
	[PhoneNumber] [varchar](10) NULL,
	[AlternateAddressLine1] [varchar](200) NULL,
	[AlternateAddressLine2] [varchar](100) NULL,
	[AlternateCity] [varchar](50) NULL,
	[AlternateState] [varchar](50) NULL,
	[AlternateZipCode] [varchar](10) NULL,
	[AlternatePhoneNumber] [varchar](10) NULL,
	[EmailAddress] [varchar](100) NULL,
	[MFWorkerId] [varchar](6) NULL,
	[PlacementCode] [varchar](50) NULL,
	[DaysInPlacement] [int] NULL,
	[StateLifeTimeLimit] [varchar](3) NULL,
	[EPReviewDueDate] [date] NULL,
	[TwoParentStatus] [bit] NULL,
	[LearnFareStatus] [varchar](100) NULL,
	[ProgramCode] [varchar](3) NULL,
	[SubProgramCode] [varchar](1) NULL,
	[AGStatusCode] [varchar](1) NULL,
	[AGSequenceNumber] [smallint] NULL,
	[EligibilityBeginDate] [date] NULL,
	[EligibilityEndDate] [date] NULL,
	[ReviewDueDate] [date] NULL,
	[PaymentBeginDate] [date] NULL,
	[PaymentEndDate] [date] NULL,
	[AGFailureReasonCode1] [varchar](65) NULL,
	[AGFailureReasonCode2] [varchar](65) NULL,
	[AGFailureReasonCode3] [varchar](65) NULL,
	[FSAgOpen] [bit] NULL,
	[MAAgOpen] [bit] NULL,
	[FPWAgOpen] [bit] NULL,
	[CCAgOpen] [bit] NULL,
	[OtherPersonPinNumber1] [decimal](10, 0) NULL,
	[OtherPersonFirstName1] [varchar](50) NULL,
	[OtherPersonLastName1] [varchar](50) NULL,
	[OtherPersonDOB1] [date] NULL,
	[Relationship1] [varchar](50) NULL,
	[OtherPersonAge1] [int] NULL,
	[OtherPersonPinNumber2] [decimal](10, 0) NULL,
	[OtherPersonFirstName2] [varchar](50) NULL,
	[OtherPersonLastName2] [varchar](50) NULL,
	[OtherPersonDOB2] [date] NULL,
	[Relationship2] [varchar](50) NULL,
	[OtherPersonAge2] [int] NULL,
	[OtherPersonPinNumber3] [decimal](10, 0) NULL,
	[OtherPersonFirstName3] [varchar](50) NULL,
	[OtherPersonLastName3] [varchar](50) NULL,
	[OtherPersonDOB3] [date] NULL,
	[Relationship3] [varchar](50) NULL,
	[OtherPersonAge3] [int] NULL,
	[OtherPersonPinNumber4] [decimal](10, 0) NULL,
	[OtherPersonFirstName4] [varchar](50) NULL,
	[OtherPersonLastName4] [varchar](50) NULL,
	[OtherPersonDOB4] [date] NULL,
	[Relationship4] [varchar](50) NULL,
	[OtherPersonAge4] [int] NULL,
	[OtherPersonPinNumber5] [decimal](10, 0) NULL,
	[OtherPersonFirstName5] [varchar](50) NULL,
	[OtherPersonLastName5] [varchar](50) NULL,
	[OtherPersonDOB5] [date] NULL,
	[Relationship5] [varchar](50) NULL,
	[OtherPersonAge5] [int] NULL,
	[OtherPersonPinNumber6] [decimal](10, 0) NULL,
	[OtherPersonFirstName6] [varchar](50) NULL,
	[OtherPersonLastName6] [varchar](50) NULL,
	[OtherPersonDOB6] [date] NULL,
	[Relationship6] [varchar](50) NULL,
	[OtherPersonAge6] [int] NULL,
	[MoreThanSixIndv] [bit] NULL,
	[FSETStatus] [varchar](15) NULL,
	[ChildSupportStatus] [bit] NULL,
	[SourceCountyNumber] [smallint] NULL,
	[DestinationCountyNumber] [smallint] NULL,
	[SourceWPOfficeNumber] [smallint] NULL,
	[DestinationWPOfficeNumber] [smallint] NULL,
	[OfficeOutOfSyncIndicator] [bit] NULL,
	[OldFepId] [varchar](10) NULL,
	[NewFepId] [varchar](10) NULL,
	[FepOutOfSync] [bit] NULL,
	[TransferWorker] [varchar](10) NULL,
	[TransferDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_ParticpantsChildrenReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_ParticpantsChildrenReturnType](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[SOURCE_PIN_NUM] [decimal](18, 0) NOT NULL,
	[FIRST_NAM] [varchar](50) NULL,
	[LAST_NAM] [varchar](50) NULL,
	[MIDDLE_INITIAL_NAM] [varchar](50) NULL,
	[DOB_DT] [date] NULL,
	[DEATH_DT] [date] NULL,
	[GENDER] [varchar](10) NULL,
	[RELATIONSHIP] [varchar](50) NULL,
	[AGE] [int] NULL,
 CONSTRAINT [PK_SP_ParticpantsChildrenReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_RentPaidReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_RentPaidReturnType](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[SHELTER_PAY_AMT] [decimal](7, 2) NULL,
	[SHELTER_TYPE_CD] [varchar](50) NOT NULL,
 CONSTRAINT [PK_SP_RentPaidReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_SocialSecurityStatusReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_SocialSecurityStatusReturnType](
	[ID] [bigint] NOT NULL,
	[PARTICIPANT] [decimal](10, 0) NULL,
	[FIRST_NAM] [varchar](30) NULL,
	[MIDDLE_INITIAL_NAM] [varchar](2) NULL,
	[LAST_NAM] [varchar](30) NULL,
	[DOB_DT] [date] NULL,
	[REL_CD] [varchar](30) NULL,
	[AGE] [varchar](3) NULL,
	[FED_SSI] [varchar](1) NULL,
	[STATE_SSI] [varchar](1) NULL,
	[SSA] [varchar](1) NULL,
 CONSTRAINT [PK_SP_SocialSecurityStatusReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SP_SubsidizedHousingReturnType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SP_SubsidizedHousingReturnType](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[CASE_NUM] [decimal](10, 0) NOT NULL,
	[SUBSD_HSE_TEXT] [varchar](50) NULL,
	[SUBSD_HSE_CD] [varchar](10) NULL,
	[EFF_BEGIN_MM] [decimal](6, 0) NULL,
	[EFF_END_MM] [decimal](6, 0) NULL,
 CONSTRAINT [PK_SP_SubsidizedHousingReturnType] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SpecialInitiative]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SpecialInitiative](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParameterName] [varchar](25) NULL,
	[ParameterValue] [varchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF__SpecialIn__IsDel__7BD380F3]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF__SpecialIn__Modif__7CC7A52C]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF__SpecialIn__Modif__7DBBC965]  DEFAULT (getdate()),
 CONSTRAINT [PK_SpecialInitiative] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_SpecialInitiative] UNIQUE NONCLUSTERED 
(
	[ParameterName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SPLType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SPLType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](1000) NULL,
	[Rating] [varchar](10) NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SPLType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SPLType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_SPLType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_SPLType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SSNType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SSNType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[IsDetailsRequired] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SSNType_IsDeleted]  DEFAULT ((0)),
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_SSNType_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_SSNType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_SSNType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NULL,
 CONSTRAINT [PK_SSNType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[State]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[State](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NULL,
	[Code] [nvarchar](100) NULL,
	[CountryId] [int] NULL,
	[IsNonStandard] [bit] NOT NULL CONSTRAINT [DF_State_IsGoogleCreated]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_State_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_State_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_State] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SuffixType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SuffixType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NULL,
	[Code] [nvarchar](100) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SuffixType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SuffixType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_SuffixType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[SortOrder] [int] NULL,
 CONSTRAINT [PK_SuffixType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SupportiveService]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SupportiveService](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[EmployabilityPlanId] [int] NOT NULL,
	[SupportiveServiceTypeId] [int] NOT NULL,
	[Details] [varchar](500) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SupportiveService_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SupportiveService_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_SupportiveService_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_SupportiveService] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[SupportiveServiceType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[SupportiveServiceType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_SupportiveServiceType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_SupportiveServiceType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_SupportiveServiceType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_SupportiveServiceType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Symptom]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Symptom](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_Symptom_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Symptom_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_Symptom] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[T0018_TEMP]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [wwp].[T0018_TEMP](
	[PIN_NUM] [decimal](10, 0) NULL,
	[PIN_ID] [smallint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [wwp].[T0164_WP_IN_WKR_HI]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[T0164_WP_IN_WKR_HI](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PIN_NUM] [decimal](10, 0) NOT NULL,
	[EMPLOYER_SEQ_NUM] [smallint] NOT NULL,
	[HISTORY_SEQ_NUM] [smallint] NOT NULL,
	[AVG_WK_HRS] [smallint] NOT NULL,
	[CRE_TMS] [datetime2](7) NOT NULL,
	[DEL_IND] [char](1) NOT NULL,
	[DURATION_EMP_IND] [char](1) NOT NULL,
	[EE_IND] [char](1) NOT NULL,
	[EMP_CITY_ADR] [char](15) NOT NULL,
	[EMP_LINE_1_ADR] [char](30) NOT NULL,
	[EMP_LINE_2_ADR] [char](30) NOT NULL,
	[EMP_STATE_ADR] [char](2) NOT NULL,
	[EMP_TYPE_CD] [char](2) NOT NULL,
	[EMP_ZIP_ADR] [char](9) NOT NULL,
	[EMPLOYER_NAM] [char](30) NOT NULL,
	[EMPLOYMENT_BEG_DT] [date] NOT NULL,
	[EMPLOYMENT_END_DT] [date] NOT NULL,
	[HISTORY_CD] [smallint] NOT NULL,
	[HOURLY_WAGE_AMT] [decimal](5, 2) NOT NULL,
	[JOB_CD] [char](3) NOT NULL,
	[JOB_DUTIES_1_TXT] [char](35) NOT NULL,
	[JOB_DUTIES_2_TXT] [char](35) NOT NULL,
	[JOB_DUTIES_3_TXT] [char](35) NOT NULL,
	[MEDICAL_BEN_IND] [char](1) NOT NULL,
	[OFFICE_NUM] [smallint] NOT NULL,
	[OT_BEN_CD] [char](2) NOT NULL,
	[PAY_CD] [char](2) NOT NULL,
	[PROVIDER_ID] [smallint] NOT NULL,
	[STAFF_ID] [char](6) NOT NULL,
	[UPDT_TMS] [datetime2](7) NOT NULL,
	[USER_ID] [char](6) NOT NULL,
	[WORK_LEFT_CD] [char](2) NOT NULL,
	[HRS_OR_WAGE_CHG_DT] [date] NOT NULL,
	[JOB_TYP] [char](1) NOT NULL,
	[RES_MILW_ITIV_IND] [char](1) NOT NULL,
 CONSTRAINT [PK_T0164_WP_IN_WKR_HI] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[T0459_IN_W2_LIMITS]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[T0459_IN_W2_LIMITS](
	[PIN_NUM] [decimal](10, 0) NOT NULL,
	[BENEFIT_MM] [decimal](6, 0) NOT NULL,
	[HISTORY_SEQ_NUM] [smallint] NOT NULL,
	[CLOCK_TYPE_CD] [varchar](4) NOT NULL,
	[CRE_TRAN_CD] [char](8) NOT NULL,
	[FED_CLOCK_IND] [char](1) NOT NULL,
	[FED_CMP_MTH_NUM] [smallint] NOT NULL,
	[FED_MAX_MTH_NUM] [smallint] NOT NULL,
	[HISTORY_CD] [smallint] NOT NULL,
	[OT_CMP_MTH_NUM] [smallint] NOT NULL,
	[OVERRIDE_REASON_CD] [char](3) NOT NULL,
	[TOT_CMP_MTH_NUM] [smallint] NOT NULL,
	[TOT_MAX_MTH_NUM] [smallint] NOT NULL,
	[UPDATED_DT] [date] NOT NULL,
	[USER_ID] [char](6) NOT NULL,
	[WW_CMP_MTH_NUM] [smallint] NOT NULL,
	[WW_MAX_MTH_NUM] [smallint] NOT NULL,
	[COMMENT_TXT] [varchar](75) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_T0459_IN_W2_LIMITS] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[T0459_IN_W2_LIMITS_COMPARE]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[T0459_IN_W2_LIMITS_COMPARE](
	[PIN_NUM] [decimal](10, 0) NOT NULL,
	[BENEFIT_MM] [decimal](6, 0) NOT NULL,
	[HISTORY_SEQ_NUM] [smallint] NOT NULL,
	[CLOCK_TYPE_CD] [char](4) NOT NULL,
	[CRE_TRAN_CD] [char](8) NOT NULL,
	[FED_CLOCK_IND] [char](1) NOT NULL,
	[FED_CMP_MTH_NUM] [smallint] NOT NULL,
	[FED_MAX_MTH_NUM] [smallint] NOT NULL,
	[HISTORY_CD] [smallint] NOT NULL,
	[OT_CMP_MTH_NUM] [smallint] NOT NULL,
	[OVERRIDE_REASON_CD] [char](3) NOT NULL,
	[TOT_CMP_MTH_NUM] [smallint] NOT NULL,
	[TOT_MAX_MTH_NUM] [smallint] NOT NULL,
	[UPDATED_DT] [date] NOT NULL,
	[USER_ID] [char](6) NOT NULL,
	[WW_CMP_MTH_NUM] [smallint] NOT NULL,
	[WW_MAX_MTH_NUM] [smallint] NOT NULL,
	[COMMENT_TXT] [varchar](75) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_T0459_IN_W2_LIMITS_COMPARE] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[T0459_IN_W2_LIMITS_SEP]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[T0459_IN_W2_LIMITS_SEP](
	[PIN_NUM] [decimal](10, 0) NOT NULL,
	[BENEFIT_MM] [decimal](6, 0) NOT NULL,
	[HISTORY_SEQ_NUM] [smallint] NOT NULL,
	[CLOCK_TYPE_CD] [char](4) NOT NULL,
	[CRE_TRAN_CD] [char](8) NOT NULL,
	[FED_CLOCK_IND] [char](1) NOT NULL,
	[FED_CMP_MTH_NUM] [smallint] NOT NULL,
	[FED_MAX_MTH_NUM] [smallint] NOT NULL,
	[HISTORY_CD] [smallint] NOT NULL,
	[OT_CMP_MTH_NUM] [smallint] NOT NULL,
	[OVERRIDE_REASON_CD] [char](3) NOT NULL,
	[TOT_CMP_MTH_NUM] [smallint] NOT NULL,
	[TOT_MAX_MTH_NUM] [smallint] NOT NULL,
	[UPDATED_DT] [date] NOT NULL,
	[USER_ID] [char](6) NOT NULL,
	[WW_CMP_MTH_NUM] [smallint] NOT NULL,
	[WW_MAX_MTH_NUM] [smallint] NOT NULL,
	[COMMENT_TXT] [varchar](75) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_T0459_IN_W2_LIMITS_SEP] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[T0460_IN_W2_EXT]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[T0460_IN_W2_EXT](
	[PIN_NUM] [decimal](10, 0) NOT NULL,
	[CLOCK_TYPE_CD] [char](4) NOT NULL,
	[EXT_SEQ_NUM] [smallint] NOT NULL,
	[HISTORY_SEQ_NUM] [smallint] NOT NULL,
	[AGY_DCSN_CD] [char](3) NOT NULL,
	[AGY_DCSN_DT] [date] NOT NULL,
	[BENEFIT_MM] [decimal](6, 0) NOT NULL,
	[DELETE_REASON_CD] [char](2) NOT NULL,
	[EXT_BEG_MM] [decimal](6, 0) NOT NULL,
	[EXT_END_MM] [decimal](6, 0) NOT NULL,
	[EXT_REQ_PRC_DT] [date] NOT NULL,
	[HISTORY_CD] [smallint] NOT NULL,
	[STA_DCSN_CD] [char](4) NOT NULL,
	[UPDATED_DT] [date] NOT NULL,
	[USER_ID] [char](6) NOT NULL,
	[Id] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_T0460_IN_W2_EXT] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TEMPPIN_PRE_Bkp]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TEMPPIN_PRE_Bkp](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PinNumber] [decimal](10, 0) NULL,
	[PROGRAM] [varchar](20) NULL,
	[PGSTATUS] [varchar](20) NULL,
	[NOTES] [varchar](50) NULL,
	[COUNTYNUMBER] [smallint] NULL,
	[OFFICENUMBER] [smallint] NULL,
	[CASENumber] [decimal](10, 0) NULL,
	[CASEManagerID] [char](6) NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TimeLimit]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TimeLimit](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantID] [int] NULL,
	[EffectiveMonth] [datetime] NULL,
	[TimeLimitTypeId] [int] NULL,
	[TwentyFourMonthLimit] [bit] NULL,
	[StateTimelimit] [bit] NULL,
	[FederalTimeLimit] [bit] NULL,
	[StateId] [int] NULL,
	[ChangeReasonId] [int] NULL,
	[ChangeReasonDetails] [varchar](1000) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_TimeLimit_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TimeLimit_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[PIN_NUM] [decimal](10, 0) NULL,
 CONSTRAINT [PK_TimeLimit_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TimelimitClosureLog]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TimelimitClosureLog](
	[Id] [int] NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[TargetDate] [datetime] NOT NULL,
	[MaxedTimelimitTypes] [int] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_TimelimitClosureLog_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL,
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TimelimitClosureLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TimeLimitExtension]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TimeLimitExtension](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[ExtensionDecisionId] [int] NULL,
	[TimeLimitTypeId] [int] NULL,
	[DecisionDate] [datetime] NULL,
	[InitialDiscussionDate] [datetime] NULL,
	[ApprovalReasonId] [int] NULL,
	[DenialReasonId] [int] NULL,
	[Details] [varchar](1000) NULL,
	[IsPendingDVR] [bit] NULL,
	[IsReceivingDVR] [bit] NULL,
	[IsPendingSSIorSSDI] [bit] NULL,
	[BeginMonth] [datetime] NULL,
	[EndMonth] [datetime] NULL,
	[ExtensionSequence] [int] NULL,
	[IsBackDatedExtenstion] [int] NULL,
	[DeleteReasonId] [int] NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_TimeLimitExtension_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TimeLimitExtension_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[PIN_NUM] [decimal](10, 0) NULL,
 CONSTRAINT [PK_TimeLimitExtension_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TimeLimitState]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TimeLimitState](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](100) NULL,
	[Name] [varchar](100) NULL,
	[CountryId] [int] NULL,
	[ModifiedBy] [varchar](50) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TimeLimitState_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_TimeLimitState] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TimeLimitSummary]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TimeLimitSummary](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NULL,
	[FederalUsed] [int] NULL,
	[FederalMax] [int] NULL,
	[StateUsed] [int] NULL,
	[StateMax] [int] NULL,
	[CSJUsed] [int] NULL,
	[CSJMax] [int] NULL,
	[W2TUsed] [int] NULL,
	[W2TMax] [int] NULL,
	[TMPUsed] [int] NULL,
	[TNPUsed] [int] NULL,
	[TempUsed] [int] NULL,
	[TempMax] [int] NULL,
	[CMCUsed] [int] NULL,
	[CMCMax] [int] NULL,
	[OPCUsed] [int] NULL,
	[OPCMax] [int] NULL,
	[OtherUsed] [int] NULL,
	[OtherMax] [int] NULL,
	[OTF] [int] NULL,
	[Tribal] [int] NULL,
	[TJB] [int] NULL,
	[JOBS] [int] NULL,
	[NO24] [int] NULL,
	[FactDetails] [nvarchar](4000) NULL,
	[CSJExtensionDue] [bit] NULL,
	[W2TExtensionDue] [bit] NULL,
	[TempExtensionDue] [bit] NULL,
	[StateExtensionDue] [bit] NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_TimeLimitSummary_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TimeLimitSummary_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TimeLimitSummary] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TimeLimitType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TimeLimitType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](250) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedDate] [datetime] NULL CONSTRAINT [DF_TimeLimitType_CreatedDate]  DEFAULT (getdate()),
	[ModifiedBy] [varchar](100) NOT NULL,
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TimeLimitType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TimeLimitType_1] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TJTMJRfaDetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TJTMJRfaDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RequestForAssistanceId] [int] NULL,
	[ContractorId] [int] NULL,
	[ApplicationDate] [date] NULL,
	[ApplicationDueDate] [date] NULL,
	[IsUnder18] [bit] NULL,
	[HouseholdSizeId] [int] NULL,
	[HouseholdIncome] [money] NULL,
	[LastEmploymentDate] [date] NULL,
	[HasWorkedLessThan16Hours] [bit] NULL,
	[IsEligibleForUnemployment] [bit] NULL,
	[IsReceivingW2Benefits] [bit] NULL,
	[IsCitizen] [bit] NULL,
	[HasWorked1040Hours] [bit] NULL,
	[IsAppCompleteAndSigned] [bit] NULL,
	[HasEligibilityBeenVerified] [bit] NULL,
	[IsBenefitFromSubsidizedJob] [bit] NULL,
	[BenefitFromSubsidizedJobDetails] [varchar](400) NULL,
	[IsEligible] [bit] NULL,
	[PopulationTypeDetails] [varchar](500) NULL,
	[HasNeverEmployed] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_TJTMJRfaDetails_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_TJTMJRfaDetails_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TJTMJRfaDetails_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TJTMJRfaDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TransportationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TransportationAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[ActionDetails] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_TransportationAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_TransportationAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TransportationAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TransportationAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TransportationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TransportationSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[TransporationDetails] [varchar](400) NULL,
	[IsVehicleInsuredId] [int] NULL,
	[VehicleInsuredDetails] [varchar](400) NULL,
	[IsVehicleRegistrationCurrentId] [int] NULL,
	[VehicleRegistrationCurrentDetails] [varchar](400) NULL,
	[HasValidDrivingLicense] [bit] NULL,
	[DriversLicenseStateId] [int] NULL,
	[DriversLicenseExpirationDate] [date] NULL,
	[DriversLicenseDetails] [varchar](400) NULL,
	[DriversLicenseInvalidReasonId] [int] NULL,
	[DriversLicenseInvalidDetails] [varchar](400) NULL,
	[HadCommercialDriversLicense] [bit] NULL,
	[IsCommercialDriversLicenseActive] [bit] NULL,
	[CommercialDriversLicenseDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_TransportationSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_TransportationSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TransportationSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TransportationSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TransportationSectionMethodBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TransportationSectionMethodBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TransportationSectionId] [int] NOT NULL,
	[TransporationTypeId] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_TransportationSectionMethodBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_TransportationSectionMethodBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TransportationSectionMethodBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_TransportationSectionMethodBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[TransportationType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[TransportationType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_TransportationType_SortOrder]  DEFAULT ((0)),
	[DisablesOthersFlag] [bit] NOT NULL CONSTRAINT [DF_TransportationType_DisablesOthersFlag]  DEFAULT ((0)),
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_TransportationType_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_TransportationType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_TransportationType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[RequiresInsurance] [bit] NULL,
	[RequiresCurrentRegistration] [bit] NULL,
 CONSTRAINT [PK_TransportationType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WageAction]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WageAction](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[ActionType] [varchar](100) NULL,
	[IsRequired] [bit] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_JobAction_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_JobAction_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_JobAction] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WageHour]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WageHour](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CurrentEffectiveDate] [date] NULL,
	[CurrentPayTypeDetails] [varchar](1000) NULL,
	[CurrentAverageWeeklyHours] [decimal](3, 0) NULL,
	[CurrentPayRate] [decimal](7, 2) NULL,
	[CurrentPayRateIntervalId] [int] NULL,
	[CurrentHourlySubsidyRate] [decimal](7, 2) NULL,
	[PastBeginPayRate] [decimal](7, 2) NULL,
	[PastBeginPayRateIntervalId] [int] NULL,
	[PastEndPayRateIntervalId] [int] NULL,
	[PastEndPayRate] [decimal](7, 2) NULL,
	[IsUnchangedPastPayRateIndicator] [bit] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WageHour_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WageHour_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[ComputedCurrentWageRateUnit] [varchar](50) NULL,
	[ComputedCurrentWageRateValue] [decimal](7, 2) NULL,
	[ComputedPastEndWageRateUnit] [varchar](50) NULL,
	[ComputedPastEndWageRateValue] [decimal](7, 2) NULL,
 CONSTRAINT [PK_WageHour] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WageHourHistory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WageHourHistory](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WageHourId] [int] NULL,
	[HourlySubsidyRate] [decimal](7, 2) NULL,
	[EffectiveDate] [date] NULL,
	[PayTypeDetails] [varchar](1000) NULL,
	[AverageWeeklyHours] [decimal](3, 0) NULL,
	[PayRate] [decimal](7, 2) NULL,
	[PayRateIntervalId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WageHourHistory_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WageHourHistory_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[ComputedWageRateUnit] [varchar](50) NULL,
	[ComputedWageRateValue] [decimal](7, 2) NULL,
 CONSTRAINT [PK_WageHourHistory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WageHourHistoryWageTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WageHourHistoryWageTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WageHourHistoryId] [int] NULL,
	[WageTypeId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WageHourHistoryJobActionBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WageHourHistoryJobActionBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_WageHourHistoryJobActionBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WageHourWageTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WageHourWageTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WageHourId] [int] NULL,
	[SortOrder] [int] NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WageHourJobActionBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WageHourJobActionBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[WageTypeId] [int] NULL,
 CONSTRAINT [PK_WageHourJobActionBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WageType]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WageType](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[DisablesOthersFlag] [bit] NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WageType_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WageType_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WageType] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WebPerformance]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WebPerformance](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MethodName] [varchar](50) NOT NULL,
	[StartTime] [datetime2](7) NOT NULL,
	[StopTime] [datetime2](7) NOT NULL,
	[Elapsed] [time](7) NOT NULL,
	[Cached] [int] NOT NULL CONSTRAINT [DF_wwp.WebPerformance_Cached]  DEFAULT ((0)),
	[Web] [int] NOT NULL CONSTRAINT [DF_wwp.WebPerformance_Web]  DEFAULT ((0)),
	[Retries] [int] NOT NULL CONSTRAINT [DF_wwp.WebPerformance_Retries]  DEFAULT ((0)),
	[Total] [int] NOT NULL CONSTRAINT [DF_wwp.WebPerformance_Total]  DEFAULT ((0)),
	[UserId] [varchar](20) NOT NULL,
 CONSTRAINT [PK_WebPerformance] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WebServiceMessage]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WebServiceMessage](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MsgId] [uniqueidentifier] NOT NULL,
	[MsgDateTime] [datetime2](7) NOT NULL,
	[MsgEndpoint] [varchar](75) NOT NULL,
	[MsgOperation] [varchar](75) NULL,
	[MsgDirection] [char](1) NOT NULL,
	[MsgXml] [varchar](4000) NOT NULL,
	[MsgLocalDateTime] [datetime2](7) NULL,
 CONSTRAINT [PK_WebServiceMessage] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[Worker]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[Worker](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WAMSId] [varchar](50) NOT NULL,
	[MFUserId] [varchar](6) NULL,
	[FirstName] [varchar](50) NULL,
	[LastName] [varchar](50) NULL,
	[MiddleInitial] [varchar](1) NULL,
	[SuffixName] [varchar](3) NULL,
	[Roles] [varchar](100) NULL,
	[WorkerActiveStatusCode] [varchar](50) NULL,
	[LastLogin] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Worker_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_Worker_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_Worker_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[OrganizationId] [int] NULL,
	[WIUID] [varchar](25) NULL,
 CONSTRAINT [PK_WorkerDetail] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkerContactInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkerContactInfo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WorkerId] [int] NOT NULL,
	[PhoneNumber] [decimal](10, 0) NOT NULL,
	[Email] [varchar](120) NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkerContactInfo_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkerContactInfo_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NOT NULL CONSTRAINT [DF_WorkerContactInfo_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WorkerContactInfo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkerParticipantBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [wwp].[WorkerParticipantBridge](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[WorkerId] [int] NULL,
	[ParticipantId] [int] NULL,
 CONSTRAINT [PK_WorkerParticipantBridge] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [wwp].[WorkHistoryAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkHistoryAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkHistoryAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkHistoryAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WorkHistoryAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WorkHistoryAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkHistorySection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkHistorySection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[EmploymentStatusTypeId] [int] NULL,
	[HasVolunteered] [bit] NULL,
	[NonFullTimeDetails] [varchar](400) NULL,
	[Notes] [varchar](1000) NULL,
	[PreventionFactors] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkHistorySection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkHistory_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WorkHistory_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
	[HasCareerAssessment] [int] NULL,
	[HasCareerAssessmentNotes] [varchar](500) NULL,
 CONSTRAINT [PK_WorkHistory] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkHistorySectionEmploymentPreventionTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkHistorySectionEmploymentPreventionTypeBridge](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[WorkHistorySectionId] [int] NOT NULL,
	[EmploymentPreventionTypeId] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkHistorySectionEmploymentPreventionTypeBridge_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkHistoryEmploymentPreventionFactorsBridge_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WorkHistoryEmploymentPreventionFactorsBridge_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WorkHistoryEmploymentPreventionFactorsBridge] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkProgram](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[SortOrder] [int] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkProgram_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkProgram_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WorkProgram_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WorkProgram] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkProgramAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkProgramAssessmentSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ReviewCompleted] [bit] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkProgramAssessmentSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkProgramAssessmentSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WorkProgramAssessmentSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WorkProgramAssessmentSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkProgramSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkProgramSection](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ParticipantId] [int] NOT NULL,
	[IsInOtherPrograms] [bit] NULL,
	[Notes] [varchar](1000) NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkProgramSection_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkProgramSection_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WorkProgramSection_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WorkProgramSection] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WorkProgramStatus]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WorkProgramStatus](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WorkProgramStatus_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_WorkProgramStatus_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WorkProgramStatus_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WorkProgramStatus] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WWPAppLog]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WWPAppLog](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[DateTime] [datetime2](7) NOT NULL,
	[Level] [int] NOT NULL,
	[LevelDesc] [varchar](5) NOT NULL,
	[SubSystem] [varchar](8) NOT NULL,
	[Logger] [varchar](255) NOT NULL,
	[Message] [varchar](4000) NOT NULL,
	[Exception] [varchar](2000) NULL,
	[WamsId] [varchar](50) NOT NULL,
 CONSTRAINT [PK_WWPAppLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WWPMetric]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WWPMetric](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MethodName] [varchar](50) NOT NULL,
	[StartTime] [datetime2](7) NOT NULL,
	[StopTime] [datetime2](7) NOT NULL,
	[Elapsed] [time](7) NOT NULL,
	[Cached] [int] NOT NULL,
	[Web] [int] NOT NULL,
	[Retries] [int] NOT NULL,
	[Total] [int] NOT NULL,
	[WamsId] [varchar](20) NOT NULL,
 CONSTRAINT [PK_WWPMetric] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WWPOffice]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WWPOffice](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[OfficeNumber] [smallint] NULL,
	[OfficeName] [varchar](100) NULL,
	[MFWPOfficeNumber] [smallint] NULL,
	[MFEligibilityOfficeNumber] [smallint] NULL,
	[CountyandTribeId] [int] NULL,
	[ContractAreaId] [int] NULL,
	[MFLocationNumber] [smallint] NULL,
	[ActiviatedDate] [date] NULL,
	[InactivatedDate] [date] NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_WWPOffice_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](100) NULL CONSTRAINT [DF_WWPOffice_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_WWPOffice_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_WWPOffice] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[WWPWcfMessage]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[WWPWcfMessage](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[MessageId] [uniqueidentifier] NOT NULL,
	[DateTimeUTC] [datetime2](7) NOT NULL,
	[DateTimeLocal] [datetime2](7) NULL,
	[Endpoint] [varchar](75) NOT NULL,
	[Operation] [varchar](75) NULL,
	[Direction] [char](1) NOT NULL,
	[Message] [varchar](4000) NOT NULL,
 CONSTRAINT [PK_WWPWcfMessage] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[YesNoRefused]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[YesNoRefused](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](100) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[IsDeleted] [bit] NOT NULL CONSTRAINT [DF_YesNoRefused_IsDeleted]  DEFAULT ((0)),
	[ModifiedBy] [varchar](50) NOT NULL CONSTRAINT [DF_YesNoRefused_ModifiedBy]  DEFAULT (suser_sname()),
	[ModifiedDate] [datetime] NULL CONSTRAINT [DF_YesNoRefused_ModifiedDate]  DEFAULT (getdate()),
	[RowVersion] [timestamp] NOT NULL,
 CONSTRAINT [PK_YesNoRefused] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[YesNoSkipLookup]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[YesNoSkipLookup](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](3) NULL,
	[Name] [varchar](50) NULL,
 CONSTRAINT [PK_YesNoSkipLookup] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [wwp].[YesNoUnknownLookup]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [wwp].[YesNoUnknownLookup](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](3) NULL,
	[Name] [varchar](50) NULL,
 CONSTRAINT [PK_YesNoUnknownLookup] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING OFF
GO
/****** Object:  View [sec].[OrgProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [sec].[OrgProgram]
AS
SELECT o.Id,
o.AgencyName,
       o.EntsecAgencyCode,
       STUFF(
       (
           SELECT DISTINCT ', ' + RTRIM(ep.ProgramCode)
           FROM wwp.ContractArea ca
               INNER JOIN wwp.EnrolledProgram ep
                   ON ep.Id = ca.EnrolledProgramId
           WHERE ca.IsDeleted = 0
                 AND ep.IsDeleted = 0
                 AND ca.OrganizationId = o.Id
           ORDER BY ', ' + RTRIM(ep.ProgramCode)
           FOR XML PATH('')
       ),
       1,
       2,
       ''
            ) AS [ContractAreaPrograms]
FROM wwp.Organization o
--ORDER BY o.AgencyName;

GO
/****** Object:  View [sec].[WorkerOrgProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [sec].[WorkerOrgProgram]
AS
SELECT        w.Id AS [WorkerId], w.WAMSId, w.FirstName, w.LastName, w.MFUserId, w.Roles, w.OrganizationId, o.EntsecAgencyCode, o.AgencyName, o.ContractAreaPrograms,
--, ca.ContractAreaName AS ContractArea, ep.ProgramCode, ep.DescriptionText AS Program, 
                         w.LastLogin
FROM            wwp.Worker AS w INNER JOIN sec.OrgProgram o ON o.Id = w.OrganizationId
                         --wwp.Organization AS o ON o.Id = w.OrganizationId INNER JOIN
                         --wwp.ContractArea AS ca ON ca.OrganizationId = o.Id INNER JOIN
                         --wwp.EnrolledProgram AS ep ON ep.Id = ca.EnrolledProgramId


GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_Absence]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_Absence]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [BeginDate], NULL as [EndDate], NULL as [AbsenceReasonId], NULL as [Details], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Absence', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[BeginDate], t.[EndDate], t.[AbsenceReasonId], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_Absence_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Absence', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[BeginDate], t.[EndDate], t.[AbsenceReasonId], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_Absence_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Absence', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ActionNeeded]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ActionNeeded]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [ActionNeededPageId], NULL as [IsNoActionNeeded], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeeded', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[ActionNeededPageId], t.[IsNoActionNeeded], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
	from [cdc].[wwp_ActionNeeded_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeeded', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[ActionNeededPageId], t.[IsNoActionNeeded], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
	from [cdc].[wwp_ActionNeeded_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeeded', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ActionNeededPageActionItemBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ActionNeededPageActionItemBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ActionNeededPageId], NULL as [ActionItemId], NULL as [SortOrder], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededPageActionItemBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ActionNeededPageId], t.[ActionItemId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededPageActionItemBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ActionNeededPageId], t.[ActionItemId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededPageActionItemBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ActionNeededTask]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ActionNeededTask]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ActionNeededId], NULL as [ActionAssigneeId], NULL as [ActionItemId], NULL as [ActionPriorityId], NULL as [FollowUpTask], NULL as [DueDate], NULL as [IsNoDueDate], NULL as [CompletionDate], NULL as [IsNoCompletionDate], NULL as [Details], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededTask', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ActionNeededId], t.[ActionAssigneeId], t.[ActionItemId], t.[ActionPriorityId], t.[FollowUpTask], t.[DueDate], t.[IsNoDueDate], t.[CompletionDate], t.[IsNoCompletionDate], t.[Details], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
	from [cdc].[wwp_ActionNeededTask_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededTask', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ActionNeededId], t.[ActionAssigneeId], t.[ActionItemId], t.[ActionPriorityId], t.[FollowUpTask], t.[DueDate], t.[IsNoDueDate], t.[CompletionDate], t.[IsNoCompletionDate], t.[Details], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
	from [cdc].[wwp_ActionNeededTask_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededTask', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_AlternateMailingAddress]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_AlternateMailingAddress]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ZipCode], NULL as [CityAddressId], NULL as [StateId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [StreetAddressPlaceId], NULL as [AddressLine1], NULL as [AddressLine2], NULL as [AddressVerificationTypeLookupId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_AlternateMailingAddress', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ZipCode], t.[CityAddressId], t.[StateId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
	from [cdc].[wwp_AlternateMailingAddress_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_AlternateMailingAddress', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ZipCode], t.[CityAddressId], t.[StateId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
	from [cdc].[wwp_AlternateMailingAddress_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_AlternateMailingAddress', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_BarrierAccommodation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_BarrierAccommodation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailsId], NULL as [AccommodationId], NULL as [BeginDate], NULL as [EndDate], NULL as [Details], NULL as [DeleteReasonId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAccommodation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailsId], t.[AccommodationId], t.[BeginDate], t.[EndDate], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierAccommodation_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAccommodation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailsId], t.[AccommodationId], t.[BeginDate], t.[EndDate], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierAccommodation_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAccommodation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_BarrierAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_BarrierAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_BarrierDetail]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_BarrierDetail]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [BarrierTypeId], NULL as [BarrierSectionId], NULL as [OnsetDate], NULL as [EndDate], NULL as [IsAccommodationNeeded], NULL as [Details], NULL as [WasClosedAtDisenrollment], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsConverted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[BarrierTypeId], t.[BarrierSectionId], t.[OnsetDate], t.[EndDate], t.[IsAccommodationNeeded], t.[Details], t.[WasClosedAtDisenrollment], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsConverted]
	from [cdc].[wwp_BarrierDetail_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[BarrierTypeId], t.[BarrierSectionId], t.[OnsetDate], t.[EndDate], t.[IsAccommodationNeeded], t.[Details], t.[WasClosedAtDisenrollment], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsConverted]
	from [cdc].[wwp_BarrierDetail_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_BarrierDetailContactBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_BarrierDetailContactBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailId], NULL as [ContactId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetailContactBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierDetailContactBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetailContactBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierDetailContactBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetailContactBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_BarrierSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_BarrierSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsPhysicalHealthHardToManageDetails], NULL as [IsPhysicalHealthHardToManageId], NULL as [IsPhysicalHealthHardToParticipateDetails], NULL as [IsPhysicalHealthHardToParticipateId], NULL as [IsPhysicalHealthTakeMedicationDetails], NULL as [IsPhysicalHealthTakeMedicationId], NULL as [IsMentalHealthHardDiagnosedDetails], NULL as [IsMentalHealthHardDiagnosedId], NULL as [IsMentalHealthHardToManageDetails], NULL as [IsMentalHealthHardToManageId], NULL as [IsMentalHealthHardToParticipateDetails], NULL as [IsMentalHealthHardToParticipateId], NULL as [IsMentalHealthTakeMedicationDetails], NULL as [IsMentalHealthTakeMedicationId], NULL as [IsAODAHardToManageDetails], NULL as [IsAODAHardToManageId], NULL as [IsAODAHardToParticipateDetails], NULL as [IsAODAHardToParticipateId], NULL as [IsAODATakeTreatmentDetails], NULL as [IsAODATakeTreatmentId], NULL as [IsLearningDisabilityDiagnosedDetails], NULL as [IsLearningDisabilityDiagnosedId], NULL as [IsLearningDisabilityHardToManageDetails], NULL as [IsLearningDisabilityHardToManageId], NULL as [IsLearningDisabilityHardToParticipateDetails], NULL as [IsLearningDisabilityHardToParticipateId], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [Notes], NULL as [RowVersion], NULL as [IsDomesticViolenceHurtingYouOrOthersId], NULL as [IsDomesticViolenceHurtingYouOrOthersDetails], NULL as [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], NULL as [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], NULL as [IsDomesticViolencePartnerControlledMoneyId], NULL as [IsDomesticViolencePartnerControlledMoneyDetails], NULL as [IsDomesticViolenceReceivedServicesOrLivedInShelterId], NULL as [IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], NULL as [IsDomesticViolenceEmotionallyOrVerballyAbusingId], NULL as [IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], NULL as [IsDomesticViolenceCallingHarassingStalkingAtWorkId], NULL as [IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], NULL as [IsDomesticViolenceMakingItDifficultToWorkId], NULL as [IsDomesticViolenceMakingItDifficultToWorkDetails], NULL as [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], NULL as [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], NULL as [IsDomesticViolenceInvolvedInCourtsId], NULL as [IsDomesticViolenceInvolvedInCourtsDetails]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsPhysicalHealthHardToManageDetails], t.[IsPhysicalHealthHardToManageId], t.[IsPhysicalHealthHardToParticipateDetails], t.[IsPhysicalHealthHardToParticipateId], t.[IsPhysicalHealthTakeMedicationDetails], t.[IsPhysicalHealthTakeMedicationId], t.[IsMentalHealthHardDiagnosedDetails], t.[IsMentalHealthHardDiagnosedId], t.[IsMentalHealthHardToManageDetails], t.[IsMentalHealthHardToManageId], t.[IsMentalHealthHardToParticipateDetails], t.[IsMentalHealthHardToParticipateId], t.[IsMentalHealthTakeMedicationDetails], t.[IsMentalHealthTakeMedicationId], t.[IsAODAHardToManageDetails], t.[IsAODAHardToManageId], t.[IsAODAHardToParticipateDetails], t.[IsAODAHardToParticipateId], t.[IsAODATakeTreatmentDetails], t.[IsAODATakeTreatmentId], t.[IsLearningDisabilityDiagnosedDetails], t.[IsLearningDisabilityDiagnosedId], t.[IsLearningDisabilityHardToManageDetails], t.[IsLearningDisabilityHardToManageId], t.[IsLearningDisabilityHardToParticipateDetails], t.[IsLearningDisabilityHardToParticipateId], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[Notes], t.[RowVersion], t.[IsDomesticViolenceHurtingYouOrOthersId], t.[IsDomesticViolenceHurtingYouOrOthersDetails], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], t.[IsDomesticViolencePartnerControlledMoneyId], t.[IsDomesticViolencePartnerControlledMoneyDetails], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterId], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingId], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkId], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], t.[IsDomesticViolenceMakingItDifficultToWorkId], t.[IsDomesticViolenceMakingItDifficultToWorkDetails], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], t.[IsDomesticViolenceInvolvedInCourtsId], t.[IsDomesticViolenceInvolvedInCourtsDetails]
	from [cdc].[wwp_BarrierSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsPhysicalHealthHardToManageDetails], t.[IsPhysicalHealthHardToManageId], t.[IsPhysicalHealthHardToParticipateDetails], t.[IsPhysicalHealthHardToParticipateId], t.[IsPhysicalHealthTakeMedicationDetails], t.[IsPhysicalHealthTakeMedicationId], t.[IsMentalHealthHardDiagnosedDetails], t.[IsMentalHealthHardDiagnosedId], t.[IsMentalHealthHardToManageDetails], t.[IsMentalHealthHardToManageId], t.[IsMentalHealthHardToParticipateDetails], t.[IsMentalHealthHardToParticipateId], t.[IsMentalHealthTakeMedicationDetails], t.[IsMentalHealthTakeMedicationId], t.[IsAODAHardToManageDetails], t.[IsAODAHardToManageId], t.[IsAODAHardToParticipateDetails], t.[IsAODAHardToParticipateId], t.[IsAODATakeTreatmentDetails], t.[IsAODATakeTreatmentId], t.[IsLearningDisabilityDiagnosedDetails], t.[IsLearningDisabilityDiagnosedId], t.[IsLearningDisabilityHardToManageDetails], t.[IsLearningDisabilityHardToManageId], t.[IsLearningDisabilityHardToParticipateDetails], t.[IsLearningDisabilityHardToParticipateId], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[Notes], t.[RowVersion], t.[IsDomesticViolenceHurtingYouOrOthersId], t.[IsDomesticViolenceHurtingYouOrOthersDetails], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], t.[IsDomesticViolencePartnerControlledMoneyId], t.[IsDomesticViolencePartnerControlledMoneyDetails], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterId], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingId], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkId], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], t.[IsDomesticViolenceMakingItDifficultToWorkId], t.[IsDomesticViolenceMakingItDifficultToWorkDetails], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], t.[IsDomesticViolenceInvolvedInCourtsId], t.[IsDomesticViolenceInvolvedInCourtsDetails]
	from [cdc].[wwp_BarrierSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_BarrierTypeBarrierSubTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_BarrierTypeBarrierSubTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailId], NULL as [BarrierSubTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierTypeBarrierSubTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailId], t.[BarrierSubTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierTypeBarrierSubTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailId], t.[BarrierSubTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierTypeBarrierSubTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_CFRFADetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_CFRFADetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [RequestForAssistanceId], NULL as [CourtOrderedCountyId], NULL as [CourtOrderEffectiveDate], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_CFRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[RequestForAssistanceId], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_CFRFADetails_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_CFRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[RequestForAssistanceId], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_CFRFADetails_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_CFRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_Child]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_Child]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PinNumber], NULL as [FirstName], NULL as [MiddleInitialName], NULL as [LastName], NULL as [SuffixName], NULL as [DateOfBirth], NULL as [DateOfDeath], NULL as [GenderTypeId], NULL as [GenderIndicator], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedBy], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Child', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderTypeId], t.[GenderIndicator], t.[IsDeleted], t.[RowVersion], t.[ModifiedBy], t.[ModifiedDate]
	from [cdc].[wwp_Child_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Child', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderTypeId], t.[GenderIndicator], t.[IsDeleted], t.[RowVersion], t.[ModifiedBy], t.[ModifiedDate]
	from [cdc].[wwp_Child_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Child', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ChildYouthSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ChildYouthSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasChildren12OrUnder], NULL as [HasChildrenOver12WithDisabilityInNeedOfChildCare], NULL as [HasFutureChildCareNeed], NULL as [FutureChildCareNeedNotes], NULL as [HasChildWelfareWorker], NULL as [ChildWelfareWorkerChildren], NULL as [ChildWelfareWorkerPlanOrRequirements], NULL as [ChildWelfareContactId], NULL as [HasWicBenefits], NULL as [IsInHeadStart], NULL as [IsInAfterSchoolOrSummerProgram], NULL as [AfterSchoolProgramDetails], NULL as [IsInMentoringProgram], NULL as [MentoringProgramDetails], NULL as [DidOrWillAgeOutOfFosterCare], NULL as [FosterCareDetails], NULL as [Notes], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate], NULL as [IsSpecialNeedsProgramming], NULL as [SpecialNeedsProgrammingDetails]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasChildren12OrUnder], t.[HasChildrenOver12WithDisabilityInNeedOfChildCare], t.[HasFutureChildCareNeed], t.[FutureChildCareNeedNotes], t.[HasChildWelfareWorker], t.[ChildWelfareWorkerChildren], t.[ChildWelfareWorkerPlanOrRequirements], t.[ChildWelfareContactId], t.[HasWicBenefits], t.[IsInHeadStart], t.[IsInAfterSchoolOrSummerProgram], t.[AfterSchoolProgramDetails], t.[IsInMentoringProgram], t.[MentoringProgramDetails], t.[DidOrWillAgeOutOfFosterCare], t.[FosterCareDetails], t.[Notes], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate], t.[IsSpecialNeedsProgramming], t.[SpecialNeedsProgrammingDetails]
	from [cdc].[wwp_ChildYouthSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasChildren12OrUnder], t.[HasChildrenOver12WithDisabilityInNeedOfChildCare], t.[HasFutureChildCareNeed], t.[FutureChildCareNeedNotes], t.[HasChildWelfareWorker], t.[ChildWelfareWorkerChildren], t.[ChildWelfareWorkerPlanOrRequirements], t.[ChildWelfareContactId], t.[HasWicBenefits], t.[IsInHeadStart], t.[IsInAfterSchoolOrSummerProgram], t.[AfterSchoolProgramDetails], t.[IsInMentoringProgram], t.[MentoringProgramDetails], t.[DidOrWillAgeOutOfFosterCare], t.[FosterCareDetails], t.[Notes], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate], t.[IsSpecialNeedsProgramming], t.[SpecialNeedsProgrammingDetails]
	from [cdc].[wwp_ChildYouthSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ChildYouthSectionChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ChildYouthSectionChild]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ChildYouthSectionId], NULL as [ChildId], NULL as [CareArrangementId], NULL as [AgeCategoryId], NULL as [IsSpecialNeeds], NULL as [Details], NULL as [ModifiedBy], NULL as [DeleteReasonId], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSectionChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ChildYouthSectionId], t.[ChildId], t.[CareArrangementId], t.[AgeCategoryId], t.[IsSpecialNeeds], t.[Details], t.[ModifiedBy], t.[DeleteReasonId], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_ChildYouthSectionChild_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSectionChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ChildYouthSectionId], t.[ChildId], t.[CareArrangementId], t.[AgeCategoryId], t.[IsSpecialNeeds], t.[Details], t.[ModifiedBy], t.[DeleteReasonId], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_ChildYouthSectionChild_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSectionChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ChildYouthSupportsAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ChildYouthSupportsAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSupportsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSupportsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSupportsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ConfidentialPinInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ConfidentialPinInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsConfidential], NULL as [WorkerId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PinNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ConfidentialPinInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsConfidential], t.[WorkerId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
	from [cdc].[wwp_ConfidentialPinInformation_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ConfidentialPinInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsConfidential], t.[WorkerId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
	from [cdc].[wwp_ConfidentialPinInformation_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ConfidentialPinInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_Contact]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_Contact]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [TitleId], NULL as [CustomTitle], NULL as [Name], NULL as [Email], NULL as [Phone], NULL as [ExtensionNo], NULL as [FaxNo], NULL as [ReleaseInformationDate], NULL as [Address], NULL as [LegalIssuesSectionId], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Contact', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[TitleId], t.[CustomTitle], t.[Name], t.[Email], t.[Phone], t.[ExtensionNo], t.[FaxNo], t.[ReleaseInformationDate], t.[Address], t.[LegalIssuesSectionId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_Contact_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Contact', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[TitleId], t.[CustomTitle], t.[Name], t.[Email], t.[Phone], t.[ExtensionNo], t.[FaxNo], t.[ReleaseInformationDate], t.[Address], t.[LegalIssuesSectionId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_Contact_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Contact', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_Conviction]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_Conviction]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [LegalSectionId], NULL as [ConvictionTypeID], NULL as [IsUnknown], NULL as [DateConvicted], NULL as [Details], NULL as [DeleteReasonId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Conviction', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[IsUnknown], t.[DateConvicted], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_Conviction_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Conviction', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[IsUnknown], t.[DateConvicted], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_Conviction_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Conviction', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_CourtDate]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_CourtDate]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [LegalSectionId], NULL as [IsUnknown], NULL as [Location], NULL as [Date], NULL as [Details], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_CourtDate', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[LegalSectionId], t.[IsUnknown], t.[Location], t.[Date], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_CourtDate_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_CourtDate', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[LegalSectionId], t.[IsUnknown], t.[Location], t.[Date], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_CourtDate_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_CourtDate', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_EducationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_EducationAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_EducationAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_EducationAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_EducationExam]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_EducationExam]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [ExamTypeId], NULL as [DateTaken], NULL as [Details], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationExam', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[ExamTypeId], t.[DateTaken], t.[Details], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_EducationExam_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationExam', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[ExamTypeId], t.[DateTaken], t.[Details], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_EducationExam_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationExam', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_EducationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_EducationSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [SchoolGraduationStatusId], NULL as [SchoolCollegeEstablishmentId], NULL as [LastGradeLevelCompletedId], NULL as [CertificateIssuingAuthorityId], NULL as [CertificateYearAwarded], NULL as [HasEverAttendedSchool], NULL as [IsCurrentlyEnrolled], NULL as [IsWorkingOnCertificate], NULL as [LastYearAttended], NULL as [HasEducationPlan], NULL as [EducationPlanDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[SchoolGraduationStatusId], t.[SchoolCollegeEstablishmentId], t.[LastGradeLevelCompletedId], t.[CertificateIssuingAuthorityId], t.[CertificateYearAwarded], t.[HasEverAttendedSchool], t.[IsCurrentlyEnrolled], t.[IsWorkingOnCertificate], t.[LastYearAttended], t.[HasEducationPlan], t.[EducationPlanDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_EducationSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[SchoolGraduationStatusId], t.[SchoolCollegeEstablishmentId], t.[LastGradeLevelCompletedId], t.[CertificateIssuingAuthorityId], t.[CertificateYearAwarded], t.[HasEverAttendedSchool], t.[IsCurrentlyEnrolled], t.[IsWorkingOnCertificate], t.[LastYearAttended], t.[HasEducationPlan], t.[EducationPlanDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_EducationSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ElevatedAccess]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ElevatedAccess]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkerId], NULL as [ParticipantId], NULL as [AccessCreateDate], NULL as [ElevatedAccessReasonId], NULL as [Details], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ElevatedAccess', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkerId], t.[ParticipantId], t.[AccessCreateDate], t.[ElevatedAccessReasonId], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_ElevatedAccess_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ElevatedAccess', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkerId], t.[ParticipantId], t.[AccessCreateDate], t.[ElevatedAccessReasonId], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_ElevatedAccess_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ElevatedAccess', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_EmployerOfRecordInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_EmployerOfRecordInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [CompanyName], NULL as [Fein], NULL as [StreetAddress], NULL as [ZipAddress], NULL as [CityId], NULL as [JobSectorId], NULL as [ContactId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmployerOfRecordInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[JobSectorId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_EmployerOfRecordInformation_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmployerOfRecordInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[JobSectorId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_EmployerOfRecordInformation_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmployerOfRecordInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_EmploymentInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_EmploymentInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [WorkHistorySectionId], NULL as [JobTypeId], NULL as [JobBeginDate], NULL as [JobEndDate], NULL as [IsCurrentlyEmployed], NULL as [JobPosition], NULL as [CompanyName], NULL as [Fein], NULL as [StreetAddress], NULL as [ZipAddress], NULL as [CityId], NULL as [ContactId], NULL as [JobDutiesId], NULL as [LeavingReasonId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [DeleteReasonId], NULL as [OtherJobInformationId], NULL as [WageHoursId], NULL as [Notes], NULL as [EmploymentProgramtypeId], NULL as [LeavingReasonDetails], NULL as [EmployerOfRecordTypeId], NULL as [EmploymentSequenceNumber], NULL as [OriginalOfficeNumber], NULL as [IsConverted], NULL as [IsCurrentJobAtCreation]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[WorkHistorySectionId], t.[JobTypeId], t.[JobBeginDate], t.[JobEndDate], t.[IsCurrentlyEmployed], t.[JobPosition], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[ContactId], t.[JobDutiesId], t.[LeavingReasonId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[DeleteReasonId], t.[OtherJobInformationId], t.[WageHoursId], t.[Notes], t.[EmploymentProgramtypeId], t.[LeavingReasonDetails], t.[EmployerOfRecordTypeId], t.[EmploymentSequenceNumber], t.[OriginalOfficeNumber], t.[IsConverted], t.[IsCurrentJobAtCreation]
	from [cdc].[wwp_EmploymentInformation_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[WorkHistorySectionId], t.[JobTypeId], t.[JobBeginDate], t.[JobEndDate], t.[IsCurrentlyEmployed], t.[JobPosition], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[ContactId], t.[JobDutiesId], t.[LeavingReasonId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[DeleteReasonId], t.[OtherJobInformationId], t.[WageHoursId], t.[Notes], t.[EmploymentProgramtypeId], t.[LeavingReasonDetails], t.[EmployerOfRecordTypeId], t.[EmploymentSequenceNumber], t.[OriginalOfficeNumber], t.[IsConverted], t.[IsCurrentJobAtCreation]
	from [cdc].[wwp_EmploymentInformation_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_EmploymentInformationBenefitsOfferedTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_EmploymentInformationBenefitsOfferedTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [BenefitsOfferedTypeId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationBenefitsOfferedTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[BenefitsOfferedTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationBenefitsOfferedTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[BenefitsOfferedTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationBenefitsOfferedTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_EmploymentInformationJobDutiesDetailsBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_EmploymentInformationJobDutiesDetailsBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [JobDutiesId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationJobDutiesDetailsBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[JobDutiesId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationJobDutiesDetailsBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EmploymentInformationId], t.[JobDutiesId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationJobDutiesDetailsBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ExamResult]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ExamResult]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EducationExamId], NULL as [ExamSubjectTypeId], NULL as [DatePassed], NULL as [Score], NULL as [MaxScoreRange], NULL as [SPLTypeId], NULL as [NRSTypeId], NULL as [Version], NULL as [ExamEquivalencyTypeId], NULL as [GradeEquivalency], NULL as [ExamLevelType], NULL as [ExamPassTypeId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion], NULL as [Level]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamResult', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EducationExamId], t.[ExamSubjectTypeId], t.[DatePassed], t.[Score], t.[MaxScoreRange], t.[SPLTypeId], t.[NRSTypeId], t.[Version], t.[ExamEquivalencyTypeId], t.[GradeEquivalency], t.[ExamLevelType], t.[ExamPassTypeId], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[Level]
	from [cdc].[wwp_ExamResult_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamResult', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[EducationExamId], t.[ExamSubjectTypeId], t.[DatePassed], t.[Score], t.[MaxScoreRange], t.[SPLTypeId], t.[NRSTypeId], t.[Version], t.[ExamEquivalencyTypeId], t.[GradeEquivalency], t.[ExamLevelType], t.[ExamPassTypeId], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[Level]
	from [cdc].[wwp_ExamResult_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamResult', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ExamSubjectTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ExamSubjectTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ExamSubjectTypeId], NULL as [ExamTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamSubjectTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ExamSubjectTypeId], t.[ExamTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_ExamSubjectTypeBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamSubjectTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ExamSubjectTypeId], t.[ExamTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_ExamSubjectTypeBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamSubjectTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersActionBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersActionBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [FamilyBarriersAssessmentSectionId], NULL as [ActionNeededId], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersActionBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[FamilyBarriersAssessmentSectionId], t.[ActionNeededId], t.[ModifiedBy], t.[IsDeleted], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_FamilyBarriersActionBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersActionBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[FamilyBarriersAssessmentSectionId], t.[ActionNeededId], t.[ModifiedBy], t.[IsDeleted], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_FamilyBarriersActionBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersActionBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersDetail]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersDetail]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Details], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Details], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
	from [cdc].[wwp_FamilyBarriersDetail_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Details], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
	from [cdc].[wwp_FamilyBarriersDetail_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_FamilyBarriersSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasEverAppliedSsi], NULL as [IsCurrentlyApplyingSsi], NULL as [SsiApplicationStatusId], NULL as [SsiApplicationStatusDetailsId], NULL as [SsiApplicationDate], NULL as [SsiApplicationIsAnyoneHelping], NULL as [SsiApplicationDetailsId], NULL as [SsiApplicationContactId], NULL as [HasReceivedPastSsi], NULL as [PastSsiDetailsId], NULL as [HasDeniedSsi], NULL as [DeniedSsiDate], NULL as [DeniedSsiDetailsId], NULL as [IsInterestedInLearningMoreSsi], NULL as [InterestedInLearningMoreSsiDetailsId], NULL as [HasAnyoneAppliedForSsi], NULL as [IsAnyoneReceivingSsi], NULL as [AnyoneReceivingSsiDetailsId], NULL as [IsAnyoneApplyingForSsi], NULL as [AnyoneApplyingForSsiDetailsId], NULL as [HasCaretakingResponsibilities], NULL as [HasConcernsAboutCaretakingResponsibilities], NULL as [ConcernsAboutCaretakingResponsibilitiesDetailsId], NULL as [DoesHouseholdEngageInRiskyActivities], NULL as [HouseholdEngageInRiskyActivitiesDetailsId], NULL as [DoChildrenHaveBehaviourProblems], NULL as [ChildrenHaveBehaviourProblemsDetailsId], NULL as [AreChildrenAtRiskOfSchoolSuspension], NULL as [ChildrenAtRiskOfSchoolSuspensionDetailsId], NULL as [AreAnyFamilyIssuesAffectWork], NULL as [AnyFamilyIssuesAffectWorkDetailsId], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ReasonForPastSsiDetailsId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasEverAppliedSsi], t.[IsCurrentlyApplyingSsi], t.[SsiApplicationStatusId], t.[SsiApplicationStatusDetailsId], t.[SsiApplicationDate], t.[SsiApplicationIsAnyoneHelping], t.[SsiApplicationDetailsId], t.[SsiApplicationContactId], t.[HasReceivedPastSsi], t.[PastSsiDetailsId], t.[HasDeniedSsi], t.[DeniedSsiDate], t.[DeniedSsiDetailsId], t.[IsInterestedInLearningMoreSsi], t.[InterestedInLearningMoreSsiDetailsId], t.[HasAnyoneAppliedForSsi], t.[IsAnyoneReceivingSsi], t.[AnyoneReceivingSsiDetailsId], t.[IsAnyoneApplyingForSsi], t.[AnyoneApplyingForSsiDetailsId], t.[HasCaretakingResponsibilities], t.[HasConcernsAboutCaretakingResponsibilities], t.[ConcernsAboutCaretakingResponsibilitiesDetailsId], t.[DoesHouseholdEngageInRiskyActivities], t.[HouseholdEngageInRiskyActivitiesDetailsId], t.[DoChildrenHaveBehaviourProblems], t.[ChildrenHaveBehaviourProblemsDetailsId], t.[AreChildrenAtRiskOfSchoolSuspension], t.[ChildrenAtRiskOfSchoolSuspensionDetailsId], t.[AreAnyFamilyIssuesAffectWork], t.[AnyFamilyIssuesAffectWorkDetailsId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[ReasonForPastSsiDetailsId]
	from [cdc].[wwp_FamilyBarriersSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasEverAppliedSsi], t.[IsCurrentlyApplyingSsi], t.[SsiApplicationStatusId], t.[SsiApplicationStatusDetailsId], t.[SsiApplicationDate], t.[SsiApplicationIsAnyoneHelping], t.[SsiApplicationDetailsId], t.[SsiApplicationContactId], t.[HasReceivedPastSsi], t.[PastSsiDetailsId], t.[HasDeniedSsi], t.[DeniedSsiDate], t.[DeniedSsiDetailsId], t.[IsInterestedInLearningMoreSsi], t.[InterestedInLearningMoreSsiDetailsId], t.[HasAnyoneAppliedForSsi], t.[IsAnyoneReceivingSsi], t.[AnyoneReceivingSsiDetailsId], t.[IsAnyoneApplyingForSsi], t.[AnyoneApplyingForSsiDetailsId], t.[HasCaretakingResponsibilities], t.[HasConcernsAboutCaretakingResponsibilities], t.[ConcernsAboutCaretakingResponsibilitiesDetailsId], t.[DoesHouseholdEngageInRiskyActivities], t.[HouseholdEngageInRiskyActivitiesDetailsId], t.[DoChildrenHaveBehaviourProblems], t.[ChildrenHaveBehaviourProblemsDetailsId], t.[AreChildrenAtRiskOfSchoolSuspension], t.[ChildrenAtRiskOfSchoolSuspensionDetailsId], t.[AreAnyFamilyIssuesAffectWork], t.[AnyFamilyIssuesAffectWorkDetailsId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[ReasonForPastSsiDetailsId]
	from [cdc].[wwp_FamilyBarriersSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_FamilyMember]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_FamilyMember]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [FamilyBarriersSectionId], NULL as [RelationshipId], NULL as [FirstName], NULL as [LastName], NULL as [Details], NULL as [DeleteReasonId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyMember', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[FamilyBarriersSectionId], t.[RelationshipId], t.[FirstName], t.[LastName], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_FamilyMember_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyMember', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[FamilyBarriersSectionId], t.[RelationshipId], t.[FirstName], t.[LastName], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_FamilyMember_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyMember', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_FCDPRFADetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_FCDPRFADetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [RequestForAssistanceId], NULL as [IsVoluntary], NULL as [CourtOrderedCountyId], NULL as [CourtOrderEffectiveDate], NULL as [KIDSPinNumber], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [ReferralSource]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FCDPRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[RequestForAssistanceId], t.[IsVoluntary], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[KIDSPinNumber], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[ReferralSource]
	from [cdc].[wwp_FCDPRFADetails_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FCDPRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[RequestForAssistanceId], t.[IsVoluntary], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[KIDSPinNumber], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[ReferralSource]
	from [cdc].[wwp_FCDPRFADetails_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FCDPRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_FormalAssessment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_FormalAssessment]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailsId], NULL as [ReferralDate], NULL as [ReferralDeclined], NULL as [ReferralDetails], NULL as [AssessmentDate], NULL as [AssessmentNotCompleted], NULL as [AssessmentDetails], NULL as [SymptomId], NULL as [ReassessmentRecommendedDate], NULL as [IsRecommendedDateNotNeeded], NULL as [SymptomDetails], NULL as [AssessmentProviderContactId], NULL as [HoursParticipantCanParticipate], NULL as [HoursParticipantCanParticipateDetails], NULL as [DeleteReasonId], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HoursParticipantCanParticipateIntervalId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FormalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailsId], t.[ReferralDate], t.[ReferralDeclined], t.[ReferralDetails], t.[AssessmentDate], t.[AssessmentNotCompleted], t.[AssessmentDetails], t.[SymptomId], t.[ReassessmentRecommendedDate], t.[IsRecommendedDateNotNeeded], t.[SymptomDetails], t.[AssessmentProviderContactId], t.[HoursParticipantCanParticipate], t.[HoursParticipantCanParticipateDetails], t.[DeleteReasonId], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HoursParticipantCanParticipateIntervalId]
	from [cdc].[wwp_FormalAssessment_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FormalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[BarrierDetailsId], t.[ReferralDate], t.[ReferralDeclined], t.[ReferralDetails], t.[AssessmentDate], t.[AssessmentNotCompleted], t.[AssessmentDetails], t.[SymptomId], t.[ReassessmentRecommendedDate], t.[IsRecommendedDateNotNeeded], t.[SymptomDetails], t.[AssessmentProviderContactId], t.[HoursParticipantCanParticipate], t.[HoursParticipantCanParticipateDetails], t.[DeleteReasonId], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HoursParticipantCanParticipateIntervalId]
	from [cdc].[wwp_FormalAssessment_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_FormalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_WWP_hist_test_0]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_WWP_hist_test_0]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [id], NULL as [name], NULL as [salary], NULL as [__$command_id]
	where ( [sys].[fn_cdc_check_parameters]( N'WWP_hist_test_0', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[id], t.[name], t.[salary], t.[__$command_id]
	from [cdc].[WWP_hist_test_0_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'WWP_hist_test_0', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[id], t.[name], t.[salary], t.[__$command_id]
	from [cdc].[WWP_hist_test_0_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'WWP_hist_test_0', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_HousingAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_HousingAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_HousingAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_HousingAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_HousingHistory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_HousingHistory]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [SortOrder], NULL as [HousingSectionId], NULL as [HousingSituationId], NULL as [BeginDate], NULL as [EndDate], NULL as [HasEvicted], NULL as [MonthlyAmount], NULL as [IsAmountUnknown], NULL as [Details], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[SortOrder], t.[HousingSectionId], t.[HousingSituationId], t.[BeginDate], t.[EndDate], t.[HasEvicted], t.[MonthlyAmount], t.[IsAmountUnknown], t.[Details], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_HousingHistory_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[SortOrder], t.[HousingSectionId], t.[HousingSituationId], t.[BeginDate], t.[EndDate], t.[HasEvicted], t.[MonthlyAmount], t.[IsAmountUnknown], t.[Details], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_HousingHistory_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_HousingSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_HousingSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HousingSituationId], NULL as [CurrentHousingDetails], NULL as [CurrentHousingBeginDate], NULL as [CurrentHousingEndDate], NULL as [CurrentMonthlyAmount], NULL as [IsCurrentAmountUnknown], NULL as [HasCurrentEvictionRisk], NULL as [HasBeenEvicted], NULL as [IsCurrentMovingToHistory], NULL as [HasUtilityDisconnectionRisk], NULL as [UtilityDisconnectionRiskNotes], NULL as [HasDifficultyWorking], NULL as [DifficultyWorkingNotes], NULL as [Notes], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HousingSituationId], t.[CurrentHousingDetails], t.[CurrentHousingBeginDate], t.[CurrentHousingEndDate], t.[CurrentMonthlyAmount], t.[IsCurrentAmountUnknown], t.[HasCurrentEvictionRisk], t.[HasBeenEvicted], t.[IsCurrentMovingToHistory], t.[HasUtilityDisconnectionRisk], t.[UtilityDisconnectionRiskNotes], t.[HasDifficultyWorking], t.[DifficultyWorkingNotes], t.[Notes], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_HousingSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HousingSituationId], t.[CurrentHousingDetails], t.[CurrentHousingBeginDate], t.[CurrentHousingEndDate], t.[CurrentMonthlyAmount], t.[IsCurrentAmountUnknown], t.[HasCurrentEvictionRisk], t.[HasBeenEvicted], t.[IsCurrentMovingToHistory], t.[HasUtilityDisconnectionRisk], t.[UtilityDisconnectionRiskNotes], t.[HasDifficultyWorking], t.[DifficultyWorkingNotes], t.[Notes], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_HousingSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_InformalAssessment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_InformalAssessment]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [AssessmentTypeId], NULL as [ParticipantId], NULL as [LanguageAssessmentSectionId], NULL as [WorkHistoryAssessmentSectionId], NULL as [WorkProgramAssessmentSectionId], NULL as [PostSecondaryEducationAssessmentSectionId], NULL as [MilitaryTrainingAssessmentSectionId], NULL as [HousingAssessmentSectionId], NULL as [TransportationAssessmentSectionId], NULL as [LegalIssuesAssessmentSectionId], NULL as [BarriersAssessmentSectionId], NULL as [ChildYouthSupportsAssessmentSectionId], NULL as [FamilyBarriersAssessmentSectionId], NULL as [NonCustodialParentsAssessmentSectionId], NULL as [NonCustodialParentsReferralAssessmentSectionId], NULL as [WorkHistorySectionId], NULL as [EndDate], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [EducationAssessmentSectionId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_InformalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[AssessmentTypeId], t.[ParticipantId], t.[LanguageAssessmentSectionId], t.[WorkHistoryAssessmentSectionId], t.[WorkProgramAssessmentSectionId], t.[PostSecondaryEducationAssessmentSectionId], t.[MilitaryTrainingAssessmentSectionId], t.[HousingAssessmentSectionId], t.[TransportationAssessmentSectionId], t.[LegalIssuesAssessmentSectionId], t.[BarriersAssessmentSectionId], t.[ChildYouthSupportsAssessmentSectionId], t.[FamilyBarriersAssessmentSectionId], t.[NonCustodialParentsAssessmentSectionId], t.[NonCustodialParentsReferralAssessmentSectionId], t.[WorkHistorySectionId], t.[EndDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[EducationAssessmentSectionId]
	from [cdc].[wwp_InformalAssessment_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_InformalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[AssessmentTypeId], t.[ParticipantId], t.[LanguageAssessmentSectionId], t.[WorkHistoryAssessmentSectionId], t.[WorkProgramAssessmentSectionId], t.[PostSecondaryEducationAssessmentSectionId], t.[MilitaryTrainingAssessmentSectionId], t.[HousingAssessmentSectionId], t.[TransportationAssessmentSectionId], t.[LegalIssuesAssessmentSectionId], t.[BarriersAssessmentSectionId], t.[ChildYouthSupportsAssessmentSectionId], t.[FamilyBarriersAssessmentSectionId], t.[NonCustodialParentsAssessmentSectionId], t.[NonCustodialParentsReferralAssessmentSectionId], t.[WorkHistorySectionId], t.[EndDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[EducationAssessmentSectionId]
	from [cdc].[wwp_InformalAssessment_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_InformalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_InvolvedWorkProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_InvolvedWorkProgram]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkProgramSectionId], NULL as [WorkProgramStatusId], NULL as [WorkProgramId], NULL as [CityId], NULL as [StartMonth], NULL as [EndMonth], NULL as [ContactId], NULL as [ContactInfo], NULL as [Details], NULL as [SortOrder], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_InvolvedWorkProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkProgramSectionId], t.[WorkProgramStatusId], t.[WorkProgramId], t.[CityId], t.[StartMonth], t.[EndMonth], t.[ContactId], t.[ContactInfo], t.[Details], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_InvolvedWorkProgram_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_InvolvedWorkProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkProgramSectionId], t.[WorkProgramStatusId], t.[WorkProgramId], t.[CityId], t.[StartMonth], t.[EndMonth], t.[ContactId], t.[ContactInfo], t.[Details], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_InvolvedWorkProgram_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_InvolvedWorkProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_JobDutiesDetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_JobDutiesDetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Details], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_JobDutiesDetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_JobDutiesDetails_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_JobDutiesDetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_JobDutiesDetails_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_JobDutiesDetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_KnownLanguage]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_KnownLanguage]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [SortOrder], NULL as [LanguageSectionId], NULL as [LanguageId], NULL as [IsPrimary], NULL as [IsAbleToRead], NULL as [IsAbleToWrite], NULL as [IsAbleToSpeak], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PinNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_KnownLanguage', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[SortOrder], t.[LanguageSectionId], t.[LanguageId], t.[IsPrimary], t.[IsAbleToRead], t.[IsAbleToWrite], t.[IsAbleToSpeak], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
	from [cdc].[wwp_KnownLanguage_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_KnownLanguage', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[SortOrder], t.[LanguageSectionId], t.[LanguageId], t.[IsPrimary], t.[IsAbleToRead], t.[IsAbleToWrite], t.[IsAbleToSpeak], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
	from [cdc].[wwp_KnownLanguage_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_KnownLanguage', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_LanguageAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_LanguageAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_LanguageAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_LanguageAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_LanguageSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_LanguageSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsAbleToReadEnglish], NULL as [IsAbleToWriteEnglish], NULL as [IsAbleToSpeakEnglish], NULL as [IsNeedingInterpreter], NULL as [InterpreterDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PinNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsAbleToReadEnglish], t.[IsAbleToWriteEnglish], t.[IsAbleToSpeakEnglish], t.[IsNeedingInterpreter], t.[InterpreterDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
	from [cdc].[wwp_LanguageSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsAbleToReadEnglish], t.[IsAbleToWriteEnglish], t.[IsAbleToSpeakEnglish], t.[IsNeedingInterpreter], t.[InterpreterDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
	from [cdc].[wwp_LanguageSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_LegalIssuesAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_LegalIssuesAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_LegalIssuesAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_LegalIssuesAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_LegalIssuesSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_LegalIssuesSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsConvictedOfCrime], NULL as [IsUnderCommunitySupervision], NULL as [CommunitySupervisonDetails], NULL as [HasPendingCharges], NULL as [HasFamilyLegalIssues], NULL as [FamilyLegalIssueNotes], NULL as [HasCourtDates], NULL as [ActionNeededDetails], NULL as [OrderedToPayChildSupport], NULL as [MonthlyAmount], NULL as [IsUnknown], NULL as [OweAnyChildSupportBack], NULL as [ChildSupportDetails], NULL as [CommunitySupervisonContactId], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HasRestrainingOrders], NULL as [RestrainingOrderNotes], NULL as [HasRestrainingOrderToPrevent], NULL as [RestrainingOrderToPreventNotes]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsConvictedOfCrime], t.[IsUnderCommunitySupervision], t.[CommunitySupervisonDetails], t.[HasPendingCharges], t.[HasFamilyLegalIssues], t.[FamilyLegalIssueNotes], t.[HasCourtDates], t.[ActionNeededDetails], t.[OrderedToPayChildSupport], t.[MonthlyAmount], t.[IsUnknown], t.[OweAnyChildSupportBack], t.[ChildSupportDetails], t.[CommunitySupervisonContactId], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasRestrainingOrders], t.[RestrainingOrderNotes], t.[HasRestrainingOrderToPrevent], t.[RestrainingOrderToPreventNotes]
	from [cdc].[wwp_LegalIssuesSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsConvictedOfCrime], t.[IsUnderCommunitySupervision], t.[CommunitySupervisonDetails], t.[HasPendingCharges], t.[HasFamilyLegalIssues], t.[FamilyLegalIssueNotes], t.[HasCourtDates], t.[ActionNeededDetails], t.[OrderedToPayChildSupport], t.[MonthlyAmount], t.[IsUnknown], t.[OweAnyChildSupportBack], t.[ChildSupportDetails], t.[CommunitySupervisonContactId], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasRestrainingOrders], t.[RestrainingOrderNotes], t.[HasRestrainingOrderToPrevent], t.[RestrainingOrderToPreventNotes]
	from [cdc].[wwp_LegalIssuesSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_MilitaryTrainingAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_MilitaryTrainingAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_MilitaryTrainingSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_MilitaryTrainingSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [DoesHaveTraining], NULL as [MilitaryRankId], NULL as [MilitaryBranchId], NULL as [Rate], NULL as [YearsEnlisted], NULL as [EnlistmentDate], NULL as [DischargeDate], NULL as [IsCurrentlyEnlisted], NULL as [MilitaryDischargeTypeId], NULL as [SkillsAndTraining], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PolarLookupId], NULL as [BenefitsDetails]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[DoesHaveTraining], t.[MilitaryRankId], t.[MilitaryBranchId], t.[Rate], t.[YearsEnlisted], t.[EnlistmentDate], t.[DischargeDate], t.[IsCurrentlyEnlisted], t.[MilitaryDischargeTypeId], t.[SkillsAndTraining], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PolarLookupId], t.[BenefitsDetails]
	from [cdc].[wwp_MilitaryTrainingSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[DoesHaveTraining], t.[MilitaryRankId], t.[MilitaryBranchId], t.[Rate], t.[YearsEnlisted], t.[EnlistmentDate], t.[DischargeDate], t.[IsCurrentlyEnlisted], t.[MilitaryDischargeTypeId], t.[SkillsAndTraining], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PolarLookupId], t.[BenefitsDetails]
	from [cdc].[wwp_MilitaryTrainingSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialCaretaker]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialCaretaker]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialParentsSectionId], NULL as [FirstName], NULL as [IsFirstNameUnknown], NULL as [LastName], NULL as [IsLastNameUnknown], NULL as [NonCustodialParentRelationshipId], NULL as [RelationshipDetails], NULL as [ContactIntervalId], NULL as [ContactIntervalDetails], NULL as [IsRelationshipChangeRequested], NULL as [RelationshipChangeRequestedDetails], NULL as [IsInterestedInRelationshipReferral], NULL as [InterestedInRelationshipReferralDetails], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialCaretaker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialParentsSectionId], t.[FirstName], t.[IsFirstNameUnknown], t.[LastName], t.[IsLastNameUnknown], t.[NonCustodialParentRelationshipId], t.[RelationshipDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsInterestedInRelationshipReferral], t.[InterestedInRelationshipReferralDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
	from [cdc].[wwp_NonCustodialCaretaker_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialCaretaker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialParentsSectionId], t.[FirstName], t.[IsFirstNameUnknown], t.[LastName], t.[IsLastNameUnknown], t.[NonCustodialParentRelationshipId], t.[RelationshipDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsInterestedInRelationshipReferral], t.[InterestedInRelationshipReferralDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
	from [cdc].[wwp_NonCustodialCaretaker_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialCaretaker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialChild]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialCaretakerId], NULL as [FirstName], NULL as [LastName], NULL as [DateOfBirth], NULL as [HasChildSupportOrder], NULL as [ChildSupportOrderDetails], NULL as [ContactIntervalId], NULL as [ContactIntervalDetails], NULL as [HasOtherAdultsYesNoUnknownLookupId], NULL as [OtherAdultsDetails], NULL as [IsRelationshipChangeRequested], NULL as [RelationshipChangeRequestedDetails], NULL as [IsNeedOfServicesYesNoUnknownLookupId], NULL as [NeedOfServicesDetails], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion], NULL as [HasNameOnChildBirthRecord]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialCaretakerId], t.[FirstName], t.[LastName], t.[DateOfBirth], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[HasOtherAdultsYesNoUnknownLookupId], t.[OtherAdultsDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsNeedOfServicesYesNoUnknownLookupId], t.[NeedOfServicesDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion], t.[HasNameOnChildBirthRecord]
	from [cdc].[wwp_NonCustodialChild_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialCaretakerId], t.[FirstName], t.[LastName], t.[DateOfBirth], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[HasOtherAdultsYesNoUnknownLookupId], t.[OtherAdultsDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsNeedOfServicesYesNoUnknownLookupId], t.[NeedOfServicesDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion], t.[HasNameOnChildBirthRecord]
	from [cdc].[wwp_NonCustodialChild_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsReferralAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsReferralAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
	from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsReferralSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsReferralSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasChildrenId], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasChildrenId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
	from [cdc].[wwp_NonCustodialParentsReferralSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasChildrenId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
	from [cdc].[wwp_NonCustodialParentsReferralSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialParentsSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasChildren], NULL as [ChildSupportPayment], NULL as [HasOwedChildSupport], NULL as [HasInterestInChildServices], NULL as [IsInterestedInReferralServices], NULL as [InterestedInReferralServicesDetails], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasChildren], t.[ChildSupportPayment], t.[HasOwedChildSupport], t.[HasInterestInChildServices], t.[IsInterestedInReferralServices], t.[InterestedInReferralServicesDetails], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
	from [cdc].[wwp_NonCustodialParentsSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[HasChildren], t.[ChildSupportPayment], t.[HasOwedChildSupport], t.[HasInterestInChildServices], t.[IsInterestedInReferralServices], t.[InterestedInReferralServicesDetails], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
	from [cdc].[wwp_NonCustodialParentsSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialReferralChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialReferralChild]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialReferralParentId], NULL as [FirstName], NULL as [LastName], NULL as [ReferralContactIntervalId], NULL as [ContactIntervalDetails], NULL as [HasChildSupportOrder], NULL as [ChildSupportOrderDetails], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialReferralParentId], t.[FirstName], t.[LastName], t.[ReferralContactIntervalId], t.[ContactIntervalDetails], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
	from [cdc].[wwp_NonCustodialReferralChild_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialReferralParentId], t.[FirstName], t.[LastName], t.[ReferralContactIntervalId], t.[ContactIntervalDetails], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
	from [cdc].[wwp_NonCustodialReferralChild_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialReferralParent]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_NonCustodialReferralParent]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialReferralParentsSectionId], NULL as [FirstName], NULL as [LastName], NULL as [IsAvailableOrWorking], NULL as [AvailableOrWorkingDetails], NULL as [IsInterestedInWorkProgram], NULL as [InterestedInWorkProgramDetails], NULL as [IsContactKnownWithParent], NULL as [ContactId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralParent', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialReferralParentsSectionId], t.[FirstName], t.[LastName], t.[IsAvailableOrWorking], t.[AvailableOrWorkingDetails], t.[IsInterestedInWorkProgram], t.[InterestedInWorkProgramDetails], t.[IsContactKnownWithParent], t.[ContactId], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
	from [cdc].[wwp_NonCustodialReferralParent_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralParent', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[NonCustodialReferralParentsSectionId], t.[FirstName], t.[LastName], t.[IsAvailableOrWorking], t.[AvailableOrWorkingDetails], t.[IsInterestedInWorkProgram], t.[InterestedInWorkProgramDetails], t.[IsContactKnownWithParent], t.[ContactId], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
	from [cdc].[wwp_NonCustodialReferralParent_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralParent', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_OtherJobInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_OtherJobInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ExpectedScheduleDetails], NULL as [JobSectorId], NULL as [JobFoundMethodId], NULL as [WorkerId], NULL as [JobFoundMethodDetails], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [WorkProgramId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_OtherJobInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ExpectedScheduleDetails], t.[JobSectorId], t.[JobFoundMethodId], t.[WorkerId], t.[JobFoundMethodDetails], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WorkProgramId]
	from [cdc].[wwp_OtherJobInformation_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_OtherJobInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ExpectedScheduleDetails], t.[JobSectorId], t.[JobFoundMethodId], t.[WorkerId], t.[JobFoundMethodDetails], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WorkProgramId]
	from [cdc].[wwp_OtherJobInformation_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_OtherJobInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_Participant]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_Participant]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PinNumber], NULL as [FirstName], NULL as [MiddleInitialName], NULL as [LastName], NULL as [SuffixName], NULL as [DateOfBirth], NULL as [DateOfDeath], NULL as [GenderIndicator], NULL as [AliasResponse], NULL as [LanguageCode], NULL as [MaxHistorySequenceNumber], NULL as [RaceCode], NULL as [USCitizenSwitch], NULL as [AmericanIndianIndicator], NULL as [AsianIndicator], NULL as [BlackIndicator], NULL as [HispanicIndicator], NULL as [PacificIslanderIndicator], NULL as [WhiteIndicator], NULL as [MCI_ID], NULL as [TribalMemberIndicator], NULL as [TimeLimitStatus], NULL as [ConversionProjectDetails], NULL as [ConversionDate], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HasBeenThroughClientReg]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Participant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderIndicator], t.[AliasResponse], t.[LanguageCode], t.[MaxHistorySequenceNumber], t.[RaceCode], t.[USCitizenSwitch], t.[AmericanIndianIndicator], t.[AsianIndicator], t.[BlackIndicator], t.[HispanicIndicator], t.[PacificIslanderIndicator], t.[WhiteIndicator], t.[MCI_ID], t.[TribalMemberIndicator], t.[TimeLimitStatus], t.[ConversionProjectDetails], t.[ConversionDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasBeenThroughClientReg]
	from [cdc].[wwp_Participant_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Participant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderIndicator], t.[AliasResponse], t.[LanguageCode], t.[MaxHistorySequenceNumber], t.[RaceCode], t.[USCitizenSwitch], t.[AmericanIndianIndicator], t.[AsianIndicator], t.[BlackIndicator], t.[HispanicIndicator], t.[PacificIslanderIndicator], t.[WhiteIndicator], t.[MCI_ID], t.[TribalMemberIndicator], t.[TimeLimitStatus], t.[ConversionProjectDetails], t.[ConversionDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasBeenThroughClientReg]
	from [cdc].[wwp_Participant_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Participant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ParticipantContactInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ParticipantContactInfo]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [CountyOfResidenceId], NULL as [ZipCode], NULL as [CityAddressId], NULL as [HomelessIndicator], NULL as [IsHouseHoldMailingAddressSame], NULL as [AlternateMailingAddressId], NULL as [PrimaryPhoneNumber], NULL as [CanTextPrimaryPhone], NULL as [CanLeaveVoiceMailPrimaryPhone], NULL as [SecondaryPhoneNumber], NULL as [CanTextSecondaryPhone], NULL as [CanLeaveVoiceMailSecondaryPhone], NULL as [EmailAddress], NULL as [Notes], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [StreetAddressPlaceId], NULL as [AddressLine1], NULL as [AddressLine2], NULL as [AddressVerificationTypeLookupId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantContactInfo', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[CountyOfResidenceId], t.[ZipCode], t.[CityAddressId], t.[HomelessIndicator], t.[IsHouseHoldMailingAddressSame], t.[AlternateMailingAddressId], t.[PrimaryPhoneNumber], t.[CanTextPrimaryPhone], t.[CanLeaveVoiceMailPrimaryPhone], t.[SecondaryPhoneNumber], t.[CanTextSecondaryPhone], t.[CanLeaveVoiceMailSecondaryPhone], t.[EmailAddress], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
	from [cdc].[wwp_ParticipantContactInfo_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantContactInfo', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[CountyOfResidenceId], t.[ZipCode], t.[CityAddressId], t.[HomelessIndicator], t.[IsHouseHoldMailingAddressSame], t.[AlternateMailingAddressId], t.[PrimaryPhoneNumber], t.[CanTextPrimaryPhone], t.[CanLeaveVoiceMailPrimaryPhone], t.[SecondaryPhoneNumber], t.[CanTextSecondaryPhone], t.[CanLeaveVoiceMailSecondaryPhone], t.[EmailAddress], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
	from [cdc].[wwp_ParticipantContactInfo_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantContactInfo', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_ParticipantEnrolledProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_ParticipantEnrolledProgram]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [EnrolledProgramId], NULL as [EnrolledProgramStatusCodeId], NULL as [ReferralDate], NULL as [EnrollmentDate], NULL as [DisenrollmentDate], NULL as [CASENumber], NULL as [ReferralRegistrationCode], NULL as [CurrentRegCode], NULL as [AGSequenceNumber], NULL as [CaseManagerId], NULL as [WorkerId], NULL as [CompletionReasonId], NULL as [RequestForAssistanceId], NULL as [OfficeId], NULL as [IsDeleted], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion], NULL as [LFFEPId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantEnrolledProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[EnrolledProgramId], t.[EnrolledProgramStatusCodeId], t.[ReferralDate], t.[EnrollmentDate], t.[DisenrollmentDate], t.[CASENumber], t.[ReferralRegistrationCode], t.[CurrentRegCode], t.[AGSequenceNumber], t.[CaseManagerId], t.[WorkerId], t.[CompletionReasonId], t.[RequestForAssistanceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[LFFEPId]
	from [cdc].[wwp_ParticipantEnrolledProgram_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantEnrolledProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[EnrolledProgramId], t.[EnrolledProgramStatusCodeId], t.[ReferralDate], t.[EnrollmentDate], t.[DisenrollmentDate], t.[CASENumber], t.[ReferralRegistrationCode], t.[CurrentRegCode], t.[AGSequenceNumber], t.[CaseManagerId], t.[WorkerId], t.[CompletionReasonId], t.[RequestForAssistanceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[LFFEPId]
	from [cdc].[wwp_ParticipantEnrolledProgram_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantEnrolledProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_PendingCharge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_PendingCharge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [LegalSectionId], NULL as [ConvictionTypeID], NULL as [ChargeDate], NULL as [IsUnknown], NULL as [Details], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PendingCharge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[ChargeDate], t.[IsUnknown], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PendingCharge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PendingCharge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[ChargeDate], t.[IsUnknown], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PendingCharge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PendingCharge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryCollege]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryCollege]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PostSecondaryEducationSectionId], NULL as [SchoolCollegeEstablishmentId], NULL as [HasGraduated], NULL as [LastYearAttended], NULL as [CurrentlyAttending], NULL as [Semesters], NULL as [Credits], NULL as [Details], NULL as [OriginId], NULL as [SortOrder], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryCollege', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PostSecondaryEducationSectionId], t.[SchoolCollegeEstablishmentId], t.[HasGraduated], t.[LastYearAttended], t.[CurrentlyAttending], t.[Semesters], t.[Credits], t.[Details], t.[OriginId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryCollege_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryCollege', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PostSecondaryEducationSectionId], t.[SchoolCollegeEstablishmentId], t.[HasGraduated], t.[LastYearAttended], t.[CurrentlyAttending], t.[Semesters], t.[Credits], t.[Details], t.[OriginId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryCollege_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryCollege', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryDegree]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryDegree]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PostSecondaryEducationSectionId], NULL as [Name], NULL as [College], NULL as [DegreeTypeId], NULL as [YearAttained], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryDegree', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PostSecondaryEducationSectionId], t.[Name], t.[College], t.[DegreeTypeId], t.[YearAttained], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryDegree_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryDegree', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[PostSecondaryEducationSectionId], t.[Name], t.[College], t.[DegreeTypeId], t.[YearAttained], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryDegree_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryDegree', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryEducationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryEducationAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryEducationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryEducationSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [DidAttendCollege], NULL as [IsWorkingOnLicensesOrCertificates], NULL as [DoesHaveDegrees], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[DidAttendCollege], t.[IsWorkingOnLicensesOrCertificates], t.[DoesHaveDegrees], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryEducationSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[DidAttendCollege], t.[IsWorkingOnLicensesOrCertificates], t.[DoesHaveDegrees], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryEducationSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryLicense]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_PostSecondaryLicense]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Name], NULL as [Issuer], NULL as [AttainedDate], NULL as [ExpiredDate], NULL as [IsInProgress], NULL as [DoesNotExpire], NULL as [ValidInWIPolarLookupId], NULL as [LicenseTypeId], NULL as [PostSecondaryEducationSectionId], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryLicense', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Name], t.[Issuer], t.[AttainedDate], t.[ExpiredDate], t.[IsInProgress], t.[DoesNotExpire], t.[ValidInWIPolarLookupId], t.[LicenseTypeId], t.[PostSecondaryEducationSectionId], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryLicense_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryLicense', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Name], t.[Issuer], t.[AttainedDate], t.[ExpiredDate], t.[IsInProgress], t.[DoesNotExpire], t.[ValidInWIPolarLookupId], t.[LicenseTypeId], t.[PostSecondaryEducationSectionId], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_PostSecondaryLicense_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryLicense', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_RecentParticipant]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_RecentParticipant]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkerId], NULL as [ParticipantId], NULL as [LastAccessed], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_RecentParticipant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkerId], t.[ParticipantId], t.[LastAccessed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_RecentParticipant_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_RecentParticipant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkerId], t.[ParticipantId], t.[LastAccessed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_RecentParticipant_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_RecentParticipant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_RequestForAssistance]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_RequestForAssistance]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [RequestForAssistanceStatusId], NULL as [RequestForAssistanceStatusDate], NULL as [RfaNumber], NULL as [EnrolledProgramId], NULL as [CountyOfResidenceId], NULL as [OfficeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_RequestForAssistance', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[RequestForAssistanceStatusId], t.[RequestForAssistanceStatusDate], t.[RfaNumber], t.[EnrolledProgramId], t.[CountyOfResidenceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_RequestForAssistance_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_RequestForAssistance', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[RequestForAssistanceStatusId], t.[RequestForAssistanceStatusDate], t.[RfaNumber], t.[EnrolledProgramId], t.[CountyOfResidenceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_RequestForAssistance_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_RequestForAssistance', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_SchoolCollegeEstablishment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_SchoolCollegeEstablishment]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Name], NULL as [Street], NULL as [CityId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_SchoolCollegeEstablishment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Name], t.[Street], t.[CityId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_SchoolCollegeEstablishment_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_SchoolCollegeEstablishment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[Name], t.[Street], t.[CityId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_SchoolCollegeEstablishment_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_SchoolCollegeEstablishment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_TimeLimit]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_TimeLimit]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantID], NULL as [EffectiveMonth], NULL as [TimeLimitTypeId], NULL as [TwentyFourMonthLimit], NULL as [StateTimelimit], NULL as [FederalTimeLimit], NULL as [StateId], NULL as [ChangeReasonId], NULL as [ChangeReasonDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PIN_NUM]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimit', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantID], t.[EffectiveMonth], t.[TimeLimitTypeId], t.[TwentyFourMonthLimit], t.[StateTimelimit], t.[FederalTimeLimit], t.[StateId], t.[ChangeReasonId], t.[ChangeReasonDetails], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
	from [cdc].[wwp_TimeLimit_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimit', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantID], t.[EffectiveMonth], t.[TimeLimitTypeId], t.[TwentyFourMonthLimit], t.[StateTimelimit], t.[FederalTimeLimit], t.[StateId], t.[ChangeReasonId], t.[ChangeReasonDetails], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
	from [cdc].[wwp_TimeLimit_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimit', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_TimeLimitExtension]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_TimeLimitExtension]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [ExtensionDecisionId], NULL as [TimeLimitTypeId], NULL as [DecisionDate], NULL as [InitialDiscussionDate], NULL as [ApprovalReasonId], NULL as [DenialReasonId], NULL as [Details], NULL as [IsPendingDVR], NULL as [IsReceivingDVR], NULL as [IsPendingSSIorSSDI], NULL as [BeginMonth], NULL as [EndMonth], NULL as [ExtensionSequence], NULL as [IsBackDatedExtenstion], NULL as [DeleteReasonId], NULL as [Notes], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PIN_NUM]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitExtension', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[ExtensionDecisionId], t.[TimeLimitTypeId], t.[DecisionDate], t.[InitialDiscussionDate], t.[ApprovalReasonId], t.[DenialReasonId], t.[Details], t.[IsPendingDVR], t.[IsReceivingDVR], t.[IsPendingSSIorSSDI], t.[BeginMonth], t.[EndMonth], t.[ExtensionSequence], t.[IsBackDatedExtenstion], t.[DeleteReasonId], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
	from [cdc].[wwp_TimeLimitExtension_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitExtension', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[ExtensionDecisionId], t.[TimeLimitTypeId], t.[DecisionDate], t.[InitialDiscussionDate], t.[ApprovalReasonId], t.[DenialReasonId], t.[Details], t.[IsPendingDVR], t.[IsReceivingDVR], t.[IsPendingSSIorSSDI], t.[BeginMonth], t.[EndMonth], t.[ExtensionSequence], t.[IsBackDatedExtenstion], t.[DeleteReasonId], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
	from [cdc].[wwp_TimeLimitExtension_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitExtension', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_TimeLimitSummary]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_TimeLimitSummary]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [FederalUsed], NULL as [FederalMax], NULL as [StateUsed], NULL as [StateMax], NULL as [CSJUsed], NULL as [CSJMax], NULL as [W2TUsed], NULL as [W2TMax], NULL as [TMPUsed], NULL as [TNPUsed], NULL as [TempUsed], NULL as [TempMax], NULL as [CMCUsed], NULL as [CMCMax], NULL as [OPCUsed], NULL as [OPCMax], NULL as [OtherUsed], NULL as [OtherMax], NULL as [OTF], NULL as [Tribal], NULL as [TJB], NULL as [JOBS], NULL as [NO24], NULL as [FactDetails], NULL as [CSJExtensionDue], NULL as [W2TExtensionDue], NULL as [TempExtensionDue], NULL as [StateExtensionDue], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitSummary', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[FederalUsed], t.[FederalMax], t.[StateUsed], t.[StateMax], t.[CSJUsed], t.[CSJMax], t.[W2TUsed], t.[W2TMax], t.[TMPUsed], t.[TNPUsed], t.[TempUsed], t.[TempMax], t.[CMCUsed], t.[CMCMax], t.[OPCUsed], t.[OPCMax], t.[OtherUsed], t.[OtherMax], t.[OTF], t.[Tribal], t.[TJB], t.[JOBS], t.[NO24], t.[FactDetails], t.[CSJExtensionDue], t.[W2TExtensionDue], t.[TempExtensionDue], t.[StateExtensionDue], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TimeLimitSummary_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitSummary', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[FederalUsed], t.[FederalMax], t.[StateUsed], t.[StateMax], t.[CSJUsed], t.[CSJMax], t.[W2TUsed], t.[W2TMax], t.[TMPUsed], t.[TNPUsed], t.[TempUsed], t.[TempMax], t.[CMCUsed], t.[CMCMax], t.[OPCUsed], t.[OPCMax], t.[OtherUsed], t.[OtherMax], t.[OTF], t.[Tribal], t.[TJB], t.[JOBS], t.[NO24], t.[FactDetails], t.[CSJExtensionDue], t.[W2TExtensionDue], t.[TempExtensionDue], t.[StateExtensionDue], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TimeLimitSummary_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitSummary', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_TJTMJRFADetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_TJTMJRFADetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [RequestForAssistanceId], NULL as [ContractorId], NULL as [ApplicationDate], NULL as [ApplicationDueDate], NULL as [IsUnder18], NULL as [HouseholdSizeId], NULL as [HouseholdIncome], NULL as [LastEmploymentDate], NULL as [HasWorkedLessThan16Hours], NULL as [IsEligibleForUnemployment], NULL as [IsReceivingW2Benefits], NULL as [IsCitizen], NULL as [HasWorked1040Hours], NULL as [IsAppCompleteAndSigned], NULL as [HasEligibilityBeenVerified], NULL as [IsBenefitFromSubsidizedJob], NULL as [BenefitFromSubsidizedJobDetails], NULL as [IsEligible], NULL as [PopulationTypeDetails], NULL as [HasNeverEmployed], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TJTMJRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[RequestForAssistanceId], t.[ContractorId], t.[ApplicationDate], t.[ApplicationDueDate], t.[IsUnder18], t.[HouseholdSizeId], t.[HouseholdIncome], t.[LastEmploymentDate], t.[HasWorkedLessThan16Hours], t.[IsEligibleForUnemployment], t.[IsReceivingW2Benefits], t.[IsCitizen], t.[HasWorked1040Hours], t.[IsAppCompleteAndSigned], t.[HasEligibilityBeenVerified], t.[IsBenefitFromSubsidizedJob], t.[BenefitFromSubsidizedJobDetails], t.[IsEligible], t.[PopulationTypeDetails], t.[HasNeverEmployed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TJTMJRFADetails_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TJTMJRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[RequestForAssistanceId], t.[ContractorId], t.[ApplicationDate], t.[ApplicationDueDate], t.[IsUnder18], t.[HouseholdSizeId], t.[HouseholdIncome], t.[LastEmploymentDate], t.[HasWorkedLessThan16Hours], t.[IsEligibleForUnemployment], t.[IsReceivingW2Benefits], t.[IsCitizen], t.[HasWorked1040Hours], t.[IsAppCompleteAndSigned], t.[HasEligibilityBeenVerified], t.[IsBenefitFromSubsidizedJob], t.[BenefitFromSubsidizedJobDetails], t.[IsEligible], t.[PopulationTypeDetails], t.[HasNeverEmployed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TJTMJRFADetails_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TJTMJRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_TransportationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_TransportationAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TransportationAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TransportationAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_TransportationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_TransportationSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [TransporationDetails], NULL as [IsVehicleInsuredId], NULL as [VehicleInsuredDetails], NULL as [IsVehicleRegistrationCurrentId], NULL as [VehicleRegistrationCurrentDetails], NULL as [HasValidDrivingLicense], NULL as [DriversLicenseStateId], NULL as [DriversLicenseExpirationDate], NULL as [DriversLicenseDetails], NULL as [DriversLicenseInvalidReasonId], NULL as [DriversLicenseInvalidDetails], NULL as [HadCommercialDriversLicense], NULL as [IsCommercialDriversLicenseActive], NULL as [CommercialDriversLicenseDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[TransporationDetails], t.[IsVehicleInsuredId], t.[VehicleInsuredDetails], t.[IsVehicleRegistrationCurrentId], t.[VehicleRegistrationCurrentDetails], t.[HasValidDrivingLicense], t.[DriversLicenseStateId], t.[DriversLicenseExpirationDate], t.[DriversLicenseDetails], t.[DriversLicenseInvalidReasonId], t.[DriversLicenseInvalidDetails], t.[HadCommercialDriversLicense], t.[IsCommercialDriversLicenseActive], t.[CommercialDriversLicenseDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TransportationSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[TransporationDetails], t.[IsVehicleInsuredId], t.[VehicleInsuredDetails], t.[IsVehicleRegistrationCurrentId], t.[VehicleRegistrationCurrentDetails], t.[HasValidDrivingLicense], t.[DriversLicenseStateId], t.[DriversLicenseExpirationDate], t.[DriversLicenseDetails], t.[DriversLicenseInvalidReasonId], t.[DriversLicenseInvalidDetails], t.[HadCommercialDriversLicense], t.[IsCommercialDriversLicenseActive], t.[CommercialDriversLicenseDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TransportationSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_TransportationSectionMethodBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_TransportationSectionMethodBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [TransportationSectionId], NULL as [TransporationTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSectionMethodBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[TransportationSectionId], t.[TransporationTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TransportationSectionMethodBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSectionMethodBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[TransportationSectionId], t.[TransporationTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_TransportationSectionMethodBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSectionMethodBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WageHour]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WageHour]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [CurrentEffectiveDate], NULL as [CurrentPayTypeDetails], NULL as [CurrentAverageWeeklyHours], NULL as [CurrentPayRate], NULL as [CurrentPayRateIntervalId], NULL as [CurrentHourlySubsidyRate], NULL as [PastBeginPayRate], NULL as [PastBeginPayRateIntervalId], NULL as [PastEndPayRateIntervalId], NULL as [PastEndPayRate], NULL as [IsUnchangedPastPayRateIndicator], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [ComputedCurrentWageRateUnit], NULL as [ComputedCurrentWageRateValue], NULL as [ComputedPastEndWageRateUnit], NULL as [ComputedPastEndWageRateValue]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHour', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[CurrentEffectiveDate], t.[CurrentPayTypeDetails], t.[CurrentAverageWeeklyHours], t.[CurrentPayRate], t.[CurrentPayRateIntervalId], t.[CurrentHourlySubsidyRate], t.[PastBeginPayRate], t.[PastBeginPayRateIntervalId], t.[PastEndPayRateIntervalId], t.[PastEndPayRate], t.[IsUnchangedPastPayRateIndicator], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedCurrentWageRateUnit], t.[ComputedCurrentWageRateValue], t.[ComputedPastEndWageRateUnit], t.[ComputedPastEndWageRateValue]
	from [cdc].[wwp_WageHour_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHour', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[CurrentEffectiveDate], t.[CurrentPayTypeDetails], t.[CurrentAverageWeeklyHours], t.[CurrentPayRate], t.[CurrentPayRateIntervalId], t.[CurrentHourlySubsidyRate], t.[PastBeginPayRate], t.[PastBeginPayRateIntervalId], t.[PastEndPayRateIntervalId], t.[PastEndPayRate], t.[IsUnchangedPastPayRateIndicator], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedCurrentWageRateUnit], t.[ComputedCurrentWageRateValue], t.[ComputedPastEndWageRateUnit], t.[ComputedPastEndWageRateValue]
	from [cdc].[wwp_WageHour_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHour', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WageHourHistory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WageHourHistory]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WageHourId], NULL as [HourlySubsidyRate], NULL as [EffectiveDate], NULL as [PayTypeDetails], NULL as [AverageWeeklyHours], NULL as [PayRate], NULL as [PayRateIntervalId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [ComputedWageRateUnit], NULL as [ComputedWageRateValue]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WageHourId], t.[HourlySubsidyRate], t.[EffectiveDate], t.[PayTypeDetails], t.[AverageWeeklyHours], t.[PayRate], t.[PayRateIntervalId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedWageRateUnit], t.[ComputedWageRateValue]
	from [cdc].[wwp_WageHourHistory_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WageHourId], t.[HourlySubsidyRate], t.[EffectiveDate], t.[PayTypeDetails], t.[AverageWeeklyHours], t.[PayRate], t.[PayRateIntervalId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedWageRateUnit], t.[ComputedWageRateValue]
	from [cdc].[wwp_WageHourHistory_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WageHourHistoryWageTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WageHourHistoryWageTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WageHourHistoryId], NULL as [WageTypeId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistoryWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WageHourHistoryId], t.[WageTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistoryWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WageHourHistoryId], t.[WageTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
	from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistoryWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WageHourWageTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WageHourWageTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WageHourId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [WageTypeId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WageHourId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WageTypeId]
	from [cdc].[wwp_WageHourWageTypeBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WageHourId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WageTypeId]
	from [cdc].[wwp_WageHourWageTypeBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_Worker]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_Worker]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WAMSId], NULL as [MFUserId], NULL as [FirstName], NULL as [LastName], NULL as [MiddleInitial], NULL as [SuffixName], NULL as [Roles], NULL as [WorkerActiveStatusCode], NULL as [LastLogin], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [OrganizationId], NULL as [WIUID]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Worker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WAMSId], t.[MFUserId], t.[FirstName], t.[LastName], t.[MiddleInitial], t.[SuffixName], t.[Roles], t.[WorkerActiveStatusCode], t.[LastLogin], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[OrganizationId], t.[WIUID]
	from [cdc].[wwp_Worker_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Worker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WAMSId], t.[MFUserId], t.[FirstName], t.[LastName], t.[MiddleInitial], t.[SuffixName], t.[Roles], t.[WorkerActiveStatusCode], t.[LastLogin], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[OrganizationId], t.[WIUID]
	from [cdc].[wwp_Worker_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_Worker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WorkHistoryAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WorkHistoryAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistoryAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_WorkHistoryAssessmentSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistoryAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_WorkHistoryAssessmentSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistoryAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WorkHistorySection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WorkHistorySection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [EmploymentStatusTypeId], NULL as [HasVolunteered], NULL as [NonFullTimeDetails], NULL as [Notes], NULL as [PreventionFactors], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HasCareerAssessment], NULL as [HasCareerAssessmentNotes]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[EmploymentStatusTypeId], t.[HasVolunteered], t.[NonFullTimeDetails], t.[Notes], t.[PreventionFactors], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasCareerAssessment], t.[HasCareerAssessmentNotes]
	from [cdc].[wwp_WorkHistorySection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[EmploymentStatusTypeId], t.[HasVolunteered], t.[NonFullTimeDetails], t.[Notes], t.[PreventionFactors], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasCareerAssessment], t.[HasCareerAssessmentNotes]
	from [cdc].[wwp_WorkHistorySection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WorkHistorySectionEmploymentPreventionTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WorkHistorySectionEmploymentPreventionTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkHistorySectionId], NULL as [EmploymentPreventionTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySectionEmploymentPreventionTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkHistorySectionId], t.[EmploymentPreventionTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySectionEmploymentPreventionTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[WorkHistorySectionId], t.[EmploymentPreventionTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySectionEmploymentPreventionTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_all_changes_wwp_WorkProgramSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_all_changes_wwp_WorkProgramSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return
	
	select NULL as __$start_lsn,
		NULL as __$seqval,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsInOtherPrograms], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkProgramSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 0)

	union all
	
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsInOtherPrograms], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_WorkProgramSection_CT] t with (nolock)    
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkProgramSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4)
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
		
	union all	
		
	select t.__$start_lsn as __$start_lsn,
		t.__$seqval as __$seqval,
		t.__$operation as __$operation,
		t.__$update_mask as __$update_mask, t.[Id], t.[ParticipantId], t.[IsInOtherPrograms], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
	from [cdc].[wwp_WorkProgramSection_CT] t with (nolock)     
	where (lower(rtrim(ltrim(@row_filter_option))) = 'all update old')
	    and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkProgramSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 0) = 1)
		and (t.__$operation = 1 or t.__$operation = 2 or t.__$operation = 4 or
		     t.__$operation = 3 )
		and (t.__$start_lsn <= @to_lsn)
		and (t.__$start_lsn >= @from_lsn)
	
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_Absence]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_Absence]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [BeginDate], NULL as [EndDate], NULL as [AbsenceReasonId], NULL as [Details], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Absence', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_522A470A
	    when 1 then __$operation
	    else
			case __$min_op_522A470A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [EmploymentInformationId], [BeginDate], [EndDate], [AbsenceReasonId], [Details], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_522A470A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Absence_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_522A470A, __$count_522A470A, t.[Id], t.[EmploymentInformationId], t.[BeginDate], t.[EndDate], t.[AbsenceReasonId], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted] 
		from [cdc].[wwp_Absence_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_522A470A,
		    count(*) as __$count_522A470A 
			from [cdc].[wwp_Absence_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_522A470A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Absence', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Absence_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_522A470A
	    when 1 then __$operation
	    else
			case __$min_op_522A470A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_522A470A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_522A470A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [EmploymentInformationId], [BeginDate], [EndDate], [AbsenceReasonId], [Details], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_522A470A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Absence_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_522A470A, __$count_522A470A, 
		m.__$update_mask , t.[Id], t.[EmploymentInformationId], t.[BeginDate], t.[EndDate], t.[AbsenceReasonId], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_Absence_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_522A470A,
		    count(*) as __$count_522A470A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_Absence_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_522A470A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Absence', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Absence_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[EmploymentInformationId], t.[BeginDate], t.[EndDate], t.[AbsenceReasonId], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_Absence_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_522A470A
			from [cdc].[wwp_Absence_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_522A470A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Absence', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Absence_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ActionNeeded]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ActionNeeded]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [ActionNeededPageId], NULL as [IsNoActionNeeded], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeeded', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_652A432A
	    when 1 then __$operation
	    else
			case __$min_op_652A432A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [ActionNeededPageId], [IsNoActionNeeded], [IsDeleted], [CreatedDate], [ModifiedDate], [ModifiedBy], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_652A432A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ActionNeeded_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_652A432A, __$count_652A432A, t.[Id], t.[ParticipantId], t.[ActionNeededPageId], t.[IsNoActionNeeded], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion] 
		from [cdc].[wwp_ActionNeeded_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_652A432A,
		    count(*) as __$count_652A432A 
			from [cdc].[wwp_ActionNeeded_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_652A432A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeeded', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeeded_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_652A432A
	    when 1 then __$operation
	    else
			case __$min_op_652A432A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_652A432A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_652A432A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [ActionNeededPageId], [IsNoActionNeeded], [IsDeleted], [CreatedDate], [ModifiedDate], [ModifiedBy], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_652A432A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ActionNeeded_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_652A432A, __$count_652A432A, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[ActionNeededPageId], t.[IsNoActionNeeded], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
		from [cdc].[wwp_ActionNeeded_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_652A432A,
		    count(*) as __$count_652A432A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ActionNeeded_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_652A432A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeeded', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeeded_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[ActionNeededPageId], t.[IsNoActionNeeded], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
		from [cdc].[wwp_ActionNeeded_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_652A432A
			from [cdc].[wwp_ActionNeeded_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_652A432A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeeded', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeeded_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ActionNeededPageActionItemBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ActionNeededPageActionItemBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ActionNeededPageId], NULL as [ActionItemId], NULL as [SortOrder], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededPageActionItemBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_4D602B01
	    when 1 then __$operation
	    else
			case __$min_op_4D602B01 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ActionNeededPageId], [ActionItemId], [SortOrder], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4D602B01 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4D602B01, __$count_4D602B01, t.[Id], t.[ActionNeededPageId], t.[ActionItemId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4D602B01,
		    count(*) as __$count_4D602B01 
			from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4D602B01 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededPageActionItemBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_4D602B01
	    when 1 then __$operation
	    else
			case __$min_op_4D602B01 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_4D602B01
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_4D602B01 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ActionNeededPageId], [ActionItemId], [SortOrder], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4D602B01 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4D602B01, __$count_4D602B01, 
		m.__$update_mask , t.[Id], t.[ActionNeededPageId], t.[ActionItemId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4D602B01,
		    count(*) as __$count_4D602B01, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4D602B01 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededPageActionItemBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ActionNeededPageId], t.[ActionItemId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4D602B01
			from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4D602B01 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededPageActionItemBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeededPageActionItemBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ActionNeededTask]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ActionNeededTask]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ActionNeededId], NULL as [ActionAssigneeId], NULL as [ActionItemId], NULL as [ActionPriorityId], NULL as [FollowUpTask], NULL as [DueDate], NULL as [IsNoDueDate], NULL as [CompletionDate], NULL as [IsNoCompletionDate], NULL as [Details], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededTask', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_040AF0D0
	    when 1 then __$operation
	    else
			case __$min_op_040AF0D0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ActionNeededId], [ActionAssigneeId], [ActionItemId], [ActionPriorityId], [FollowUpTask], [DueDate], [IsNoDueDate], [CompletionDate], [IsNoCompletionDate], [Details], [IsDeleted], [CreatedDate], [ModifiedDate], [ModifiedBy], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_040AF0D0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ActionNeededTask_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_040AF0D0, __$count_040AF0D0, t.[Id], t.[ActionNeededId], t.[ActionAssigneeId], t.[ActionItemId], t.[ActionPriorityId], t.[FollowUpTask], t.[DueDate], t.[IsNoDueDate], t.[CompletionDate], t.[IsNoCompletionDate], t.[Details], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion] 
		from [cdc].[wwp_ActionNeededTask_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_040AF0D0,
		    count(*) as __$count_040AF0D0 
			from [cdc].[wwp_ActionNeededTask_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_040AF0D0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededTask', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeededTask_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_040AF0D0
	    when 1 then __$operation
	    else
			case __$min_op_040AF0D0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_040AF0D0
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_040AF0D0 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ActionNeededId], [ActionAssigneeId], [ActionItemId], [ActionPriorityId], [FollowUpTask], [DueDate], [IsNoDueDate], [CompletionDate], [IsNoCompletionDate], [Details], [IsDeleted], [CreatedDate], [ModifiedDate], [ModifiedBy], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_040AF0D0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ActionNeededTask_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_040AF0D0, __$count_040AF0D0, 
		m.__$update_mask , t.[Id], t.[ActionNeededId], t.[ActionAssigneeId], t.[ActionItemId], t.[ActionPriorityId], t.[FollowUpTask], t.[DueDate], t.[IsNoDueDate], t.[CompletionDate], t.[IsNoCompletionDate], t.[Details], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
		from [cdc].[wwp_ActionNeededTask_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_040AF0D0,
		    count(*) as __$count_040AF0D0, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ActionNeededTask_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_040AF0D0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededTask', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeededTask_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ActionNeededId], t.[ActionAssigneeId], t.[ActionItemId], t.[ActionPriorityId], t.[FollowUpTask], t.[DueDate], t.[IsNoDueDate], t.[CompletionDate], t.[IsNoCompletionDate], t.[Details], t.[IsDeleted], t.[CreatedDate], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion]
		from [cdc].[wwp_ActionNeededTask_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_040AF0D0
			from [cdc].[wwp_ActionNeededTask_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_040AF0D0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ActionNeededTask', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ActionNeededTask_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_AlternateMailingAddress]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_AlternateMailingAddress]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ZipCode], NULL as [CityAddressId], NULL as [StateId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [StreetAddressPlaceId], NULL as [AddressLine1], NULL as [AddressLine2], NULL as [AddressVerificationTypeLookupId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_AlternateMailingAddress', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_995251E6
	    when 1 then __$operation
	    else
			case __$min_op_995251E6 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ZipCode], [CityAddressId], [StateId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [StreetAddressPlaceId], [AddressLine1], [AddressLine2], [AddressVerificationTypeLookupId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_995251E6 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_AlternateMailingAddress_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_995251E6, __$count_995251E6, t.[Id], t.[ZipCode], t.[CityAddressId], t.[StateId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId] 
		from [cdc].[wwp_AlternateMailingAddress_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_995251E6,
		    count(*) as __$count_995251E6 
			from [cdc].[wwp_AlternateMailingAddress_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_995251E6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_AlternateMailingAddress', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_AlternateMailingAddress_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_995251E6
	    when 1 then __$operation
	    else
			case __$min_op_995251E6 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_995251E6
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_995251E6 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ZipCode], [CityAddressId], [StateId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [StreetAddressPlaceId], [AddressLine1], [AddressLine2], [AddressVerificationTypeLookupId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_995251E6 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_AlternateMailingAddress_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_995251E6, __$count_995251E6, 
		m.__$update_mask , t.[Id], t.[ZipCode], t.[CityAddressId], t.[StateId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
		from [cdc].[wwp_AlternateMailingAddress_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_995251E6,
		    count(*) as __$count_995251E6, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_AlternateMailingAddress_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_995251E6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_AlternateMailingAddress', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_AlternateMailingAddress_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ZipCode], t.[CityAddressId], t.[StateId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
		from [cdc].[wwp_AlternateMailingAddress_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_995251E6
			from [cdc].[wwp_AlternateMailingAddress_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_995251E6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_AlternateMailingAddress', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_AlternateMailingAddress_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_BarrierAccommodation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_BarrierAccommodation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailsId], NULL as [AccommodationId], NULL as [BeginDate], NULL as [EndDate], NULL as [Details], NULL as [DeleteReasonId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAccommodation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_90AC3DB1
	    when 1 then __$operation
	    else
			case __$min_op_90AC3DB1 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [BarrierDetailsId], [AccommodationId], [BeginDate], [EndDate], [Details], [DeleteReasonId], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_90AC3DB1 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierAccommodation_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_90AC3DB1, __$count_90AC3DB1, t.[Id], t.[BarrierDetailsId], t.[AccommodationId], t.[BeginDate], t.[EndDate], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_BarrierAccommodation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_90AC3DB1,
		    count(*) as __$count_90AC3DB1 
			from [cdc].[wwp_BarrierAccommodation_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_90AC3DB1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAccommodation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierAccommodation_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_90AC3DB1
	    when 1 then __$operation
	    else
			case __$min_op_90AC3DB1 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_90AC3DB1
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_90AC3DB1 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [BarrierDetailsId], [AccommodationId], [BeginDate], [EndDate], [Details], [DeleteReasonId], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_90AC3DB1 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierAccommodation_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_90AC3DB1, __$count_90AC3DB1, 
		m.__$update_mask , t.[Id], t.[BarrierDetailsId], t.[AccommodationId], t.[BeginDate], t.[EndDate], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierAccommodation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_90AC3DB1,
		    count(*) as __$count_90AC3DB1, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_BarrierAccommodation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_90AC3DB1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAccommodation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierAccommodation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[BarrierDetailsId], t.[AccommodationId], t.[BeginDate], t.[EndDate], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierAccommodation_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_90AC3DB1
			from [cdc].[wwp_BarrierAccommodation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_90AC3DB1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAccommodation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierAccommodation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_BarrierAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_BarrierAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_D88202AE
	    when 1 then __$operation
	    else
			case __$min_op_D88202AE 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_D88202AE 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_D88202AE, __$count_D88202AE, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_BarrierAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_D88202AE,
		    count(*) as __$count_D88202AE 
			from [cdc].[wwp_BarrierAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_D88202AE and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_D88202AE
	    when 1 then __$operation
	    else
			case __$min_op_D88202AE 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_D88202AE
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_D88202AE 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_D88202AE 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_D88202AE, __$count_D88202AE, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_D88202AE,
		    count(*) as __$count_D88202AE, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_BarrierAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_D88202AE and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_D88202AE
			from [cdc].[wwp_BarrierAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_D88202AE and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_BarrierDetail]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_BarrierDetail]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [BarrierTypeId], NULL as [BarrierSectionId], NULL as [OnsetDate], NULL as [EndDate], NULL as [IsAccommodationNeeded], NULL as [Details], NULL as [WasClosedAtDisenrollment], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsConverted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3ED772CB
	    when 1 then __$operation
	    else
			case __$min_op_3ED772CB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [BarrierTypeId], [BarrierSectionId], [OnsetDate], [EndDate], [IsAccommodationNeeded], [Details], [WasClosedAtDisenrollment], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [IsConverted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3ED772CB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierDetail_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3ED772CB, __$count_3ED772CB, t.[Id], t.[ParticipantId], t.[BarrierTypeId], t.[BarrierSectionId], t.[OnsetDate], t.[EndDate], t.[IsAccommodationNeeded], t.[Details], t.[WasClosedAtDisenrollment], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsConverted] 
		from [cdc].[wwp_BarrierDetail_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3ED772CB,
		    count(*) as __$count_3ED772CB 
			from [cdc].[wwp_BarrierDetail_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3ED772CB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierDetail_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3ED772CB
	    when 1 then __$operation
	    else
			case __$min_op_3ED772CB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3ED772CB
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3ED772CB 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [BarrierTypeId], [BarrierSectionId], [OnsetDate], [EndDate], [IsAccommodationNeeded], [Details], [WasClosedAtDisenrollment], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [IsConverted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3ED772CB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierDetail_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3ED772CB, __$count_3ED772CB, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[BarrierTypeId], t.[BarrierSectionId], t.[OnsetDate], t.[EndDate], t.[IsAccommodationNeeded], t.[Details], t.[WasClosedAtDisenrollment], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsConverted]
		from [cdc].[wwp_BarrierDetail_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3ED772CB,
		    count(*) as __$count_3ED772CB, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_BarrierDetail_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3ED772CB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierDetail_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[BarrierTypeId], t.[BarrierSectionId], t.[OnsetDate], t.[EndDate], t.[IsAccommodationNeeded], t.[Details], t.[WasClosedAtDisenrollment], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsConverted]
		from [cdc].[wwp_BarrierDetail_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3ED772CB
			from [cdc].[wwp_BarrierDetail_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3ED772CB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierDetail_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_BarrierDetailContactBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_BarrierDetailContactBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailId], NULL as [ContactId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetailContactBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_23568774
	    when 1 then __$operation
	    else
			case __$min_op_23568774 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [BarrierDetailId], [ContactId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_23568774 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierDetailContactBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_23568774, __$count_23568774, t.[Id], t.[BarrierDetailId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_BarrierDetailContactBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_23568774,
		    count(*) as __$count_23568774 
			from [cdc].[wwp_BarrierDetailContactBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_23568774 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetailContactBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierDetailContactBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_23568774
	    when 1 then __$operation
	    else
			case __$min_op_23568774 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_23568774
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_23568774 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [BarrierDetailId], [ContactId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_23568774 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierDetailContactBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_23568774, __$count_23568774, 
		m.__$update_mask , t.[Id], t.[BarrierDetailId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierDetailContactBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_23568774,
		    count(*) as __$count_23568774, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_BarrierDetailContactBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_23568774 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetailContactBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierDetailContactBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[BarrierDetailId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierDetailContactBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_23568774
			from [cdc].[wwp_BarrierDetailContactBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_23568774 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierDetailContactBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierDetailContactBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_BarrierSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_BarrierSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsPhysicalHealthHardToManageDetails], NULL as [IsPhysicalHealthHardToManageId], NULL as [IsPhysicalHealthHardToParticipateDetails], NULL as [IsPhysicalHealthHardToParticipateId], NULL as [IsPhysicalHealthTakeMedicationDetails], NULL as [IsPhysicalHealthTakeMedicationId], NULL as [IsMentalHealthHardDiagnosedDetails], NULL as [IsMentalHealthHardDiagnosedId], NULL as [IsMentalHealthHardToManageDetails], NULL as [IsMentalHealthHardToManageId], NULL as [IsMentalHealthHardToParticipateDetails], NULL as [IsMentalHealthHardToParticipateId], NULL as [IsMentalHealthTakeMedicationDetails], NULL as [IsMentalHealthTakeMedicationId], NULL as [IsAODAHardToManageDetails], NULL as [IsAODAHardToManageId], NULL as [IsAODAHardToParticipateDetails], NULL as [IsAODAHardToParticipateId], NULL as [IsAODATakeTreatmentDetails], NULL as [IsAODATakeTreatmentId], NULL as [IsLearningDisabilityDiagnosedDetails], NULL as [IsLearningDisabilityDiagnosedId], NULL as [IsLearningDisabilityHardToManageDetails], NULL as [IsLearningDisabilityHardToManageId], NULL as [IsLearningDisabilityHardToParticipateDetails], NULL as [IsLearningDisabilityHardToParticipateId], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [Notes], NULL as [RowVersion], NULL as [IsDomesticViolenceHurtingYouOrOthersId], NULL as [IsDomesticViolenceHurtingYouOrOthersDetails], NULL as [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], NULL as [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], NULL as [IsDomesticViolencePartnerControlledMoneyId], NULL as [IsDomesticViolencePartnerControlledMoneyDetails], NULL as [IsDomesticViolenceReceivedServicesOrLivedInShelterId], NULL as [IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], NULL as [IsDomesticViolenceEmotionallyOrVerballyAbusingId], NULL as [IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], NULL as [IsDomesticViolenceCallingHarassingStalkingAtWorkId], NULL as [IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], NULL as [IsDomesticViolenceMakingItDifficultToWorkId], NULL as [IsDomesticViolenceMakingItDifficultToWorkDetails], NULL as [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], NULL as [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], NULL as [IsDomesticViolenceInvolvedInCourtsId], NULL as [IsDomesticViolenceInvolvedInCourtsDetails]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_677FA233
	    when 1 then __$operation
	    else
			case __$min_op_677FA233 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [IsPhysicalHealthHardToManageDetails], [IsPhysicalHealthHardToManageId], [IsPhysicalHealthHardToParticipateDetails], [IsPhysicalHealthHardToParticipateId], [IsPhysicalHealthTakeMedicationDetails], [IsPhysicalHealthTakeMedicationId], [IsMentalHealthHardDiagnosedDetails], [IsMentalHealthHardDiagnosedId], [IsMentalHealthHardToManageDetails], [IsMentalHealthHardToManageId], [IsMentalHealthHardToParticipateDetails], [IsMentalHealthHardToParticipateId], [IsMentalHealthTakeMedicationDetails], [IsMentalHealthTakeMedicationId], [IsAODAHardToManageDetails], [IsAODAHardToManageId], [IsAODAHardToParticipateDetails], [IsAODAHardToParticipateId], [IsAODATakeTreatmentDetails], [IsAODATakeTreatmentId], [IsLearningDisabilityDiagnosedDetails], [IsLearningDisabilityDiagnosedId], [IsLearningDisabilityHardToManageDetails], [IsLearningDisabilityHardToManageId], [IsLearningDisabilityHardToParticipateDetails], [IsLearningDisabilityHardToParticipateId], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [Notes], [RowVersion], [IsDomesticViolenceHurtingYouOrOthersId], [IsDomesticViolenceHurtingYouOrOthersDetails], [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], [IsDomesticViolencePartnerControlledMoneyId], [IsDomesticViolencePartnerControlledMoneyDetails], [IsDomesticViolenceReceivedServicesOrLivedInShelterId], [IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], [IsDomesticViolenceEmotionallyOrVerballyAbusingId], [IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], [IsDomesticViolenceCallingHarassingStalkingAtWorkId], [IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], [IsDomesticViolenceMakingItDifficultToWorkId], [IsDomesticViolenceMakingItDifficultToWorkDetails], [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], [IsDomesticViolenceInvolvedInCourtsId], [IsDomesticViolenceInvolvedInCourtsDetails]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_677FA233 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_677FA233, __$count_677FA233, t.[Id], t.[ParticipantId], t.[IsPhysicalHealthHardToManageDetails], t.[IsPhysicalHealthHardToManageId], t.[IsPhysicalHealthHardToParticipateDetails], t.[IsPhysicalHealthHardToParticipateId], t.[IsPhysicalHealthTakeMedicationDetails], t.[IsPhysicalHealthTakeMedicationId], t.[IsMentalHealthHardDiagnosedDetails], t.[IsMentalHealthHardDiagnosedId], t.[IsMentalHealthHardToManageDetails], t.[IsMentalHealthHardToManageId], t.[IsMentalHealthHardToParticipateDetails], t.[IsMentalHealthHardToParticipateId], t.[IsMentalHealthTakeMedicationDetails], t.[IsMentalHealthTakeMedicationId], t.[IsAODAHardToManageDetails], t.[IsAODAHardToManageId], t.[IsAODAHardToParticipateDetails], t.[IsAODAHardToParticipateId], t.[IsAODATakeTreatmentDetails], t.[IsAODATakeTreatmentId], t.[IsLearningDisabilityDiagnosedDetails], t.[IsLearningDisabilityDiagnosedId], t.[IsLearningDisabilityHardToManageDetails], t.[IsLearningDisabilityHardToManageId], t.[IsLearningDisabilityHardToParticipateDetails], t.[IsLearningDisabilityHardToParticipateId], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[Notes], t.[RowVersion], t.[IsDomesticViolenceHurtingYouOrOthersId], t.[IsDomesticViolenceHurtingYouOrOthersDetails], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], t.[IsDomesticViolencePartnerControlledMoneyId], t.[IsDomesticViolencePartnerControlledMoneyDetails], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterId], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingId], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkId], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], t.[IsDomesticViolenceMakingItDifficultToWorkId], t.[IsDomesticViolenceMakingItDifficultToWorkDetails], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], t.[IsDomesticViolenceInvolvedInCourtsId], t.[IsDomesticViolenceInvolvedInCourtsDetails] 
		from [cdc].[wwp_BarrierSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_677FA233,
		    count(*) as __$count_677FA233 
			from [cdc].[wwp_BarrierSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_677FA233 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_677FA233
	    when 1 then __$operation
	    else
			case __$min_op_677FA233 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_677FA233
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_677FA233 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [IsPhysicalHealthHardToManageDetails], [IsPhysicalHealthHardToManageId], [IsPhysicalHealthHardToParticipateDetails], [IsPhysicalHealthHardToParticipateId], [IsPhysicalHealthTakeMedicationDetails], [IsPhysicalHealthTakeMedicationId], [IsMentalHealthHardDiagnosedDetails], [IsMentalHealthHardDiagnosedId], [IsMentalHealthHardToManageDetails], [IsMentalHealthHardToManageId], [IsMentalHealthHardToParticipateDetails], [IsMentalHealthHardToParticipateId], [IsMentalHealthTakeMedicationDetails], [IsMentalHealthTakeMedicationId], [IsAODAHardToManageDetails], [IsAODAHardToManageId], [IsAODAHardToParticipateDetails], [IsAODAHardToParticipateId], [IsAODATakeTreatmentDetails], [IsAODATakeTreatmentId], [IsLearningDisabilityDiagnosedDetails], [IsLearningDisabilityDiagnosedId], [IsLearningDisabilityHardToManageDetails], [IsLearningDisabilityHardToManageId], [IsLearningDisabilityHardToParticipateDetails], [IsLearningDisabilityHardToParticipateId], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [Notes], [RowVersion], [IsDomesticViolenceHurtingYouOrOthersId], [IsDomesticViolenceHurtingYouOrOthersDetails], [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], [IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], [IsDomesticViolencePartnerControlledMoneyId], [IsDomesticViolencePartnerControlledMoneyDetails], [IsDomesticViolenceReceivedServicesOrLivedInShelterId], [IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], [IsDomesticViolenceEmotionallyOrVerballyAbusingId], [IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], [IsDomesticViolenceCallingHarassingStalkingAtWorkId], [IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], [IsDomesticViolenceMakingItDifficultToWorkId], [IsDomesticViolenceMakingItDifficultToWorkDetails], [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], [IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], [IsDomesticViolenceInvolvedInCourtsId], [IsDomesticViolenceInvolvedInCourtsDetails]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_677FA233 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_677FA233, __$count_677FA233, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[IsPhysicalHealthHardToManageDetails], t.[IsPhysicalHealthHardToManageId], t.[IsPhysicalHealthHardToParticipateDetails], t.[IsPhysicalHealthHardToParticipateId], t.[IsPhysicalHealthTakeMedicationDetails], t.[IsPhysicalHealthTakeMedicationId], t.[IsMentalHealthHardDiagnosedDetails], t.[IsMentalHealthHardDiagnosedId], t.[IsMentalHealthHardToManageDetails], t.[IsMentalHealthHardToManageId], t.[IsMentalHealthHardToParticipateDetails], t.[IsMentalHealthHardToParticipateId], t.[IsMentalHealthTakeMedicationDetails], t.[IsMentalHealthTakeMedicationId], t.[IsAODAHardToManageDetails], t.[IsAODAHardToManageId], t.[IsAODAHardToParticipateDetails], t.[IsAODAHardToParticipateId], t.[IsAODATakeTreatmentDetails], t.[IsAODATakeTreatmentId], t.[IsLearningDisabilityDiagnosedDetails], t.[IsLearningDisabilityDiagnosedId], t.[IsLearningDisabilityHardToManageDetails], t.[IsLearningDisabilityHardToManageId], t.[IsLearningDisabilityHardToParticipateDetails], t.[IsLearningDisabilityHardToParticipateId], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[Notes], t.[RowVersion], t.[IsDomesticViolenceHurtingYouOrOthersId], t.[IsDomesticViolenceHurtingYouOrOthersDetails], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], t.[IsDomesticViolencePartnerControlledMoneyId], t.[IsDomesticViolencePartnerControlledMoneyDetails], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterId], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingId], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkId], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], t.[IsDomesticViolenceMakingItDifficultToWorkId], t.[IsDomesticViolenceMakingItDifficultToWorkDetails], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], t.[IsDomesticViolenceInvolvedInCourtsId], t.[IsDomesticViolenceInvolvedInCourtsDetails]
		from [cdc].[wwp_BarrierSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_677FA233,
		    count(*) as __$count_677FA233, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_BarrierSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_677FA233 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[IsPhysicalHealthHardToManageDetails], t.[IsPhysicalHealthHardToManageId], t.[IsPhysicalHealthHardToParticipateDetails], t.[IsPhysicalHealthHardToParticipateId], t.[IsPhysicalHealthTakeMedicationDetails], t.[IsPhysicalHealthTakeMedicationId], t.[IsMentalHealthHardDiagnosedDetails], t.[IsMentalHealthHardDiagnosedId], t.[IsMentalHealthHardToManageDetails], t.[IsMentalHealthHardToManageId], t.[IsMentalHealthHardToParticipateDetails], t.[IsMentalHealthHardToParticipateId], t.[IsMentalHealthTakeMedicationDetails], t.[IsMentalHealthTakeMedicationId], t.[IsAODAHardToManageDetails], t.[IsAODAHardToManageId], t.[IsAODAHardToParticipateDetails], t.[IsAODAHardToParticipateId], t.[IsAODATakeTreatmentDetails], t.[IsAODATakeTreatmentId], t.[IsLearningDisabilityDiagnosedDetails], t.[IsLearningDisabilityDiagnosedId], t.[IsLearningDisabilityHardToManageDetails], t.[IsLearningDisabilityHardToManageId], t.[IsLearningDisabilityHardToParticipateDetails], t.[IsLearningDisabilityHardToParticipateId], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[Notes], t.[RowVersion], t.[IsDomesticViolenceHurtingYouOrOthersId], t.[IsDomesticViolenceHurtingYouOrOthersDetails], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId], t.[IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails], t.[IsDomesticViolencePartnerControlledMoneyId], t.[IsDomesticViolencePartnerControlledMoneyDetails], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterId], t.[IsDomesticViolenceReceivedServicesOrLivedInShelterDetails], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingId], t.[IsDomesticViolenceEmotionallyOrVerballyAbusingDetails], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkId], t.[IsDomesticViolenceCallingHarassingStalkingAtWorkDetails], t.[IsDomesticViolenceMakingItDifficultToWorkId], t.[IsDomesticViolenceMakingItDifficultToWorkDetails], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId], t.[IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails], t.[IsDomesticViolenceInvolvedInCourtsId], t.[IsDomesticViolenceInvolvedInCourtsDetails]
		from [cdc].[wwp_BarrierSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_677FA233
			from [cdc].[wwp_BarrierSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_677FA233 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_BarrierTypeBarrierSubTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_BarrierTypeBarrierSubTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailId], NULL as [BarrierSubTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierTypeBarrierSubTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_159C55EC
	    when 1 then __$operation
	    else
			case __$min_op_159C55EC 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [BarrierDetailId], [BarrierSubTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_159C55EC 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_159C55EC, __$count_159C55EC, t.[Id], t.[BarrierDetailId], t.[BarrierSubTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_159C55EC,
		    count(*) as __$count_159C55EC 
			from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_159C55EC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierTypeBarrierSubTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_159C55EC
	    when 1 then __$operation
	    else
			case __$min_op_159C55EC 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_159C55EC
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_159C55EC 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [BarrierDetailId], [BarrierSubTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_159C55EC 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_159C55EC, __$count_159C55EC, 
		m.__$update_mask , t.[Id], t.[BarrierDetailId], t.[BarrierSubTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_159C55EC,
		    count(*) as __$count_159C55EC, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_159C55EC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierTypeBarrierSubTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[BarrierDetailId], t.[BarrierSubTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_159C55EC
			from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_159C55EC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_BarrierTypeBarrierSubTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_BarrierTypeBarrierSubTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_CFRFADetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_CFRFADetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [RequestForAssistanceId], NULL as [CourtOrderedCountyId], NULL as [CourtOrderEffectiveDate], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_CFRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_54D04A78
	    when 1 then __$operation
	    else
			case __$min_op_54D04A78 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [RequestForAssistanceId], [CourtOrderedCountyId], [CourtOrderEffectiveDate], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_54D04A78 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_CFRFADetails_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_54D04A78, __$count_54D04A78, t.[Id], t.[RequestForAssistanceId], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_CFRFADetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54D04A78,
		    count(*) as __$count_54D04A78 
			from [cdc].[wwp_CFRFADetails_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54D04A78 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_CFRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_CFRFADetails_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_54D04A78
	    when 1 then __$operation
	    else
			case __$min_op_54D04A78 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_54D04A78
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_54D04A78 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [RequestForAssistanceId], [CourtOrderedCountyId], [CourtOrderEffectiveDate], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_54D04A78 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_CFRFADetails_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_54D04A78, __$count_54D04A78, 
		m.__$update_mask , t.[Id], t.[RequestForAssistanceId], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_CFRFADetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54D04A78,
		    count(*) as __$count_54D04A78, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_CFRFADetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54D04A78 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_CFRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_CFRFADetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[RequestForAssistanceId], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_CFRFADetails_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54D04A78
			from [cdc].[wwp_CFRFADetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54D04A78 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_CFRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_CFRFADetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_Child]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_Child]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PinNumber], NULL as [FirstName], NULL as [MiddleInitialName], NULL as [LastName], NULL as [SuffixName], NULL as [DateOfBirth], NULL as [DateOfDeath], NULL as [GenderTypeId], NULL as [GenderIndicator], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedBy], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Child', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_715A522E
	    when 1 then __$operation
	    else
			case __$min_op_715A522E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [PinNumber], [FirstName], [MiddleInitialName], [LastName], [SuffixName], [DateOfBirth], [DateOfDeath], [GenderTypeId], [GenderIndicator], [IsDeleted], [RowVersion], [ModifiedBy], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_715A522E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Child_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_715A522E, __$count_715A522E, t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderTypeId], t.[GenderIndicator], t.[IsDeleted], t.[RowVersion], t.[ModifiedBy], t.[ModifiedDate] 
		from [cdc].[wwp_Child_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_715A522E,
		    count(*) as __$count_715A522E 
			from [cdc].[wwp_Child_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_715A522E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Child', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Child_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_715A522E
	    when 1 then __$operation
	    else
			case __$min_op_715A522E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_715A522E
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_715A522E 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [PinNumber], [FirstName], [MiddleInitialName], [LastName], [SuffixName], [DateOfBirth], [DateOfDeath], [GenderTypeId], [GenderIndicator], [IsDeleted], [RowVersion], [ModifiedBy], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_715A522E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Child_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_715A522E, __$count_715A522E, 
		m.__$update_mask , t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderTypeId], t.[GenderIndicator], t.[IsDeleted], t.[RowVersion], t.[ModifiedBy], t.[ModifiedDate]
		from [cdc].[wwp_Child_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_715A522E,
		    count(*) as __$count_715A522E, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_Child_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_715A522E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Child', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Child_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderTypeId], t.[GenderIndicator], t.[IsDeleted], t.[RowVersion], t.[ModifiedBy], t.[ModifiedDate]
		from [cdc].[wwp_Child_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_715A522E
			from [cdc].[wwp_Child_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_715A522E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Child', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Child_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ChildYouthSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ChildYouthSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasChildren12OrUnder], NULL as [HasChildrenOver12WithDisabilityInNeedOfChildCare], NULL as [HasFutureChildCareNeed], NULL as [FutureChildCareNeedNotes], NULL as [HasChildWelfareWorker], NULL as [ChildWelfareWorkerChildren], NULL as [ChildWelfareWorkerPlanOrRequirements], NULL as [ChildWelfareContactId], NULL as [HasWicBenefits], NULL as [IsInHeadStart], NULL as [IsInAfterSchoolOrSummerProgram], NULL as [AfterSchoolProgramDetails], NULL as [IsInMentoringProgram], NULL as [MentoringProgramDetails], NULL as [DidOrWillAgeOutOfFosterCare], NULL as [FosterCareDetails], NULL as [Notes], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate], NULL as [IsSpecialNeedsProgramming], NULL as [SpecialNeedsProgrammingDetails]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_282D5F20
	    when 1 then __$operation
	    else
			case __$min_op_282D5F20 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [HasChildren12OrUnder], [HasChildrenOver12WithDisabilityInNeedOfChildCare], [HasFutureChildCareNeed], [FutureChildCareNeedNotes], [HasChildWelfareWorker], [ChildWelfareWorkerChildren], [ChildWelfareWorkerPlanOrRequirements], [ChildWelfareContactId], [HasWicBenefits], [IsInHeadStart], [IsInAfterSchoolOrSummerProgram], [AfterSchoolProgramDetails], [IsInMentoringProgram], [MentoringProgramDetails], [DidOrWillAgeOutOfFosterCare], [FosterCareDetails], [Notes], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate], [IsSpecialNeedsProgramming], [SpecialNeedsProgrammingDetails]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_282D5F20 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ChildYouthSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_282D5F20, __$count_282D5F20, t.[Id], t.[ParticipantId], t.[HasChildren12OrUnder], t.[HasChildrenOver12WithDisabilityInNeedOfChildCare], t.[HasFutureChildCareNeed], t.[FutureChildCareNeedNotes], t.[HasChildWelfareWorker], t.[ChildWelfareWorkerChildren], t.[ChildWelfareWorkerPlanOrRequirements], t.[ChildWelfareContactId], t.[HasWicBenefits], t.[IsInHeadStart], t.[IsInAfterSchoolOrSummerProgram], t.[AfterSchoolProgramDetails], t.[IsInMentoringProgram], t.[MentoringProgramDetails], t.[DidOrWillAgeOutOfFosterCare], t.[FosterCareDetails], t.[Notes], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate], t.[IsSpecialNeedsProgramming], t.[SpecialNeedsProgrammingDetails] 
		from [cdc].[wwp_ChildYouthSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_282D5F20,
		    count(*) as __$count_282D5F20 
			from [cdc].[wwp_ChildYouthSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_282D5F20 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_282D5F20
	    when 1 then __$operation
	    else
			case __$min_op_282D5F20 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_282D5F20
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_282D5F20 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [HasChildren12OrUnder], [HasChildrenOver12WithDisabilityInNeedOfChildCare], [HasFutureChildCareNeed], [FutureChildCareNeedNotes], [HasChildWelfareWorker], [ChildWelfareWorkerChildren], [ChildWelfareWorkerPlanOrRequirements], [ChildWelfareContactId], [HasWicBenefits], [IsInHeadStart], [IsInAfterSchoolOrSummerProgram], [AfterSchoolProgramDetails], [IsInMentoringProgram], [MentoringProgramDetails], [DidOrWillAgeOutOfFosterCare], [FosterCareDetails], [Notes], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate], [IsSpecialNeedsProgramming], [SpecialNeedsProgrammingDetails]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_282D5F20 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ChildYouthSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_282D5F20, __$count_282D5F20, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[HasChildren12OrUnder], t.[HasChildrenOver12WithDisabilityInNeedOfChildCare], t.[HasFutureChildCareNeed], t.[FutureChildCareNeedNotes], t.[HasChildWelfareWorker], t.[ChildWelfareWorkerChildren], t.[ChildWelfareWorkerPlanOrRequirements], t.[ChildWelfareContactId], t.[HasWicBenefits], t.[IsInHeadStart], t.[IsInAfterSchoolOrSummerProgram], t.[AfterSchoolProgramDetails], t.[IsInMentoringProgram], t.[MentoringProgramDetails], t.[DidOrWillAgeOutOfFosterCare], t.[FosterCareDetails], t.[Notes], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate], t.[IsSpecialNeedsProgramming], t.[SpecialNeedsProgrammingDetails]
		from [cdc].[wwp_ChildYouthSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_282D5F20,
		    count(*) as __$count_282D5F20, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ChildYouthSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_282D5F20 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[HasChildren12OrUnder], t.[HasChildrenOver12WithDisabilityInNeedOfChildCare], t.[HasFutureChildCareNeed], t.[FutureChildCareNeedNotes], t.[HasChildWelfareWorker], t.[ChildWelfareWorkerChildren], t.[ChildWelfareWorkerPlanOrRequirements], t.[ChildWelfareContactId], t.[HasWicBenefits], t.[IsInHeadStart], t.[IsInAfterSchoolOrSummerProgram], t.[AfterSchoolProgramDetails], t.[IsInMentoringProgram], t.[MentoringProgramDetails], t.[DidOrWillAgeOutOfFosterCare], t.[FosterCareDetails], t.[Notes], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate], t.[IsSpecialNeedsProgramming], t.[SpecialNeedsProgrammingDetails]
		from [cdc].[wwp_ChildYouthSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_282D5F20
			from [cdc].[wwp_ChildYouthSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_282D5F20 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ChildYouthSectionChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ChildYouthSectionChild]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ChildYouthSectionId], NULL as [ChildId], NULL as [CareArrangementId], NULL as [AgeCategoryId], NULL as [IsSpecialNeeds], NULL as [Details], NULL as [ModifiedBy], NULL as [DeleteReasonId], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSectionChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3F33CE59
	    when 1 then __$operation
	    else
			case __$min_op_3F33CE59 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ChildYouthSectionId], [ChildId], [CareArrangementId], [AgeCategoryId], [IsSpecialNeeds], [Details], [ModifiedBy], [DeleteReasonId], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3F33CE59 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ChildYouthSectionChild_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3F33CE59, __$count_3F33CE59, t.[Id], t.[ChildYouthSectionId], t.[ChildId], t.[CareArrangementId], t.[AgeCategoryId], t.[IsSpecialNeeds], t.[Details], t.[ModifiedBy], t.[DeleteReasonId], t.[RowVersion], t.[ModifiedDate] 
		from [cdc].[wwp_ChildYouthSectionChild_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3F33CE59,
		    count(*) as __$count_3F33CE59 
			from [cdc].[wwp_ChildYouthSectionChild_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3F33CE59 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSectionChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSectionChild_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3F33CE59
	    when 1 then __$operation
	    else
			case __$min_op_3F33CE59 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3F33CE59
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3F33CE59 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ChildYouthSectionId], [ChildId], [CareArrangementId], [AgeCategoryId], [IsSpecialNeeds], [Details], [ModifiedBy], [DeleteReasonId], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3F33CE59 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ChildYouthSectionChild_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3F33CE59, __$count_3F33CE59, 
		m.__$update_mask , t.[Id], t.[ChildYouthSectionId], t.[ChildId], t.[CareArrangementId], t.[AgeCategoryId], t.[IsSpecialNeeds], t.[Details], t.[ModifiedBy], t.[DeleteReasonId], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_ChildYouthSectionChild_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3F33CE59,
		    count(*) as __$count_3F33CE59, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ChildYouthSectionChild_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3F33CE59 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSectionChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSectionChild_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ChildYouthSectionId], t.[ChildId], t.[CareArrangementId], t.[AgeCategoryId], t.[IsSpecialNeeds], t.[Details], t.[ModifiedBy], t.[DeleteReasonId], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_ChildYouthSectionChild_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3F33CE59
			from [cdc].[wwp_ChildYouthSectionChild_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3F33CE59 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSectionChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSectionChild_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ChildYouthSupportsAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ChildYouthSupportsAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSupportsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_7AA8F412
	    when 1 then __$operation
	    else
			case __$min_op_7AA8F412 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7AA8F412 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7AA8F412, __$count_7AA8F412, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate] 
		from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7AA8F412,
		    count(*) as __$count_7AA8F412 
			from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7AA8F412 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSupportsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_7AA8F412
	    when 1 then __$operation
	    else
			case __$min_op_7AA8F412 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_7AA8F412
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_7AA8F412 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7AA8F412 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7AA8F412, __$count_7AA8F412, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7AA8F412,
		    count(*) as __$count_7AA8F412, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7AA8F412 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSupportsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7AA8F412
			from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7AA8F412 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ChildYouthSupportsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ChildYouthSupportsAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ConfidentialPinInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ConfidentialPinInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsConfidential], NULL as [WorkerId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PinNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ConfidentialPinInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3C69CC13
	    when 1 then __$operation
	    else
			case __$min_op_3C69CC13 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [IsConfidential], [WorkerId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PinNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3C69CC13 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ConfidentialPinInformation_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3C69CC13, __$count_3C69CC13, t.[Id], t.[ParticipantId], t.[IsConfidential], t.[WorkerId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber] 
		from [cdc].[wwp_ConfidentialPinInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3C69CC13,
		    count(*) as __$count_3C69CC13 
			from [cdc].[wwp_ConfidentialPinInformation_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3C69CC13 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ConfidentialPinInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ConfidentialPinInformation_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3C69CC13
	    when 1 then __$operation
	    else
			case __$min_op_3C69CC13 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3C69CC13
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3C69CC13 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [IsConfidential], [WorkerId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PinNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3C69CC13 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ConfidentialPinInformation_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3C69CC13, __$count_3C69CC13, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[IsConfidential], t.[WorkerId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
		from [cdc].[wwp_ConfidentialPinInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3C69CC13,
		    count(*) as __$count_3C69CC13, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ConfidentialPinInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3C69CC13 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ConfidentialPinInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ConfidentialPinInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[IsConfidential], t.[WorkerId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
		from [cdc].[wwp_ConfidentialPinInformation_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3C69CC13
			from [cdc].[wwp_ConfidentialPinInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3C69CC13 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ConfidentialPinInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ConfidentialPinInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_Contact]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_Contact]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [TitleId], NULL as [CustomTitle], NULL as [Name], NULL as [Email], NULL as [Phone], NULL as [ExtensionNo], NULL as [FaxNo], NULL as [ReleaseInformationDate], NULL as [Address], NULL as [LegalIssuesSectionId], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Contact', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_03B2539E
	    when 1 then __$operation
	    else
			case __$min_op_03B2539E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [TitleId], [CustomTitle], [Name], [Email], [Phone], [ExtensionNo], [FaxNo], [ReleaseInformationDate], [Address], [LegalIssuesSectionId], [Notes], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_03B2539E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Contact_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_03B2539E, __$count_03B2539E, t.[Id], t.[ParticipantId], t.[TitleId], t.[CustomTitle], t.[Name], t.[Email], t.[Phone], t.[ExtensionNo], t.[FaxNo], t.[ReleaseInformationDate], t.[Address], t.[LegalIssuesSectionId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted] 
		from [cdc].[wwp_Contact_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_03B2539E,
		    count(*) as __$count_03B2539E 
			from [cdc].[wwp_Contact_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_03B2539E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Contact', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Contact_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_03B2539E
	    when 1 then __$operation
	    else
			case __$min_op_03B2539E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_03B2539E
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_03B2539E 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [TitleId], [CustomTitle], [Name], [Email], [Phone], [ExtensionNo], [FaxNo], [ReleaseInformationDate], [Address], [LegalIssuesSectionId], [Notes], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_03B2539E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Contact_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_03B2539E, __$count_03B2539E, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[TitleId], t.[CustomTitle], t.[Name], t.[Email], t.[Phone], t.[ExtensionNo], t.[FaxNo], t.[ReleaseInformationDate], t.[Address], t.[LegalIssuesSectionId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_Contact_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_03B2539E,
		    count(*) as __$count_03B2539E, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_Contact_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_03B2539E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Contact', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Contact_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[TitleId], t.[CustomTitle], t.[Name], t.[Email], t.[Phone], t.[ExtensionNo], t.[FaxNo], t.[ReleaseInformationDate], t.[Address], t.[LegalIssuesSectionId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_Contact_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_03B2539E
			from [cdc].[wwp_Contact_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_03B2539E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Contact', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Contact_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_Conviction]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_Conviction]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [LegalSectionId], NULL as [ConvictionTypeID], NULL as [IsUnknown], NULL as [DateConvicted], NULL as [Details], NULL as [DeleteReasonId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Conviction', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_8896FC52
	    when 1 then __$operation
	    else
			case __$min_op_8896FC52 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [LegalSectionId], [ConvictionTypeID], [IsUnknown], [DateConvicted], [Details], [DeleteReasonId], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_8896FC52 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Conviction_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_8896FC52, __$count_8896FC52, t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[IsUnknown], t.[DateConvicted], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_Conviction_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8896FC52,
		    count(*) as __$count_8896FC52 
			from [cdc].[wwp_Conviction_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8896FC52 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Conviction', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Conviction_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_8896FC52
	    when 1 then __$operation
	    else
			case __$min_op_8896FC52 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_8896FC52
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_8896FC52 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [LegalSectionId], [ConvictionTypeID], [IsUnknown], [DateConvicted], [Details], [DeleteReasonId], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_8896FC52 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Conviction_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_8896FC52, __$count_8896FC52, 
		m.__$update_mask , t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[IsUnknown], t.[DateConvicted], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_Conviction_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8896FC52,
		    count(*) as __$count_8896FC52, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_Conviction_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8896FC52 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Conviction', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Conviction_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[IsUnknown], t.[DateConvicted], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_Conviction_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8896FC52
			from [cdc].[wwp_Conviction_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8896FC52 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Conviction', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Conviction_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_CourtDate]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_CourtDate]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [LegalSectionId], NULL as [IsUnknown], NULL as [Location], NULL as [Date], NULL as [Details], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_CourtDate', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_93E5A6C0
	    when 1 then __$operation
	    else
			case __$min_op_93E5A6C0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [LegalSectionId], [IsUnknown], [Location], [Date], [Details], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_93E5A6C0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_CourtDate_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_93E5A6C0, __$count_93E5A6C0, t.[Id], t.[LegalSectionId], t.[IsUnknown], t.[Location], t.[Date], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_CourtDate_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_93E5A6C0,
		    count(*) as __$count_93E5A6C0 
			from [cdc].[wwp_CourtDate_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_93E5A6C0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_CourtDate', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_CourtDate_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_93E5A6C0
	    when 1 then __$operation
	    else
			case __$min_op_93E5A6C0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_93E5A6C0
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_93E5A6C0 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [LegalSectionId], [IsUnknown], [Location], [Date], [Details], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_93E5A6C0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_CourtDate_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_93E5A6C0, __$count_93E5A6C0, 
		m.__$update_mask , t.[Id], t.[LegalSectionId], t.[IsUnknown], t.[Location], t.[Date], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_CourtDate_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_93E5A6C0,
		    count(*) as __$count_93E5A6C0, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_CourtDate_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_93E5A6C0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_CourtDate', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_CourtDate_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[LegalSectionId], t.[IsUnknown], t.[Location], t.[Date], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_CourtDate_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_93E5A6C0
			from [cdc].[wwp_CourtDate_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_93E5A6C0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_CourtDate', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_CourtDate_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_EducationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_EducationAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_207C9B68
	    when 1 then __$operation
	    else
			case __$min_op_207C9B68 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_207C9B68 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EducationAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_207C9B68, __$count_207C9B68, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_EducationAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_207C9B68,
		    count(*) as __$count_207C9B68 
			from [cdc].[wwp_EducationAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_207C9B68 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_207C9B68
	    when 1 then __$operation
	    else
			case __$min_op_207C9B68 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_207C9B68
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_207C9B68 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_207C9B68 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EducationAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_207C9B68, __$count_207C9B68, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_EducationAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_207C9B68,
		    count(*) as __$count_207C9B68, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_EducationAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_207C9B68 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_EducationAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_207C9B68
			from [cdc].[wwp_EducationAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_207C9B68 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_EducationExam]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_EducationExam]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [ExamTypeId], NULL as [DateTaken], NULL as [Details], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationExam', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_7080E6EA
	    when 1 then __$operation
	    else
			case __$min_op_7080E6EA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [ExamTypeId], [DateTaken], [Details], [ModifiedDate], [ModifiedBy], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7080E6EA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EducationExam_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7080E6EA, __$count_7080E6EA, t.[Id], t.[ParticipantId], t.[ExamTypeId], t.[DateTaken], t.[Details], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[IsDeleted] 
		from [cdc].[wwp_EducationExam_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7080E6EA,
		    count(*) as __$count_7080E6EA 
			from [cdc].[wwp_EducationExam_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7080E6EA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationExam', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationExam_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_7080E6EA
	    when 1 then __$operation
	    else
			case __$min_op_7080E6EA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_7080E6EA
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_7080E6EA 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [ExamTypeId], [DateTaken], [Details], [ModifiedDate], [ModifiedBy], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7080E6EA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EducationExam_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7080E6EA, __$count_7080E6EA, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[ExamTypeId], t.[DateTaken], t.[Details], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_EducationExam_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7080E6EA,
		    count(*) as __$count_7080E6EA, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_EducationExam_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7080E6EA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationExam', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationExam_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[ExamTypeId], t.[DateTaken], t.[Details], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_EducationExam_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7080E6EA
			from [cdc].[wwp_EducationExam_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7080E6EA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationExam', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationExam_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_EducationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_EducationSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [SchoolGraduationStatusId], NULL as [SchoolCollegeEstablishmentId], NULL as [LastGradeLevelCompletedId], NULL as [CertificateIssuingAuthorityId], NULL as [CertificateYearAwarded], NULL as [HasEverAttendedSchool], NULL as [IsCurrentlyEnrolled], NULL as [IsWorkingOnCertificate], NULL as [LastYearAttended], NULL as [HasEducationPlan], NULL as [EducationPlanDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_9D83257A
	    when 1 then __$operation
	    else
			case __$min_op_9D83257A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [SchoolGraduationStatusId], [SchoolCollegeEstablishmentId], [LastGradeLevelCompletedId], [CertificateIssuingAuthorityId], [CertificateYearAwarded], [HasEverAttendedSchool], [IsCurrentlyEnrolled], [IsWorkingOnCertificate], [LastYearAttended], [HasEducationPlan], [EducationPlanDetails], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_9D83257A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EducationSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_9D83257A, __$count_9D83257A, t.[Id], t.[ParticipantId], t.[SchoolGraduationStatusId], t.[SchoolCollegeEstablishmentId], t.[LastGradeLevelCompletedId], t.[CertificateIssuingAuthorityId], t.[CertificateYearAwarded], t.[HasEverAttendedSchool], t.[IsCurrentlyEnrolled], t.[IsWorkingOnCertificate], t.[LastYearAttended], t.[HasEducationPlan], t.[EducationPlanDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_EducationSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_9D83257A,
		    count(*) as __$count_9D83257A 
			from [cdc].[wwp_EducationSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_9D83257A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_9D83257A
	    when 1 then __$operation
	    else
			case __$min_op_9D83257A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_9D83257A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_9D83257A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [SchoolGraduationStatusId], [SchoolCollegeEstablishmentId], [LastGradeLevelCompletedId], [CertificateIssuingAuthorityId], [CertificateYearAwarded], [HasEverAttendedSchool], [IsCurrentlyEnrolled], [IsWorkingOnCertificate], [LastYearAttended], [HasEducationPlan], [EducationPlanDetails], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_9D83257A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EducationSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_9D83257A, __$count_9D83257A, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[SchoolGraduationStatusId], t.[SchoolCollegeEstablishmentId], t.[LastGradeLevelCompletedId], t.[CertificateIssuingAuthorityId], t.[CertificateYearAwarded], t.[HasEverAttendedSchool], t.[IsCurrentlyEnrolled], t.[IsWorkingOnCertificate], t.[LastYearAttended], t.[HasEducationPlan], t.[EducationPlanDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_EducationSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_9D83257A,
		    count(*) as __$count_9D83257A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_EducationSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_9D83257A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[SchoolGraduationStatusId], t.[SchoolCollegeEstablishmentId], t.[LastGradeLevelCompletedId], t.[CertificateIssuingAuthorityId], t.[CertificateYearAwarded], t.[HasEverAttendedSchool], t.[IsCurrentlyEnrolled], t.[IsWorkingOnCertificate], t.[LastYearAttended], t.[HasEducationPlan], t.[EducationPlanDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_EducationSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_9D83257A
			from [cdc].[wwp_EducationSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_9D83257A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EducationSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ElevatedAccess]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ElevatedAccess]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkerId], NULL as [ParticipantId], NULL as [AccessCreateDate], NULL as [ElevatedAccessReasonId], NULL as [Details], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ElevatedAccess', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_48B173BF
	    when 1 then __$operation
	    else
			case __$min_op_48B173BF 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WorkerId], [ParticipantId], [AccessCreateDate], [ElevatedAccessReasonId], [Details], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_48B173BF 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ElevatedAccess_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_48B173BF, __$count_48B173BF, t.[Id], t.[WorkerId], t.[ParticipantId], t.[AccessCreateDate], t.[ElevatedAccessReasonId], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_ElevatedAccess_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_48B173BF,
		    count(*) as __$count_48B173BF 
			from [cdc].[wwp_ElevatedAccess_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_48B173BF and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ElevatedAccess', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ElevatedAccess_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_48B173BF
	    when 1 then __$operation
	    else
			case __$min_op_48B173BF 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_48B173BF
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_48B173BF 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WorkerId], [ParticipantId], [AccessCreateDate], [ElevatedAccessReasonId], [Details], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_48B173BF 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ElevatedAccess_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_48B173BF, __$count_48B173BF, 
		m.__$update_mask , t.[Id], t.[WorkerId], t.[ParticipantId], t.[AccessCreateDate], t.[ElevatedAccessReasonId], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_ElevatedAccess_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_48B173BF,
		    count(*) as __$count_48B173BF, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ElevatedAccess_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_48B173BF and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ElevatedAccess', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ElevatedAccess_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WorkerId], t.[ParticipantId], t.[AccessCreateDate], t.[ElevatedAccessReasonId], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_ElevatedAccess_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_48B173BF
			from [cdc].[wwp_ElevatedAccess_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_48B173BF and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ElevatedAccess', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ElevatedAccess_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_EmployerOfRecordInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_EmployerOfRecordInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [CompanyName], NULL as [Fein], NULL as [StreetAddress], NULL as [ZipAddress], NULL as [CityId], NULL as [JobSectorId], NULL as [ContactId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmployerOfRecordInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_38E1FD1E
	    when 1 then __$operation
	    else
			case __$min_op_38E1FD1E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [EmploymentInformationId], [CompanyName], [Fein], [StreetAddress], [ZipAddress], [CityId], [JobSectorId], [ContactId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_38E1FD1E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmployerOfRecordInformation_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_38E1FD1E, __$count_38E1FD1E, t.[Id], t.[EmploymentInformationId], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[JobSectorId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_EmployerOfRecordInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_38E1FD1E,
		    count(*) as __$count_38E1FD1E 
			from [cdc].[wwp_EmployerOfRecordInformation_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_38E1FD1E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmployerOfRecordInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmployerOfRecordInformation_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_38E1FD1E
	    when 1 then __$operation
	    else
			case __$min_op_38E1FD1E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_38E1FD1E
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_38E1FD1E 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [EmploymentInformationId], [CompanyName], [Fein], [StreetAddress], [ZipAddress], [CityId], [JobSectorId], [ContactId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_38E1FD1E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmployerOfRecordInformation_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_38E1FD1E, __$count_38E1FD1E, 
		m.__$update_mask , t.[Id], t.[EmploymentInformationId], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[JobSectorId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_EmployerOfRecordInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_38E1FD1E,
		    count(*) as __$count_38E1FD1E, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_EmployerOfRecordInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_38E1FD1E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmployerOfRecordInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmployerOfRecordInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[EmploymentInformationId], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[JobSectorId], t.[ContactId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_EmployerOfRecordInformation_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_38E1FD1E
			from [cdc].[wwp_EmployerOfRecordInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_38E1FD1E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmployerOfRecordInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmployerOfRecordInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_EmploymentInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_EmploymentInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [WorkHistorySectionId], NULL as [JobTypeId], NULL as [JobBeginDate], NULL as [JobEndDate], NULL as [IsCurrentlyEmployed], NULL as [JobPosition], NULL as [CompanyName], NULL as [Fein], NULL as [StreetAddress], NULL as [ZipAddress], NULL as [CityId], NULL as [ContactId], NULL as [JobDutiesId], NULL as [LeavingReasonId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [DeleteReasonId], NULL as [OtherJobInformationId], NULL as [WageHoursId], NULL as [Notes], NULL as [EmploymentProgramtypeId], NULL as [LeavingReasonDetails], NULL as [EmployerOfRecordTypeId], NULL as [EmploymentSequenceNumber], NULL as [OriginalOfficeNumber], NULL as [IsConverted], NULL as [IsCurrentJobAtCreation]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_DE065F10
	    when 1 then __$operation
	    else
			case __$min_op_DE065F10 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [WorkHistorySectionId], [JobTypeId], [JobBeginDate], [JobEndDate], [IsCurrentlyEmployed], [JobPosition], [CompanyName], [Fein], [StreetAddress], [ZipAddress], [CityId], [ContactId], [JobDutiesId], [LeavingReasonId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [DeleteReasonId], [OtherJobInformationId], [WageHoursId], [Notes], [EmploymentProgramtypeId], [LeavingReasonDetails], [EmployerOfRecordTypeId], [EmploymentSequenceNumber], [OriginalOfficeNumber], [IsConverted], [IsCurrentJobAtCreation]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_DE065F10 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmploymentInformation_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_DE065F10, __$count_DE065F10, t.[Id], t.[ParticipantId], t.[WorkHistorySectionId], t.[JobTypeId], t.[JobBeginDate], t.[JobEndDate], t.[IsCurrentlyEmployed], t.[JobPosition], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[ContactId], t.[JobDutiesId], t.[LeavingReasonId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[DeleteReasonId], t.[OtherJobInformationId], t.[WageHoursId], t.[Notes], t.[EmploymentProgramtypeId], t.[LeavingReasonDetails], t.[EmployerOfRecordTypeId], t.[EmploymentSequenceNumber], t.[OriginalOfficeNumber], t.[IsConverted], t.[IsCurrentJobAtCreation] 
		from [cdc].[wwp_EmploymentInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_DE065F10,
		    count(*) as __$count_DE065F10 
			from [cdc].[wwp_EmploymentInformation_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_DE065F10 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformation_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_DE065F10
	    when 1 then __$operation
	    else
			case __$min_op_DE065F10 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_DE065F10
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_DE065F10 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [WorkHistorySectionId], [JobTypeId], [JobBeginDate], [JobEndDate], [IsCurrentlyEmployed], [JobPosition], [CompanyName], [Fein], [StreetAddress], [ZipAddress], [CityId], [ContactId], [JobDutiesId], [LeavingReasonId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [DeleteReasonId], [OtherJobInformationId], [WageHoursId], [Notes], [EmploymentProgramtypeId], [LeavingReasonDetails], [EmployerOfRecordTypeId], [EmploymentSequenceNumber], [OriginalOfficeNumber], [IsConverted], [IsCurrentJobAtCreation]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_DE065F10 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmploymentInformation_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_DE065F10, __$count_DE065F10, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[WorkHistorySectionId], t.[JobTypeId], t.[JobBeginDate], t.[JobEndDate], t.[IsCurrentlyEmployed], t.[JobPosition], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[ContactId], t.[JobDutiesId], t.[LeavingReasonId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[DeleteReasonId], t.[OtherJobInformationId], t.[WageHoursId], t.[Notes], t.[EmploymentProgramtypeId], t.[LeavingReasonDetails], t.[EmployerOfRecordTypeId], t.[EmploymentSequenceNumber], t.[OriginalOfficeNumber], t.[IsConverted], t.[IsCurrentJobAtCreation]
		from [cdc].[wwp_EmploymentInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_DE065F10,
		    count(*) as __$count_DE065F10, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_EmploymentInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_DE065F10 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[WorkHistorySectionId], t.[JobTypeId], t.[JobBeginDate], t.[JobEndDate], t.[IsCurrentlyEmployed], t.[JobPosition], t.[CompanyName], t.[Fein], t.[StreetAddress], t.[ZipAddress], t.[CityId], t.[ContactId], t.[JobDutiesId], t.[LeavingReasonId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[DeleteReasonId], t.[OtherJobInformationId], t.[WageHoursId], t.[Notes], t.[EmploymentProgramtypeId], t.[LeavingReasonDetails], t.[EmployerOfRecordTypeId], t.[EmploymentSequenceNumber], t.[OriginalOfficeNumber], t.[IsConverted], t.[IsCurrentJobAtCreation]
		from [cdc].[wwp_EmploymentInformation_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_DE065F10
			from [cdc].[wwp_EmploymentInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_DE065F10 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_EmploymentInformationBenefitsOfferedTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_EmploymentInformationBenefitsOfferedTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [BenefitsOfferedTypeId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationBenefitsOfferedTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_C73436D9
	    when 1 then __$operation
	    else
			case __$min_op_C73436D9 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [EmploymentInformationId], [BenefitsOfferedTypeId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C73436D9 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_C73436D9, __$count_C73436D9, t.[Id], t.[EmploymentInformationId], t.[BenefitsOfferedTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted] 
		from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C73436D9,
		    count(*) as __$count_C73436D9 
			from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C73436D9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationBenefitsOfferedTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_C73436D9
	    when 1 then __$operation
	    else
			case __$min_op_C73436D9 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_C73436D9
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_C73436D9 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [EmploymentInformationId], [BenefitsOfferedTypeId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C73436D9 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_C73436D9, __$count_C73436D9, 
		m.__$update_mask , t.[Id], t.[EmploymentInformationId], t.[BenefitsOfferedTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C73436D9,
		    count(*) as __$count_C73436D9, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C73436D9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationBenefitsOfferedTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[EmploymentInformationId], t.[BenefitsOfferedTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C73436D9
			from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C73436D9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationBenefitsOfferedTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformationBenefitsOfferedTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_EmploymentInformationJobDutiesDetailsBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_EmploymentInformationJobDutiesDetailsBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EmploymentInformationId], NULL as [JobDutiesId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationJobDutiesDetailsBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_7257154F
	    when 1 then __$operation
	    else
			case __$min_op_7257154F 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [EmploymentInformationId], [JobDutiesId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7257154F 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7257154F, __$count_7257154F, t.[Id], t.[EmploymentInformationId], t.[JobDutiesId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted] 
		from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7257154F,
		    count(*) as __$count_7257154F 
			from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7257154F and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationJobDutiesDetailsBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_7257154F
	    when 1 then __$operation
	    else
			case __$min_op_7257154F 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_7257154F
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_7257154F 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [EmploymentInformationId], [JobDutiesId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7257154F 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7257154F, __$count_7257154F, 
		m.__$update_mask , t.[Id], t.[EmploymentInformationId], t.[JobDutiesId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7257154F,
		    count(*) as __$count_7257154F, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7257154F and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationJobDutiesDetailsBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[EmploymentInformationId], t.[JobDutiesId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7257154F
			from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7257154F and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_EmploymentInformationJobDutiesDetailsBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_EmploymentInformationJobDutiesDetailsBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ExamResult]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ExamResult]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [EducationExamId], NULL as [ExamSubjectTypeId], NULL as [DatePassed], NULL as [Score], NULL as [MaxScoreRange], NULL as [SPLTypeId], NULL as [NRSTypeId], NULL as [Version], NULL as [ExamEquivalencyTypeId], NULL as [GradeEquivalency], NULL as [ExamLevelType], NULL as [ExamPassTypeId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion], NULL as [Level]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamResult', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_1BFB75C5
	    when 1 then __$operation
	    else
			case __$min_op_1BFB75C5 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [EducationExamId], [ExamSubjectTypeId], [DatePassed], [Score], [MaxScoreRange], [SPLTypeId], [NRSTypeId], [Version], [ExamEquivalencyTypeId], [GradeEquivalency], [ExamLevelType], [ExamPassTypeId], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion], [Level]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1BFB75C5 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ExamResult_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_1BFB75C5, __$count_1BFB75C5, t.[Id], t.[EducationExamId], t.[ExamSubjectTypeId], t.[DatePassed], t.[Score], t.[MaxScoreRange], t.[SPLTypeId], t.[NRSTypeId], t.[Version], t.[ExamEquivalencyTypeId], t.[GradeEquivalency], t.[ExamLevelType], t.[ExamPassTypeId], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[Level] 
		from [cdc].[wwp_ExamResult_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1BFB75C5,
		    count(*) as __$count_1BFB75C5 
			from [cdc].[wwp_ExamResult_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1BFB75C5 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamResult', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ExamResult_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_1BFB75C5
	    when 1 then __$operation
	    else
			case __$min_op_1BFB75C5 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_1BFB75C5
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_1BFB75C5 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [EducationExamId], [ExamSubjectTypeId], [DatePassed], [Score], [MaxScoreRange], [SPLTypeId], [NRSTypeId], [Version], [ExamEquivalencyTypeId], [GradeEquivalency], [ExamLevelType], [ExamPassTypeId], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion], [Level]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1BFB75C5 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ExamResult_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_1BFB75C5, __$count_1BFB75C5, 
		m.__$update_mask , t.[Id], t.[EducationExamId], t.[ExamSubjectTypeId], t.[DatePassed], t.[Score], t.[MaxScoreRange], t.[SPLTypeId], t.[NRSTypeId], t.[Version], t.[ExamEquivalencyTypeId], t.[GradeEquivalency], t.[ExamLevelType], t.[ExamPassTypeId], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[Level]
		from [cdc].[wwp_ExamResult_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1BFB75C5,
		    count(*) as __$count_1BFB75C5, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ExamResult_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1BFB75C5 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamResult', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ExamResult_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[EducationExamId], t.[ExamSubjectTypeId], t.[DatePassed], t.[Score], t.[MaxScoreRange], t.[SPLTypeId], t.[NRSTypeId], t.[Version], t.[ExamEquivalencyTypeId], t.[GradeEquivalency], t.[ExamLevelType], t.[ExamPassTypeId], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[Level]
		from [cdc].[wwp_ExamResult_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1BFB75C5
			from [cdc].[wwp_ExamResult_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1BFB75C5 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamResult', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ExamResult_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ExamSubjectTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ExamSubjectTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ExamSubjectTypeId], NULL as [ExamTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamSubjectTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_0233A507
	    when 1 then __$operation
	    else
			case __$min_op_0233A507 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ExamSubjectTypeId], [ExamTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0233A507 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ExamSubjectTypeBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0233A507, __$count_0233A507, t.[Id], t.[ExamSubjectTypeId], t.[ExamTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_ExamSubjectTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0233A507,
		    count(*) as __$count_0233A507 
			from [cdc].[wwp_ExamSubjectTypeBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0233A507 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamSubjectTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ExamSubjectTypeBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_0233A507
	    when 1 then __$operation
	    else
			case __$min_op_0233A507 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_0233A507
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_0233A507 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ExamSubjectTypeId], [ExamTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0233A507 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ExamSubjectTypeBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0233A507, __$count_0233A507, 
		m.__$update_mask , t.[Id], t.[ExamSubjectTypeId], t.[ExamTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_ExamSubjectTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0233A507,
		    count(*) as __$count_0233A507, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ExamSubjectTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0233A507 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamSubjectTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ExamSubjectTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ExamSubjectTypeId], t.[ExamTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_ExamSubjectTypeBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0233A507
			from [cdc].[wwp_ExamSubjectTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0233A507 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ExamSubjectTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ExamSubjectTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersActionBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersActionBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [FamilyBarriersAssessmentSectionId], NULL as [ActionNeededId], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersActionBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_63A9CD40
	    when 1 then __$operation
	    else
			case __$min_op_63A9CD40 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [FamilyBarriersAssessmentSectionId], [ActionNeededId], [ModifiedBy], [IsDeleted], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_63A9CD40 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersActionBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_63A9CD40, __$count_63A9CD40, t.[Id], t.[FamilyBarriersAssessmentSectionId], t.[ActionNeededId], t.[ModifiedBy], t.[IsDeleted], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_FamilyBarriersActionBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_63A9CD40,
		    count(*) as __$count_63A9CD40 
			from [cdc].[wwp_FamilyBarriersActionBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_63A9CD40 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersActionBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersActionBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_63A9CD40
	    when 1 then __$operation
	    else
			case __$min_op_63A9CD40 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_63A9CD40
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_63A9CD40 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [FamilyBarriersAssessmentSectionId], [ActionNeededId], [ModifiedBy], [IsDeleted], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_63A9CD40 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersActionBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_63A9CD40, __$count_63A9CD40, 
		m.__$update_mask , t.[Id], t.[FamilyBarriersAssessmentSectionId], t.[ActionNeededId], t.[ModifiedBy], t.[IsDeleted], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_FamilyBarriersActionBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_63A9CD40,
		    count(*) as __$count_63A9CD40, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_FamilyBarriersActionBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_63A9CD40 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersActionBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersActionBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[FamilyBarriersAssessmentSectionId], t.[ActionNeededId], t.[ModifiedBy], t.[IsDeleted], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_FamilyBarriersActionBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_63A9CD40
			from [cdc].[wwp_FamilyBarriersActionBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_63A9CD40 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersActionBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersActionBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_610BD0A4
	    when 1 then __$operation
	    else
			case __$min_op_610BD0A4 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_610BD0A4 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_610BD0A4, __$count_610BD0A4, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_610BD0A4,
		    count(*) as __$count_610BD0A4 
			from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_610BD0A4 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_610BD0A4
	    when 1 then __$operation
	    else
			case __$min_op_610BD0A4 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_610BD0A4
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_610BD0A4 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_610BD0A4 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_610BD0A4, __$count_610BD0A4, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_610BD0A4,
		    count(*) as __$count_610BD0A4, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_610BD0A4 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_610BD0A4
			from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_610BD0A4 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersDetail]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersDetail]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Details], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_82EDECD9
	    when 1 then __$operation
	    else
			case __$min_op_82EDECD9 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [Details], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_82EDECD9 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersDetail_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_82EDECD9, __$count_82EDECD9, t.[Id], t.[Details], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion] 
		from [cdc].[wwp_FamilyBarriersDetail_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_82EDECD9,
		    count(*) as __$count_82EDECD9 
			from [cdc].[wwp_FamilyBarriersDetail_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_82EDECD9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersDetail_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_82EDECD9
	    when 1 then __$operation
	    else
			case __$min_op_82EDECD9 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_82EDECD9
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_82EDECD9 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [Details], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_82EDECD9 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersDetail_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_82EDECD9, __$count_82EDECD9, 
		m.__$update_mask , t.[Id], t.[Details], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
		from [cdc].[wwp_FamilyBarriersDetail_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_82EDECD9,
		    count(*) as __$count_82EDECD9, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_FamilyBarriersDetail_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_82EDECD9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersDetail_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[Details], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
		from [cdc].[wwp_FamilyBarriersDetail_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_82EDECD9
			from [cdc].[wwp_FamilyBarriersDetail_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_82EDECD9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersDetail', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersDetail_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_FamilyBarriersSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasEverAppliedSsi], NULL as [IsCurrentlyApplyingSsi], NULL as [SsiApplicationStatusId], NULL as [SsiApplicationStatusDetailsId], NULL as [SsiApplicationDate], NULL as [SsiApplicationIsAnyoneHelping], NULL as [SsiApplicationDetailsId], NULL as [SsiApplicationContactId], NULL as [HasReceivedPastSsi], NULL as [PastSsiDetailsId], NULL as [HasDeniedSsi], NULL as [DeniedSsiDate], NULL as [DeniedSsiDetailsId], NULL as [IsInterestedInLearningMoreSsi], NULL as [InterestedInLearningMoreSsiDetailsId], NULL as [HasAnyoneAppliedForSsi], NULL as [IsAnyoneReceivingSsi], NULL as [AnyoneReceivingSsiDetailsId], NULL as [IsAnyoneApplyingForSsi], NULL as [AnyoneApplyingForSsiDetailsId], NULL as [HasCaretakingResponsibilities], NULL as [HasConcernsAboutCaretakingResponsibilities], NULL as [ConcernsAboutCaretakingResponsibilitiesDetailsId], NULL as [DoesHouseholdEngageInRiskyActivities], NULL as [HouseholdEngageInRiskyActivitiesDetailsId], NULL as [DoChildrenHaveBehaviourProblems], NULL as [ChildrenHaveBehaviourProblemsDetailsId], NULL as [AreChildrenAtRiskOfSchoolSuspension], NULL as [ChildrenAtRiskOfSchoolSuspensionDetailsId], NULL as [AreAnyFamilyIssuesAffectWork], NULL as [AnyFamilyIssuesAffectWorkDetailsId], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ReasonForPastSsiDetailsId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_079F1D11
	    when 1 then __$operation
	    else
			case __$min_op_079F1D11 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [HasEverAppliedSsi], [IsCurrentlyApplyingSsi], [SsiApplicationStatusId], [SsiApplicationStatusDetailsId], [SsiApplicationDate], [SsiApplicationIsAnyoneHelping], [SsiApplicationDetailsId], [SsiApplicationContactId], [HasReceivedPastSsi], [PastSsiDetailsId], [HasDeniedSsi], [DeniedSsiDate], [DeniedSsiDetailsId], [IsInterestedInLearningMoreSsi], [InterestedInLearningMoreSsiDetailsId], [HasAnyoneAppliedForSsi], [IsAnyoneReceivingSsi], [AnyoneReceivingSsiDetailsId], [IsAnyoneApplyingForSsi], [AnyoneApplyingForSsiDetailsId], [HasCaretakingResponsibilities], [HasConcernsAboutCaretakingResponsibilities], [ConcernsAboutCaretakingResponsibilitiesDetailsId], [DoesHouseholdEngageInRiskyActivities], [HouseholdEngageInRiskyActivitiesDetailsId], [DoChildrenHaveBehaviourProblems], [ChildrenHaveBehaviourProblemsDetailsId], [AreChildrenAtRiskOfSchoolSuspension], [ChildrenAtRiskOfSchoolSuspensionDetailsId], [AreAnyFamilyIssuesAffectWork], [AnyFamilyIssuesAffectWorkDetailsId], [Notes], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion], [ReasonForPastSsiDetailsId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_079F1D11 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_079F1D11, __$count_079F1D11, t.[Id], t.[ParticipantId], t.[HasEverAppliedSsi], t.[IsCurrentlyApplyingSsi], t.[SsiApplicationStatusId], t.[SsiApplicationStatusDetailsId], t.[SsiApplicationDate], t.[SsiApplicationIsAnyoneHelping], t.[SsiApplicationDetailsId], t.[SsiApplicationContactId], t.[HasReceivedPastSsi], t.[PastSsiDetailsId], t.[HasDeniedSsi], t.[DeniedSsiDate], t.[DeniedSsiDetailsId], t.[IsInterestedInLearningMoreSsi], t.[InterestedInLearningMoreSsiDetailsId], t.[HasAnyoneAppliedForSsi], t.[IsAnyoneReceivingSsi], t.[AnyoneReceivingSsiDetailsId], t.[IsAnyoneApplyingForSsi], t.[AnyoneApplyingForSsiDetailsId], t.[HasCaretakingResponsibilities], t.[HasConcernsAboutCaretakingResponsibilities], t.[ConcernsAboutCaretakingResponsibilitiesDetailsId], t.[DoesHouseholdEngageInRiskyActivities], t.[HouseholdEngageInRiskyActivitiesDetailsId], t.[DoChildrenHaveBehaviourProblems], t.[ChildrenHaveBehaviourProblemsDetailsId], t.[AreChildrenAtRiskOfSchoolSuspension], t.[ChildrenAtRiskOfSchoolSuspensionDetailsId], t.[AreAnyFamilyIssuesAffectWork], t.[AnyFamilyIssuesAffectWorkDetailsId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[ReasonForPastSsiDetailsId] 
		from [cdc].[wwp_FamilyBarriersSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_079F1D11,
		    count(*) as __$count_079F1D11 
			from [cdc].[wwp_FamilyBarriersSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_079F1D11 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_079F1D11
	    when 1 then __$operation
	    else
			case __$min_op_079F1D11 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_079F1D11
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_079F1D11 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [HasEverAppliedSsi], [IsCurrentlyApplyingSsi], [SsiApplicationStatusId], [SsiApplicationStatusDetailsId], [SsiApplicationDate], [SsiApplicationIsAnyoneHelping], [SsiApplicationDetailsId], [SsiApplicationContactId], [HasReceivedPastSsi], [PastSsiDetailsId], [HasDeniedSsi], [DeniedSsiDate], [DeniedSsiDetailsId], [IsInterestedInLearningMoreSsi], [InterestedInLearningMoreSsiDetailsId], [HasAnyoneAppliedForSsi], [IsAnyoneReceivingSsi], [AnyoneReceivingSsiDetailsId], [IsAnyoneApplyingForSsi], [AnyoneApplyingForSsiDetailsId], [HasCaretakingResponsibilities], [HasConcernsAboutCaretakingResponsibilities], [ConcernsAboutCaretakingResponsibilitiesDetailsId], [DoesHouseholdEngageInRiskyActivities], [HouseholdEngageInRiskyActivitiesDetailsId], [DoChildrenHaveBehaviourProblems], [ChildrenHaveBehaviourProblemsDetailsId], [AreChildrenAtRiskOfSchoolSuspension], [ChildrenAtRiskOfSchoolSuspensionDetailsId], [AreAnyFamilyIssuesAffectWork], [AnyFamilyIssuesAffectWorkDetailsId], [Notes], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion], [ReasonForPastSsiDetailsId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_079F1D11 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyBarriersSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_079F1D11, __$count_079F1D11, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[HasEverAppliedSsi], t.[IsCurrentlyApplyingSsi], t.[SsiApplicationStatusId], t.[SsiApplicationStatusDetailsId], t.[SsiApplicationDate], t.[SsiApplicationIsAnyoneHelping], t.[SsiApplicationDetailsId], t.[SsiApplicationContactId], t.[HasReceivedPastSsi], t.[PastSsiDetailsId], t.[HasDeniedSsi], t.[DeniedSsiDate], t.[DeniedSsiDetailsId], t.[IsInterestedInLearningMoreSsi], t.[InterestedInLearningMoreSsiDetailsId], t.[HasAnyoneAppliedForSsi], t.[IsAnyoneReceivingSsi], t.[AnyoneReceivingSsiDetailsId], t.[IsAnyoneApplyingForSsi], t.[AnyoneApplyingForSsiDetailsId], t.[HasCaretakingResponsibilities], t.[HasConcernsAboutCaretakingResponsibilities], t.[ConcernsAboutCaretakingResponsibilitiesDetailsId], t.[DoesHouseholdEngageInRiskyActivities], t.[HouseholdEngageInRiskyActivitiesDetailsId], t.[DoChildrenHaveBehaviourProblems], t.[ChildrenHaveBehaviourProblemsDetailsId], t.[AreChildrenAtRiskOfSchoolSuspension], t.[ChildrenAtRiskOfSchoolSuspensionDetailsId], t.[AreAnyFamilyIssuesAffectWork], t.[AnyFamilyIssuesAffectWorkDetailsId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[ReasonForPastSsiDetailsId]
		from [cdc].[wwp_FamilyBarriersSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_079F1D11,
		    count(*) as __$count_079F1D11, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_FamilyBarriersSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_079F1D11 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[HasEverAppliedSsi], t.[IsCurrentlyApplyingSsi], t.[SsiApplicationStatusId], t.[SsiApplicationStatusDetailsId], t.[SsiApplicationDate], t.[SsiApplicationIsAnyoneHelping], t.[SsiApplicationDetailsId], t.[SsiApplicationContactId], t.[HasReceivedPastSsi], t.[PastSsiDetailsId], t.[HasDeniedSsi], t.[DeniedSsiDate], t.[DeniedSsiDetailsId], t.[IsInterestedInLearningMoreSsi], t.[InterestedInLearningMoreSsiDetailsId], t.[HasAnyoneAppliedForSsi], t.[IsAnyoneReceivingSsi], t.[AnyoneReceivingSsiDetailsId], t.[IsAnyoneApplyingForSsi], t.[AnyoneApplyingForSsiDetailsId], t.[HasCaretakingResponsibilities], t.[HasConcernsAboutCaretakingResponsibilities], t.[ConcernsAboutCaretakingResponsibilitiesDetailsId], t.[DoesHouseholdEngageInRiskyActivities], t.[HouseholdEngageInRiskyActivitiesDetailsId], t.[DoChildrenHaveBehaviourProblems], t.[ChildrenHaveBehaviourProblemsDetailsId], t.[AreChildrenAtRiskOfSchoolSuspension], t.[ChildrenAtRiskOfSchoolSuspensionDetailsId], t.[AreAnyFamilyIssuesAffectWork], t.[AnyFamilyIssuesAffectWorkDetailsId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion], t.[ReasonForPastSsiDetailsId]
		from [cdc].[wwp_FamilyBarriersSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_079F1D11
			from [cdc].[wwp_FamilyBarriersSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_079F1D11 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyBarriersSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyBarriersSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_FamilyMember]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_FamilyMember]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [FamilyBarriersSectionId], NULL as [RelationshipId], NULL as [FirstName], NULL as [LastName], NULL as [Details], NULL as [DeleteReasonId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyMember', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_0C3F0FBA
	    when 1 then __$operation
	    else
			case __$min_op_0C3F0FBA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [FamilyBarriersSectionId], [RelationshipId], [FirstName], [LastName], [Details], [DeleteReasonId], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0C3F0FBA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyMember_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0C3F0FBA, __$count_0C3F0FBA, t.[Id], t.[FamilyBarriersSectionId], t.[RelationshipId], t.[FirstName], t.[LastName], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_FamilyMember_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0C3F0FBA,
		    count(*) as __$count_0C3F0FBA 
			from [cdc].[wwp_FamilyMember_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0C3F0FBA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyMember', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyMember_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_0C3F0FBA
	    when 1 then __$operation
	    else
			case __$min_op_0C3F0FBA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_0C3F0FBA
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_0C3F0FBA 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [FamilyBarriersSectionId], [RelationshipId], [FirstName], [LastName], [Details], [DeleteReasonId], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0C3F0FBA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FamilyMember_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0C3F0FBA, __$count_0C3F0FBA, 
		m.__$update_mask , t.[Id], t.[FamilyBarriersSectionId], t.[RelationshipId], t.[FirstName], t.[LastName], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_FamilyMember_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0C3F0FBA,
		    count(*) as __$count_0C3F0FBA, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_FamilyMember_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0C3F0FBA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyMember', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyMember_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[FamilyBarriersSectionId], t.[RelationshipId], t.[FirstName], t.[LastName], t.[Details], t.[DeleteReasonId], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_FamilyMember_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0C3F0FBA
			from [cdc].[wwp_FamilyMember_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0C3F0FBA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FamilyMember', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FamilyMember_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_FCDPRFADetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_FCDPRFADetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [RequestForAssistanceId], NULL as [IsVoluntary], NULL as [CourtOrderedCountyId], NULL as [CourtOrderEffectiveDate], NULL as [KIDSPinNumber], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [ReferralSource]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FCDPRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_4AAE51D8
	    when 1 then __$operation
	    else
			case __$min_op_4AAE51D8 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [RequestForAssistanceId], [IsVoluntary], [CourtOrderedCountyId], [CourtOrderEffectiveDate], [KIDSPinNumber], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [ReferralSource]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4AAE51D8 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FCDPRFADetails_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4AAE51D8, __$count_4AAE51D8, t.[Id], t.[RequestForAssistanceId], t.[IsVoluntary], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[KIDSPinNumber], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[ReferralSource] 
		from [cdc].[wwp_FCDPRFADetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4AAE51D8,
		    count(*) as __$count_4AAE51D8 
			from [cdc].[wwp_FCDPRFADetails_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4AAE51D8 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FCDPRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FCDPRFADetails_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_4AAE51D8
	    when 1 then __$operation
	    else
			case __$min_op_4AAE51D8 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_4AAE51D8
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_4AAE51D8 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [RequestForAssistanceId], [IsVoluntary], [CourtOrderedCountyId], [CourtOrderEffectiveDate], [KIDSPinNumber], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [ReferralSource]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4AAE51D8 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FCDPRFADetails_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4AAE51D8, __$count_4AAE51D8, 
		m.__$update_mask , t.[Id], t.[RequestForAssistanceId], t.[IsVoluntary], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[KIDSPinNumber], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[ReferralSource]
		from [cdc].[wwp_FCDPRFADetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4AAE51D8,
		    count(*) as __$count_4AAE51D8, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_FCDPRFADetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4AAE51D8 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FCDPRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FCDPRFADetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[RequestForAssistanceId], t.[IsVoluntary], t.[CourtOrderedCountyId], t.[CourtOrderEffectiveDate], t.[KIDSPinNumber], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[ReferralSource]
		from [cdc].[wwp_FCDPRFADetails_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4AAE51D8
			from [cdc].[wwp_FCDPRFADetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4AAE51D8 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FCDPRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FCDPRFADetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_FormalAssessment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_FormalAssessment]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [BarrierDetailsId], NULL as [ReferralDate], NULL as [ReferralDeclined], NULL as [ReferralDetails], NULL as [AssessmentDate], NULL as [AssessmentNotCompleted], NULL as [AssessmentDetails], NULL as [SymptomId], NULL as [ReassessmentRecommendedDate], NULL as [IsRecommendedDateNotNeeded], NULL as [SymptomDetails], NULL as [AssessmentProviderContactId], NULL as [HoursParticipantCanParticipate], NULL as [HoursParticipantCanParticipateDetails], NULL as [DeleteReasonId], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HoursParticipantCanParticipateIntervalId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_FormalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_599684BF
	    when 1 then __$operation
	    else
			case __$min_op_599684BF 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [BarrierDetailsId], [ReferralDate], [ReferralDeclined], [ReferralDetails], [AssessmentDate], [AssessmentNotCompleted], [AssessmentDetails], [SymptomId], [ReassessmentRecommendedDate], [IsRecommendedDateNotNeeded], [SymptomDetails], [AssessmentProviderContactId], [HoursParticipantCanParticipate], [HoursParticipantCanParticipateDetails], [DeleteReasonId], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [HoursParticipantCanParticipateIntervalId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_599684BF 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FormalAssessment_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_599684BF, __$count_599684BF, t.[Id], t.[BarrierDetailsId], t.[ReferralDate], t.[ReferralDeclined], t.[ReferralDetails], t.[AssessmentDate], t.[AssessmentNotCompleted], t.[AssessmentDetails], t.[SymptomId], t.[ReassessmentRecommendedDate], t.[IsRecommendedDateNotNeeded], t.[SymptomDetails], t.[AssessmentProviderContactId], t.[HoursParticipantCanParticipate], t.[HoursParticipantCanParticipateDetails], t.[DeleteReasonId], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HoursParticipantCanParticipateIntervalId] 
		from [cdc].[wwp_FormalAssessment_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_599684BF,
		    count(*) as __$count_599684BF 
			from [cdc].[wwp_FormalAssessment_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_599684BF and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FormalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FormalAssessment_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_599684BF
	    when 1 then __$operation
	    else
			case __$min_op_599684BF 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_599684BF
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_599684BF 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [BarrierDetailsId], [ReferralDate], [ReferralDeclined], [ReferralDetails], [AssessmentDate], [AssessmentNotCompleted], [AssessmentDetails], [SymptomId], [ReassessmentRecommendedDate], [IsRecommendedDateNotNeeded], [SymptomDetails], [AssessmentProviderContactId], [HoursParticipantCanParticipate], [HoursParticipantCanParticipateDetails], [DeleteReasonId], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [HoursParticipantCanParticipateIntervalId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_599684BF 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_FormalAssessment_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_599684BF, __$count_599684BF, 
		m.__$update_mask , t.[Id], t.[BarrierDetailsId], t.[ReferralDate], t.[ReferralDeclined], t.[ReferralDetails], t.[AssessmentDate], t.[AssessmentNotCompleted], t.[AssessmentDetails], t.[SymptomId], t.[ReassessmentRecommendedDate], t.[IsRecommendedDateNotNeeded], t.[SymptomDetails], t.[AssessmentProviderContactId], t.[HoursParticipantCanParticipate], t.[HoursParticipantCanParticipateDetails], t.[DeleteReasonId], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HoursParticipantCanParticipateIntervalId]
		from [cdc].[wwp_FormalAssessment_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_599684BF,
		    count(*) as __$count_599684BF, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_FormalAssessment_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_599684BF and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FormalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FormalAssessment_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[BarrierDetailsId], t.[ReferralDate], t.[ReferralDeclined], t.[ReferralDetails], t.[AssessmentDate], t.[AssessmentNotCompleted], t.[AssessmentDetails], t.[SymptomId], t.[ReassessmentRecommendedDate], t.[IsRecommendedDateNotNeeded], t.[SymptomDetails], t.[AssessmentProviderContactId], t.[HoursParticipantCanParticipate], t.[HoursParticipantCanParticipateDetails], t.[DeleteReasonId], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HoursParticipantCanParticipateIntervalId]
		from [cdc].[wwp_FormalAssessment_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_599684BF
			from [cdc].[wwp_FormalAssessment_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_599684BF and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_FormalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_FormalAssessment_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_WWP_hist_test_0]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_WWP_hist_test_0]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [id], NULL as [name], NULL as [salary], NULL as [__$command_id]
	where ( [sys].[fn_cdc_check_parameters]( N'WWP_hist_test_0', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_7CCEA9D2
	    when 1 then __$operation
	    else
			case __$min_op_7CCEA9D2 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [id], [name], [salary], [__$command_id]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7CCEA9D2 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[WWP_hist_test_0_CT] c with (nolock)   
			where  ( (c.[id] = t.[id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7CCEA9D2, __$count_7CCEA9D2, t.[id], t.[name], t.[salary], t.[__$command_id] 
		from [cdc].[WWP_hist_test_0_CT] t with (nolock) inner join 
		(	select  r.[id], max(r.__$seqval) as __$max_seqval_7CCEA9D2,
		    count(*) as __$count_7CCEA9D2 
			from [cdc].[WWP_hist_test_0_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[id]) m
		on t.__$seqval = m.__$max_seqval_7CCEA9D2 and
		    ( (t.[id] = m.[id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'WWP_hist_test_0', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[WWP_hist_test_0_CT] c with (nolock) 
							where  ( (c.[id] = t.[id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_7CCEA9D2
	    when 1 then __$operation
	    else
			case __$min_op_7CCEA9D2 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_7CCEA9D2
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_7CCEA9D2 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [id], [name], [salary], [__$command_id]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7CCEA9D2 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[WWP_hist_test_0_CT] c with (nolock)
			where  ( (c.[id] = t.[id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7CCEA9D2, __$count_7CCEA9D2, 
		m.__$update_mask , t.[id], t.[name], t.[salary], t.[__$command_id]
		from [cdc].[WWP_hist_test_0_CT] t with (nolock) inner join 
		(	select  r.[id], max(r.__$seqval) as __$max_seqval_7CCEA9D2,
		    count(*) as __$count_7CCEA9D2, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[WWP_hist_test_0_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[id]) m
		on t.__$seqval = m.__$max_seqval_7CCEA9D2 and
		    ( (t.[id] = m.[id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'WWP_hist_test_0', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[WWP_hist_test_0_CT] c with (nolock)
							where  ( (c.[id] = t.[id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[id], t.[name], t.[salary], t.[__$command_id]
		from [cdc].[WWP_hist_test_0_CT] t  with (nolock) inner join 
		(	select  r.[id], max(r.__$seqval) as __$max_seqval_7CCEA9D2
			from [cdc].[WWP_hist_test_0_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[id]) m
		on t.__$seqval = m.__$max_seqval_7CCEA9D2 and
		    ( (t.[id] = m.[id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'WWP_hist_test_0', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[WWP_hist_test_0_CT] c with (nolock)
							where  ( (c.[id] = t.[id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_HousingAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_HousingAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_60180454
	    when 1 then __$operation
	    else
			case __$min_op_60180454 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_60180454 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_HousingAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_60180454, __$count_60180454, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_HousingAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_60180454,
		    count(*) as __$count_60180454 
			from [cdc].[wwp_HousingAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_60180454 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_60180454
	    when 1 then __$operation
	    else
			case __$min_op_60180454 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_60180454
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_60180454 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_60180454 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_HousingAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_60180454, __$count_60180454, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_HousingAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_60180454,
		    count(*) as __$count_60180454, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_HousingAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_60180454 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_HousingAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_60180454
			from [cdc].[wwp_HousingAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_60180454 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_HousingHistory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_HousingHistory]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [SortOrder], NULL as [HousingSectionId], NULL as [HousingSituationId], NULL as [BeginDate], NULL as [EndDate], NULL as [HasEvicted], NULL as [MonthlyAmount], NULL as [IsAmountUnknown], NULL as [Details], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_A2AE8986
	    when 1 then __$operation
	    else
			case __$min_op_A2AE8986 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [SortOrder], [HousingSectionId], [HousingSituationId], [BeginDate], [EndDate], [HasEvicted], [MonthlyAmount], [IsAmountUnknown], [Details], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A2AE8986 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_HousingHistory_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_A2AE8986, __$count_A2AE8986, t.[Id], t.[SortOrder], t.[HousingSectionId], t.[HousingSituationId], t.[BeginDate], t.[EndDate], t.[HasEvicted], t.[MonthlyAmount], t.[IsAmountUnknown], t.[Details], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_HousingHistory_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_A2AE8986,
		    count(*) as __$count_A2AE8986 
			from [cdc].[wwp_HousingHistory_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_A2AE8986 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingHistory_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_A2AE8986
	    when 1 then __$operation
	    else
			case __$min_op_A2AE8986 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_A2AE8986
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_A2AE8986 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [SortOrder], [HousingSectionId], [HousingSituationId], [BeginDate], [EndDate], [HasEvicted], [MonthlyAmount], [IsAmountUnknown], [Details], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A2AE8986 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_HousingHistory_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_A2AE8986, __$count_A2AE8986, 
		m.__$update_mask , t.[Id], t.[SortOrder], t.[HousingSectionId], t.[HousingSituationId], t.[BeginDate], t.[EndDate], t.[HasEvicted], t.[MonthlyAmount], t.[IsAmountUnknown], t.[Details], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_HousingHistory_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_A2AE8986,
		    count(*) as __$count_A2AE8986, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_HousingHistory_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_A2AE8986 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingHistory_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[SortOrder], t.[HousingSectionId], t.[HousingSituationId], t.[BeginDate], t.[EndDate], t.[HasEvicted], t.[MonthlyAmount], t.[IsAmountUnknown], t.[Details], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_HousingHistory_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_A2AE8986
			from [cdc].[wwp_HousingHistory_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_A2AE8986 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingHistory_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_HousingSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_HousingSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HousingSituationId], NULL as [CurrentHousingDetails], NULL as [CurrentHousingBeginDate], NULL as [CurrentHousingEndDate], NULL as [CurrentMonthlyAmount], NULL as [IsCurrentAmountUnknown], NULL as [HasCurrentEvictionRisk], NULL as [HasBeenEvicted], NULL as [IsCurrentMovingToHistory], NULL as [HasUtilityDisconnectionRisk], NULL as [UtilityDisconnectionRiskNotes], NULL as [HasDifficultyWorking], NULL as [DifficultyWorkingNotes], NULL as [Notes], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_8AA9916D
	    when 1 then __$operation
	    else
			case __$min_op_8AA9916D 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [HousingSituationId], [CurrentHousingDetails], [CurrentHousingBeginDate], [CurrentHousingEndDate], [CurrentMonthlyAmount], [IsCurrentAmountUnknown], [HasCurrentEvictionRisk], [HasBeenEvicted], [IsCurrentMovingToHistory], [HasUtilityDisconnectionRisk], [UtilityDisconnectionRiskNotes], [HasDifficultyWorking], [DifficultyWorkingNotes], [Notes], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_8AA9916D 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_HousingSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_8AA9916D, __$count_8AA9916D, t.[Id], t.[ParticipantId], t.[HousingSituationId], t.[CurrentHousingDetails], t.[CurrentHousingBeginDate], t.[CurrentHousingEndDate], t.[CurrentMonthlyAmount], t.[IsCurrentAmountUnknown], t.[HasCurrentEvictionRisk], t.[HasBeenEvicted], t.[IsCurrentMovingToHistory], t.[HasUtilityDisconnectionRisk], t.[UtilityDisconnectionRiskNotes], t.[HasDifficultyWorking], t.[DifficultyWorkingNotes], t.[Notes], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_HousingSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8AA9916D,
		    count(*) as __$count_8AA9916D 
			from [cdc].[wwp_HousingSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8AA9916D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_8AA9916D
	    when 1 then __$operation
	    else
			case __$min_op_8AA9916D 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_8AA9916D
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_8AA9916D 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [HousingSituationId], [CurrentHousingDetails], [CurrentHousingBeginDate], [CurrentHousingEndDate], [CurrentMonthlyAmount], [IsCurrentAmountUnknown], [HasCurrentEvictionRisk], [HasBeenEvicted], [IsCurrentMovingToHistory], [HasUtilityDisconnectionRisk], [UtilityDisconnectionRiskNotes], [HasDifficultyWorking], [DifficultyWorkingNotes], [Notes], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_8AA9916D 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_HousingSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_8AA9916D, __$count_8AA9916D, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[HousingSituationId], t.[CurrentHousingDetails], t.[CurrentHousingBeginDate], t.[CurrentHousingEndDate], t.[CurrentMonthlyAmount], t.[IsCurrentAmountUnknown], t.[HasCurrentEvictionRisk], t.[HasBeenEvicted], t.[IsCurrentMovingToHistory], t.[HasUtilityDisconnectionRisk], t.[UtilityDisconnectionRiskNotes], t.[HasDifficultyWorking], t.[DifficultyWorkingNotes], t.[Notes], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_HousingSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8AA9916D,
		    count(*) as __$count_8AA9916D, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_HousingSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8AA9916D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[HousingSituationId], t.[CurrentHousingDetails], t.[CurrentHousingBeginDate], t.[CurrentHousingEndDate], t.[CurrentMonthlyAmount], t.[IsCurrentAmountUnknown], t.[HasCurrentEvictionRisk], t.[HasBeenEvicted], t.[IsCurrentMovingToHistory], t.[HasUtilityDisconnectionRisk], t.[UtilityDisconnectionRiskNotes], t.[HasDifficultyWorking], t.[DifficultyWorkingNotes], t.[Notes], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_HousingSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8AA9916D
			from [cdc].[wwp_HousingSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8AA9916D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_HousingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_HousingSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_InformalAssessment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_InformalAssessment]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [AssessmentTypeId], NULL as [ParticipantId], NULL as [LanguageAssessmentSectionId], NULL as [WorkHistoryAssessmentSectionId], NULL as [WorkProgramAssessmentSectionId], NULL as [PostSecondaryEducationAssessmentSectionId], NULL as [MilitaryTrainingAssessmentSectionId], NULL as [HousingAssessmentSectionId], NULL as [TransportationAssessmentSectionId], NULL as [LegalIssuesAssessmentSectionId], NULL as [BarriersAssessmentSectionId], NULL as [ChildYouthSupportsAssessmentSectionId], NULL as [FamilyBarriersAssessmentSectionId], NULL as [NonCustodialParentsAssessmentSectionId], NULL as [NonCustodialParentsReferralAssessmentSectionId], NULL as [WorkHistorySectionId], NULL as [EndDate], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [EducationAssessmentSectionId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_InformalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_4A6B8F9A
	    when 1 then __$operation
	    else
			case __$min_op_4A6B8F9A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [AssessmentTypeId], [ParticipantId], [LanguageAssessmentSectionId], [WorkHistoryAssessmentSectionId], [WorkProgramAssessmentSectionId], [PostSecondaryEducationAssessmentSectionId], [MilitaryTrainingAssessmentSectionId], [HousingAssessmentSectionId], [TransportationAssessmentSectionId], [LegalIssuesAssessmentSectionId], [BarriersAssessmentSectionId], [ChildYouthSupportsAssessmentSectionId], [FamilyBarriersAssessmentSectionId], [NonCustodialParentsAssessmentSectionId], [NonCustodialParentsReferralAssessmentSectionId], [WorkHistorySectionId], [EndDate], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [EducationAssessmentSectionId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4A6B8F9A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_InformalAssessment_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4A6B8F9A, __$count_4A6B8F9A, t.[Id], t.[AssessmentTypeId], t.[ParticipantId], t.[LanguageAssessmentSectionId], t.[WorkHistoryAssessmentSectionId], t.[WorkProgramAssessmentSectionId], t.[PostSecondaryEducationAssessmentSectionId], t.[MilitaryTrainingAssessmentSectionId], t.[HousingAssessmentSectionId], t.[TransportationAssessmentSectionId], t.[LegalIssuesAssessmentSectionId], t.[BarriersAssessmentSectionId], t.[ChildYouthSupportsAssessmentSectionId], t.[FamilyBarriersAssessmentSectionId], t.[NonCustodialParentsAssessmentSectionId], t.[NonCustodialParentsReferralAssessmentSectionId], t.[WorkHistorySectionId], t.[EndDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[EducationAssessmentSectionId] 
		from [cdc].[wwp_InformalAssessment_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4A6B8F9A,
		    count(*) as __$count_4A6B8F9A 
			from [cdc].[wwp_InformalAssessment_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4A6B8F9A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_InformalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_InformalAssessment_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_4A6B8F9A
	    when 1 then __$operation
	    else
			case __$min_op_4A6B8F9A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_4A6B8F9A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_4A6B8F9A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [AssessmentTypeId], [ParticipantId], [LanguageAssessmentSectionId], [WorkHistoryAssessmentSectionId], [WorkProgramAssessmentSectionId], [PostSecondaryEducationAssessmentSectionId], [MilitaryTrainingAssessmentSectionId], [HousingAssessmentSectionId], [TransportationAssessmentSectionId], [LegalIssuesAssessmentSectionId], [BarriersAssessmentSectionId], [ChildYouthSupportsAssessmentSectionId], [FamilyBarriersAssessmentSectionId], [NonCustodialParentsAssessmentSectionId], [NonCustodialParentsReferralAssessmentSectionId], [WorkHistorySectionId], [EndDate], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [EducationAssessmentSectionId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4A6B8F9A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_InformalAssessment_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4A6B8F9A, __$count_4A6B8F9A, 
		m.__$update_mask , t.[Id], t.[AssessmentTypeId], t.[ParticipantId], t.[LanguageAssessmentSectionId], t.[WorkHistoryAssessmentSectionId], t.[WorkProgramAssessmentSectionId], t.[PostSecondaryEducationAssessmentSectionId], t.[MilitaryTrainingAssessmentSectionId], t.[HousingAssessmentSectionId], t.[TransportationAssessmentSectionId], t.[LegalIssuesAssessmentSectionId], t.[BarriersAssessmentSectionId], t.[ChildYouthSupportsAssessmentSectionId], t.[FamilyBarriersAssessmentSectionId], t.[NonCustodialParentsAssessmentSectionId], t.[NonCustodialParentsReferralAssessmentSectionId], t.[WorkHistorySectionId], t.[EndDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[EducationAssessmentSectionId]
		from [cdc].[wwp_InformalAssessment_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4A6B8F9A,
		    count(*) as __$count_4A6B8F9A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_InformalAssessment_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4A6B8F9A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_InformalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_InformalAssessment_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[AssessmentTypeId], t.[ParticipantId], t.[LanguageAssessmentSectionId], t.[WorkHistoryAssessmentSectionId], t.[WorkProgramAssessmentSectionId], t.[PostSecondaryEducationAssessmentSectionId], t.[MilitaryTrainingAssessmentSectionId], t.[HousingAssessmentSectionId], t.[TransportationAssessmentSectionId], t.[LegalIssuesAssessmentSectionId], t.[BarriersAssessmentSectionId], t.[ChildYouthSupportsAssessmentSectionId], t.[FamilyBarriersAssessmentSectionId], t.[NonCustodialParentsAssessmentSectionId], t.[NonCustodialParentsReferralAssessmentSectionId], t.[WorkHistorySectionId], t.[EndDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[EducationAssessmentSectionId]
		from [cdc].[wwp_InformalAssessment_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4A6B8F9A
			from [cdc].[wwp_InformalAssessment_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4A6B8F9A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_InformalAssessment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_InformalAssessment_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_InvolvedWorkProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_InvolvedWorkProgram]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkProgramSectionId], NULL as [WorkProgramStatusId], NULL as [WorkProgramId], NULL as [CityId], NULL as [StartMonth], NULL as [EndMonth], NULL as [ContactId], NULL as [ContactInfo], NULL as [Details], NULL as [SortOrder], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_InvolvedWorkProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_A2899775
	    when 1 then __$operation
	    else
			case __$min_op_A2899775 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WorkProgramSectionId], [WorkProgramStatusId], [WorkProgramId], [CityId], [StartMonth], [EndMonth], [ContactId], [ContactInfo], [Details], [SortOrder], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A2899775 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_InvolvedWorkProgram_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_A2899775, __$count_A2899775, t.[Id], t.[WorkProgramSectionId], t.[WorkProgramStatusId], t.[WorkProgramId], t.[CityId], t.[StartMonth], t.[EndMonth], t.[ContactId], t.[ContactInfo], t.[Details], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_InvolvedWorkProgram_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_A2899775,
		    count(*) as __$count_A2899775 
			from [cdc].[wwp_InvolvedWorkProgram_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_A2899775 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_InvolvedWorkProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_InvolvedWorkProgram_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_A2899775
	    when 1 then __$operation
	    else
			case __$min_op_A2899775 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_A2899775
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_A2899775 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WorkProgramSectionId], [WorkProgramStatusId], [WorkProgramId], [CityId], [StartMonth], [EndMonth], [ContactId], [ContactInfo], [Details], [SortOrder], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_A2899775 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_InvolvedWorkProgram_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_A2899775, __$count_A2899775, 
		m.__$update_mask , t.[Id], t.[WorkProgramSectionId], t.[WorkProgramStatusId], t.[WorkProgramId], t.[CityId], t.[StartMonth], t.[EndMonth], t.[ContactId], t.[ContactInfo], t.[Details], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_InvolvedWorkProgram_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_A2899775,
		    count(*) as __$count_A2899775, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_InvolvedWorkProgram_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_A2899775 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_InvolvedWorkProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_InvolvedWorkProgram_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WorkProgramSectionId], t.[WorkProgramStatusId], t.[WorkProgramId], t.[CityId], t.[StartMonth], t.[EndMonth], t.[ContactId], t.[ContactInfo], t.[Details], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_InvolvedWorkProgram_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_A2899775
			from [cdc].[wwp_InvolvedWorkProgram_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_A2899775 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_InvolvedWorkProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_InvolvedWorkProgram_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_JobDutiesDetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_JobDutiesDetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Details], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_JobDutiesDetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_E48576B1
	    when 1 then __$operation
	    else
			case __$min_op_E48576B1 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [Details], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_E48576B1 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_JobDutiesDetails_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_E48576B1, __$count_E48576B1, t.[Id], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted] 
		from [cdc].[wwp_JobDutiesDetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_E48576B1,
		    count(*) as __$count_E48576B1 
			from [cdc].[wwp_JobDutiesDetails_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_E48576B1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_JobDutiesDetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_JobDutiesDetails_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_E48576B1
	    when 1 then __$operation
	    else
			case __$min_op_E48576B1 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_E48576B1
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_E48576B1 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [Details], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_E48576B1 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_JobDutiesDetails_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_E48576B1, __$count_E48576B1, 
		m.__$update_mask , t.[Id], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_JobDutiesDetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_E48576B1,
		    count(*) as __$count_E48576B1, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_JobDutiesDetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_E48576B1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_JobDutiesDetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_JobDutiesDetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[Details], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_JobDutiesDetails_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_E48576B1
			from [cdc].[wwp_JobDutiesDetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_E48576B1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_JobDutiesDetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_JobDutiesDetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_KnownLanguage]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_KnownLanguage]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [SortOrder], NULL as [LanguageSectionId], NULL as [LanguageId], NULL as [IsPrimary], NULL as [IsAbleToRead], NULL as [IsAbleToWrite], NULL as [IsAbleToSpeak], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PinNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_KnownLanguage', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_D41AB4D5
	    when 1 then __$operation
	    else
			case __$min_op_D41AB4D5 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [SortOrder], [LanguageSectionId], [LanguageId], [IsPrimary], [IsAbleToRead], [IsAbleToWrite], [IsAbleToSpeak], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PinNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_D41AB4D5 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_KnownLanguage_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_D41AB4D5, __$count_D41AB4D5, t.[Id], t.[SortOrder], t.[LanguageSectionId], t.[LanguageId], t.[IsPrimary], t.[IsAbleToRead], t.[IsAbleToWrite], t.[IsAbleToSpeak], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber] 
		from [cdc].[wwp_KnownLanguage_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_D41AB4D5,
		    count(*) as __$count_D41AB4D5 
			from [cdc].[wwp_KnownLanguage_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_D41AB4D5 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_KnownLanguage', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_KnownLanguage_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_D41AB4D5
	    when 1 then __$operation
	    else
			case __$min_op_D41AB4D5 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_D41AB4D5
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_D41AB4D5 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [SortOrder], [LanguageSectionId], [LanguageId], [IsPrimary], [IsAbleToRead], [IsAbleToWrite], [IsAbleToSpeak], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PinNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_D41AB4D5 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_KnownLanguage_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_D41AB4D5, __$count_D41AB4D5, 
		m.__$update_mask , t.[Id], t.[SortOrder], t.[LanguageSectionId], t.[LanguageId], t.[IsPrimary], t.[IsAbleToRead], t.[IsAbleToWrite], t.[IsAbleToSpeak], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
		from [cdc].[wwp_KnownLanguage_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_D41AB4D5,
		    count(*) as __$count_D41AB4D5, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_KnownLanguage_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_D41AB4D5 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_KnownLanguage', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_KnownLanguage_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[SortOrder], t.[LanguageSectionId], t.[LanguageId], t.[IsPrimary], t.[IsAbleToRead], t.[IsAbleToWrite], t.[IsAbleToSpeak], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
		from [cdc].[wwp_KnownLanguage_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_D41AB4D5
			from [cdc].[wwp_KnownLanguage_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_D41AB4D5 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_KnownLanguage', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_KnownLanguage_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_LanguageAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_LanguageAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_1DCE70A3
	    when 1 then __$operation
	    else
			case __$min_op_1DCE70A3 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1DCE70A3 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LanguageAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_1DCE70A3, __$count_1DCE70A3, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_LanguageAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1DCE70A3,
		    count(*) as __$count_1DCE70A3 
			from [cdc].[wwp_LanguageAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1DCE70A3 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LanguageAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_1DCE70A3
	    when 1 then __$operation
	    else
			case __$min_op_1DCE70A3 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_1DCE70A3
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_1DCE70A3 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1DCE70A3 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LanguageAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_1DCE70A3, __$count_1DCE70A3, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_LanguageAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1DCE70A3,
		    count(*) as __$count_1DCE70A3, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_LanguageAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1DCE70A3 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LanguageAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_LanguageAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1DCE70A3
			from [cdc].[wwp_LanguageAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1DCE70A3 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LanguageAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_LanguageSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_LanguageSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsAbleToReadEnglish], NULL as [IsAbleToWriteEnglish], NULL as [IsAbleToSpeakEnglish], NULL as [IsNeedingInterpreter], NULL as [InterpreterDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PinNumber]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_B759805E
	    when 1 then __$operation
	    else
			case __$min_op_B759805E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [IsAbleToReadEnglish], [IsAbleToWriteEnglish], [IsAbleToSpeakEnglish], [IsNeedingInterpreter], [InterpreterDetails], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PinNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B759805E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LanguageSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_B759805E, __$count_B759805E, t.[Id], t.[ParticipantId], t.[IsAbleToReadEnglish], t.[IsAbleToWriteEnglish], t.[IsAbleToSpeakEnglish], t.[IsNeedingInterpreter], t.[InterpreterDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber] 
		from [cdc].[wwp_LanguageSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B759805E,
		    count(*) as __$count_B759805E 
			from [cdc].[wwp_LanguageSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B759805E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LanguageSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_B759805E
	    when 1 then __$operation
	    else
			case __$min_op_B759805E 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_B759805E
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_B759805E 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [IsAbleToReadEnglish], [IsAbleToWriteEnglish], [IsAbleToSpeakEnglish], [IsNeedingInterpreter], [InterpreterDetails], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PinNumber]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B759805E 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LanguageSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_B759805E, __$count_B759805E, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[IsAbleToReadEnglish], t.[IsAbleToWriteEnglish], t.[IsAbleToSpeakEnglish], t.[IsNeedingInterpreter], t.[InterpreterDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
		from [cdc].[wwp_LanguageSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B759805E,
		    count(*) as __$count_B759805E, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_LanguageSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B759805E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LanguageSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[IsAbleToReadEnglish], t.[IsAbleToWriteEnglish], t.[IsAbleToSpeakEnglish], t.[IsNeedingInterpreter], t.[InterpreterDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PinNumber]
		from [cdc].[wwp_LanguageSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B759805E
			from [cdc].[wwp_LanguageSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B759805E and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LanguageSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LanguageSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_LegalIssuesAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_LegalIssuesAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_4B209F60
	    when 1 then __$operation
	    else
			case __$min_op_4B209F60 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4B209F60 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LegalIssuesAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4B209F60, __$count_4B209F60, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_LegalIssuesAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4B209F60,
		    count(*) as __$count_4B209F60 
			from [cdc].[wwp_LegalIssuesAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4B209F60 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LegalIssuesAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_4B209F60
	    when 1 then __$operation
	    else
			case __$min_op_4B209F60 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_4B209F60
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_4B209F60 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4B209F60 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LegalIssuesAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4B209F60, __$count_4B209F60, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_LegalIssuesAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4B209F60,
		    count(*) as __$count_4B209F60, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_LegalIssuesAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4B209F60 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LegalIssuesAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_LegalIssuesAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4B209F60
			from [cdc].[wwp_LegalIssuesAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4B209F60 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LegalIssuesAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_LegalIssuesSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_LegalIssuesSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsConvictedOfCrime], NULL as [IsUnderCommunitySupervision], NULL as [CommunitySupervisonDetails], NULL as [HasPendingCharges], NULL as [HasFamilyLegalIssues], NULL as [FamilyLegalIssueNotes], NULL as [HasCourtDates], NULL as [ActionNeededDetails], NULL as [OrderedToPayChildSupport], NULL as [MonthlyAmount], NULL as [IsUnknown], NULL as [OweAnyChildSupportBack], NULL as [ChildSupportDetails], NULL as [CommunitySupervisonContactId], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HasRestrainingOrders], NULL as [RestrainingOrderNotes], NULL as [HasRestrainingOrderToPrevent], NULL as [RestrainingOrderToPreventNotes]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_F65F2DB0
	    when 1 then __$operation
	    else
			case __$min_op_F65F2DB0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [IsConvictedOfCrime], [IsUnderCommunitySupervision], [CommunitySupervisonDetails], [HasPendingCharges], [HasFamilyLegalIssues], [FamilyLegalIssueNotes], [HasCourtDates], [ActionNeededDetails], [OrderedToPayChildSupport], [MonthlyAmount], [IsUnknown], [OweAnyChildSupportBack], [ChildSupportDetails], [CommunitySupervisonContactId], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [HasRestrainingOrders], [RestrainingOrderNotes], [HasRestrainingOrderToPrevent], [RestrainingOrderToPreventNotes]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F65F2DB0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LegalIssuesSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_F65F2DB0, __$count_F65F2DB0, t.[Id], t.[ParticipantId], t.[IsConvictedOfCrime], t.[IsUnderCommunitySupervision], t.[CommunitySupervisonDetails], t.[HasPendingCharges], t.[HasFamilyLegalIssues], t.[FamilyLegalIssueNotes], t.[HasCourtDates], t.[ActionNeededDetails], t.[OrderedToPayChildSupport], t.[MonthlyAmount], t.[IsUnknown], t.[OweAnyChildSupportBack], t.[ChildSupportDetails], t.[CommunitySupervisonContactId], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasRestrainingOrders], t.[RestrainingOrderNotes], t.[HasRestrainingOrderToPrevent], t.[RestrainingOrderToPreventNotes] 
		from [cdc].[wwp_LegalIssuesSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_F65F2DB0,
		    count(*) as __$count_F65F2DB0 
			from [cdc].[wwp_LegalIssuesSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_F65F2DB0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LegalIssuesSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_F65F2DB0
	    when 1 then __$operation
	    else
			case __$min_op_F65F2DB0 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_F65F2DB0
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_F65F2DB0 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [IsConvictedOfCrime], [IsUnderCommunitySupervision], [CommunitySupervisonDetails], [HasPendingCharges], [HasFamilyLegalIssues], [FamilyLegalIssueNotes], [HasCourtDates], [ActionNeededDetails], [OrderedToPayChildSupport], [MonthlyAmount], [IsUnknown], [OweAnyChildSupportBack], [ChildSupportDetails], [CommunitySupervisonContactId], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [HasRestrainingOrders], [RestrainingOrderNotes], [HasRestrainingOrderToPrevent], [RestrainingOrderToPreventNotes]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F65F2DB0 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_LegalIssuesSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_F65F2DB0, __$count_F65F2DB0, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[IsConvictedOfCrime], t.[IsUnderCommunitySupervision], t.[CommunitySupervisonDetails], t.[HasPendingCharges], t.[HasFamilyLegalIssues], t.[FamilyLegalIssueNotes], t.[HasCourtDates], t.[ActionNeededDetails], t.[OrderedToPayChildSupport], t.[MonthlyAmount], t.[IsUnknown], t.[OweAnyChildSupportBack], t.[ChildSupportDetails], t.[CommunitySupervisonContactId], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasRestrainingOrders], t.[RestrainingOrderNotes], t.[HasRestrainingOrderToPrevent], t.[RestrainingOrderToPreventNotes]
		from [cdc].[wwp_LegalIssuesSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_F65F2DB0,
		    count(*) as __$count_F65F2DB0, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_LegalIssuesSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_F65F2DB0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LegalIssuesSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[IsConvictedOfCrime], t.[IsUnderCommunitySupervision], t.[CommunitySupervisonDetails], t.[HasPendingCharges], t.[HasFamilyLegalIssues], t.[FamilyLegalIssueNotes], t.[HasCourtDates], t.[ActionNeededDetails], t.[OrderedToPayChildSupport], t.[MonthlyAmount], t.[IsUnknown], t.[OweAnyChildSupportBack], t.[ChildSupportDetails], t.[CommunitySupervisonContactId], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasRestrainingOrders], t.[RestrainingOrderNotes], t.[HasRestrainingOrderToPrevent], t.[RestrainingOrderToPreventNotes]
		from [cdc].[wwp_LegalIssuesSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_F65F2DB0
			from [cdc].[wwp_LegalIssuesSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_F65F2DB0 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_LegalIssuesSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_LegalIssuesSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_MilitaryTrainingAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_MilitaryTrainingAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_804E5D50
	    when 1 then __$operation
	    else
			case __$min_op_804E5D50 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_804E5D50 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_804E5D50, __$count_804E5D50, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_804E5D50,
		    count(*) as __$count_804E5D50 
			from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_804E5D50 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_804E5D50
	    when 1 then __$operation
	    else
			case __$min_op_804E5D50 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_804E5D50
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_804E5D50 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_804E5D50 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_804E5D50, __$count_804E5D50, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_804E5D50,
		    count(*) as __$count_804E5D50, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_804E5D50 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_804E5D50
			from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_804E5D50 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_MilitaryTrainingAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_MilitaryTrainingSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_MilitaryTrainingSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [DoesHaveTraining], NULL as [MilitaryRankId], NULL as [MilitaryBranchId], NULL as [Rate], NULL as [YearsEnlisted], NULL as [EnlistmentDate], NULL as [DischargeDate], NULL as [IsCurrentlyEnlisted], NULL as [MilitaryDischargeTypeId], NULL as [SkillsAndTraining], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PolarLookupId], NULL as [BenefitsDetails]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_B4EE8992
	    when 1 then __$operation
	    else
			case __$min_op_B4EE8992 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [DoesHaveTraining], [MilitaryRankId], [MilitaryBranchId], [Rate], [YearsEnlisted], [EnlistmentDate], [DischargeDate], [IsCurrentlyEnlisted], [MilitaryDischargeTypeId], [SkillsAndTraining], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PolarLookupId], [BenefitsDetails]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B4EE8992 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_MilitaryTrainingSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_B4EE8992, __$count_B4EE8992, t.[Id], t.[ParticipantId], t.[DoesHaveTraining], t.[MilitaryRankId], t.[MilitaryBranchId], t.[Rate], t.[YearsEnlisted], t.[EnlistmentDate], t.[DischargeDate], t.[IsCurrentlyEnlisted], t.[MilitaryDischargeTypeId], t.[SkillsAndTraining], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PolarLookupId], t.[BenefitsDetails] 
		from [cdc].[wwp_MilitaryTrainingSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B4EE8992,
		    count(*) as __$count_B4EE8992 
			from [cdc].[wwp_MilitaryTrainingSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B4EE8992 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_MilitaryTrainingSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_B4EE8992
	    when 1 then __$operation
	    else
			case __$min_op_B4EE8992 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_B4EE8992
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_B4EE8992 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [DoesHaveTraining], [MilitaryRankId], [MilitaryBranchId], [Rate], [YearsEnlisted], [EnlistmentDate], [DischargeDate], [IsCurrentlyEnlisted], [MilitaryDischargeTypeId], [SkillsAndTraining], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [PolarLookupId], [BenefitsDetails]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B4EE8992 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_MilitaryTrainingSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_B4EE8992, __$count_B4EE8992, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[DoesHaveTraining], t.[MilitaryRankId], t.[MilitaryBranchId], t.[Rate], t.[YearsEnlisted], t.[EnlistmentDate], t.[DischargeDate], t.[IsCurrentlyEnlisted], t.[MilitaryDischargeTypeId], t.[SkillsAndTraining], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PolarLookupId], t.[BenefitsDetails]
		from [cdc].[wwp_MilitaryTrainingSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B4EE8992,
		    count(*) as __$count_B4EE8992, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_MilitaryTrainingSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B4EE8992 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_MilitaryTrainingSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[DoesHaveTraining], t.[MilitaryRankId], t.[MilitaryBranchId], t.[Rate], t.[YearsEnlisted], t.[EnlistmentDate], t.[DischargeDate], t.[IsCurrentlyEnlisted], t.[MilitaryDischargeTypeId], t.[SkillsAndTraining], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PolarLookupId], t.[BenefitsDetails]
		from [cdc].[wwp_MilitaryTrainingSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B4EE8992
			from [cdc].[wwp_MilitaryTrainingSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B4EE8992 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_MilitaryTrainingSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_MilitaryTrainingSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialCaretaker]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialCaretaker]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialParentsSectionId], NULL as [FirstName], NULL as [IsFirstNameUnknown], NULL as [LastName], NULL as [IsLastNameUnknown], NULL as [NonCustodialParentRelationshipId], NULL as [RelationshipDetails], NULL as [ContactIntervalId], NULL as [ContactIntervalDetails], NULL as [IsRelationshipChangeRequested], NULL as [RelationshipChangeRequestedDetails], NULL as [IsInterestedInRelationshipReferral], NULL as [InterestedInRelationshipReferralDetails], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialCaretaker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3367D6A6
	    when 1 then __$operation
	    else
			case __$min_op_3367D6A6 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [NonCustodialParentsSectionId], [FirstName], [IsFirstNameUnknown], [LastName], [IsLastNameUnknown], [NonCustodialParentRelationshipId], [RelationshipDetails], [ContactIntervalId], [ContactIntervalDetails], [IsRelationshipChangeRequested], [RelationshipChangeRequestedDetails], [IsInterestedInRelationshipReferral], [InterestedInRelationshipReferralDetails], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3367D6A6 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialCaretaker_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3367D6A6, __$count_3367D6A6, t.[Id], t.[NonCustodialParentsSectionId], t.[FirstName], t.[IsFirstNameUnknown], t.[LastName], t.[IsLastNameUnknown], t.[NonCustodialParentRelationshipId], t.[RelationshipDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsInterestedInRelationshipReferral], t.[InterestedInRelationshipReferralDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion] 
		from [cdc].[wwp_NonCustodialCaretaker_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3367D6A6,
		    count(*) as __$count_3367D6A6 
			from [cdc].[wwp_NonCustodialCaretaker_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3367D6A6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialCaretaker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialCaretaker_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3367D6A6
	    when 1 then __$operation
	    else
			case __$min_op_3367D6A6 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3367D6A6
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3367D6A6 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [NonCustodialParentsSectionId], [FirstName], [IsFirstNameUnknown], [LastName], [IsLastNameUnknown], [NonCustodialParentRelationshipId], [RelationshipDetails], [ContactIntervalId], [ContactIntervalDetails], [IsRelationshipChangeRequested], [RelationshipChangeRequestedDetails], [IsInterestedInRelationshipReferral], [InterestedInRelationshipReferralDetails], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3367D6A6 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialCaretaker_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3367D6A6, __$count_3367D6A6, 
		m.__$update_mask , t.[Id], t.[NonCustodialParentsSectionId], t.[FirstName], t.[IsFirstNameUnknown], t.[LastName], t.[IsLastNameUnknown], t.[NonCustodialParentRelationshipId], t.[RelationshipDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsInterestedInRelationshipReferral], t.[InterestedInRelationshipReferralDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
		from [cdc].[wwp_NonCustodialCaretaker_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3367D6A6,
		    count(*) as __$count_3367D6A6, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialCaretaker_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3367D6A6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialCaretaker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialCaretaker_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[NonCustodialParentsSectionId], t.[FirstName], t.[IsFirstNameUnknown], t.[LastName], t.[IsLastNameUnknown], t.[NonCustodialParentRelationshipId], t.[RelationshipDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsInterestedInRelationshipReferral], t.[InterestedInRelationshipReferralDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
		from [cdc].[wwp_NonCustodialCaretaker_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3367D6A6
			from [cdc].[wwp_NonCustodialCaretaker_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3367D6A6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialCaretaker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialCaretaker_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialChild]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialCaretakerId], NULL as [FirstName], NULL as [LastName], NULL as [DateOfBirth], NULL as [HasChildSupportOrder], NULL as [ChildSupportOrderDetails], NULL as [ContactIntervalId], NULL as [ContactIntervalDetails], NULL as [HasOtherAdultsYesNoUnknownLookupId], NULL as [OtherAdultsDetails], NULL as [IsRelationshipChangeRequested], NULL as [RelationshipChangeRequestedDetails], NULL as [IsNeedOfServicesYesNoUnknownLookupId], NULL as [NeedOfServicesDetails], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion], NULL as [HasNameOnChildBirthRecord]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_7F90602D
	    when 1 then __$operation
	    else
			case __$min_op_7F90602D 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [NonCustodialCaretakerId], [FirstName], [LastName], [DateOfBirth], [HasChildSupportOrder], [ChildSupportOrderDetails], [ContactIntervalId], [ContactIntervalDetails], [HasOtherAdultsYesNoUnknownLookupId], [OtherAdultsDetails], [IsRelationshipChangeRequested], [RelationshipChangeRequestedDetails], [IsNeedOfServicesYesNoUnknownLookupId], [NeedOfServicesDetails], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion], [HasNameOnChildBirthRecord]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7F90602D 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialChild_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7F90602D, __$count_7F90602D, t.[Id], t.[NonCustodialCaretakerId], t.[FirstName], t.[LastName], t.[DateOfBirth], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[HasOtherAdultsYesNoUnknownLookupId], t.[OtherAdultsDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsNeedOfServicesYesNoUnknownLookupId], t.[NeedOfServicesDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion], t.[HasNameOnChildBirthRecord] 
		from [cdc].[wwp_NonCustodialChild_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7F90602D,
		    count(*) as __$count_7F90602D 
			from [cdc].[wwp_NonCustodialChild_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7F90602D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialChild_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_7F90602D
	    when 1 then __$operation
	    else
			case __$min_op_7F90602D 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_7F90602D
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_7F90602D 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [NonCustodialCaretakerId], [FirstName], [LastName], [DateOfBirth], [HasChildSupportOrder], [ChildSupportOrderDetails], [ContactIntervalId], [ContactIntervalDetails], [HasOtherAdultsYesNoUnknownLookupId], [OtherAdultsDetails], [IsRelationshipChangeRequested], [RelationshipChangeRequestedDetails], [IsNeedOfServicesYesNoUnknownLookupId], [NeedOfServicesDetails], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion], [HasNameOnChildBirthRecord]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7F90602D 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialChild_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7F90602D, __$count_7F90602D, 
		m.__$update_mask , t.[Id], t.[NonCustodialCaretakerId], t.[FirstName], t.[LastName], t.[DateOfBirth], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[HasOtherAdultsYesNoUnknownLookupId], t.[OtherAdultsDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsNeedOfServicesYesNoUnknownLookupId], t.[NeedOfServicesDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion], t.[HasNameOnChildBirthRecord]
		from [cdc].[wwp_NonCustodialChild_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7F90602D,
		    count(*) as __$count_7F90602D, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialChild_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7F90602D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialChild_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[NonCustodialCaretakerId], t.[FirstName], t.[LastName], t.[DateOfBirth], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ContactIntervalId], t.[ContactIntervalDetails], t.[HasOtherAdultsYesNoUnknownLookupId], t.[OtherAdultsDetails], t.[IsRelationshipChangeRequested], t.[RelationshipChangeRequestedDetails], t.[IsNeedOfServicesYesNoUnknownLookupId], t.[NeedOfServicesDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion], t.[HasNameOnChildBirthRecord]
		from [cdc].[wwp_NonCustodialChild_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7F90602D
			from [cdc].[wwp_NonCustodialChild_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7F90602D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialChild_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_8773A512
	    when 1 then __$operation
	    else
			case __$min_op_8773A512 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_8773A512 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_8773A512, __$count_8773A512, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate] 
		from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8773A512,
		    count(*) as __$count_8773A512 
			from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8773A512 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_8773A512
	    when 1 then __$operation
	    else
			case __$min_op_8773A512 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_8773A512
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_8773A512 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_8773A512 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_8773A512, __$count_8773A512, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8773A512,
		    count(*) as __$count_8773A512, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8773A512 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_8773A512
			from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_8773A512 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsReferralAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsReferralAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ModifiedBy], NULL as [IsDeleted], NULL as [RowVersion], NULL as [ModifiedDate]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3D6C7BEB
	    when 1 then __$operation
	    else
			case __$min_op_3D6C7BEB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3D6C7BEB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3D6C7BEB, __$count_3D6C7BEB, t.[Id], t.[ReviewCompleted], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate] 
		from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3D6C7BEB,
		    count(*) as __$count_3D6C7BEB 
			from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3D6C7BEB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3D6C7BEB
	    when 1 then __$operation
	    else
			case __$min_op_3D6C7BEB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3D6C7BEB
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3D6C7BEB 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [ModifiedBy], [IsDeleted], [RowVersion], [ModifiedDate]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3D6C7BEB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3D6C7BEB, __$count_3D6C7BEB, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3D6C7BEB,
		    count(*) as __$count_3D6C7BEB, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3D6C7BEB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[ModifiedBy], t.[IsDeleted], t.[RowVersion], t.[ModifiedDate]
		from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3D6C7BEB
			from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3D6C7BEB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsReferralAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsReferralSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsReferralSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasChildrenId], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_1E90DBEE
	    when 1 then __$operation
	    else
			case __$min_op_1E90DBEE 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [HasChildrenId], [Notes], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1E90DBEE 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsReferralSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_1E90DBEE, __$count_1E90DBEE, t.[Id], t.[ParticipantId], t.[HasChildrenId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion] 
		from [cdc].[wwp_NonCustodialParentsReferralSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1E90DBEE,
		    count(*) as __$count_1E90DBEE 
			from [cdc].[wwp_NonCustodialParentsReferralSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1E90DBEE and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsReferralSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_1E90DBEE
	    when 1 then __$operation
	    else
			case __$min_op_1E90DBEE 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_1E90DBEE
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_1E90DBEE 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [HasChildrenId], [Notes], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_1E90DBEE 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsReferralSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_1E90DBEE, __$count_1E90DBEE, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[HasChildrenId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
		from [cdc].[wwp_NonCustodialParentsReferralSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1E90DBEE,
		    count(*) as __$count_1E90DBEE, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialParentsReferralSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1E90DBEE and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsReferralSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[HasChildrenId], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
		from [cdc].[wwp_NonCustodialParentsReferralSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_1E90DBEE
			from [cdc].[wwp_NonCustodialParentsReferralSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_1E90DBEE and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsReferralSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsReferralSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialParentsSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [HasChildren], NULL as [ChildSupportPayment], NULL as [HasOwedChildSupport], NULL as [HasInterestInChildServices], NULL as [IsInterestedInReferralServices], NULL as [InterestedInReferralServicesDetails], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [IsDeleted], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_7F97FBCC
	    when 1 then __$operation
	    else
			case __$min_op_7F97FBCC 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [HasChildren], [ChildSupportPayment], [HasOwedChildSupport], [HasInterestInChildServices], [IsInterestedInReferralServices], [InterestedInReferralServicesDetails], [Notes], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7F97FBCC 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7F97FBCC, __$count_7F97FBCC, t.[Id], t.[ParticipantId], t.[HasChildren], t.[ChildSupportPayment], t.[HasOwedChildSupport], t.[HasInterestInChildServices], t.[IsInterestedInReferralServices], t.[InterestedInReferralServicesDetails], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion] 
		from [cdc].[wwp_NonCustodialParentsSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7F97FBCC,
		    count(*) as __$count_7F97FBCC 
			from [cdc].[wwp_NonCustodialParentsSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7F97FBCC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_7F97FBCC
	    when 1 then __$operation
	    else
			case __$min_op_7F97FBCC 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_7F97FBCC
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_7F97FBCC 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [HasChildren], [ChildSupportPayment], [HasOwedChildSupport], [HasInterestInChildServices], [IsInterestedInReferralServices], [InterestedInReferralServicesDetails], [Notes], [ModifiedBy], [ModifiedDate], [IsDeleted], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_7F97FBCC 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialParentsSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_7F97FBCC, __$count_7F97FBCC, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[HasChildren], t.[ChildSupportPayment], t.[HasOwedChildSupport], t.[HasInterestInChildServices], t.[IsInterestedInReferralServices], t.[InterestedInReferralServicesDetails], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
		from [cdc].[wwp_NonCustodialParentsSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7F97FBCC,
		    count(*) as __$count_7F97FBCC, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialParentsSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7F97FBCC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[HasChildren], t.[ChildSupportPayment], t.[HasOwedChildSupport], t.[HasInterestInChildServices], t.[IsInterestedInReferralServices], t.[InterestedInReferralServicesDetails], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[IsDeleted], t.[RowVersion]
		from [cdc].[wwp_NonCustodialParentsSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_7F97FBCC
			from [cdc].[wwp_NonCustodialParentsSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_7F97FBCC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialParentsSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialParentsSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialReferralChild]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialReferralChild]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialReferralParentId], NULL as [FirstName], NULL as [LastName], NULL as [ReferralContactIntervalId], NULL as [ContactIntervalDetails], NULL as [HasChildSupportOrder], NULL as [ChildSupportOrderDetails], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_56B68F3F
	    when 1 then __$operation
	    else
			case __$min_op_56B68F3F 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [NonCustodialReferralParentId], [FirstName], [LastName], [ReferralContactIntervalId], [ContactIntervalDetails], [HasChildSupportOrder], [ChildSupportOrderDetails], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_56B68F3F 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialReferralChild_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_56B68F3F, __$count_56B68F3F, t.[Id], t.[NonCustodialReferralParentId], t.[FirstName], t.[LastName], t.[ReferralContactIntervalId], t.[ContactIntervalDetails], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion] 
		from [cdc].[wwp_NonCustodialReferralChild_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_56B68F3F,
		    count(*) as __$count_56B68F3F 
			from [cdc].[wwp_NonCustodialReferralChild_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_56B68F3F and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialReferralChild_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_56B68F3F
	    when 1 then __$operation
	    else
			case __$min_op_56B68F3F 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_56B68F3F
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_56B68F3F 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [NonCustodialReferralParentId], [FirstName], [LastName], [ReferralContactIntervalId], [ContactIntervalDetails], [HasChildSupportOrder], [ChildSupportOrderDetails], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_56B68F3F 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialReferralChild_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_56B68F3F, __$count_56B68F3F, 
		m.__$update_mask , t.[Id], t.[NonCustodialReferralParentId], t.[FirstName], t.[LastName], t.[ReferralContactIntervalId], t.[ContactIntervalDetails], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
		from [cdc].[wwp_NonCustodialReferralChild_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_56B68F3F,
		    count(*) as __$count_56B68F3F, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialReferralChild_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_56B68F3F and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialReferralChild_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[NonCustodialReferralParentId], t.[FirstName], t.[LastName], t.[ReferralContactIntervalId], t.[ContactIntervalDetails], t.[HasChildSupportOrder], t.[ChildSupportOrderDetails], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
		from [cdc].[wwp_NonCustodialReferralChild_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_56B68F3F
			from [cdc].[wwp_NonCustodialReferralChild_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_56B68F3F and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralChild', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialReferralChild_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialReferralParent]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_NonCustodialReferralParent]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [NonCustodialReferralParentsSectionId], NULL as [FirstName], NULL as [LastName], NULL as [IsAvailableOrWorking], NULL as [AvailableOrWorkingDetails], NULL as [IsInterestedInWorkProgram], NULL as [InterestedInWorkProgramDetails], NULL as [IsContactKnownWithParent], NULL as [ContactId], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [DeleteReasonId], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralParent', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_C6032ACA
	    when 1 then __$operation
	    else
			case __$min_op_C6032ACA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [NonCustodialReferralParentsSectionId], [FirstName], [LastName], [IsAvailableOrWorking], [AvailableOrWorkingDetails], [IsInterestedInWorkProgram], [InterestedInWorkProgramDetails], [IsContactKnownWithParent], [ContactId], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C6032ACA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialReferralParent_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_C6032ACA, __$count_C6032ACA, t.[Id], t.[NonCustodialReferralParentsSectionId], t.[FirstName], t.[LastName], t.[IsAvailableOrWorking], t.[AvailableOrWorkingDetails], t.[IsInterestedInWorkProgram], t.[InterestedInWorkProgramDetails], t.[IsContactKnownWithParent], t.[ContactId], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion] 
		from [cdc].[wwp_NonCustodialReferralParent_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C6032ACA,
		    count(*) as __$count_C6032ACA 
			from [cdc].[wwp_NonCustodialReferralParent_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C6032ACA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralParent', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialReferralParent_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_C6032ACA
	    when 1 then __$operation
	    else
			case __$min_op_C6032ACA 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_C6032ACA
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_C6032ACA 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [NonCustodialReferralParentsSectionId], [FirstName], [LastName], [IsAvailableOrWorking], [AvailableOrWorkingDetails], [IsInterestedInWorkProgram], [InterestedInWorkProgramDetails], [IsContactKnownWithParent], [ContactId], [ModifiedBy], [ModifiedDate], [DeleteReasonId], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C6032ACA 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_NonCustodialReferralParent_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_C6032ACA, __$count_C6032ACA, 
		m.__$update_mask , t.[Id], t.[NonCustodialReferralParentsSectionId], t.[FirstName], t.[LastName], t.[IsAvailableOrWorking], t.[AvailableOrWorkingDetails], t.[IsInterestedInWorkProgram], t.[InterestedInWorkProgramDetails], t.[IsContactKnownWithParent], t.[ContactId], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
		from [cdc].[wwp_NonCustodialReferralParent_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C6032ACA,
		    count(*) as __$count_C6032ACA, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_NonCustodialReferralParent_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C6032ACA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralParent', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialReferralParent_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[NonCustodialReferralParentsSectionId], t.[FirstName], t.[LastName], t.[IsAvailableOrWorking], t.[AvailableOrWorkingDetails], t.[IsInterestedInWorkProgram], t.[InterestedInWorkProgramDetails], t.[IsContactKnownWithParent], t.[ContactId], t.[ModifiedBy], t.[ModifiedDate], t.[DeleteReasonId], t.[RowVersion]
		from [cdc].[wwp_NonCustodialReferralParent_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C6032ACA
			from [cdc].[wwp_NonCustodialReferralParent_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C6032ACA and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_NonCustodialReferralParent', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_NonCustodialReferralParent_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_OtherJobInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_OtherJobInformation]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ExpectedScheduleDetails], NULL as [JobSectorId], NULL as [JobFoundMethodId], NULL as [WorkerId], NULL as [JobFoundMethodDetails], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [WorkProgramId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_OtherJobInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_15976FD2
	    when 1 then __$operation
	    else
			case __$min_op_15976FD2 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ExpectedScheduleDetails], [JobSectorId], [JobFoundMethodId], [WorkerId], [JobFoundMethodDetails], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [WorkProgramId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_15976FD2 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_OtherJobInformation_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_15976FD2, __$count_15976FD2, t.[Id], t.[ExpectedScheduleDetails], t.[JobSectorId], t.[JobFoundMethodId], t.[WorkerId], t.[JobFoundMethodDetails], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WorkProgramId] 
		from [cdc].[wwp_OtherJobInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_15976FD2,
		    count(*) as __$count_15976FD2 
			from [cdc].[wwp_OtherJobInformation_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_15976FD2 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_OtherJobInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_OtherJobInformation_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_15976FD2
	    when 1 then __$operation
	    else
			case __$min_op_15976FD2 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_15976FD2
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_15976FD2 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ExpectedScheduleDetails], [JobSectorId], [JobFoundMethodId], [WorkerId], [JobFoundMethodDetails], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [WorkProgramId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_15976FD2 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_OtherJobInformation_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_15976FD2, __$count_15976FD2, 
		m.__$update_mask , t.[Id], t.[ExpectedScheduleDetails], t.[JobSectorId], t.[JobFoundMethodId], t.[WorkerId], t.[JobFoundMethodDetails], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WorkProgramId]
		from [cdc].[wwp_OtherJobInformation_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_15976FD2,
		    count(*) as __$count_15976FD2, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_OtherJobInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_15976FD2 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_OtherJobInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_OtherJobInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ExpectedScheduleDetails], t.[JobSectorId], t.[JobFoundMethodId], t.[WorkerId], t.[JobFoundMethodDetails], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WorkProgramId]
		from [cdc].[wwp_OtherJobInformation_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_15976FD2
			from [cdc].[wwp_OtherJobInformation_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_15976FD2 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_OtherJobInformation', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_OtherJobInformation_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_Participant]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_Participant]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PinNumber], NULL as [FirstName], NULL as [MiddleInitialName], NULL as [LastName], NULL as [SuffixName], NULL as [DateOfBirth], NULL as [DateOfDeath], NULL as [GenderIndicator], NULL as [AliasResponse], NULL as [LanguageCode], NULL as [MaxHistorySequenceNumber], NULL as [RaceCode], NULL as [USCitizenSwitch], NULL as [AmericanIndianIndicator], NULL as [AsianIndicator], NULL as [BlackIndicator], NULL as [HispanicIndicator], NULL as [PacificIslanderIndicator], NULL as [WhiteIndicator], NULL as [MCI_ID], NULL as [TribalMemberIndicator], NULL as [TimeLimitStatus], NULL as [ConversionProjectDetails], NULL as [ConversionDate], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HasBeenThroughClientReg]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Participant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_943155F9
	    when 1 then __$operation
	    else
			case __$min_op_943155F9 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [PinNumber], [FirstName], [MiddleInitialName], [LastName], [SuffixName], [DateOfBirth], [DateOfDeath], [GenderIndicator], [AliasResponse], [LanguageCode], [MaxHistorySequenceNumber], [RaceCode], [USCitizenSwitch], [AmericanIndianIndicator], [AsianIndicator], [BlackIndicator], [HispanicIndicator], [PacificIslanderIndicator], [WhiteIndicator], [MCI_ID], [TribalMemberIndicator], [TimeLimitStatus], [ConversionProjectDetails], [ConversionDate], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [HasBeenThroughClientReg]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_943155F9 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Participant_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_943155F9, __$count_943155F9, t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderIndicator], t.[AliasResponse], t.[LanguageCode], t.[MaxHistorySequenceNumber], t.[RaceCode], t.[USCitizenSwitch], t.[AmericanIndianIndicator], t.[AsianIndicator], t.[BlackIndicator], t.[HispanicIndicator], t.[PacificIslanderIndicator], t.[WhiteIndicator], t.[MCI_ID], t.[TribalMemberIndicator], t.[TimeLimitStatus], t.[ConversionProjectDetails], t.[ConversionDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasBeenThroughClientReg] 
		from [cdc].[wwp_Participant_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_943155F9,
		    count(*) as __$count_943155F9 
			from [cdc].[wwp_Participant_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_943155F9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Participant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Participant_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_943155F9
	    when 1 then __$operation
	    else
			case __$min_op_943155F9 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_943155F9
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_943155F9 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [PinNumber], [FirstName], [MiddleInitialName], [LastName], [SuffixName], [DateOfBirth], [DateOfDeath], [GenderIndicator], [AliasResponse], [LanguageCode], [MaxHistorySequenceNumber], [RaceCode], [USCitizenSwitch], [AmericanIndianIndicator], [AsianIndicator], [BlackIndicator], [HispanicIndicator], [PacificIslanderIndicator], [WhiteIndicator], [MCI_ID], [TribalMemberIndicator], [TimeLimitStatus], [ConversionProjectDetails], [ConversionDate], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [HasBeenThroughClientReg]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_943155F9 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Participant_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_943155F9, __$count_943155F9, 
		m.__$update_mask , t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderIndicator], t.[AliasResponse], t.[LanguageCode], t.[MaxHistorySequenceNumber], t.[RaceCode], t.[USCitizenSwitch], t.[AmericanIndianIndicator], t.[AsianIndicator], t.[BlackIndicator], t.[HispanicIndicator], t.[PacificIslanderIndicator], t.[WhiteIndicator], t.[MCI_ID], t.[TribalMemberIndicator], t.[TimeLimitStatus], t.[ConversionProjectDetails], t.[ConversionDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasBeenThroughClientReg]
		from [cdc].[wwp_Participant_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_943155F9,
		    count(*) as __$count_943155F9, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_Participant_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_943155F9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Participant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Participant_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[PinNumber], t.[FirstName], t.[MiddleInitialName], t.[LastName], t.[SuffixName], t.[DateOfBirth], t.[DateOfDeath], t.[GenderIndicator], t.[AliasResponse], t.[LanguageCode], t.[MaxHistorySequenceNumber], t.[RaceCode], t.[USCitizenSwitch], t.[AmericanIndianIndicator], t.[AsianIndicator], t.[BlackIndicator], t.[HispanicIndicator], t.[PacificIslanderIndicator], t.[WhiteIndicator], t.[MCI_ID], t.[TribalMemberIndicator], t.[TimeLimitStatus], t.[ConversionProjectDetails], t.[ConversionDate], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasBeenThroughClientReg]
		from [cdc].[wwp_Participant_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_943155F9
			from [cdc].[wwp_Participant_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_943155F9 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Participant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Participant_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ParticipantContactInfo]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ParticipantContactInfo]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [CountyOfResidenceId], NULL as [ZipCode], NULL as [CityAddressId], NULL as [HomelessIndicator], NULL as [IsHouseHoldMailingAddressSame], NULL as [AlternateMailingAddressId], NULL as [PrimaryPhoneNumber], NULL as [CanTextPrimaryPhone], NULL as [CanLeaveVoiceMailPrimaryPhone], NULL as [SecondaryPhoneNumber], NULL as [CanTextSecondaryPhone], NULL as [CanLeaveVoiceMailSecondaryPhone], NULL as [EmailAddress], NULL as [Notes], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [StreetAddressPlaceId], NULL as [AddressLine1], NULL as [AddressLine2], NULL as [AddressVerificationTypeLookupId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantContactInfo', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_C01F4D26
	    when 1 then __$operation
	    else
			case __$min_op_C01F4D26 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [CountyOfResidenceId], [ZipCode], [CityAddressId], [HomelessIndicator], [IsHouseHoldMailingAddressSame], [AlternateMailingAddressId], [PrimaryPhoneNumber], [CanTextPrimaryPhone], [CanLeaveVoiceMailPrimaryPhone], [SecondaryPhoneNumber], [CanTextSecondaryPhone], [CanLeaveVoiceMailSecondaryPhone], [EmailAddress], [Notes], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [StreetAddressPlaceId], [AddressLine1], [AddressLine2], [AddressVerificationTypeLookupId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C01F4D26 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ParticipantContactInfo_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_C01F4D26, __$count_C01F4D26, t.[Id], t.[ParticipantId], t.[CountyOfResidenceId], t.[ZipCode], t.[CityAddressId], t.[HomelessIndicator], t.[IsHouseHoldMailingAddressSame], t.[AlternateMailingAddressId], t.[PrimaryPhoneNumber], t.[CanTextPrimaryPhone], t.[CanLeaveVoiceMailPrimaryPhone], t.[SecondaryPhoneNumber], t.[CanTextSecondaryPhone], t.[CanLeaveVoiceMailSecondaryPhone], t.[EmailAddress], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId] 
		from [cdc].[wwp_ParticipantContactInfo_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C01F4D26,
		    count(*) as __$count_C01F4D26 
			from [cdc].[wwp_ParticipantContactInfo_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C01F4D26 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantContactInfo', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ParticipantContactInfo_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_C01F4D26
	    when 1 then __$operation
	    else
			case __$min_op_C01F4D26 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_C01F4D26
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_C01F4D26 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [CountyOfResidenceId], [ZipCode], [CityAddressId], [HomelessIndicator], [IsHouseHoldMailingAddressSame], [AlternateMailingAddressId], [PrimaryPhoneNumber], [CanTextPrimaryPhone], [CanLeaveVoiceMailPrimaryPhone], [SecondaryPhoneNumber], [CanTextSecondaryPhone], [CanLeaveVoiceMailSecondaryPhone], [EmailAddress], [Notes], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [StreetAddressPlaceId], [AddressLine1], [AddressLine2], [AddressVerificationTypeLookupId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_C01F4D26 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ParticipantContactInfo_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_C01F4D26, __$count_C01F4D26, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[CountyOfResidenceId], t.[ZipCode], t.[CityAddressId], t.[HomelessIndicator], t.[IsHouseHoldMailingAddressSame], t.[AlternateMailingAddressId], t.[PrimaryPhoneNumber], t.[CanTextPrimaryPhone], t.[CanLeaveVoiceMailPrimaryPhone], t.[SecondaryPhoneNumber], t.[CanTextSecondaryPhone], t.[CanLeaveVoiceMailSecondaryPhone], t.[EmailAddress], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
		from [cdc].[wwp_ParticipantContactInfo_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C01F4D26,
		    count(*) as __$count_C01F4D26, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ParticipantContactInfo_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C01F4D26 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantContactInfo', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ParticipantContactInfo_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[CountyOfResidenceId], t.[ZipCode], t.[CityAddressId], t.[HomelessIndicator], t.[IsHouseHoldMailingAddressSame], t.[AlternateMailingAddressId], t.[PrimaryPhoneNumber], t.[CanTextPrimaryPhone], t.[CanLeaveVoiceMailPrimaryPhone], t.[SecondaryPhoneNumber], t.[CanTextSecondaryPhone], t.[CanLeaveVoiceMailSecondaryPhone], t.[EmailAddress], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[StreetAddressPlaceId], t.[AddressLine1], t.[AddressLine2], t.[AddressVerificationTypeLookupId]
		from [cdc].[wwp_ParticipantContactInfo_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_C01F4D26
			from [cdc].[wwp_ParticipantContactInfo_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_C01F4D26 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantContactInfo', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ParticipantContactInfo_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_ParticipantEnrolledProgram]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_ParticipantEnrolledProgram]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [EnrolledProgramId], NULL as [EnrolledProgramStatusCodeId], NULL as [ReferralDate], NULL as [EnrollmentDate], NULL as [DisenrollmentDate], NULL as [CASENumber], NULL as [ReferralRegistrationCode], NULL as [CurrentRegCode], NULL as [AGSequenceNumber], NULL as [CaseManagerId], NULL as [WorkerId], NULL as [CompletionReasonId], NULL as [RequestForAssistanceId], NULL as [OfficeId], NULL as [IsDeleted], NULL as [ModifiedDate], NULL as [ModifiedBy], NULL as [RowVersion], NULL as [LFFEPId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantEnrolledProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_FC541E3B
	    when 1 then __$operation
	    else
			case __$min_op_FC541E3B 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [EnrolledProgramId], [EnrolledProgramStatusCodeId], [ReferralDate], [EnrollmentDate], [DisenrollmentDate], [CASENumber], [ReferralRegistrationCode], [CurrentRegCode], [AGSequenceNumber], [CaseManagerId], [WorkerId], [CompletionReasonId], [RequestForAssistanceId], [OfficeId], [IsDeleted], [ModifiedDate], [ModifiedBy], [RowVersion], [LFFEPId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_FC541E3B 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ParticipantEnrolledProgram_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_FC541E3B, __$count_FC541E3B, t.[Id], t.[ParticipantId], t.[EnrolledProgramId], t.[EnrolledProgramStatusCodeId], t.[ReferralDate], t.[EnrollmentDate], t.[DisenrollmentDate], t.[CASENumber], t.[ReferralRegistrationCode], t.[CurrentRegCode], t.[AGSequenceNumber], t.[CaseManagerId], t.[WorkerId], t.[CompletionReasonId], t.[RequestForAssistanceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[LFFEPId] 
		from [cdc].[wwp_ParticipantEnrolledProgram_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_FC541E3B,
		    count(*) as __$count_FC541E3B 
			from [cdc].[wwp_ParticipantEnrolledProgram_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_FC541E3B and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantEnrolledProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ParticipantEnrolledProgram_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_FC541E3B
	    when 1 then __$operation
	    else
			case __$min_op_FC541E3B 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_FC541E3B
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_FC541E3B 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [EnrolledProgramId], [EnrolledProgramStatusCodeId], [ReferralDate], [EnrollmentDate], [DisenrollmentDate], [CASENumber], [ReferralRegistrationCode], [CurrentRegCode], [AGSequenceNumber], [CaseManagerId], [WorkerId], [CompletionReasonId], [RequestForAssistanceId], [OfficeId], [IsDeleted], [ModifiedDate], [ModifiedBy], [RowVersion], [LFFEPId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_FC541E3B 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_ParticipantEnrolledProgram_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_FC541E3B, __$count_FC541E3B, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[EnrolledProgramId], t.[EnrolledProgramStatusCodeId], t.[ReferralDate], t.[EnrollmentDate], t.[DisenrollmentDate], t.[CASENumber], t.[ReferralRegistrationCode], t.[CurrentRegCode], t.[AGSequenceNumber], t.[CaseManagerId], t.[WorkerId], t.[CompletionReasonId], t.[RequestForAssistanceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[LFFEPId]
		from [cdc].[wwp_ParticipantEnrolledProgram_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_FC541E3B,
		    count(*) as __$count_FC541E3B, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_ParticipantEnrolledProgram_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_FC541E3B and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantEnrolledProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ParticipantEnrolledProgram_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[EnrolledProgramId], t.[EnrolledProgramStatusCodeId], t.[ReferralDate], t.[EnrollmentDate], t.[DisenrollmentDate], t.[CASENumber], t.[ReferralRegistrationCode], t.[CurrentRegCode], t.[AGSequenceNumber], t.[CaseManagerId], t.[WorkerId], t.[CompletionReasonId], t.[RequestForAssistanceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedDate], t.[ModifiedBy], t.[RowVersion], t.[LFFEPId]
		from [cdc].[wwp_ParticipantEnrolledProgram_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_FC541E3B
			from [cdc].[wwp_ParticipantEnrolledProgram_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_FC541E3B and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_ParticipantEnrolledProgram', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_ParticipantEnrolledProgram_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_PendingCharge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_PendingCharge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [LegalSectionId], NULL as [ConvictionTypeID], NULL as [ChargeDate], NULL as [IsUnknown], NULL as [Details], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PendingCharge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3A1C1244
	    when 1 then __$operation
	    else
			case __$min_op_3A1C1244 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [LegalSectionId], [ConvictionTypeID], [ChargeDate], [IsUnknown], [Details], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3A1C1244 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PendingCharge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3A1C1244, __$count_3A1C1244, t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[ChargeDate], t.[IsUnknown], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_PendingCharge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3A1C1244,
		    count(*) as __$count_3A1C1244 
			from [cdc].[wwp_PendingCharge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3A1C1244 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PendingCharge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PendingCharge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3A1C1244
	    when 1 then __$operation
	    else
			case __$min_op_3A1C1244 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3A1C1244
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3A1C1244 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [LegalSectionId], [ConvictionTypeID], [ChargeDate], [IsUnknown], [Details], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3A1C1244 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PendingCharge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3A1C1244, __$count_3A1C1244, 
		m.__$update_mask , t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[ChargeDate], t.[IsUnknown], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PendingCharge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3A1C1244,
		    count(*) as __$count_3A1C1244, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_PendingCharge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3A1C1244 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PendingCharge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PendingCharge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[LegalSectionId], t.[ConvictionTypeID], t.[ChargeDate], t.[IsUnknown], t.[Details], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PendingCharge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3A1C1244
			from [cdc].[wwp_PendingCharge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3A1C1244 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PendingCharge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PendingCharge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryCollege]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryCollege]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PostSecondaryEducationSectionId], NULL as [SchoolCollegeEstablishmentId], NULL as [HasGraduated], NULL as [LastYearAttended], NULL as [CurrentlyAttending], NULL as [Semesters], NULL as [Credits], NULL as [Details], NULL as [OriginId], NULL as [SortOrder], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryCollege', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_CC8EE29A
	    when 1 then __$operation
	    else
			case __$min_op_CC8EE29A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [PostSecondaryEducationSectionId], [SchoolCollegeEstablishmentId], [HasGraduated], [LastYearAttended], [CurrentlyAttending], [Semesters], [Credits], [Details], [OriginId], [SortOrder], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_CC8EE29A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryCollege_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_CC8EE29A, __$count_CC8EE29A, t.[Id], t.[PostSecondaryEducationSectionId], t.[SchoolCollegeEstablishmentId], t.[HasGraduated], t.[LastYearAttended], t.[CurrentlyAttending], t.[Semesters], t.[Credits], t.[Details], t.[OriginId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_PostSecondaryCollege_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CC8EE29A,
		    count(*) as __$count_CC8EE29A 
			from [cdc].[wwp_PostSecondaryCollege_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CC8EE29A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryCollege', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryCollege_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_CC8EE29A
	    when 1 then __$operation
	    else
			case __$min_op_CC8EE29A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_CC8EE29A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_CC8EE29A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [PostSecondaryEducationSectionId], [SchoolCollegeEstablishmentId], [HasGraduated], [LastYearAttended], [CurrentlyAttending], [Semesters], [Credits], [Details], [OriginId], [SortOrder], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_CC8EE29A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryCollege_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_CC8EE29A, __$count_CC8EE29A, 
		m.__$update_mask , t.[Id], t.[PostSecondaryEducationSectionId], t.[SchoolCollegeEstablishmentId], t.[HasGraduated], t.[LastYearAttended], t.[CurrentlyAttending], t.[Semesters], t.[Credits], t.[Details], t.[OriginId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryCollege_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CC8EE29A,
		    count(*) as __$count_CC8EE29A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_PostSecondaryCollege_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CC8EE29A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryCollege', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryCollege_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[PostSecondaryEducationSectionId], t.[SchoolCollegeEstablishmentId], t.[HasGraduated], t.[LastYearAttended], t.[CurrentlyAttending], t.[Semesters], t.[Credits], t.[Details], t.[OriginId], t.[SortOrder], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryCollege_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CC8EE29A
			from [cdc].[wwp_PostSecondaryCollege_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CC8EE29A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryCollege', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryCollege_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryDegree]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryDegree]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [PostSecondaryEducationSectionId], NULL as [Name], NULL as [College], NULL as [DegreeTypeId], NULL as [YearAttained], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryDegree', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_B0E4C002
	    when 1 then __$operation
	    else
			case __$min_op_B0E4C002 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [PostSecondaryEducationSectionId], [Name], [College], [DegreeTypeId], [YearAttained], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B0E4C002 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryDegree_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_B0E4C002, __$count_B0E4C002, t.[Id], t.[PostSecondaryEducationSectionId], t.[Name], t.[College], t.[DegreeTypeId], t.[YearAttained], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_PostSecondaryDegree_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B0E4C002,
		    count(*) as __$count_B0E4C002 
			from [cdc].[wwp_PostSecondaryDegree_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B0E4C002 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryDegree', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryDegree_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_B0E4C002
	    when 1 then __$operation
	    else
			case __$min_op_B0E4C002 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_B0E4C002
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_B0E4C002 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [PostSecondaryEducationSectionId], [Name], [College], [DegreeTypeId], [YearAttained], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_B0E4C002 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryDegree_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_B0E4C002, __$count_B0E4C002, 
		m.__$update_mask , t.[Id], t.[PostSecondaryEducationSectionId], t.[Name], t.[College], t.[DegreeTypeId], t.[YearAttained], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryDegree_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B0E4C002,
		    count(*) as __$count_B0E4C002, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_PostSecondaryDegree_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B0E4C002 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryDegree', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryDegree_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[PostSecondaryEducationSectionId], t.[Name], t.[College], t.[DegreeTypeId], t.[YearAttained], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryDegree_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_B0E4C002
			from [cdc].[wwp_PostSecondaryDegree_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_B0E4C002 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryDegree', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryDegree_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryEducationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryEducationAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_928DF77D
	    when 1 then __$operation
	    else
			case __$min_op_928DF77D 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_928DF77D 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_928DF77D, __$count_928DF77D, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_928DF77D,
		    count(*) as __$count_928DF77D 
			from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_928DF77D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_928DF77D
	    when 1 then __$operation
	    else
			case __$min_op_928DF77D 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_928DF77D
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_928DF77D 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_928DF77D 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_928DF77D, __$count_928DF77D, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_928DF77D,
		    count(*) as __$count_928DF77D, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_928DF77D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_928DF77D
			from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_928DF77D and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryEducationAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryEducationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryEducationSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [DidAttendCollege], NULL as [IsWorkingOnLicensesOrCertificates], NULL as [DoesHaveDegrees], NULL as [Notes], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_127AFAD3
	    when 1 then __$operation
	    else
			case __$min_op_127AFAD3 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [DidAttendCollege], [IsWorkingOnLicensesOrCertificates], [DoesHaveDegrees], [Notes], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_127AFAD3 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryEducationSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_127AFAD3, __$count_127AFAD3, t.[Id], t.[ParticipantId], t.[DidAttendCollege], t.[IsWorkingOnLicensesOrCertificates], t.[DoesHaveDegrees], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_PostSecondaryEducationSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_127AFAD3,
		    count(*) as __$count_127AFAD3 
			from [cdc].[wwp_PostSecondaryEducationSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_127AFAD3 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryEducationSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_127AFAD3
	    when 1 then __$operation
	    else
			case __$min_op_127AFAD3 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_127AFAD3
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_127AFAD3 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [DidAttendCollege], [IsWorkingOnLicensesOrCertificates], [DoesHaveDegrees], [Notes], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_127AFAD3 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryEducationSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_127AFAD3, __$count_127AFAD3, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[DidAttendCollege], t.[IsWorkingOnLicensesOrCertificates], t.[DoesHaveDegrees], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryEducationSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_127AFAD3,
		    count(*) as __$count_127AFAD3, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_PostSecondaryEducationSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_127AFAD3 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryEducationSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[DidAttendCollege], t.[IsWorkingOnLicensesOrCertificates], t.[DoesHaveDegrees], t.[Notes], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryEducationSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_127AFAD3
			from [cdc].[wwp_PostSecondaryEducationSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_127AFAD3 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryEducationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryEducationSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryLicense]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_PostSecondaryLicense]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Name], NULL as [Issuer], NULL as [AttainedDate], NULL as [ExpiredDate], NULL as [IsInProgress], NULL as [DoesNotExpire], NULL as [ValidInWIPolarLookupId], NULL as [LicenseTypeId], NULL as [PostSecondaryEducationSectionId], NULL as [OriginId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryLicense', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_68DC4635
	    when 1 then __$operation
	    else
			case __$min_op_68DC4635 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [Name], [Issuer], [AttainedDate], [ExpiredDate], [IsInProgress], [DoesNotExpire], [ValidInWIPolarLookupId], [LicenseTypeId], [PostSecondaryEducationSectionId], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_68DC4635 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryLicense_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_68DC4635, __$count_68DC4635, t.[Id], t.[Name], t.[Issuer], t.[AttainedDate], t.[ExpiredDate], t.[IsInProgress], t.[DoesNotExpire], t.[ValidInWIPolarLookupId], t.[LicenseTypeId], t.[PostSecondaryEducationSectionId], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_PostSecondaryLicense_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_68DC4635,
		    count(*) as __$count_68DC4635 
			from [cdc].[wwp_PostSecondaryLicense_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_68DC4635 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryLicense', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryLicense_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_68DC4635
	    when 1 then __$operation
	    else
			case __$min_op_68DC4635 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_68DC4635
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_68DC4635 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [Name], [Issuer], [AttainedDate], [ExpiredDate], [IsInProgress], [DoesNotExpire], [ValidInWIPolarLookupId], [LicenseTypeId], [PostSecondaryEducationSectionId], [OriginId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_68DC4635 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_PostSecondaryLicense_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_68DC4635, __$count_68DC4635, 
		m.__$update_mask , t.[Id], t.[Name], t.[Issuer], t.[AttainedDate], t.[ExpiredDate], t.[IsInProgress], t.[DoesNotExpire], t.[ValidInWIPolarLookupId], t.[LicenseTypeId], t.[PostSecondaryEducationSectionId], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryLicense_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_68DC4635,
		    count(*) as __$count_68DC4635, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_PostSecondaryLicense_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_68DC4635 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryLicense', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryLicense_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[Name], t.[Issuer], t.[AttainedDate], t.[ExpiredDate], t.[IsInProgress], t.[DoesNotExpire], t.[ValidInWIPolarLookupId], t.[LicenseTypeId], t.[PostSecondaryEducationSectionId], t.[OriginId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_PostSecondaryLicense_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_68DC4635
			from [cdc].[wwp_PostSecondaryLicense_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_68DC4635 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_PostSecondaryLicense', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_PostSecondaryLicense_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_RecentParticipant]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_RecentParticipant]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkerId], NULL as [ParticipantId], NULL as [LastAccessed], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_RecentParticipant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3247CD87
	    when 1 then __$operation
	    else
			case __$min_op_3247CD87 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WorkerId], [ParticipantId], [LastAccessed], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3247CD87 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_RecentParticipant_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3247CD87, __$count_3247CD87, t.[Id], t.[WorkerId], t.[ParticipantId], t.[LastAccessed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_RecentParticipant_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3247CD87,
		    count(*) as __$count_3247CD87 
			from [cdc].[wwp_RecentParticipant_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3247CD87 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_RecentParticipant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_RecentParticipant_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3247CD87
	    when 1 then __$operation
	    else
			case __$min_op_3247CD87 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3247CD87
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3247CD87 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WorkerId], [ParticipantId], [LastAccessed], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3247CD87 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_RecentParticipant_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3247CD87, __$count_3247CD87, 
		m.__$update_mask , t.[Id], t.[WorkerId], t.[ParticipantId], t.[LastAccessed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_RecentParticipant_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3247CD87,
		    count(*) as __$count_3247CD87, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_RecentParticipant_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3247CD87 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_RecentParticipant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_RecentParticipant_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WorkerId], t.[ParticipantId], t.[LastAccessed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_RecentParticipant_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3247CD87
			from [cdc].[wwp_RecentParticipant_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3247CD87 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_RecentParticipant', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_RecentParticipant_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_RequestForAssistance]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_RequestForAssistance]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [RequestForAssistanceStatusId], NULL as [RequestForAssistanceStatusDate], NULL as [RfaNumber], NULL as [EnrolledProgramId], NULL as [CountyOfResidenceId], NULL as [OfficeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_RequestForAssistance', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_F0F72C2A
	    when 1 then __$operation
	    else
			case __$min_op_F0F72C2A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [RequestForAssistanceStatusId], [RequestForAssistanceStatusDate], [RfaNumber], [EnrolledProgramId], [CountyOfResidenceId], [OfficeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F0F72C2A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_RequestForAssistance_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_F0F72C2A, __$count_F0F72C2A, t.[Id], t.[ParticipantId], t.[RequestForAssistanceStatusId], t.[RequestForAssistanceStatusDate], t.[RfaNumber], t.[EnrolledProgramId], t.[CountyOfResidenceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_RequestForAssistance_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_F0F72C2A,
		    count(*) as __$count_F0F72C2A 
			from [cdc].[wwp_RequestForAssistance_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_F0F72C2A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_RequestForAssistance', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_RequestForAssistance_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_F0F72C2A
	    when 1 then __$operation
	    else
			case __$min_op_F0F72C2A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_F0F72C2A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_F0F72C2A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [RequestForAssistanceStatusId], [RequestForAssistanceStatusDate], [RfaNumber], [EnrolledProgramId], [CountyOfResidenceId], [OfficeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_F0F72C2A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_RequestForAssistance_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_F0F72C2A, __$count_F0F72C2A, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[RequestForAssistanceStatusId], t.[RequestForAssistanceStatusDate], t.[RfaNumber], t.[EnrolledProgramId], t.[CountyOfResidenceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_RequestForAssistance_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_F0F72C2A,
		    count(*) as __$count_F0F72C2A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_RequestForAssistance_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_F0F72C2A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_RequestForAssistance', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_RequestForAssistance_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[RequestForAssistanceStatusId], t.[RequestForAssistanceStatusDate], t.[RfaNumber], t.[EnrolledProgramId], t.[CountyOfResidenceId], t.[OfficeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_RequestForAssistance_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_F0F72C2A
			from [cdc].[wwp_RequestForAssistance_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_F0F72C2A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_RequestForAssistance', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_RequestForAssistance_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_SchoolCollegeEstablishment]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_SchoolCollegeEstablishment]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [Name], NULL as [Street], NULL as [CityId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_SchoolCollegeEstablishment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_3B757719
	    when 1 then __$operation
	    else
			case __$min_op_3B757719 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [Name], [Street], [CityId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3B757719 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_SchoolCollegeEstablishment_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3B757719, __$count_3B757719, t.[Id], t.[Name], t.[Street], t.[CityId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_SchoolCollegeEstablishment_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3B757719,
		    count(*) as __$count_3B757719 
			from [cdc].[wwp_SchoolCollegeEstablishment_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3B757719 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_SchoolCollegeEstablishment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_SchoolCollegeEstablishment_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_3B757719
	    when 1 then __$operation
	    else
			case __$min_op_3B757719 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_3B757719
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_3B757719 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [Name], [Street], [CityId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_3B757719 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_SchoolCollegeEstablishment_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_3B757719, __$count_3B757719, 
		m.__$update_mask , t.[Id], t.[Name], t.[Street], t.[CityId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_SchoolCollegeEstablishment_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3B757719,
		    count(*) as __$count_3B757719, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_SchoolCollegeEstablishment_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3B757719 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_SchoolCollegeEstablishment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_SchoolCollegeEstablishment_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[Name], t.[Street], t.[CityId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_SchoolCollegeEstablishment_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_3B757719
			from [cdc].[wwp_SchoolCollegeEstablishment_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_3B757719 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_SchoolCollegeEstablishment', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_SchoolCollegeEstablishment_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_TimeLimit]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_TimeLimit]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantID], NULL as [EffectiveMonth], NULL as [TimeLimitTypeId], NULL as [TwentyFourMonthLimit], NULL as [StateTimelimit], NULL as [FederalTimeLimit], NULL as [StateId], NULL as [ChangeReasonId], NULL as [ChangeReasonDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PIN_NUM]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimit', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_0E5598FC
	    when 1 then __$operation
	    else
			case __$min_op_0E5598FC 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantID], [EffectiveMonth], [TimeLimitTypeId], [TwentyFourMonthLimit], [StateTimelimit], [FederalTimeLimit], [StateId], [ChangeReasonId], [ChangeReasonDetails], [Notes], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [PIN_NUM]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0E5598FC 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TimeLimit_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0E5598FC, __$count_0E5598FC, t.[Id], t.[ParticipantID], t.[EffectiveMonth], t.[TimeLimitTypeId], t.[TwentyFourMonthLimit], t.[StateTimelimit], t.[FederalTimeLimit], t.[StateId], t.[ChangeReasonId], t.[ChangeReasonDetails], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM] 
		from [cdc].[wwp_TimeLimit_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0E5598FC,
		    count(*) as __$count_0E5598FC 
			from [cdc].[wwp_TimeLimit_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0E5598FC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimit', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimit_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_0E5598FC
	    when 1 then __$operation
	    else
			case __$min_op_0E5598FC 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_0E5598FC
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_0E5598FC 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantID], [EffectiveMonth], [TimeLimitTypeId], [TwentyFourMonthLimit], [StateTimelimit], [FederalTimeLimit], [StateId], [ChangeReasonId], [ChangeReasonDetails], [Notes], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [PIN_NUM]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0E5598FC 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TimeLimit_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0E5598FC, __$count_0E5598FC, 
		m.__$update_mask , t.[Id], t.[ParticipantID], t.[EffectiveMonth], t.[TimeLimitTypeId], t.[TwentyFourMonthLimit], t.[StateTimelimit], t.[FederalTimeLimit], t.[StateId], t.[ChangeReasonId], t.[ChangeReasonDetails], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
		from [cdc].[wwp_TimeLimit_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0E5598FC,
		    count(*) as __$count_0E5598FC, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_TimeLimit_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0E5598FC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimit', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimit_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantID], t.[EffectiveMonth], t.[TimeLimitTypeId], t.[TwentyFourMonthLimit], t.[StateTimelimit], t.[FederalTimeLimit], t.[StateId], t.[ChangeReasonId], t.[ChangeReasonDetails], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
		from [cdc].[wwp_TimeLimit_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0E5598FC
			from [cdc].[wwp_TimeLimit_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0E5598FC and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimit', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimit_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_TimeLimitExtension]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_TimeLimitExtension]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [ExtensionDecisionId], NULL as [TimeLimitTypeId], NULL as [DecisionDate], NULL as [InitialDiscussionDate], NULL as [ApprovalReasonId], NULL as [DenialReasonId], NULL as [Details], NULL as [IsPendingDVR], NULL as [IsReceivingDVR], NULL as [IsPendingSSIorSSDI], NULL as [BeginMonth], NULL as [EndMonth], NULL as [ExtensionSequence], NULL as [IsBackDatedExtenstion], NULL as [DeleteReasonId], NULL as [Notes], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [PIN_NUM]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitExtension', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_6F05715A
	    when 1 then __$operation
	    else
			case __$min_op_6F05715A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [ExtensionDecisionId], [TimeLimitTypeId], [DecisionDate], [InitialDiscussionDate], [ApprovalReasonId], [DenialReasonId], [Details], [IsPendingDVR], [IsReceivingDVR], [IsPendingSSIorSSDI], [BeginMonth], [EndMonth], [ExtensionSequence], [IsBackDatedExtenstion], [DeleteReasonId], [Notes], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [PIN_NUM]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_6F05715A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TimeLimitExtension_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_6F05715A, __$count_6F05715A, t.[Id], t.[ParticipantId], t.[ExtensionDecisionId], t.[TimeLimitTypeId], t.[DecisionDate], t.[InitialDiscussionDate], t.[ApprovalReasonId], t.[DenialReasonId], t.[Details], t.[IsPendingDVR], t.[IsReceivingDVR], t.[IsPendingSSIorSSDI], t.[BeginMonth], t.[EndMonth], t.[ExtensionSequence], t.[IsBackDatedExtenstion], t.[DeleteReasonId], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM] 
		from [cdc].[wwp_TimeLimitExtension_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_6F05715A,
		    count(*) as __$count_6F05715A 
			from [cdc].[wwp_TimeLimitExtension_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_6F05715A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitExtension', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimitExtension_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_6F05715A
	    when 1 then __$operation
	    else
			case __$min_op_6F05715A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_6F05715A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_6F05715A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [ExtensionDecisionId], [TimeLimitTypeId], [DecisionDate], [InitialDiscussionDate], [ApprovalReasonId], [DenialReasonId], [Details], [IsPendingDVR], [IsReceivingDVR], [IsPendingSSIorSSDI], [BeginMonth], [EndMonth], [ExtensionSequence], [IsBackDatedExtenstion], [DeleteReasonId], [Notes], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion], [PIN_NUM]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_6F05715A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TimeLimitExtension_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_6F05715A, __$count_6F05715A, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[ExtensionDecisionId], t.[TimeLimitTypeId], t.[DecisionDate], t.[InitialDiscussionDate], t.[ApprovalReasonId], t.[DenialReasonId], t.[Details], t.[IsPendingDVR], t.[IsReceivingDVR], t.[IsPendingSSIorSSDI], t.[BeginMonth], t.[EndMonth], t.[ExtensionSequence], t.[IsBackDatedExtenstion], t.[DeleteReasonId], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
		from [cdc].[wwp_TimeLimitExtension_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_6F05715A,
		    count(*) as __$count_6F05715A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_TimeLimitExtension_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_6F05715A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitExtension', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimitExtension_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[ExtensionDecisionId], t.[TimeLimitTypeId], t.[DecisionDate], t.[InitialDiscussionDate], t.[ApprovalReasonId], t.[DenialReasonId], t.[Details], t.[IsPendingDVR], t.[IsReceivingDVR], t.[IsPendingSSIorSSDI], t.[BeginMonth], t.[EndMonth], t.[ExtensionSequence], t.[IsBackDatedExtenstion], t.[DeleteReasonId], t.[Notes], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[PIN_NUM]
		from [cdc].[wwp_TimeLimitExtension_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_6F05715A
			from [cdc].[wwp_TimeLimitExtension_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_6F05715A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitExtension', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimitExtension_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_TimeLimitSummary]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_TimeLimitSummary]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [FederalUsed], NULL as [FederalMax], NULL as [StateUsed], NULL as [StateMax], NULL as [CSJUsed], NULL as [CSJMax], NULL as [W2TUsed], NULL as [W2TMax], NULL as [TMPUsed], NULL as [TNPUsed], NULL as [TempUsed], NULL as [TempMax], NULL as [CMCUsed], NULL as [CMCMax], NULL as [OPCUsed], NULL as [OPCMax], NULL as [OtherUsed], NULL as [OtherMax], NULL as [OTF], NULL as [Tribal], NULL as [TJB], NULL as [JOBS], NULL as [NO24], NULL as [FactDetails], NULL as [CSJExtensionDue], NULL as [W2TExtensionDue], NULL as [TempExtensionDue], NULL as [StateExtensionDue], NULL as [IsDeleted], NULL as [CreatedDate], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitSummary', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_54A6B2C1
	    when 1 then __$operation
	    else
			case __$min_op_54A6B2C1 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [FederalUsed], [FederalMax], [StateUsed], [StateMax], [CSJUsed], [CSJMax], [W2TUsed], [W2TMax], [TMPUsed], [TNPUsed], [TempUsed], [TempMax], [CMCUsed], [CMCMax], [OPCUsed], [OPCMax], [OtherUsed], [OtherMax], [OTF], [Tribal], [TJB], [JOBS], [NO24], [FactDetails], [CSJExtensionDue], [W2TExtensionDue], [TempExtensionDue], [StateExtensionDue], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_54A6B2C1 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TimeLimitSummary_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_54A6B2C1, __$count_54A6B2C1, t.[Id], t.[ParticipantId], t.[FederalUsed], t.[FederalMax], t.[StateUsed], t.[StateMax], t.[CSJUsed], t.[CSJMax], t.[W2TUsed], t.[W2TMax], t.[TMPUsed], t.[TNPUsed], t.[TempUsed], t.[TempMax], t.[CMCUsed], t.[CMCMax], t.[OPCUsed], t.[OPCMax], t.[OtherUsed], t.[OtherMax], t.[OTF], t.[Tribal], t.[TJB], t.[JOBS], t.[NO24], t.[FactDetails], t.[CSJExtensionDue], t.[W2TExtensionDue], t.[TempExtensionDue], t.[StateExtensionDue], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_TimeLimitSummary_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54A6B2C1,
		    count(*) as __$count_54A6B2C1 
			from [cdc].[wwp_TimeLimitSummary_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54A6B2C1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitSummary', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimitSummary_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_54A6B2C1
	    when 1 then __$operation
	    else
			case __$min_op_54A6B2C1 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_54A6B2C1
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_54A6B2C1 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [FederalUsed], [FederalMax], [StateUsed], [StateMax], [CSJUsed], [CSJMax], [W2TUsed], [W2TMax], [TMPUsed], [TNPUsed], [TempUsed], [TempMax], [CMCUsed], [CMCMax], [OPCUsed], [OPCMax], [OtherUsed], [OtherMax], [OTF], [Tribal], [TJB], [JOBS], [NO24], [FactDetails], [CSJExtensionDue], [W2TExtensionDue], [TempExtensionDue], [StateExtensionDue], [IsDeleted], [CreatedDate], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_54A6B2C1 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TimeLimitSummary_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_54A6B2C1, __$count_54A6B2C1, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[FederalUsed], t.[FederalMax], t.[StateUsed], t.[StateMax], t.[CSJUsed], t.[CSJMax], t.[W2TUsed], t.[W2TMax], t.[TMPUsed], t.[TNPUsed], t.[TempUsed], t.[TempMax], t.[CMCUsed], t.[CMCMax], t.[OPCUsed], t.[OPCMax], t.[OtherUsed], t.[OtherMax], t.[OTF], t.[Tribal], t.[TJB], t.[JOBS], t.[NO24], t.[FactDetails], t.[CSJExtensionDue], t.[W2TExtensionDue], t.[TempExtensionDue], t.[StateExtensionDue], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TimeLimitSummary_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54A6B2C1,
		    count(*) as __$count_54A6B2C1, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_TimeLimitSummary_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54A6B2C1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitSummary', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimitSummary_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[FederalUsed], t.[FederalMax], t.[StateUsed], t.[StateMax], t.[CSJUsed], t.[CSJMax], t.[W2TUsed], t.[W2TMax], t.[TMPUsed], t.[TNPUsed], t.[TempUsed], t.[TempMax], t.[CMCUsed], t.[CMCMax], t.[OPCUsed], t.[OPCMax], t.[OtherUsed], t.[OtherMax], t.[OTF], t.[Tribal], t.[TJB], t.[JOBS], t.[NO24], t.[FactDetails], t.[CSJExtensionDue], t.[W2TExtensionDue], t.[TempExtensionDue], t.[StateExtensionDue], t.[IsDeleted], t.[CreatedDate], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TimeLimitSummary_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54A6B2C1
			from [cdc].[wwp_TimeLimitSummary_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54A6B2C1 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TimeLimitSummary', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TimeLimitSummary_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_TJTMJRFADetails]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_TJTMJRFADetails]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [RequestForAssistanceId], NULL as [ContractorId], NULL as [ApplicationDate], NULL as [ApplicationDueDate], NULL as [IsUnder18], NULL as [HouseholdSizeId], NULL as [HouseholdIncome], NULL as [LastEmploymentDate], NULL as [HasWorkedLessThan16Hours], NULL as [IsEligibleForUnemployment], NULL as [IsReceivingW2Benefits], NULL as [IsCitizen], NULL as [HasWorked1040Hours], NULL as [IsAppCompleteAndSigned], NULL as [HasEligibilityBeenVerified], NULL as [IsBenefitFromSubsidizedJob], NULL as [BenefitFromSubsidizedJobDetails], NULL as [IsEligible], NULL as [PopulationTypeDetails], NULL as [HasNeverEmployed], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TJTMJRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_5D470A02
	    when 1 then __$operation
	    else
			case __$min_op_5D470A02 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [RequestForAssistanceId], [ContractorId], [ApplicationDate], [ApplicationDueDate], [IsUnder18], [HouseholdSizeId], [HouseholdIncome], [LastEmploymentDate], [HasWorkedLessThan16Hours], [IsEligibleForUnemployment], [IsReceivingW2Benefits], [IsCitizen], [HasWorked1040Hours], [IsAppCompleteAndSigned], [HasEligibilityBeenVerified], [IsBenefitFromSubsidizedJob], [BenefitFromSubsidizedJobDetails], [IsEligible], [PopulationTypeDetails], [HasNeverEmployed], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_5D470A02 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TJTMJRFADetails_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_5D470A02, __$count_5D470A02, t.[Id], t.[RequestForAssistanceId], t.[ContractorId], t.[ApplicationDate], t.[ApplicationDueDate], t.[IsUnder18], t.[HouseholdSizeId], t.[HouseholdIncome], t.[LastEmploymentDate], t.[HasWorkedLessThan16Hours], t.[IsEligibleForUnemployment], t.[IsReceivingW2Benefits], t.[IsCitizen], t.[HasWorked1040Hours], t.[IsAppCompleteAndSigned], t.[HasEligibilityBeenVerified], t.[IsBenefitFromSubsidizedJob], t.[BenefitFromSubsidizedJobDetails], t.[IsEligible], t.[PopulationTypeDetails], t.[HasNeverEmployed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_TJTMJRFADetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_5D470A02,
		    count(*) as __$count_5D470A02 
			from [cdc].[wwp_TJTMJRFADetails_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_5D470A02 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TJTMJRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TJTMJRFADetails_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_5D470A02
	    when 1 then __$operation
	    else
			case __$min_op_5D470A02 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_5D470A02
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_5D470A02 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [RequestForAssistanceId], [ContractorId], [ApplicationDate], [ApplicationDueDate], [IsUnder18], [HouseholdSizeId], [HouseholdIncome], [LastEmploymentDate], [HasWorkedLessThan16Hours], [IsEligibleForUnemployment], [IsReceivingW2Benefits], [IsCitizen], [HasWorked1040Hours], [IsAppCompleteAndSigned], [HasEligibilityBeenVerified], [IsBenefitFromSubsidizedJob], [BenefitFromSubsidizedJobDetails], [IsEligible], [PopulationTypeDetails], [HasNeverEmployed], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_5D470A02 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TJTMJRFADetails_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_5D470A02, __$count_5D470A02, 
		m.__$update_mask , t.[Id], t.[RequestForAssistanceId], t.[ContractorId], t.[ApplicationDate], t.[ApplicationDueDate], t.[IsUnder18], t.[HouseholdSizeId], t.[HouseholdIncome], t.[LastEmploymentDate], t.[HasWorkedLessThan16Hours], t.[IsEligibleForUnemployment], t.[IsReceivingW2Benefits], t.[IsCitizen], t.[HasWorked1040Hours], t.[IsAppCompleteAndSigned], t.[HasEligibilityBeenVerified], t.[IsBenefitFromSubsidizedJob], t.[BenefitFromSubsidizedJobDetails], t.[IsEligible], t.[PopulationTypeDetails], t.[HasNeverEmployed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TJTMJRFADetails_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_5D470A02,
		    count(*) as __$count_5D470A02, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_TJTMJRFADetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_5D470A02 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TJTMJRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TJTMJRFADetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[RequestForAssistanceId], t.[ContractorId], t.[ApplicationDate], t.[ApplicationDueDate], t.[IsUnder18], t.[HouseholdSizeId], t.[HouseholdIncome], t.[LastEmploymentDate], t.[HasWorkedLessThan16Hours], t.[IsEligibleForUnemployment], t.[IsReceivingW2Benefits], t.[IsCitizen], t.[HasWorked1040Hours], t.[IsAppCompleteAndSigned], t.[HasEligibilityBeenVerified], t.[IsBenefitFromSubsidizedJob], t.[BenefitFromSubsidizedJobDetails], t.[IsEligible], t.[PopulationTypeDetails], t.[HasNeverEmployed], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TJTMJRFADetails_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_5D470A02
			from [cdc].[wwp_TJTMJRFADetails_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_5D470A02 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TJTMJRFADetails', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TJTMJRFADetails_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_TransportationAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_TransportationAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [ActionDetails], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_873D7377
	    when 1 then __$operation
	    else
			case __$min_op_873D7377 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_873D7377 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TransportationAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_873D7377, __$count_873D7377, t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_TransportationAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_873D7377,
		    count(*) as __$count_873D7377 
			from [cdc].[wwp_TransportationAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_873D7377 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_873D7377
	    when 1 then __$operation
	    else
			case __$min_op_873D7377 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_873D7377
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_873D7377 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [ActionDetails], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_873D7377 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TransportationAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_873D7377, __$count_873D7377, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TransportationAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_873D7377,
		    count(*) as __$count_873D7377, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_TransportationAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_873D7377 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[ActionDetails], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TransportationAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_873D7377
			from [cdc].[wwp_TransportationAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_873D7377 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_TransportationSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_TransportationSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [TransporationDetails], NULL as [IsVehicleInsuredId], NULL as [VehicleInsuredDetails], NULL as [IsVehicleRegistrationCurrentId], NULL as [VehicleRegistrationCurrentDetails], NULL as [HasValidDrivingLicense], NULL as [DriversLicenseStateId], NULL as [DriversLicenseExpirationDate], NULL as [DriversLicenseDetails], NULL as [DriversLicenseInvalidReasonId], NULL as [DriversLicenseInvalidDetails], NULL as [HadCommercialDriversLicense], NULL as [IsCommercialDriversLicenseActive], NULL as [CommercialDriversLicenseDetails], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_CC96BDC6
	    when 1 then __$operation
	    else
			case __$min_op_CC96BDC6 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [TransporationDetails], [IsVehicleInsuredId], [VehicleInsuredDetails], [IsVehicleRegistrationCurrentId], [VehicleRegistrationCurrentDetails], [HasValidDrivingLicense], [DriversLicenseStateId], [DriversLicenseExpirationDate], [DriversLicenseDetails], [DriversLicenseInvalidReasonId], [DriversLicenseInvalidDetails], [HadCommercialDriversLicense], [IsCommercialDriversLicenseActive], [CommercialDriversLicenseDetails], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_CC96BDC6 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TransportationSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_CC96BDC6, __$count_CC96BDC6, t.[Id], t.[ParticipantId], t.[TransporationDetails], t.[IsVehicleInsuredId], t.[VehicleInsuredDetails], t.[IsVehicleRegistrationCurrentId], t.[VehicleRegistrationCurrentDetails], t.[HasValidDrivingLicense], t.[DriversLicenseStateId], t.[DriversLicenseExpirationDate], t.[DriversLicenseDetails], t.[DriversLicenseInvalidReasonId], t.[DriversLicenseInvalidDetails], t.[HadCommercialDriversLicense], t.[IsCommercialDriversLicenseActive], t.[CommercialDriversLicenseDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_TransportationSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CC96BDC6,
		    count(*) as __$count_CC96BDC6 
			from [cdc].[wwp_TransportationSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CC96BDC6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_CC96BDC6
	    when 1 then __$operation
	    else
			case __$min_op_CC96BDC6 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_CC96BDC6
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_CC96BDC6 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [TransporationDetails], [IsVehicleInsuredId], [VehicleInsuredDetails], [IsVehicleRegistrationCurrentId], [VehicleRegistrationCurrentDetails], [HasValidDrivingLicense], [DriversLicenseStateId], [DriversLicenseExpirationDate], [DriversLicenseDetails], [DriversLicenseInvalidReasonId], [DriversLicenseInvalidDetails], [HadCommercialDriversLicense], [IsCommercialDriversLicenseActive], [CommercialDriversLicenseDetails], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_CC96BDC6 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TransportationSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_CC96BDC6, __$count_CC96BDC6, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[TransporationDetails], t.[IsVehicleInsuredId], t.[VehicleInsuredDetails], t.[IsVehicleRegistrationCurrentId], t.[VehicleRegistrationCurrentDetails], t.[HasValidDrivingLicense], t.[DriversLicenseStateId], t.[DriversLicenseExpirationDate], t.[DriversLicenseDetails], t.[DriversLicenseInvalidReasonId], t.[DriversLicenseInvalidDetails], t.[HadCommercialDriversLicense], t.[IsCommercialDriversLicenseActive], t.[CommercialDriversLicenseDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TransportationSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CC96BDC6,
		    count(*) as __$count_CC96BDC6, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_TransportationSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CC96BDC6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[TransporationDetails], t.[IsVehicleInsuredId], t.[VehicleInsuredDetails], t.[IsVehicleRegistrationCurrentId], t.[VehicleRegistrationCurrentDetails], t.[HasValidDrivingLicense], t.[DriversLicenseStateId], t.[DriversLicenseExpirationDate], t.[DriversLicenseDetails], t.[DriversLicenseInvalidReasonId], t.[DriversLicenseInvalidDetails], t.[HadCommercialDriversLicense], t.[IsCommercialDriversLicenseActive], t.[CommercialDriversLicenseDetails], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TransportationSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CC96BDC6
			from [cdc].[wwp_TransportationSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CC96BDC6 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_TransportationSectionMethodBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_TransportationSectionMethodBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [TransportationSectionId], NULL as [TransporationTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSectionMethodBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_60301304
	    when 1 then __$operation
	    else
			case __$min_op_60301304 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [TransportationSectionId], [TransporationTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_60301304 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TransportationSectionMethodBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_60301304, __$count_60301304, t.[Id], t.[TransportationSectionId], t.[TransporationTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_TransportationSectionMethodBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_60301304,
		    count(*) as __$count_60301304 
			from [cdc].[wwp_TransportationSectionMethodBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_60301304 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSectionMethodBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationSectionMethodBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_60301304
	    when 1 then __$operation
	    else
			case __$min_op_60301304 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_60301304
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_60301304 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [TransportationSectionId], [TransporationTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_60301304 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_TransportationSectionMethodBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_60301304, __$count_60301304, 
		m.__$update_mask , t.[Id], t.[TransportationSectionId], t.[TransporationTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TransportationSectionMethodBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_60301304,
		    count(*) as __$count_60301304, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_TransportationSectionMethodBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_60301304 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSectionMethodBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationSectionMethodBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[TransportationSectionId], t.[TransporationTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_TransportationSectionMethodBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_60301304
			from [cdc].[wwp_TransportationSectionMethodBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_60301304 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_TransportationSectionMethodBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_TransportationSectionMethodBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WageHour]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WageHour]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [CurrentEffectiveDate], NULL as [CurrentPayTypeDetails], NULL as [CurrentAverageWeeklyHours], NULL as [CurrentPayRate], NULL as [CurrentPayRateIntervalId], NULL as [CurrentHourlySubsidyRate], NULL as [PastBeginPayRate], NULL as [PastBeginPayRateIntervalId], NULL as [PastEndPayRateIntervalId], NULL as [PastEndPayRate], NULL as [IsUnchangedPastPayRateIndicator], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [ComputedCurrentWageRateUnit], NULL as [ComputedCurrentWageRateValue], NULL as [ComputedPastEndWageRateUnit], NULL as [ComputedPastEndWageRateValue]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHour', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_0EEBB375
	    when 1 then __$operation
	    else
			case __$min_op_0EEBB375 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [CurrentEffectiveDate], [CurrentPayTypeDetails], [CurrentAverageWeeklyHours], [CurrentPayRate], [CurrentPayRateIntervalId], [CurrentHourlySubsidyRate], [PastBeginPayRate], [PastBeginPayRateIntervalId], [PastEndPayRateIntervalId], [PastEndPayRate], [IsUnchangedPastPayRateIndicator], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [ComputedCurrentWageRateUnit], [ComputedCurrentWageRateValue], [ComputedPastEndWageRateUnit], [ComputedPastEndWageRateValue]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0EEBB375 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHour_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0EEBB375, __$count_0EEBB375, t.[Id], t.[CurrentEffectiveDate], t.[CurrentPayTypeDetails], t.[CurrentAverageWeeklyHours], t.[CurrentPayRate], t.[CurrentPayRateIntervalId], t.[CurrentHourlySubsidyRate], t.[PastBeginPayRate], t.[PastBeginPayRateIntervalId], t.[PastEndPayRateIntervalId], t.[PastEndPayRate], t.[IsUnchangedPastPayRateIndicator], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedCurrentWageRateUnit], t.[ComputedCurrentWageRateValue], t.[ComputedPastEndWageRateUnit], t.[ComputedPastEndWageRateValue] 
		from [cdc].[wwp_WageHour_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0EEBB375,
		    count(*) as __$count_0EEBB375 
			from [cdc].[wwp_WageHour_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0EEBB375 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHour', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHour_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_0EEBB375
	    when 1 then __$operation
	    else
			case __$min_op_0EEBB375 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_0EEBB375
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_0EEBB375 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [CurrentEffectiveDate], [CurrentPayTypeDetails], [CurrentAverageWeeklyHours], [CurrentPayRate], [CurrentPayRateIntervalId], [CurrentHourlySubsidyRate], [PastBeginPayRate], [PastBeginPayRateIntervalId], [PastEndPayRateIntervalId], [PastEndPayRate], [IsUnchangedPastPayRateIndicator], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [ComputedCurrentWageRateUnit], [ComputedCurrentWageRateValue], [ComputedPastEndWageRateUnit], [ComputedPastEndWageRateValue]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_0EEBB375 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHour_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_0EEBB375, __$count_0EEBB375, 
		m.__$update_mask , t.[Id], t.[CurrentEffectiveDate], t.[CurrentPayTypeDetails], t.[CurrentAverageWeeklyHours], t.[CurrentPayRate], t.[CurrentPayRateIntervalId], t.[CurrentHourlySubsidyRate], t.[PastBeginPayRate], t.[PastBeginPayRateIntervalId], t.[PastEndPayRateIntervalId], t.[PastEndPayRate], t.[IsUnchangedPastPayRateIndicator], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedCurrentWageRateUnit], t.[ComputedCurrentWageRateValue], t.[ComputedPastEndWageRateUnit], t.[ComputedPastEndWageRateValue]
		from [cdc].[wwp_WageHour_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0EEBB375,
		    count(*) as __$count_0EEBB375, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WageHour_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0EEBB375 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHour', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHour_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[CurrentEffectiveDate], t.[CurrentPayTypeDetails], t.[CurrentAverageWeeklyHours], t.[CurrentPayRate], t.[CurrentPayRateIntervalId], t.[CurrentHourlySubsidyRate], t.[PastBeginPayRate], t.[PastBeginPayRateIntervalId], t.[PastEndPayRateIntervalId], t.[PastEndPayRate], t.[IsUnchangedPastPayRateIndicator], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedCurrentWageRateUnit], t.[ComputedCurrentWageRateValue], t.[ComputedPastEndWageRateUnit], t.[ComputedPastEndWageRateValue]
		from [cdc].[wwp_WageHour_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_0EEBB375
			from [cdc].[wwp_WageHour_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_0EEBB375 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHour', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHour_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WageHourHistory]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WageHourHistory]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WageHourId], NULL as [HourlySubsidyRate], NULL as [EffectiveDate], NULL as [PayTypeDetails], NULL as [AverageWeeklyHours], NULL as [PayRate], NULL as [PayRateIntervalId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [ComputedWageRateUnit], NULL as [ComputedWageRateValue]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_E4703B88
	    when 1 then __$operation
	    else
			case __$min_op_E4703B88 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WageHourId], [HourlySubsidyRate], [EffectiveDate], [PayTypeDetails], [AverageWeeklyHours], [PayRate], [PayRateIntervalId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [ComputedWageRateUnit], [ComputedWageRateValue]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_E4703B88 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHourHistory_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_E4703B88, __$count_E4703B88, t.[Id], t.[WageHourId], t.[HourlySubsidyRate], t.[EffectiveDate], t.[PayTypeDetails], t.[AverageWeeklyHours], t.[PayRate], t.[PayRateIntervalId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedWageRateUnit], t.[ComputedWageRateValue] 
		from [cdc].[wwp_WageHourHistory_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_E4703B88,
		    count(*) as __$count_E4703B88 
			from [cdc].[wwp_WageHourHistory_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_E4703B88 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourHistory_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_E4703B88
	    when 1 then __$operation
	    else
			case __$min_op_E4703B88 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_E4703B88
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_E4703B88 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WageHourId], [HourlySubsidyRate], [EffectiveDate], [PayTypeDetails], [AverageWeeklyHours], [PayRate], [PayRateIntervalId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [ComputedWageRateUnit], [ComputedWageRateValue]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_E4703B88 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHourHistory_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_E4703B88, __$count_E4703B88, 
		m.__$update_mask , t.[Id], t.[WageHourId], t.[HourlySubsidyRate], t.[EffectiveDate], t.[PayTypeDetails], t.[AverageWeeklyHours], t.[PayRate], t.[PayRateIntervalId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedWageRateUnit], t.[ComputedWageRateValue]
		from [cdc].[wwp_WageHourHistory_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_E4703B88,
		    count(*) as __$count_E4703B88, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WageHourHistory_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_E4703B88 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourHistory_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WageHourId], t.[HourlySubsidyRate], t.[EffectiveDate], t.[PayTypeDetails], t.[AverageWeeklyHours], t.[PayRate], t.[PayRateIntervalId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[ComputedWageRateUnit], t.[ComputedWageRateValue]
		from [cdc].[wwp_WageHourHistory_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_E4703B88
			from [cdc].[wwp_WageHourHistory_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_E4703B88 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistory', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourHistory_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WageHourHistoryWageTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WageHourHistoryWageTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WageHourHistoryId], NULL as [WageTypeId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistoryWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_54F82318
	    when 1 then __$operation
	    else
			case __$min_op_54F82318 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WageHourHistoryId], [WageTypeId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_54F82318 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_54F82318, __$count_54F82318, t.[Id], t.[WageHourHistoryId], t.[WageTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted] 
		from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54F82318,
		    count(*) as __$count_54F82318 
			from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54F82318 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistoryWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_54F82318
	    when 1 then __$operation
	    else
			case __$min_op_54F82318 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_54F82318
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_54F82318 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WageHourHistoryId], [WageTypeId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_54F82318 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_54F82318, __$count_54F82318, 
		m.__$update_mask , t.[Id], t.[WageHourHistoryId], t.[WageTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54F82318,
		    count(*) as __$count_54F82318, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54F82318 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistoryWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WageHourHistoryId], t.[WageTypeId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted]
		from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_54F82318
			from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_54F82318 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourHistoryWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourHistoryWageTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WageHourWageTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WageHourWageTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WageHourId], NULL as [SortOrder], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [IsDeleted], NULL as [WageTypeId]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_98B9FBE2
	    when 1 then __$operation
	    else
			case __$min_op_98B9FBE2 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WageHourId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [WageTypeId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_98B9FBE2 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHourWageTypeBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_98B9FBE2, __$count_98B9FBE2, t.[Id], t.[WageHourId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WageTypeId] 
		from [cdc].[wwp_WageHourWageTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_98B9FBE2,
		    count(*) as __$count_98B9FBE2 
			from [cdc].[wwp_WageHourWageTypeBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_98B9FBE2 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourWageTypeBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_98B9FBE2
	    when 1 then __$operation
	    else
			case __$min_op_98B9FBE2 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_98B9FBE2
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_98B9FBE2 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WageHourId], [SortOrder], [ModifiedBy], [ModifiedDate], [RowVersion], [IsDeleted], [WageTypeId]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_98B9FBE2 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WageHourWageTypeBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_98B9FBE2, __$count_98B9FBE2, 
		m.__$update_mask , t.[Id], t.[WageHourId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WageTypeId]
		from [cdc].[wwp_WageHourWageTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_98B9FBE2,
		    count(*) as __$count_98B9FBE2, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WageHourWageTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_98B9FBE2 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourWageTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WageHourId], t.[SortOrder], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[IsDeleted], t.[WageTypeId]
		from [cdc].[wwp_WageHourWageTypeBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_98B9FBE2
			from [cdc].[wwp_WageHourWageTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_98B9FBE2 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WageHourWageTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WageHourWageTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_Worker]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_Worker]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WAMSId], NULL as [MFUserId], NULL as [FirstName], NULL as [LastName], NULL as [MiddleInitial], NULL as [SuffixName], NULL as [Roles], NULL as [WorkerActiveStatusCode], NULL as [LastLogin], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [OrganizationId], NULL as [WIUID]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_Worker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_97E7686A
	    when 1 then __$operation
	    else
			case __$min_op_97E7686A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WAMSId], [MFUserId], [FirstName], [LastName], [MiddleInitial], [SuffixName], [Roles], [WorkerActiveStatusCode], [LastLogin], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [OrganizationId], [WIUID]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_97E7686A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Worker_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_97E7686A, __$count_97E7686A, t.[Id], t.[WAMSId], t.[MFUserId], t.[FirstName], t.[LastName], t.[MiddleInitial], t.[SuffixName], t.[Roles], t.[WorkerActiveStatusCode], t.[LastLogin], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[OrganizationId], t.[WIUID] 
		from [cdc].[wwp_Worker_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_97E7686A,
		    count(*) as __$count_97E7686A 
			from [cdc].[wwp_Worker_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_97E7686A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Worker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Worker_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_97E7686A
	    when 1 then __$operation
	    else
			case __$min_op_97E7686A 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_97E7686A
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_97E7686A 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WAMSId], [MFUserId], [FirstName], [LastName], [MiddleInitial], [SuffixName], [Roles], [WorkerActiveStatusCode], [LastLogin], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [OrganizationId], [WIUID]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_97E7686A 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_Worker_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_97E7686A, __$count_97E7686A, 
		m.__$update_mask , t.[Id], t.[WAMSId], t.[MFUserId], t.[FirstName], t.[LastName], t.[MiddleInitial], t.[SuffixName], t.[Roles], t.[WorkerActiveStatusCode], t.[LastLogin], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[OrganizationId], t.[WIUID]
		from [cdc].[wwp_Worker_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_97E7686A,
		    count(*) as __$count_97E7686A, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_Worker_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_97E7686A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Worker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Worker_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WAMSId], t.[MFUserId], t.[FirstName], t.[LastName], t.[MiddleInitial], t.[SuffixName], t.[Roles], t.[WorkerActiveStatusCode], t.[LastLogin], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[OrganizationId], t.[WIUID]
		from [cdc].[wwp_Worker_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_97E7686A
			from [cdc].[wwp_Worker_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_97E7686A and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_Worker', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_Worker_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WorkHistoryAssessmentSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WorkHistoryAssessmentSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ReviewCompleted], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistoryAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_CBC4D187
	    when 1 then __$operation
	    else
			case __$min_op_CBC4D187 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_CBC4D187 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkHistoryAssessmentSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_CBC4D187, __$count_CBC4D187, t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_WorkHistoryAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CBC4D187,
		    count(*) as __$count_CBC4D187 
			from [cdc].[wwp_WorkHistoryAssessmentSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CBC4D187 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistoryAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistoryAssessmentSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_CBC4D187
	    when 1 then __$operation
	    else
			case __$min_op_CBC4D187 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_CBC4D187
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_CBC4D187 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ReviewCompleted], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_CBC4D187 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkHistoryAssessmentSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_CBC4D187, __$count_CBC4D187, 
		m.__$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_WorkHistoryAssessmentSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CBC4D187,
		    count(*) as __$count_CBC4D187, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WorkHistoryAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CBC4D187 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistoryAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistoryAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ReviewCompleted], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_WorkHistoryAssessmentSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_CBC4D187
			from [cdc].[wwp_WorkHistoryAssessmentSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_CBC4D187 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistoryAssessmentSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistoryAssessmentSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WorkHistorySection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WorkHistorySection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [EmploymentStatusTypeId], NULL as [HasVolunteered], NULL as [NonFullTimeDetails], NULL as [Notes], NULL as [PreventionFactors], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion], NULL as [HasCareerAssessment], NULL as [HasCareerAssessmentNotes]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_4F119E71
	    when 1 then __$operation
	    else
			case __$min_op_4F119E71 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [EmploymentStatusTypeId], [HasVolunteered], [NonFullTimeDetails], [Notes], [PreventionFactors], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [HasCareerAssessment], [HasCareerAssessmentNotes]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4F119E71 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkHistorySection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4F119E71, __$count_4F119E71, t.[Id], t.[ParticipantId], t.[EmploymentStatusTypeId], t.[HasVolunteered], t.[NonFullTimeDetails], t.[Notes], t.[PreventionFactors], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasCareerAssessment], t.[HasCareerAssessmentNotes] 
		from [cdc].[wwp_WorkHistorySection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4F119E71,
		    count(*) as __$count_4F119E71 
			from [cdc].[wwp_WorkHistorySection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4F119E71 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistorySection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_4F119E71
	    when 1 then __$operation
	    else
			case __$min_op_4F119E71 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_4F119E71
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_4F119E71 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [EmploymentStatusTypeId], [HasVolunteered], [NonFullTimeDetails], [Notes], [PreventionFactors], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion], [HasCareerAssessment], [HasCareerAssessmentNotes]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_4F119E71 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkHistorySection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_4F119E71, __$count_4F119E71, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[EmploymentStatusTypeId], t.[HasVolunteered], t.[NonFullTimeDetails], t.[Notes], t.[PreventionFactors], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasCareerAssessment], t.[HasCareerAssessmentNotes]
		from [cdc].[wwp_WorkHistorySection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4F119E71,
		    count(*) as __$count_4F119E71, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WorkHistorySection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4F119E71 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistorySection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[EmploymentStatusTypeId], t.[HasVolunteered], t.[NonFullTimeDetails], t.[Notes], t.[PreventionFactors], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion], t.[HasCareerAssessment], t.[HasCareerAssessmentNotes]
		from [cdc].[wwp_WorkHistorySection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_4F119E71
			from [cdc].[wwp_WorkHistorySection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_4F119E71 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistorySection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WorkHistorySectionEmploymentPreventionTypeBridge]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WorkHistorySectionEmploymentPreventionTypeBridge]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [WorkHistorySectionId], NULL as [EmploymentPreventionTypeId], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySectionEmploymentPreventionTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_111125AB
	    when 1 then __$operation
	    else
			case __$min_op_111125AB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [WorkHistorySectionId], [EmploymentPreventionTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_111125AB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_111125AB, __$count_111125AB, t.[Id], t.[WorkHistorySectionId], t.[EmploymentPreventionTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_111125AB,
		    count(*) as __$count_111125AB 
			from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_111125AB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySectionEmploymentPreventionTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_111125AB
	    when 1 then __$operation
	    else
			case __$min_op_111125AB 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_111125AB
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_111125AB 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [WorkHistorySectionId], [EmploymentPreventionTypeId], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_111125AB 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_111125AB, __$count_111125AB, 
		m.__$update_mask , t.[Id], t.[WorkHistorySectionId], t.[EmploymentPreventionTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_111125AB,
		    count(*) as __$count_111125AB, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_111125AB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySectionEmploymentPreventionTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[WorkHistorySectionId], t.[EmploymentPreventionTypeId], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_111125AB
			from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_111125AB and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkHistorySectionEmploymentPreventionTypeBridge', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkHistorySectionEmploymentPreventionTypeBridge_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  UserDefinedFunction [cdc].[fn_cdc_get_net_changes_wwp_WorkProgramSection]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	create function [cdc].[fn_cdc_get_net_changes_wwp_WorkProgramSection]
	(	@from_lsn binary(10),
		@to_lsn binary(10),
		@row_filter_option nvarchar(30)
	)
	returns table
	return

	select NULL as __$start_lsn,
		NULL as __$operation,
		NULL as __$update_mask, NULL as [Id], NULL as [ParticipantId], NULL as [IsInOtherPrograms], NULL as [Notes], NULL as [IsDeleted], NULL as [ModifiedBy], NULL as [ModifiedDate], NULL as [RowVersion]
	where ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkProgramSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 0)

	union all
	
	select __$start_lsn,
	    case __$count_BE746156
	    when 1 then __$operation
	    else
			case __$min_op_BE746156 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		null as __$update_mask , [Id], [ParticipantId], [IsInOtherPrograms], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_BE746156 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkProgramSection_CT] c with (nolock)   
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_BE746156, __$count_BE746156, t.[Id], t.[ParticipantId], t.[IsInOtherPrograms], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion] 
		from [cdc].[wwp_WorkProgramSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_BE746156,
		    count(*) as __$count_BE746156 
			from [cdc].[wwp_WorkProgramSection_CT] r with (nolock)   
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_BE746156 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkProgramSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkProgramSection_CT] c with (nolock) 
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
	select __$start_lsn,
	    case __$count_BE746156
	    when 1 then __$operation
	    else
			case __$min_op_BE746156 
				when 2 then 2
				when 4 then
				case __$operation
					when 1 then 1
					else 4
					end
				else
				case __$operation
					when 2 then 4
					when 4 then 4
					else 1
					end
			end
		end as __$operation,
		case __$count_BE746156
		when 1 then
			case __$operation
			when 4 then __$update_mask
			else null
			end
		else	
			case __$min_op_BE746156 
			when 2 then null
			else
				case __$operation
				when 1 then null
				else __$update_mask 
				end
			end	
		end as __$update_mask , [Id], [ParticipantId], [IsInOtherPrograms], [Notes], [IsDeleted], [ModifiedBy], [ModifiedDate], [RowVersion]
	from
	(
		select t.__$start_lsn as __$start_lsn, __$operation,
		case __$count_BE746156 
		when 1 then __$operation 
		else
		(	select top 1 c.__$operation
			from [cdc].[wwp_WorkProgramSection_CT] c with (nolock)
			where  ( (c.[Id] = t.[Id]) )  
			and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
			and (c.__$start_lsn <= @to_lsn)
			and (c.__$start_lsn >= @from_lsn)
			order by c.__$seqval) end __$min_op_BE746156, __$count_BE746156, 
		m.__$update_mask , t.[Id], t.[ParticipantId], t.[IsInOtherPrograms], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_WorkProgramSection_CT] t with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_BE746156,
		    count(*) as __$count_BE746156, 
		    [sys].[ORMask](r.__$update_mask) as __$update_mask
			from [cdc].[wwp_WorkProgramSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_BE746156 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with mask'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkProgramSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and
				  (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkProgramSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 			   )
	 			 )
	 			) 	
	) Q
	
	union all
	
		select t.__$start_lsn as __$start_lsn,
		case t.__$operation
			when 1 then 1
			else 5
		end as __$operation,
		null as __$update_mask , t.[Id], t.[ParticipantId], t.[IsInOtherPrograms], t.[Notes], t.[IsDeleted], t.[ModifiedBy], t.[ModifiedDate], t.[RowVersion]
		from [cdc].[wwp_WorkProgramSection_CT] t  with (nolock) inner join 
		(	select  r.[Id], max(r.__$seqval) as __$max_seqval_BE746156
			from [cdc].[wwp_WorkProgramSection_CT] r with (nolock)
			where  (r.__$start_lsn <= @to_lsn)
			and (r.__$start_lsn >= @from_lsn)
			group by   r.[Id]) m
		on t.__$seqval = m.__$max_seqval_BE746156 and
		    ( (t.[Id] = m.[Id]) ) 	
		where lower(rtrim(ltrim(@row_filter_option))) = N'all with merge'
			and ( [sys].[fn_cdc_check_parameters]( N'wwp_WorkProgramSection', @from_lsn, @to_lsn, lower(rtrim(ltrim(@row_filter_option))), 1) = 1)
			and (t.__$start_lsn <= @to_lsn)
			and (t.__$start_lsn >= @from_lsn)
			and ((t.__$operation = 2) or (t.__$operation = 4) or 
				 ((t.__$operation = 1) and 
				   (2 not in 
				 		(	select top 1 c.__$operation
							from [cdc].[wwp_WorkProgramSection_CT] c with (nolock)
							where  ( (c.[Id] = t.[Id]) )  
							and ((c.__$operation = 2) or (c.__$operation = 4) or (c.__$operation = 1))
							and (c.__$start_lsn <= @to_lsn)
							and (c.__$start_lsn >= @from_lsn)
							order by c.__$seqval
						 ) 
	 				)
	 			 )
	 			)
	 
GO
/****** Object:  View [sec].[AuthRole]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [sec].[AuthRole]
AS
SELECT ath.Name AS [Authorization],
       STUFF(
       (
           SELECT ',' + r.Code
           FROM sec.RoleAuthorization ra
               INNER JOIN sec.[Authorization] a
                   ON a.Id = ra.AuthorizationId
               INNER JOIN sec.[Role] r
                   ON r.Id = ra.RoleId
           WHERE a.Name = ath.Name
           ORDER BY r.Code
           FOR XML PATH('')
       ),
       1,
       1,
       ''
            ) AS [UsedInRoles]
FROM sec.[Authorization] ath

GO
/****** Object:  View [sec].[RoleAuth]    Script Date: 2/7/2020 4:02:34 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [sec].[RoleAuth]
AS
SELECT rl.Id AS RoleId,
       rl.Code,
	   rl.Name,
       STUFF(
       (
           SELECT ', ' + a.Name
           FROM sec.RoleAuthorization ra
               INNER JOIN sec.[Authorization] a
                   ON a.Id = ra.AuthorizationId
               INNER JOIN sec.[Role] r
                   ON r.Id = ra.RoleId
           WHERE ra.RoleId = rl.Id
           ORDER BY a.Name
           FOR XML PATH('')
       ),
       1,
       1,
       ''
            ) AS [Authorizations],
			rl.IsDeleted
FROM sec.Role rl
    
-- WITH CHECK OPTION


GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [cdc_states_name]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [cdc_states_name] ON [dbo].[cdc_states]
(
	[name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_01]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_01] ON [tbd].[Stage_Agency_01]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_02]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_02] ON [tbd].[Stage_Agency_02]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_03]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_03] ON [tbd].[Stage_Agency_03]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_04]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_04] ON [tbd].[Stage_Agency_04]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_05]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_05] ON [tbd].[Stage_Agency_05]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_06]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_06] ON [tbd].[Stage_Agency_06]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_07]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_07] ON [tbd].[Stage_Agency_07]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_08]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_08] ON [tbd].[Stage_Agency_08]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_09]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_09] ON [tbd].[Stage_Agency_09]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Stage_Agency_10]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Stage_Agency_10] ON [tbd].[Stage_Agency_10]
(
	[WAMSId] ASC,
	[WPreferralDate] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_EmploymentInformation]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_EmploymentInformation] ON [wwp].[EmploymentInformation]
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_Unique_Queue_Partitions]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Unique_Queue_Partitions] ON [wwp].[JobQueue]
(
	[Name] ASC,
	[Partition] ASC,
	[QueueType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LogEvent_Level]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_LogEvent_Level] ON [wwp].[LogEvent]
(
	[Level] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LogEvent_Timestamp]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_LogEvent_Timestamp] ON [wwp].[LogEvent]
(
	[TimeStamp] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_Participant]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_Participant] ON [wwp].[Participant]
(
	[PinNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_Participant_MCIID]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE NONCLUSTERED INDEX [IX_Participant_MCIID] ON [wwp].[Participant]
(
	[MCI_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [Ix_CategorySubcategoryCode]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [Ix_CategorySubcategoryCode] ON [wwp].[RuleReason]
(
	[Category] ASC,
	[SubCategory] ASC,
	[Code] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_T0164_WP_IN_WKR_HI]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_T0164_WP_IN_WKR_HI] ON [wwp].[T0164_WP_IN_WKR_HI]
(
	[PIN_NUM] ASC,
	[EMPLOYER_SEQ_NUM] DESC,
	[HISTORY_SEQ_NUM] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [X0459UC1]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [X0459UC1] ON [wwp].[T0459_IN_W2_LIMITS]
(
	[PIN_NUM] ASC,
	[BENEFIT_MM] ASC,
	[HISTORY_SEQ_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [X0460UC1]    Script Date: 2/7/2020 4:02:34 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [X0460UC1] ON [wwp].[T0460_IN_W2_EXT]
(
	[PIN_NUM] ASC,
	[CLOCK_TYPE_CD] ASC,
	[EXT_SEQ_NUM] ASC,
	[HISTORY_SEQ_NUM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [tbd].[ExamVersionType] ADD  CONSTRAINT [DF_ExamVersionType_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [tbd].[ExamVersionType] ADD  CONSTRAINT [DF_ExamVersionType_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [tbd].[PEP] ADD  CONSTRAINT [DF_PEP_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [tbd].[PEP] ADD  CONSTRAINT [DF_PEP_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [tbd].[PEP] ADD  CONSTRAINT [DF_PEP_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [tbd].[Stage_Agency_03] ADD  CONSTRAINT [DF_Stage_Agency_03_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [tbd].[Stage_Agency_03] ADD  CONSTRAINT [DF_Stage_Agency_03_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [tbd].[Stage_Agency_03] ADD  CONSTRAINT [DF_Stage_Agency_03_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [tbd].[Stage_Agency_04] ADD  CONSTRAINT [DF_Stage_Agency_04_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [tbd].[Stage_Agency_04] ADD  CONSTRAINT [DF_Stage_Agency_04_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [tbd].[Stage_Agency_04] ADD  CONSTRAINT [DF_Stage_Agency_04_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [tbd].[Stage_Agency_10] ADD  CONSTRAINT [DF_Stage_Agency_10_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE [tbd].[Stage_Agency_10] ADD  CONSTRAINT [DF_Stage_Agency_10_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [tbd].[Stage_Agency_10] ADD  CONSTRAINT [DF_Stage_Agency_10_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [wwp].[AuxiliaryPayment] ADD  CONSTRAINT [DF_AuxillaryPayment_CreatedDateFromCARES]  DEFAULT (getdate()) FOR [CreatedDateFromCARES]
GO
ALTER TABLE [wwp].[AuxiliaryPayment] ADD  CONSTRAINT [DF_AuxillaryPayment_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge] ADD  CONSTRAINT [DF_ParticipantChildrenRelationshipBridge_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge] ADD  CONSTRAINT [DF_ParticipantChildrenRelationshipBridge_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge] ADD  CONSTRAINT [DF_ParticipantChildrenRelationshipBridge_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [wwp].[ParticipationMakeUpEntry] ADD  CONSTRAINT [DF_ParticipationMakeUpEntry_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE [wwp].[ParticipationMakeUpEntry] ADD  CONSTRAINT [DF_ParticipationMakeUpEntry_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [wwp].[ParticipationMakeUpEntry] ADD  CONSTRAINT [DF_ParticipationMakeUpEntry_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [wwp].[PhysicalHealthBarrierBridge] ADD  CONSTRAINT [DF_PhysicalHealthBarrierBridge_ModifiedBy]  DEFAULT (suser_sname()) FOR [ModifiedBy]
GO
ALTER TABLE [wwp].[PhysicalHealthBarrierBridge] ADD  CONSTRAINT [DF_PhysicalHealthBarrierBridge_ModifiedDate]  DEFAULT (getdate()) FOR [ModifiedDate]
GO
ALTER TABLE [sec].[Role]  WITH CHECK ADD  CONSTRAINT [FK_Role_InheritedRole] FOREIGN KEY([InheritedRoleId])
REFERENCES [sec].[Role] ([Id])
GO
ALTER TABLE [sec].[Role] CHECK CONSTRAINT [FK_Role_InheritedRole]
GO
ALTER TABLE [sec].[RoleAuthorization]  WITH CHECK ADD  CONSTRAINT [FK_RoleAuthorization_Authorization] FOREIGN KEY([AuthorizationId])
REFERENCES [sec].[Authorization] ([Id])
GO
ALTER TABLE [sec].[RoleAuthorization] CHECK CONSTRAINT [FK_RoleAuthorization_Authorization]
GO
ALTER TABLE [sec].[RoleAuthorization]  WITH CHECK ADD  CONSTRAINT [FK_RoleAuthorization_Role] FOREIGN KEY([RoleId])
REFERENCES [sec].[Role] ([Id])
GO
ALTER TABLE [sec].[RoleAuthorization] CHECK CONSTRAINT [FK_RoleAuthorization_Role]
GO
ALTER TABLE [tbd].[CaseIndividual]  WITH NOCHECK ADD  CONSTRAINT [FK_CaseIndividual_Case] FOREIGN KEY([CaseId])
REFERENCES [tbd].[Case] ([Id])
GO
ALTER TABLE [tbd].[CaseIndividual] CHECK CONSTRAINT [FK_CaseIndividual_Case]
GO
ALTER TABLE [tbd].[CaseIndividual]  WITH NOCHECK ADD  CONSTRAINT [FK_CaseIndividual_Individual] FOREIGN KEY([IndividualId])
REFERENCES [tbd].[Individual] ([Id])
GO
ALTER TABLE [tbd].[CaseIndividual] CHECK CONSTRAINT [FK_CaseIndividual_Individual]
GO
ALTER TABLE [tbd].[Contractor]  WITH CHECK ADD  CONSTRAINT [FK_Contractor_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [tbd].[Contractor] CHECK CONSTRAINT [FK_Contractor_EnrolledProgram]
GO
ALTER TABLE [tbd].[Contractor]  WITH CHECK ADD  CONSTRAINT [FK_Contractor_Organization] FOREIGN KEY([AgencyId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [tbd].[Contractor] CHECK CONSTRAINT [FK_Contractor_Organization]
GO
ALTER TABLE [tbd].[EligibilityOffice]  WITH CHECK ADD  CONSTRAINT [FK_EligibilityOffice_Office] FOREIGN KEY([OfficeId])
REFERENCES [tbd].[Office] ([Id])
GO
ALTER TABLE [tbd].[EligibilityOffice] CHECK CONSTRAINT [FK_EligibilityOffice_Office]
GO
ALTER TABLE [tbd].[EligibilityRule]  WITH CHECK ADD  CONSTRAINT [FK_EligibilityRule_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [tbd].[EligibilityRule] CHECK CONSTRAINT [FK_EligibilityRule_EnrolledProgram]
GO
ALTER TABLE [tbd].[FamilyNeed]  WITH CHECK ADD  CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasChildrenBehaviorProblemDetailId] FOREIGN KEY([HasChildrenBehaviorProblemDetailId])
REFERENCES [tbd].[FamilyNeedDetail] ([Id])
GO
ALTER TABLE [tbd].[FamilyNeed] CHECK CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasChildrenBehaviorProblemDetailId]
GO
ALTER TABLE [tbd].[FamilyNeed]  WITH CHECK ADD  CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasChildrenSchoolExpulsionRiskDetailId] FOREIGN KEY([HasChildrenSchoolExpulsionRiskDetailId])
REFERENCES [tbd].[FamilyNeedDetail] ([Id])
GO
ALTER TABLE [tbd].[FamilyNeed] CHECK CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasChildrenSchoolExpulsionRiskDetailId]
GO
ALTER TABLE [tbd].[FamilyNeed]  WITH CHECK ADD  CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasFamilyIssuesInhibitWorkDetailId] FOREIGN KEY([HasFamilyIssuesInhibitWorkDetailId])
REFERENCES [tbd].[FamilyNeedDetail] ([Id])
GO
ALTER TABLE [tbd].[FamilyNeed] CHECK CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasFamilyIssuesInhibitWorkDetailId]
GO
ALTER TABLE [tbd].[FamilyNeed]  WITH CHECK ADD  CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasHealthConcernsDetailId] FOREIGN KEY([HasHealthConcernsDetailId])
REFERENCES [tbd].[FamilyNeedDetail] ([Id])
GO
ALTER TABLE [tbd].[FamilyNeed] CHECK CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasHealthConcernsDetailId]
GO
ALTER TABLE [tbd].[FamilyNeed]  WITH CHECK ADD  CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasHealthProblemDetailId] FOREIGN KEY([HasHealthProblemDetailId])
REFERENCES [tbd].[FamilyNeedDetail] ([Id])
GO
ALTER TABLE [tbd].[FamilyNeed] CHECK CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasHealthProblemDetailId]
GO
ALTER TABLE [tbd].[FamilyNeed]  WITH CHECK ADD  CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasRiskBehaviorDetailId] FOREIGN KEY([HasRiskBehaviorDetailId])
REFERENCES [tbd].[FamilyNeedDetail] ([Id])
GO
ALTER TABLE [tbd].[FamilyNeed] CHECK CONSTRAINT [FK_FamilyNeed_FamilyNeedDetail_HasRiskBehaviorDetailId]
GO
ALTER TABLE [tbd].[IndividualComments]  WITH NOCHECK ADD  CONSTRAINT [FK_IndividualComments_Comment] FOREIGN KEY([CommentTypeId])
REFERENCES [wwp].[CommentType] ([Id])
GO
ALTER TABLE [tbd].[IndividualComments] CHECK CONSTRAINT [FK_IndividualComments_Comment]
GO
ALTER TABLE [tbd].[IndividualComments]  WITH NOCHECK ADD  CONSTRAINT [FK_IndividualComments_Individual] FOREIGN KEY([IndividualId])
REFERENCES [tbd].[Individual] ([Id])
GO
ALTER TABLE [tbd].[IndividualComments] CHECK CONSTRAINT [FK_IndividualComments_Individual]
GO
ALTER TABLE [tbd].[Office]  WITH CHECK ADD  CONSTRAINT [FK_Office_Agency] FOREIGN KEY([AgencyId])
REFERENCES [tbd].[Agency] ([Id])
GO
ALTER TABLE [tbd].[Office] CHECK CONSTRAINT [FK_Office_Agency]
GO
ALTER TABLE [tbd].[Office]  WITH CHECK ADD  CONSTRAINT [FK_Office_CountyAndTribe] FOREIGN KEY([CountyandTribeId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
GO
ALTER TABLE [tbd].[Office] CHECK CONSTRAINT [FK_Office_CountyAndTribe]
GO
ALTER TABLE [tbd].[OfficeLocation]  WITH CHECK ADD  CONSTRAINT [FK_OfficeLocation_Office] FOREIGN KEY([OfficeId])
REFERENCES [tbd].[Office] ([Id])
GO
ALTER TABLE [tbd].[OfficeLocation] CHECK CONSTRAINT [FK_OfficeLocation_Office]
GO
ALTER TABLE [tbd].[WorkerPreference]  WITH NOCHECK ADD  CONSTRAINT [FK_WorkerPreference_WorkProgramLogin] FOREIGN KEY([WorkerId])
REFERENCES [tbd].[WorkProgramLogin] ([Id])
GO
ALTER TABLE [tbd].[WorkerPreference] CHECK CONSTRAINT [FK_WorkerPreference_WorkProgramLogin]
GO
ALTER TABLE [tbd].[WPOrganization]  WITH CHECK ADD  CONSTRAINT [FK_WPOrganization_Agency] FOREIGN KEY([AgencyId])
REFERENCES [tbd].[Agency] ([Id])
GO
ALTER TABLE [tbd].[WPOrganization] CHECK CONSTRAINT [FK_WPOrganization_Agency]
GO
ALTER TABLE [tbd].[WPOrganization]  WITH CHECK ADD  CONSTRAINT [FK_WPOrganization_CountyAndTribe] FOREIGN KEY([CountyAndTribeId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
GO
ALTER TABLE [tbd].[WPOrganization] CHECK CONSTRAINT [FK_WPOrganization_CountyAndTribe]
GO
ALTER TABLE [tbd].[WPOrganization]  WITH CHECK ADD  CONSTRAINT [FK_WPOrganization_Office] FOREIGN KEY([officeId])
REFERENCES [tbd].[Office] ([Id])
GO
ALTER TABLE [tbd].[WPOrganization] CHECK CONSTRAINT [FK_WPOrganization_Office]
GO
ALTER TABLE [wwp].[Absence]  WITH CHECK ADD  CONSTRAINT [FK_Absence_AbsenceReason] FOREIGN KEY([AbsenceReasonId])
REFERENCES [wwp].[AbsenceReason] ([Id])
GO
ALTER TABLE [wwp].[Absence] CHECK CONSTRAINT [FK_Absence_AbsenceReason]
GO
ALTER TABLE [wwp].[Absence]  WITH CHECK ADD  CONSTRAINT [FK_Absence_EmploymentInformation] FOREIGN KEY([EmploymentInformationId])
REFERENCES [wwp].[EmploymentInformation] ([Id])
GO
ALTER TABLE [wwp].[Absence] CHECK CONSTRAINT [FK_Absence_EmploymentInformation]
GO
ALTER TABLE [wwp].[ActionNeeded]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeeded_ActionNeededPage] FOREIGN KEY([ActionNeededPageId])
REFERENCES [wwp].[ActionNeededPage] ([Id])
GO
ALTER TABLE [wwp].[ActionNeeded] CHECK CONSTRAINT [FK_ActionNeeded_ActionNeededPage]
GO
ALTER TABLE [wwp].[ActionNeeded]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeeded_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ActionNeeded] CHECK CONSTRAINT [FK_ActionNeeded_Participant]
GO
ALTER TABLE [wwp].[ActionNeededPageActionItemBridge]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeededPageActionItemBridge_ActionItem] FOREIGN KEY([ActionItemId])
REFERENCES [wwp].[ActionItem] ([Id])
GO
ALTER TABLE [wwp].[ActionNeededPageActionItemBridge] CHECK CONSTRAINT [FK_ActionNeededPageActionItemBridge_ActionItem]
GO
ALTER TABLE [wwp].[ActionNeededPageActionItemBridge]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeededPageActionItemBridge_ActionNeededPage] FOREIGN KEY([ActionNeededPageId])
REFERENCES [wwp].[ActionNeededPage] ([Id])
GO
ALTER TABLE [wwp].[ActionNeededPageActionItemBridge] CHECK CONSTRAINT [FK_ActionNeededPageActionItemBridge_ActionNeededPage]
GO
ALTER TABLE [wwp].[ActionNeededTask]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeededTask_ActionAssignee] FOREIGN KEY([ActionAssigneeId])
REFERENCES [wwp].[ActionAssignee] ([Id])
GO
ALTER TABLE [wwp].[ActionNeededTask] CHECK CONSTRAINT [FK_ActionNeededTask_ActionAssignee]
GO
ALTER TABLE [wwp].[ActionNeededTask]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeededTask_ActionItem] FOREIGN KEY([ActionItemId])
REFERENCES [wwp].[ActionItem] ([Id])
GO
ALTER TABLE [wwp].[ActionNeededTask] CHECK CONSTRAINT [FK_ActionNeededTask_ActionItem]
GO
ALTER TABLE [wwp].[ActionNeededTask]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeededTask_ActionNeeded] FOREIGN KEY([ActionNeededId])
REFERENCES [wwp].[ActionNeeded] ([Id])
GO
ALTER TABLE [wwp].[ActionNeededTask] CHECK CONSTRAINT [FK_ActionNeededTask_ActionNeeded]
GO
ALTER TABLE [wwp].[ActionNeededTask]  WITH CHECK ADD  CONSTRAINT [FK_ActionNeededTask_ActionPriority] FOREIGN KEY([ActionPriorityId])
REFERENCES [wwp].[ActionPriority] ([Id])
GO
ALTER TABLE [wwp].[ActionNeededTask] CHECK CONSTRAINT [FK_ActionNeededTask_ActionPriority]
GO
ALTER TABLE [wwp].[Activity]  WITH CHECK ADD  CONSTRAINT [FK_Activity_ActivityCompletionReason] FOREIGN KEY([ActivityCompletionReasonId])
REFERENCES [wwp].[ActivityCompletionReason] ([Id])
GO
ALTER TABLE [wwp].[Activity] CHECK CONSTRAINT [FK_Activity_ActivityCompletionReason]
GO
ALTER TABLE [wwp].[Activity]  WITH CHECK ADD  CONSTRAINT [FK_Activity_ActivityLocation] FOREIGN KEY([ActivityLocationId])
REFERENCES [wwp].[ActivityLocation] ([Id])
GO
ALTER TABLE [wwp].[Activity] CHECK CONSTRAINT [FK_Activity_ActivityLocation]
GO
ALTER TABLE [wwp].[Activity]  WITH CHECK ADD  CONSTRAINT [FK_Activity_ActivityType] FOREIGN KEY([ActivityTypeId])
REFERENCES [wwp].[ActivityType] ([Id])
GO
ALTER TABLE [wwp].[Activity] CHECK CONSTRAINT [FK_Activity_ActivityType]
GO
ALTER TABLE [wwp].[ActivityContactBridge]  WITH CHECK ADD  CONSTRAINT [FK_ActivityContactBridge_Activity] FOREIGN KEY([ActivityId])
REFERENCES [wwp].[Activity] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[ActivityContactBridge] CHECK CONSTRAINT [FK_ActivityContactBridge_Activity]
GO
ALTER TABLE [wwp].[ActivityContactBridge]  WITH CHECK ADD  CONSTRAINT [FK_ActivityContactBridge_Contact] FOREIGN KEY([ContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[ActivityContactBridge] CHECK CONSTRAINT [FK_ActivityContactBridge_Contact]
GO
ALTER TABLE [wwp].[ActivitySchedule]  WITH CHECK ADD  CONSTRAINT [FK_ActivitySchedule_Activity] FOREIGN KEY([ActivityId])
REFERENCES [wwp].[Activity] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[ActivitySchedule] CHECK CONSTRAINT [FK_ActivitySchedule_Activity]
GO
ALTER TABLE [wwp].[ActivitySchedule]  WITH CHECK ADD  CONSTRAINT [FK_ActivitySchedule_EmployabilityPlan] FOREIGN KEY([EmployabilityPlanId])
REFERENCES [wwp].[EmployabilityPlan] ([Id])
GO
ALTER TABLE [wwp].[ActivitySchedule] CHECK CONSTRAINT [FK_ActivitySchedule_EmployabilityPlan]
GO
ALTER TABLE [wwp].[ActivitySchedule]  WITH CHECK ADD  CONSTRAINT [FK_ActivitySchedule_Frequency] FOREIGN KEY([FrequencyTypeId])
REFERENCES [wwp].[FrequencyType] ([Id])
GO
ALTER TABLE [wwp].[ActivitySchedule] CHECK CONSTRAINT [FK_ActivitySchedule_Frequency]
GO
ALTER TABLE [wwp].[ActivityScheduleFrequencyBridge]  WITH CHECK ADD  CONSTRAINT [FK_ActivityScheduleFrequencyBridge_FrequencyType] FOREIGN KEY([ActivityScheduleId])
REFERENCES [wwp].[ActivitySchedule] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[ActivityScheduleFrequencyBridge] CHECK CONSTRAINT [FK_ActivityScheduleFrequencyBridge_FrequencyType]
GO
ALTER TABLE [wwp].[ActivityScheduleFrequencyBridge]  WITH CHECK ADD  CONSTRAINT [FK_ActivityScheduleFrequencyBridge_MRFrequency] FOREIGN KEY([MRFrequencyId])
REFERENCES [wwp].[Frequency] ([Id])
GO
ALTER TABLE [wwp].[ActivityScheduleFrequencyBridge] CHECK CONSTRAINT [FK_ActivityScheduleFrequencyBridge_MRFrequency]
GO
ALTER TABLE [wwp].[ActivityScheduleFrequencyBridge]  WITH CHECK ADD  CONSTRAINT [FK_ActivityScheduleFrequencyBridge_WKFrequency] FOREIGN KEY([WKFrequencyId])
REFERENCES [wwp].[Frequency] ([Id])
GO
ALTER TABLE [wwp].[ActivityScheduleFrequencyBridge] CHECK CONSTRAINT [FK_ActivityScheduleFrequencyBridge_WKFrequency]
GO
ALTER TABLE [wwp].[AKA]  WITH CHECK ADD  CONSTRAINT [FK_AKA_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[AKA] CHECK CONSTRAINT [FK_AKA_Participant]
GO
ALTER TABLE [wwp].[AKA]  WITH CHECK ADD  CONSTRAINT [FK_AKA_SSNType] FOREIGN KEY([SSNTypeId])
REFERENCES [wwp].[SSNType] ([Id])
GO
ALTER TABLE [wwp].[AKA] CHECK CONSTRAINT [FK_AKA_SSNType]
GO
ALTER TABLE [wwp].[AlternateMailingAddress]  WITH CHECK ADD  CONSTRAINT [FK_AlternateMailingAddress_AddressVerificationTypeLookup] FOREIGN KEY([AddressVerificationTypeLookupId])
REFERENCES [wwp].[AddressVerificationTypeLookup] ([Id])
GO
ALTER TABLE [wwp].[AlternateMailingAddress] CHECK CONSTRAINT [FK_AlternateMailingAddress_AddressVerificationTypeLookup]
GO
ALTER TABLE [wwp].[AlternateMailingAddress]  WITH CHECK ADD  CONSTRAINT [FK_AlternateMailingAddress_City] FOREIGN KEY([CityAddressId])
REFERENCES [wwp].[City] ([Id])
GO
ALTER TABLE [wwp].[AlternateMailingAddress] CHECK CONSTRAINT [FK_AlternateMailingAddress_City]
GO
ALTER TABLE [wwp].[AlternateMailingAddress]  WITH CHECK ADD  CONSTRAINT [FK_AlternateMailingAddress_State] FOREIGN KEY([StateId])
REFERENCES [wwp].[State] ([Id])
GO
ALTER TABLE [wwp].[AlternateMailingAddress] CHECK CONSTRAINT [FK_AlternateMailingAddress_State]
GO
ALTER TABLE [wwp].[ApprovalReasonsMap]  WITH CHECK ADD  CONSTRAINT [FK_ApprovalReasonsMap_ApprovalReason] FOREIGN KEY([ApprovalReasonId])
REFERENCES [wwp].[ApprovalReason] ([Id])
GO
ALTER TABLE [wwp].[ApprovalReasonsMap] CHECK CONSTRAINT [FK_ApprovalReasonsMap_ApprovalReason]
GO
ALTER TABLE [wwp].[ApprovalReasonsMap]  WITH CHECK ADD  CONSTRAINT [FK_ApprovalReasonsMap_TimeLimitType] FOREIGN KEY([TimelimitTypeId])
REFERENCES [wwp].[TimeLimitType] ([Id])
GO
ALTER TABLE [wwp].[ApprovalReasonsMap] CHECK CONSTRAINT [FK_ApprovalReasonsMap_TimeLimitType]
GO
ALTER TABLE [wwp].[AssociatedOrganization]  WITH CHECK ADD  CONSTRAINT [FK_AssociatedOrganization_ContractArea] FOREIGN KEY([ContractAreaId])
REFERENCES [wwp].[ContractArea] ([Id])
GO
ALTER TABLE [wwp].[AssociatedOrganization] CHECK CONSTRAINT [FK_AssociatedOrganization_ContractArea]
GO
ALTER TABLE [wwp].[AssociatedOrganization]  WITH CHECK ADD  CONSTRAINT [FK_AssociatedOrganization_Organization] FOREIGN KEY([OrganizationId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [wwp].[AssociatedOrganization] CHECK CONSTRAINT [FK_AssociatedOrganization_Organization]
GO
ALTER TABLE [wwp].[BarrierAccommodation]  WITH CHECK ADD  CONSTRAINT [FK_BarrierAccommodation_Accommodation1] FOREIGN KEY([AccommodationId])
REFERENCES [wwp].[Accommodation] ([Id])
GO
ALTER TABLE [wwp].[BarrierAccommodation] CHECK CONSTRAINT [FK_BarrierAccommodation_Accommodation1]
GO
ALTER TABLE [wwp].[BarrierAccommodation]  WITH CHECK ADD  CONSTRAINT [FK_BarrierAccommodation_BarrierDetails] FOREIGN KEY([BarrierDetailsId])
REFERENCES [wwp].[BarrierDetail] ([Id])
GO
ALTER TABLE [wwp].[BarrierAccommodation] CHECK CONSTRAINT [FK_BarrierAccommodation_BarrierDetails]
GO
ALTER TABLE [wwp].[BarrierAccommodation]  WITH CHECK ADD  CONSTRAINT [FK_BarrierAccommodation_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[BarrierAccommodation] CHECK CONSTRAINT [FK_BarrierAccommodation_DeleteReason]
GO
ALTER TABLE [wwp].[BarrierDetail]  WITH CHECK ADD  CONSTRAINT [FK_BarrierDetails_BarrierSection] FOREIGN KEY([BarrierSectionId])
REFERENCES [wwp].[BarrierSection] ([Id])
GO
ALTER TABLE [wwp].[BarrierDetail] CHECK CONSTRAINT [FK_BarrierDetails_BarrierSection]
GO
ALTER TABLE [wwp].[BarrierDetail]  WITH CHECK ADD  CONSTRAINT [FK_BarrierDetails_BarrierType] FOREIGN KEY([BarrierTypeId])
REFERENCES [wwp].[BarrierType] ([Id])
GO
ALTER TABLE [wwp].[BarrierDetail] CHECK CONSTRAINT [FK_BarrierDetails_BarrierType]
GO
ALTER TABLE [wwp].[BarrierDetail]  WITH CHECK ADD  CONSTRAINT [FK_BarrierDetails_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[BarrierDetail] CHECK CONSTRAINT [FK_BarrierDetails_Participant]
GO
ALTER TABLE [wwp].[BarrierDetailContactBridge]  WITH CHECK ADD  CONSTRAINT [FK_BarrierDetailContactBridge_BarrierDetail] FOREIGN KEY([BarrierDetailId])
REFERENCES [wwp].[BarrierDetail] ([Id])
GO
ALTER TABLE [wwp].[BarrierDetailContactBridge] CHECK CONSTRAINT [FK_BarrierDetailContactBridge_BarrierDetail]
GO
ALTER TABLE [wwp].[BarrierDetailContactBridge]  WITH CHECK ADD  CONSTRAINT [FK_BarrierDetailContactBridge_Contact] FOREIGN KEY([ContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[BarrierDetailContactBridge] CHECK CONSTRAINT [FK_BarrierDetailContactBridge_Contact]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsAODAHardToManage] FOREIGN KEY([IsAODAHardToManageId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsAODAHardToManage]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsAODAHardToParticipate] FOREIGN KEY([IsAODAHardToParticipateId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsAODAHardToParticipate]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsAODATakeTreatment] FOREIGN KEY([IsAODATakeTreatmentId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsAODATakeTreatment]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceCallingHarassingStalkingAtWork] FOREIGN KEY([IsDomesticViolenceCallingHarassingStalkingAtWorkId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceCallingHarassingStalkingAtWork]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceEmotionallyOrVerballyAbusing] FOREIGN KEY([IsDomesticViolenceEmotionallyOrVerballyAbusingId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceEmotionallyOrVerballyAbusing]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceEverHarmedPhysicallyOrSexually] FOREIGN KEY([IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceEverHarmedPhysicallyOrSexually]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceHurtingYouOrOthers] FOREIGN KEY([IsDomesticViolenceHurtingYouOrOthersId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceHurtingYouOrOthers]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceInvolvedInCourts] FOREIGN KEY([IsDomesticViolenceInvolvedInCourtsId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceInvolvedInCourts]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceMakingItDifficultToWork] FOREIGN KEY([IsDomesticViolenceMakingItDifficultToWorkId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceMakingItDifficultToWork]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceOverwhelmedByRapeOrSexualAssault] FOREIGN KEY([IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceOverwhelmedByRapeOrSexualAssault]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolencePartnerControlledMoney] FOREIGN KEY([IsDomesticViolencePartnerControlledMoneyId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolencePartnerControlledMoney]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsDomesticViolenceReceivedServicesOrLivedInShelter] FOREIGN KEY([IsDomesticViolenceReceivedServicesOrLivedInShelterId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsDomesticViolenceReceivedServicesOrLivedInShelter]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsLearningDisabilityDiagnosed] FOREIGN KEY([IsLearningDisabilityDiagnosedId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsLearningDisabilityDiagnosed]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsLearningDisabilityHardToManage] FOREIGN KEY([IsLearningDisabilityHardToManageId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsLearningDisabilityHardToManage]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsLearningDisabilityHardToParticipate] FOREIGN KEY([IsLearningDisabilityHardToParticipateId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsLearningDisabilityHardToParticipate]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsMentalHealthDiagnosed] FOREIGN KEY([IsMentalHealthHardDiagnosedId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsMentalHealthDiagnosed]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsMentalHealthHardToManage] FOREIGN KEY([IsMentalHealthHardToManageId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsMentalHealthHardToManage]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsMentalHealthHardToParticipate] FOREIGN KEY([IsMentalHealthHardToParticipateId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsMentalHealthHardToParticipate]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsMentalHealthTakeMedication] FOREIGN KEY([IsMentalHealthTakeMedicationId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsMentalHealthTakeMedication]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsPhysicalHealthHardHardToParticipate] FOREIGN KEY([IsPhysicalHealthHardToParticipateId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsPhysicalHealthHardHardToParticipate]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsPhysicalHealthHardToManage] FOREIGN KEY([IsPhysicalHealthHardToManageId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsPhysicalHealthHardToManage]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_IsPhysicalHealthTakeMedication] FOREIGN KEY([IsPhysicalHealthTakeMedicationId])
REFERENCES [wwp].[YesNoRefused] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_IsPhysicalHealthTakeMedication]
GO
ALTER TABLE [wwp].[BarrierSection]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[BarrierSection] CHECK CONSTRAINT [FK_BarrierSection_Participant]
GO
ALTER TABLE [wwp].[BarrierSubtype]  WITH CHECK ADD  CONSTRAINT [FK_BarrierSubtype_BarrierType] FOREIGN KEY([BarrierTypeId])
REFERENCES [wwp].[BarrierType] ([Id])
GO
ALTER TABLE [wwp].[BarrierSubtype] CHECK CONSTRAINT [FK_BarrierSubtype_BarrierType]
GO
ALTER TABLE [wwp].[BarrierTypeBarrierSubTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_BarrierTypeBarrierSubTypeBridge_BarrierDetail] FOREIGN KEY([BarrierDetailId])
REFERENCES [wwp].[BarrierDetail] ([Id])
GO
ALTER TABLE [wwp].[BarrierTypeBarrierSubTypeBridge] CHECK CONSTRAINT [FK_BarrierTypeBarrierSubTypeBridge_BarrierDetail]
GO
ALTER TABLE [wwp].[BarrierTypeBarrierSubTypeBridge]  WITH NOCHECK ADD  CONSTRAINT [FK_BarrierTypeBridge_BarrierSubType] FOREIGN KEY([BarrierSubTypeId])
REFERENCES [wwp].[BarrierSubtype] ([Id])
GO
ALTER TABLE [wwp].[BarrierTypeBarrierSubTypeBridge] CHECK CONSTRAINT [FK_BarrierTypeBridge_BarrierSubType]
GO
ALTER TABLE [wwp].[CareerAssessment]  WITH CHECK ADD  CONSTRAINT [FK_CareerAssessment_Contact] FOREIGN KEY([CareerAssessmentContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[CareerAssessment] CHECK CONSTRAINT [FK_CareerAssessment_Contact]
GO
ALTER TABLE [wwp].[CareerAssessment]  WITH CHECK ADD  CONSTRAINT [FK_CareerAssessment_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[CareerAssessment] CHECK CONSTRAINT [FK_CareerAssessment_Participant]
GO
ALTER TABLE [wwp].[CareerAssessmentElementBridge]  WITH CHECK ADD  CONSTRAINT [FK_CareerAssessmentElementBridge_CareerAssessment] FOREIGN KEY([CareerAssessmentId])
REFERENCES [wwp].[CareerAssessment] ([Id])
GO
ALTER TABLE [wwp].[CareerAssessmentElementBridge] CHECK CONSTRAINT [FK_CareerAssessmentElementBridge_CareerAssessment]
GO
ALTER TABLE [wwp].[CareerAssessmentElementBridge]  WITH CHECK ADD  CONSTRAINT [FK_CareerAssessmentElementBridge_Element] FOREIGN KEY([ElementId])
REFERENCES [wwp].[Element] ([Id])
GO
ALTER TABLE [wwp].[CareerAssessmentElementBridge] CHECK CONSTRAINT [FK_CareerAssessmentElementBridge_Element]
GO
ALTER TABLE [wwp].[CFRfaDetails]  WITH CHECK ADD  CONSTRAINT [FK_CFRfaDetails_CountyAndTribe] FOREIGN KEY([CourtOrderedCountyId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
GO
ALTER TABLE [wwp].[CFRfaDetails] CHECK CONSTRAINT [FK_CFRfaDetails_CountyAndTribe]
GO
ALTER TABLE [wwp].[CFRfaDetails]  WITH CHECK ADD  CONSTRAINT [FK_CFRfaDetails_RequestForAssistance] FOREIGN KEY([RequestForAssistanceId])
REFERENCES [wwp].[RequestForAssistance] ([Id])
GO
ALTER TABLE [wwp].[CFRfaDetails] CHECK CONSTRAINT [FK_CFRfaDetails_RequestForAssistance]
GO
ALTER TABLE [wwp].[Child]  WITH CHECK ADD  CONSTRAINT [FK_Child_GenderType] FOREIGN KEY([GenderTypeId])
REFERENCES [wwp].[GenderType] ([Id])
GO
ALTER TABLE [wwp].[Child] CHECK CONSTRAINT [FK_Child_GenderType]
GO
ALTER TABLE [wwp].[ChildYouthSection]  WITH CHECK ADD  CONSTRAINT [FK_ChildYouthSection_Contact] FOREIGN KEY([ChildWelfareContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[ChildYouthSection] CHECK CONSTRAINT [FK_ChildYouthSection_Contact]
GO
ALTER TABLE [wwp].[ChildYouthSection]  WITH CHECK ADD  CONSTRAINT [FK_ChildYouthSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ChildYouthSection] CHECK CONSTRAINT [FK_ChildYouthSection_Participant]
GO
ALTER TABLE [wwp].[ChildYouthSectionChild]  WITH CHECK ADD  CONSTRAINT [FK_ChildYouthChildren_AgeCategory] FOREIGN KEY([AgeCategoryId])
REFERENCES [wwp].[AgeCategory] ([Id])
GO
ALTER TABLE [wwp].[ChildYouthSectionChild] CHECK CONSTRAINT [FK_ChildYouthChildren_AgeCategory]
GO
ALTER TABLE [wwp].[ChildYouthSectionChild]  WITH CHECK ADD  CONSTRAINT [FK_ChildYouthChildren_ChildCareArrangement] FOREIGN KEY([CareArrangementId])
REFERENCES [wwp].[ChildCareArrangement] ([Id])
GO
ALTER TABLE [wwp].[ChildYouthSectionChild] CHECK CONSTRAINT [FK_ChildYouthChildren_ChildCareArrangement]
GO
ALTER TABLE [wwp].[ChildYouthSectionChild]  WITH CHECK ADD  CONSTRAINT [FK_ChildYouthChildren_Children] FOREIGN KEY([ChildId])
REFERENCES [wwp].[Child] ([Id])
GO
ALTER TABLE [wwp].[ChildYouthSectionChild] CHECK CONSTRAINT [FK_ChildYouthChildren_Children]
GO
ALTER TABLE [wwp].[ChildYouthSectionChild]  WITH CHECK ADD  CONSTRAINT [FK_ChildYouthChildren_ChildYouthSection] FOREIGN KEY([ChildYouthSectionId])
REFERENCES [wwp].[ChildYouthSection] ([Id])
GO
ALTER TABLE [wwp].[ChildYouthSectionChild] CHECK CONSTRAINT [FK_ChildYouthChildren_ChildYouthSection]
GO
ALTER TABLE [wwp].[ChildYouthSectionChild]  WITH CHECK ADD  CONSTRAINT [FK_ChildYouthSectionChild_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[ChildYouthSectionChild] CHECK CONSTRAINT [FK_ChildYouthSectionChild_DeleteReason]
GO
ALTER TABLE [wwp].[City]  WITH NOCHECK ADD  CONSTRAINT [FK_City_Country] FOREIGN KEY([CountryId])
REFERENCES [wwp].[Country] ([Id])
GO
ALTER TABLE [wwp].[City] CHECK CONSTRAINT [FK_City_Country]
GO
ALTER TABLE [wwp].[City]  WITH NOCHECK ADD  CONSTRAINT [FK_City_State] FOREIGN KEY([StateId])
REFERENCES [wwp].[State] ([Id])
GO
ALTER TABLE [wwp].[City] CHECK CONSTRAINT [FK_City_State]
GO
ALTER TABLE [wwp].[CompletionReason]  WITH CHECK ADD  CONSTRAINT [FK_CompletionReason_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[CompletionReason] CHECK CONSTRAINT [FK_CompletionReason_EnrolledProgram]
GO
ALTER TABLE [wwp].[ConfidentialPinInformation]  WITH CHECK ADD  CONSTRAINT [FK_ConfidentialPinInformation_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ConfidentialPinInformation] CHECK CONSTRAINT [FK_ConfidentialPinInformation_Participant]
GO
ALTER TABLE [wwp].[ConfidentialPinInformation]  WITH CHECK ADD  CONSTRAINT [FK_ConfidentialPinInformation_Worker] FOREIGN KEY([WorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[ConfidentialPinInformation] CHECK CONSTRAINT [FK_ConfidentialPinInformation_Worker]
GO
ALTER TABLE [wwp].[Contact]  WITH NOCHECK ADD  CONSTRAINT [FK_Contact_ContactTitleType] FOREIGN KEY([TitleId])
REFERENCES [wwp].[ContactTitleType] ([Id])
GO
ALTER TABLE [wwp].[Contact] CHECK CONSTRAINT [FK_Contact_ContactTitleType]
GO
ALTER TABLE [wwp].[Contact]  WITH NOCHECK ADD  CONSTRAINT [FK_Contact_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[Contact] CHECK CONSTRAINT [FK_Contact_Participant]
GO
ALTER TABLE [wwp].[ContentModule]  WITH CHECK ADD  CONSTRAINT [FK_ContentModule_ContentPage] FOREIGN KEY([ContentPageId])
REFERENCES [wwp].[ContentPage] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[ContentModule] CHECK CONSTRAINT [FK_ContentModule_ContentPage]
GO
ALTER TABLE [wwp].[ContentModuleMeta]  WITH CHECK ADD  CONSTRAINT [FK_ContentModuleMeta_ContentModule] FOREIGN KEY([ContentModuleId])
REFERENCES [wwp].[ContentModule] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[ContentModuleMeta] CHECK CONSTRAINT [FK_ContentModuleMeta_ContentModule]
GO
ALTER TABLE [wwp].[ContractArea]  WITH CHECK ADD  CONSTRAINT [FK_ContractArea_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[ContractArea] CHECK CONSTRAINT [FK_ContractArea_EnrolledProgram]
GO
ALTER TABLE [wwp].[ContractArea]  WITH CHECK ADD  CONSTRAINT [FK_ContractArea_Organization] FOREIGN KEY([OrganizationId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [wwp].[ContractArea] CHECK CONSTRAINT [FK_ContractArea_Organization]
GO
ALTER TABLE [wwp].[Conviction]  WITH NOCHECK ADD  CONSTRAINT [FK_Conviction_Conviction] FOREIGN KEY([ConvictionTypeID])
REFERENCES [wwp].[ConvictionType] ([Id])
GO
ALTER TABLE [wwp].[Conviction] CHECK CONSTRAINT [FK_Conviction_Conviction]
GO
ALTER TABLE [wwp].[Conviction]  WITH CHECK ADD  CONSTRAINT [FK_Conviction_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[Conviction] CHECK CONSTRAINT [FK_Conviction_DeleteReason]
GO
ALTER TABLE [wwp].[Conviction]  WITH NOCHECK ADD  CONSTRAINT [FK_Conviction_LegalIssuesSection] FOREIGN KEY([LegalSectionId])
REFERENCES [wwp].[LegalIssuesSection] ([Id])
GO
ALTER TABLE [wwp].[Conviction] CHECK CONSTRAINT [FK_Conviction_LegalIssuesSection]
GO
ALTER TABLE [wwp].[CourtDate]  WITH NOCHECK ADD  CONSTRAINT [FK_CourtDate_LegalIssuesSection] FOREIGN KEY([LegalSectionId])
REFERENCES [wwp].[LegalIssuesSection] ([Id])
GO
ALTER TABLE [wwp].[CourtDate] CHECK CONSTRAINT [FK_CourtDate_LegalIssuesSection]
GO
ALTER TABLE [wwp].[DeleteReasonByRepeater]  WITH CHECK ADD  CONSTRAINT [FK_DeleteReasonByRepeater_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[DeleteReasonByRepeater] CHECK CONSTRAINT [FK_DeleteReasonByRepeater_DeleteReason]
GO
ALTER TABLE [wwp].[DenialReasonsMap]  WITH CHECK ADD  CONSTRAINT [FK_DenialReasonsMap_DenialReason] FOREIGN KEY([DenialReasonId])
REFERENCES [wwp].[DenialReason] ([Id])
GO
ALTER TABLE [wwp].[DenialReasonsMap] CHECK CONSTRAINT [FK_DenialReasonsMap_DenialReason]
GO
ALTER TABLE [wwp].[DenialReasonsMap]  WITH CHECK ADD  CONSTRAINT [FK_DenialReasonsMap_TimeLimitType] FOREIGN KEY([TimelimitTypeId])
REFERENCES [wwp].[TimeLimitType] ([Id])
GO
ALTER TABLE [wwp].[DenialReasonsMap] CHECK CONSTRAINT [FK_DenialReasonsMap_TimeLimitType]
GO
ALTER TABLE [wwp].[DisabledPopulationType]  WITH CHECK ADD  CONSTRAINT [FK_DisabledPopulationType_EnrolledProgramOrganizationPopulationTypeBridge] FOREIGN KEY([EnrolledProgramOrganizationPopulationTypeBridgeId])
REFERENCES [wwp].[EnrolledProgramOrganizationPopulationTypeBridge] ([Id])
GO
ALTER TABLE [wwp].[DisabledPopulationType] CHECK CONSTRAINT [FK_DisabledPopulationType_EnrolledProgramOrganizationPopulationTypeBridge]
GO
ALTER TABLE [wwp].[DisabledPopulationType]  WITH CHECK ADD  CONSTRAINT [FK_DisabledPopulationType_PopulationType] FOREIGN KEY([PopulationTypeId])
REFERENCES [wwp].[PopulationType] ([Id])
GO
ALTER TABLE [wwp].[DisabledPopulationType] CHECK CONSTRAINT [FK_DisabledPopulationType_PopulationType]
GO
ALTER TABLE [wwp].[DriverLicense]  WITH NOCHECK ADD  CONSTRAINT [FK_DriverLicense_DriverLicenseType] FOREIGN KEY([DriverLicenseTypeId])
REFERENCES [wwp].[DriverLicenseType] ([Id])
GO
ALTER TABLE [wwp].[DriverLicense] CHECK CONSTRAINT [FK_DriverLicense_DriverLicenseType]
GO
ALTER TABLE [wwp].[DriverLicense]  WITH NOCHECK ADD  CONSTRAINT [FK_DriverLicense_State] FOREIGN KEY([StateId])
REFERENCES [wwp].[State] ([Id])
GO
ALTER TABLE [wwp].[DriverLicense] CHECK CONSTRAINT [FK_DriverLicense_State]
GO
ALTER TABLE [wwp].[DriversLicenseState]  WITH CHECK ADD  CONSTRAINT [FK_DriversLicenseState_State] FOREIGN KEY([StateId])
REFERENCES [wwp].[State] ([Id])
GO
ALTER TABLE [wwp].[DriversLicenseState] CHECK CONSTRAINT [FK_DriversLicenseState_State]
GO
ALTER TABLE [wwp].[EducationExam]  WITH NOCHECK ADD  CONSTRAINT [FK_EducationExam_ExamType] FOREIGN KEY([ExamTypeId])
REFERENCES [wwp].[ExamType] ([Id])
GO
ALTER TABLE [wwp].[EducationExam] CHECK CONSTRAINT [FK_EducationExam_ExamType]
GO
ALTER TABLE [wwp].[EducationExam]  WITH NOCHECK ADD  CONSTRAINT [FK_EducationExam_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[EducationExam] CHECK CONSTRAINT [FK_EducationExam_Participant]
GO
ALTER TABLE [wwp].[EducationSection]  WITH NOCHECK ADD  CONSTRAINT [FK_EducationSection_CertificateIssuingAuthority] FOREIGN KEY([CertificateIssuingAuthorityId])
REFERENCES [wwp].[CertificateIssuingAuthority] ([Id])
GO
ALTER TABLE [wwp].[EducationSection] CHECK CONSTRAINT [FK_EducationSection_CertificateIssuingAuthority]
GO
ALTER TABLE [wwp].[EducationSection]  WITH CHECK ADD  CONSTRAINT [FK_EducationSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[EducationSection] CHECK CONSTRAINT [FK_EducationSection_Participant]
GO
ALTER TABLE [wwp].[EducationSection]  WITH NOCHECK ADD  CONSTRAINT [FK_EducationSection_SchoolCollegeEstablishment] FOREIGN KEY([SchoolCollegeEstablishmentId])
REFERENCES [wwp].[SchoolCollegeEstablishment] ([Id])
GO
ALTER TABLE [wwp].[EducationSection] CHECK CONSTRAINT [FK_EducationSection_SchoolCollegeEstablishment]
GO
ALTER TABLE [wwp].[EducationSection]  WITH NOCHECK ADD  CONSTRAINT [FK_EducationSection_SchoolGradeLevel] FOREIGN KEY([LastGradeLevelCompletedId])
REFERENCES [wwp].[SchoolGradeLevel] ([Id])
GO
ALTER TABLE [wwp].[EducationSection] CHECK CONSTRAINT [FK_EducationSection_SchoolGradeLevel]
GO
ALTER TABLE [wwp].[EducationSection]  WITH NOCHECK ADD  CONSTRAINT [FK_EducationSection_SchoolGraduationStatus] FOREIGN KEY([SchoolGraduationStatusId])
REFERENCES [wwp].[SchoolGraduationStatus] ([Id])
GO
ALTER TABLE [wwp].[EducationSection] CHECK CONSTRAINT [FK_EducationSection_SchoolGraduationStatus]
GO
ALTER TABLE [wwp].[ElevatedAccess]  WITH CHECK ADD  CONSTRAINT [FK_ElevatedAccess_ElevatedAccessReason] FOREIGN KEY([ElevatedAccessReasonId])
REFERENCES [wwp].[ElevatedAccessReason] ([Id])
GO
ALTER TABLE [wwp].[ElevatedAccess] CHECK CONSTRAINT [FK_ElevatedAccess_ElevatedAccessReason]
GO
ALTER TABLE [wwp].[ElevatedAccess]  WITH CHECK ADD  CONSTRAINT [FK_ElevatedAccess_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ElevatedAccess] CHECK CONSTRAINT [FK_ElevatedAccess_Participant]
GO
ALTER TABLE [wwp].[ElevatedAccess]  WITH CHECK ADD  CONSTRAINT [FK_ElevatedAccess_Worker] FOREIGN KEY([WorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[ElevatedAccess] CHECK CONSTRAINT [FK_ElevatedAccess_Worker]
GO
ALTER TABLE [wwp].[EmployabilityPlan]  WITH CHECK ADD  CONSTRAINT [FK_EmployabilityPlan_EmployabilityPlanStatusType] FOREIGN KEY([EmployabilityPlanStatusTypeId])
REFERENCES [wwp].[EmployabilityPlanStatusType] ([Id])
GO
ALTER TABLE [wwp].[EmployabilityPlan] CHECK CONSTRAINT [FK_EmployabilityPlan_EmployabilityPlanStatusType]
GO
ALTER TABLE [wwp].[EmployabilityPlan]  WITH CHECK ADD  CONSTRAINT [FK_EmployabilityPlan_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EmployabilityPlan] CHECK CONSTRAINT [FK_EmployabilityPlan_EnrolledProgram]
GO
ALTER TABLE [wwp].[EmployabilityPlan]  WITH CHECK ADD  CONSTRAINT [FK_EmployabilityPlan_Organization] FOREIGN KEY([OrganizationId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [wwp].[EmployabilityPlan] CHECK CONSTRAINT [FK_EmployabilityPlan_Organization]
GO
ALTER TABLE [wwp].[EmployabilityPlan]  WITH CHECK ADD  CONSTRAINT [FK_EmployabilityPlan_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[EmployabilityPlan] CHECK CONSTRAINT [FK_EmployabilityPlan_Participant]
GO
ALTER TABLE [wwp].[EmployabilityPlan]  WITH CHECK ADD  CONSTRAINT [FK_EmployabilityPlan_ParticipantEnrolledProgram] FOREIGN KEY([ParticipantEnrolledProgramId])
REFERENCES [wwp].[ParticipantEnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EmployabilityPlan] CHECK CONSTRAINT [FK_EmployabilityPlan_ParticipantEnrolledProgram]
GO
ALTER TABLE [wwp].[EmployabilityPlanActivityBridge]  WITH CHECK ADD  CONSTRAINT [FK_EmploybilityPlanActivityBridge_Activity] FOREIGN KEY([ActivityId])
REFERENCES [wwp].[Activity] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[EmployabilityPlanActivityBridge] CHECK CONSTRAINT [FK_EmploybilityPlanActivityBridge_Activity]
GO
ALTER TABLE [wwp].[EmployabilityPlanActivityBridge]  WITH CHECK ADD  CONSTRAINT [FK_EmploybilityPlanActivityBridge_EmployabilityPlan] FOREIGN KEY([EmployabilityPlanId])
REFERENCES [wwp].[EmployabilityPlan] ([Id])
GO
ALTER TABLE [wwp].[EmployabilityPlanActivityBridge] CHECK CONSTRAINT [FK_EmploybilityPlanActivityBridge_EmployabilityPlan]
GO
ALTER TABLE [wwp].[EmployabilityPlanGoalBridge]  WITH CHECK ADD  CONSTRAINT [FK_EmployabilityPlanGoalBridge_EmployabilityPlan] FOREIGN KEY([EmployabilityPlanId])
REFERENCES [wwp].[EmployabilityPlan] ([Id])
GO
ALTER TABLE [wwp].[EmployabilityPlanGoalBridge] CHECK CONSTRAINT [FK_EmployabilityPlanGoalBridge_EmployabilityPlan]
GO
ALTER TABLE [wwp].[EmployabilityPlanGoalBridge]  WITH CHECK ADD  CONSTRAINT [FK_EmployabilityPlanGoalBridge_Goal] FOREIGN KEY([GoalId])
REFERENCES [wwp].[Goal] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[EmployabilityPlanGoalBridge] CHECK CONSTRAINT [FK_EmployabilityPlanGoalBridge_Goal]
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmployerOfRecordInformation_City] FOREIGN KEY([CityId])
REFERENCES [wwp].[City] ([Id])
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation] CHECK CONSTRAINT [FK_EmployerOfRecordInformation_City]
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmployerOfRecordInformation_Contact] FOREIGN KEY([ContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation] CHECK CONSTRAINT [FK_EmployerOfRecordInformation_Contact]
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmployerOfRecordInformation_EmploymentInformation] FOREIGN KEY([EmploymentInformationId])
REFERENCES [wwp].[EmploymentInformation] ([Id])
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation] CHECK CONSTRAINT [FK_EmployerOfRecordInformation_EmploymentInformation]
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmployerOfRecordInformation_JobSector] FOREIGN KEY([JobSectorId])
REFERENCES [wwp].[JobSector] ([Id])
GO
ALTER TABLE [wwp].[EmployerOfRecordInformation] CHECK CONSTRAINT [FK_EmployerOfRecordInformation_JobSector]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_City] FOREIGN KEY([CityId])
REFERENCES [wwp].[City] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_City]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_Contact] FOREIGN KEY([ContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_Contact]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_DeleteReason]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_EmployerOfRecordType] FOREIGN KEY([EmployerOfRecordTypeId])
REFERENCES [wwp].[EmployerOfRecordType] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_EmployerOfRecordType]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_EmploymentProgramType] FOREIGN KEY([EmploymentProgramtypeId])
REFERENCES [wwp].[EmploymentProgramType] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_EmploymentProgramType]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [wwp].[JobType] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_JobType]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_LeavingReason] FOREIGN KEY([LeavingReasonId])
REFERENCES [wwp].[LeavingReason] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_LeavingReason]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_OtherJobInformation] FOREIGN KEY([OtherJobInformationId])
REFERENCES [wwp].[OtherJobInformation] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_OtherJobInformation]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_Participant]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_WageHour] FOREIGN KEY([WageHoursId])
REFERENCES [wwp].[WageHour] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_WageHour]
GO
ALTER TABLE [wwp].[EmploymentInformation]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformation_WorkHistorySection] FOREIGN KEY([WorkHistorySectionId])
REFERENCES [wwp].[WorkHistorySection] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformation] CHECK CONSTRAINT [FK_EmploymentInformation_WorkHistorySection]
GO
ALTER TABLE [wwp].[EmploymentInformationBenefitsOfferedTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformationBenefitsOfferedTypeBridge_BenefitsOfferedType] FOREIGN KEY([BenefitsOfferedTypeId])
REFERENCES [wwp].[BenefitsOfferedType] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformationBenefitsOfferedTypeBridge] CHECK CONSTRAINT [FK_EmploymentInformationBenefitsOfferedTypeBridge_BenefitsOfferedType]
GO
ALTER TABLE [wwp].[EmploymentInformationBenefitsOfferedTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_JobBenefitsOfferedActionBridge_EmploymentInformation] FOREIGN KEY([EmploymentInformationId])
REFERENCES [wwp].[EmploymentInformation] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformationBenefitsOfferedTypeBridge] CHECK CONSTRAINT [FK_JobBenefitsOfferedActionBridge_EmploymentInformation]
GO
ALTER TABLE [wwp].[EmploymentInformationJobDutiesDetailsBridge]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformationJobDutiesDetailsBridge_EmploymentInformation] FOREIGN KEY([EmploymentInformationId])
REFERENCES [wwp].[EmploymentInformation] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformationJobDutiesDetailsBridge] CHECK CONSTRAINT [FK_EmploymentInformationJobDutiesDetailsBridge_EmploymentInformation]
GO
ALTER TABLE [wwp].[EmploymentInformationJobDutiesDetailsBridge]  WITH CHECK ADD  CONSTRAINT [FK_EmploymentInformationJobDutiesDetailsBridge_JobDutiesDetails] FOREIGN KEY([JobDutiesId])
REFERENCES [wwp].[JobDutiesDetails] ([Id])
GO
ALTER TABLE [wwp].[EmploymentInformationJobDutiesDetailsBridge] CHECK CONSTRAINT [FK_EmploymentInformationJobDutiesDetailsBridge_JobDutiesDetails]
GO
ALTER TABLE [wwp].[EnrolledProgramActivityCompletionReasonBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramActivityCompletionReasonBridge_ActivityCompletionReason] FOREIGN KEY([ActivityCompletionReasonId])
REFERENCES [wwp].[ActivityCompletionReason] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramActivityCompletionReasonBridge] CHECK CONSTRAINT [FK_EnrolledProgramActivityCompletionReasonBridge_ActivityCompletionReason]
GO
ALTER TABLE [wwp].[EnrolledProgramActivityCompletionReasonBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramActivityCompletionReasonBridge_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramActivityCompletionReasonBridge] CHECK CONSTRAINT [FK_EnrolledProgramActivityCompletionReasonBridge_EnrolledProgram]
GO
ALTER TABLE [wwp].[EnrolledProgramEPActivityTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramEPActivityTypeBridge_ActivityType] FOREIGN KEY([ActivityTypeId])
REFERENCES [wwp].[ActivityType] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramEPActivityTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramEPActivityTypeBridge_ActivityType]
GO
ALTER TABLE [wwp].[EnrolledProgramEPActivityTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramEPActivityTypeBridge_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramEPActivityTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramEPActivityTypeBridge_EnrolledProgram]
GO
ALTER TABLE [wwp].[EnrolledProgramJobTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramJobTypeBridge_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramJobTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramJobTypeBridge_EnrolledProgram]
GO
ALTER TABLE [wwp].[EnrolledProgramJobTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramJobTypeBridge_JobType] FOREIGN KEY([JobTypeId])
REFERENCES [wwp].[JobType] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramJobTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramJobTypeBridge_JobType]
GO
ALTER TABLE [wwp].[EnrolledProgramOrganizationPopulationTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramAgencyPopulationTypeBridge_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramOrganizationPopulationTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramAgencyPopulationTypeBridge_EnrolledProgram]
GO
ALTER TABLE [wwp].[EnrolledProgramOrganizationPopulationTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramAgencyPopulationTypeBridge_PopulationType] FOREIGN KEY([PopulationTypeId])
REFERENCES [wwp].[PopulationType] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramOrganizationPopulationTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramAgencyPopulationTypeBridge_PopulationType]
GO
ALTER TABLE [wwp].[EnrolledProgramOrganizationPopulationTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramOrganizationPopulationTypeBridge_Organization1] FOREIGN KEY([OrganizationId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramOrganizationPopulationTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramOrganizationPopulationTypeBridge_Organization1]
GO
ALTER TABLE [wwp].[EnrolledProgramParticipationStatusTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramParticipationStatusTypeBridge_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramParticipationStatusTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramParticipationStatusTypeBridge_EnrolledProgram]
GO
ALTER TABLE [wwp].[EnrolledProgramParticipationStatusTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramParticipationStatusTypeBridge_ParticipationStatusType] FOREIGN KEY([ParticipationStatusTypeId])
REFERENCES [wwp].[ParticipationStatusType] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramParticipationStatusTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramParticipationStatusTypeBridge_ParticipationStatusType]
GO
ALTER TABLE [wwp].[EnrolledProgramPinCommentTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramPinCommentTypeBridge_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramPinCommentTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramPinCommentTypeBridge_EnrolledProgram]
GO
ALTER TABLE [wwp].[EnrolledProgramPinCommentTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramPinCommentTypeBridge_PinCommentType] FOREIGN KEY([PinCommentTypeId])
REFERENCES [wwp].[PinCommentType] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramPinCommentTypeBridge] CHECK CONSTRAINT [FK_EnrolledProgramPinCommentTypeBridge_PinCommentType]
GO
ALTER TABLE [wwp].[EnrolledProgramValidity]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramValidity_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[EnrolledProgramValidity] CHECK CONSTRAINT [FK_EnrolledProgramValidity_EnrolledProgram]
GO
ALTER TABLE [wwp].[EPEIBridge]  WITH CHECK ADD  CONSTRAINT [FK_EPEIBridge_EmployabilityPlan] FOREIGN KEY([EmployabilityPlanId])
REFERENCES [wwp].[EmployabilityPlan] ([Id])
GO
ALTER TABLE [wwp].[EPEIBridge] CHECK CONSTRAINT [FK_EPEIBridge_EmployabilityPlan]
GO
ALTER TABLE [wwp].[EPEIBridge]  WITH CHECK ADD  CONSTRAINT [FK_EPEIBridge_EmploymentInformation] FOREIGN KEY([EmploymentInformationId])
REFERENCES [wwp].[EmploymentInformation] ([Id])
GO
ALTER TABLE [wwp].[EPEIBridge] CHECK CONSTRAINT [FK_EPEIBridge_EmploymentInformation]
GO
ALTER TABLE [wwp].[ExamResult]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamResult_EducationExam] FOREIGN KEY([EducationExamId])
REFERENCES [wwp].[EducationExam] ([Id])
GO
ALTER TABLE [wwp].[ExamResult] CHECK CONSTRAINT [FK_ExamResult_EducationExam]
GO
ALTER TABLE [wwp].[ExamResult]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamResult_ExamEquivalencyType] FOREIGN KEY([ExamEquivalencyTypeId])
REFERENCES [wwp].[ExamEquivalencyType] ([Id])
GO
ALTER TABLE [wwp].[ExamResult] CHECK CONSTRAINT [FK_ExamResult_ExamEquivalencyType]
GO
ALTER TABLE [wwp].[ExamResult]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamResult_ExamPassType] FOREIGN KEY([ExamPassTypeId])
REFERENCES [wwp].[ExamPassType] ([Id])
GO
ALTER TABLE [wwp].[ExamResult] CHECK CONSTRAINT [FK_ExamResult_ExamPassType]
GO
ALTER TABLE [wwp].[ExamResult]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamResult_ExamSubjectType] FOREIGN KEY([ExamSubjectTypeId])
REFERENCES [wwp].[ExamSubjectType] ([Id])
GO
ALTER TABLE [wwp].[ExamResult] CHECK CONSTRAINT [FK_ExamResult_ExamSubjectType]
GO
ALTER TABLE [wwp].[ExamResult]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamResult_NRSType] FOREIGN KEY([NRSTypeId])
REFERENCES [wwp].[NRSType] ([Id])
GO
ALTER TABLE [wwp].[ExamResult] CHECK CONSTRAINT [FK_ExamResult_NRSType]
GO
ALTER TABLE [wwp].[ExamResult]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamResult_SPLType] FOREIGN KEY([SPLTypeId])
REFERENCES [wwp].[SPLType] ([Id])
GO
ALTER TABLE [wwp].[ExamResult] CHECK CONSTRAINT [FK_ExamResult_SPLType]
GO
ALTER TABLE [wwp].[ExamSubjectMaxScoreType]  WITH NOCHECK ADD  CONSTRAINT [FK_ExamSubjectMaxScoreType_ExamType] FOREIGN KEY([ExamTypeId])
REFERENCES [wwp].[ExamType] ([Id])
GO
ALTER TABLE [wwp].[ExamSubjectMaxScoreType] CHECK CONSTRAINT [FK_ExamSubjectMaxScoreType_ExamType]
GO
ALTER TABLE [wwp].[ExamSubjectTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_ExamSubjectTypeBridge_ExamSubjectType] FOREIGN KEY([ExamSubjectTypeId])
REFERENCES [wwp].[ExamSubjectType] ([Id])
GO
ALTER TABLE [wwp].[ExamSubjectTypeBridge] CHECK CONSTRAINT [FK_ExamSubjectTypeBridge_ExamSubjectType]
GO
ALTER TABLE [wwp].[ExamSubjectTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_ExamSubjectTypeBridge_ExamType] FOREIGN KEY([ExamTypeId])
REFERENCES [wwp].[ExamType] ([Id])
GO
ALTER TABLE [wwp].[ExamSubjectTypeBridge] CHECK CONSTRAINT [FK_ExamSubjectTypeBridge_ExamType]
GO
ALTER TABLE [wwp].[FamilyBarriersActionBridge]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersActionBridge_FamilyBarriersAssessmentSection] FOREIGN KEY([FamilyBarriersAssessmentSectionId])
REFERENCES [wwp].[FamilyBarriersAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersActionBridge] CHECK CONSTRAINT [FK_FamilyBarriersActionBridge_FamilyBarriersAssessmentSection]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_ApplicationStatusType] FOREIGN KEY([SsiApplicationStatusId])
REFERENCES [wwp].[ApplicationStatusType] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_ApplicationStatusType]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_Contact] FOREIGN KEY([SsiApplicationContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_Contact]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail] FOREIGN KEY([PastSsiDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_AnyFamilyIssuesAffectWorkDetailsId] FOREIGN KEY([AnyFamilyIssuesAffectWorkDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_AnyFamilyIssuesAffectWorkDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_AnyoneApplyingForSsiDetailsId] FOREIGN KEY([AnyoneApplyingForSsiDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_AnyoneApplyingForSsiDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_AnyoneReceivingSsiDetailsId] FOREIGN KEY([AnyoneReceivingSsiDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_AnyoneReceivingSsiDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_ChildrenHaveBehaviourProblemsDetailsId] FOREIGN KEY([ChildrenHaveBehaviourProblemsDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_ChildrenHaveBehaviourProblemsDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_ConcernsAboutCaretakingResponsibilitiesDetailsId] FOREIGN KEY([ConcernsAboutCaretakingResponsibilitiesDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_ConcernsAboutCaretakingResponsibilitiesDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_HouseholdEngageInRiskyActivitiesDetailsId] FOREIGN KEY([HouseholdEngageInRiskyActivitiesDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_HouseholdEngageInRiskyActivitiesDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_InterestedInLearningMoreSsiDetailsId] FOREIGN KEY([InterestedInLearningMoreSsiDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_InterestedInLearningMoreSsiDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_ssiApplicationDetailsId] FOREIGN KEY([SsiApplicationDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail_ssiApplicationDetailsId]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail1] FOREIGN KEY([SsiApplicationStatusDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail1]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail7] FOREIGN KEY([ChildrenAtRiskOfSchoolSuspensionDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetail7]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetailDeniedSsiDetails] FOREIGN KEY([DeniedSsiDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_FamilyBarriersDetailDeniedSsiDetails]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_Participant]
GO
ALTER TABLE [wwp].[FamilyBarriersSection]  WITH CHECK ADD  CONSTRAINT [FK_FamilyBarriersSection_ReasonForPastSsiDetails] FOREIGN KEY([ReasonForPastSsiDetailsId])
REFERENCES [wwp].[FamilyBarriersDetail] ([Id])
GO
ALTER TABLE [wwp].[FamilyBarriersSection] CHECK CONSTRAINT [FK_FamilyBarriersSection_ReasonForPastSsiDetails]
GO
ALTER TABLE [wwp].[FamilyMember]  WITH CHECK ADD  CONSTRAINT [FK_FamilyMember_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[FamilyMember] CHECK CONSTRAINT [FK_FamilyMember_DeleteReason]
GO
ALTER TABLE [wwp].[FamilyMember]  WITH CHECK ADD  CONSTRAINT [FK_FamilyMember_FamilyBarriersSection] FOREIGN KEY([FamilyBarriersSectionId])
REFERENCES [wwp].[FamilyBarriersSection] ([Id])
GO
ALTER TABLE [wwp].[FamilyMember] CHECK CONSTRAINT [FK_FamilyMember_FamilyBarriersSection]
GO
ALTER TABLE [wwp].[FamilyMember]  WITH CHECK ADD  CONSTRAINT [FK_FamilyMember_Relationship] FOREIGN KEY([RelationshipId])
REFERENCES [wwp].[Relationship] ([Id])
GO
ALTER TABLE [wwp].[FamilyMember] CHECK CONSTRAINT [FK_FamilyMember_Relationship]
GO
ALTER TABLE [wwp].[FCDPRfaDetails]  WITH CHECK ADD  CONSTRAINT [FK_FCDPRfaDetails_CountyAndTribe] FOREIGN KEY([CourtOrderedCountyId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
GO
ALTER TABLE [wwp].[FCDPRfaDetails] CHECK CONSTRAINT [FK_FCDPRfaDetails_CountyAndTribe]
GO
ALTER TABLE [wwp].[FCDPRfaDetails]  WITH CHECK ADD  CONSTRAINT [FK_FCDPRfaDetails_RequestForAssistance] FOREIGN KEY([RequestForAssistanceId])
REFERENCES [wwp].[RequestForAssistance] ([Id])
GO
ALTER TABLE [wwp].[FCDPRfaDetails] CHECK CONSTRAINT [FK_FCDPRfaDetails_RequestForAssistance]
GO
ALTER TABLE [wwp].[FormalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_FormalAssessment_BarrierDetails] FOREIGN KEY([BarrierDetailsId])
REFERENCES [wwp].[BarrierDetail] ([Id])
GO
ALTER TABLE [wwp].[FormalAssessment] CHECK CONSTRAINT [FK_FormalAssessment_BarrierDetails]
GO
ALTER TABLE [wwp].[FormalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_FormalAssessment_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[FormalAssessment] CHECK CONSTRAINT [FK_FormalAssessment_DeleteReason]
GO
ALTER TABLE [wwp].[FormalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_FormalAssessment_IntervalType] FOREIGN KEY([HoursParticipantCanParticipateIntervalId])
REFERENCES [wwp].[IntervalType] ([Id])
GO
ALTER TABLE [wwp].[FormalAssessment] CHECK CONSTRAINT [FK_FormalAssessment_IntervalType]
GO
ALTER TABLE [wwp].[FormalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_FormalAssessment_Symptom] FOREIGN KEY([SymptomId])
REFERENCES [wwp].[Symptom] ([Id])
GO
ALTER TABLE [wwp].[FormalAssessment] CHECK CONSTRAINT [FK_FormalAssessment_Symptom]
GO
ALTER TABLE [wwp].[Goal]  WITH CHECK ADD  CONSTRAINT [FK_Goal_GoalEndReason] FOREIGN KEY([GoalEndReasonId])
REFERENCES [wwp].[GoalEndReason] ([Id])
GO
ALTER TABLE [wwp].[Goal] CHECK CONSTRAINT [FK_Goal_GoalEndReason]
GO
ALTER TABLE [wwp].[Goal]  WITH CHECK ADD  CONSTRAINT [FK_Goal_GoalType] FOREIGN KEY([GoalTypeId])
REFERENCES [wwp].[GoalType] ([Id])
GO
ALTER TABLE [wwp].[Goal] CHECK CONSTRAINT [FK_Goal_GoalType]
GO
ALTER TABLE [wwp].[GoalStep]  WITH CHECK ADD  CONSTRAINT [FK_GoalStep_Goal] FOREIGN KEY([GoalId])
REFERENCES [wwp].[Goal] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[GoalStep] CHECK CONSTRAINT [FK_GoalStep_Goal]
GO
ALTER TABLE [wwp].[GoalType]  WITH CHECK ADD  CONSTRAINT [FK_GoalType_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[GoalType] CHECK CONSTRAINT [FK_GoalType_EnrolledProgram]
GO
ALTER TABLE [wwp].[HousingHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_HousingHistory_HousingSection] FOREIGN KEY([HousingSectionId])
REFERENCES [wwp].[HousingSection] ([Id])
GO
ALTER TABLE [wwp].[HousingHistory] CHECK CONSTRAINT [FK_HousingHistory_HousingSection]
GO
ALTER TABLE [wwp].[HousingHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_HousingHistory_HousingSituation] FOREIGN KEY([HousingSituationId])
REFERENCES [wwp].[HousingSituation] ([Id])
GO
ALTER TABLE [wwp].[HousingHistory] CHECK CONSTRAINT [FK_HousingHistory_HousingSituation]
GO
ALTER TABLE [wwp].[HousingSection]  WITH NOCHECK ADD  CONSTRAINT [FK_HousingSection_HousingSituation] FOREIGN KEY([HousingSituationId])
REFERENCES [wwp].[HousingSituation] ([Id])
GO
ALTER TABLE [wwp].[HousingSection] CHECK CONSTRAINT [FK_HousingSection_HousingSituation]
GO
ALTER TABLE [wwp].[HousingSection]  WITH CHECK ADD  CONSTRAINT [FK_HousingSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[HousingSection] CHECK CONSTRAINT [FK_HousingSection_Participant]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_AssessmentType] FOREIGN KEY([AssessmentTypeId])
REFERENCES [wwp].[AssessmentType] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_AssessmentType]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_BarrierAssessmentSection] FOREIGN KEY([BarriersAssessmentSectionId])
REFERENCES [wwp].[BarrierAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_BarrierAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_ChildYouthSupportAssessmentSection] FOREIGN KEY([ChildYouthSupportsAssessmentSectionId])
REFERENCES [wwp].[ChildYouthSupportsAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_ChildYouthSupportAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_EducationAssessmentSection] FOREIGN KEY([EducationAssessmentSectionId])
REFERENCES [wwp].[EducationAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_EducationAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_FamilyBarriersAssessmentSection] FOREIGN KEY([FamilyBarriersAssessmentSectionId])
REFERENCES [wwp].[FamilyBarriersAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_FamilyBarriersAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_HousingAssessmentSection] FOREIGN KEY([HousingAssessmentSectionId])
REFERENCES [wwp].[HousingAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_HousingAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_LanguageAssessmentSection] FOREIGN KEY([LanguageAssessmentSectionId])
REFERENCES [wwp].[LanguageAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_LanguageAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_LegalIssuesAssessmentSection] FOREIGN KEY([LegalIssuesAssessmentSectionId])
REFERENCES [wwp].[LegalIssuesAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_LegalIssuesAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_MilitaryTrainingAssessmentSection] FOREIGN KEY([MilitaryTrainingAssessmentSectionId])
REFERENCES [wwp].[MilitaryTrainingAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_MilitaryTrainingAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_NonCustodialParentsAssessmentSection] FOREIGN KEY([NonCustodialParentsAssessmentSectionId])
REFERENCES [wwp].[NonCustodialParentsAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_NonCustodialParentsAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_NonCustodialParentsReferralAssessmentSection] FOREIGN KEY([NonCustodialParentsReferralAssessmentSectionId])
REFERENCES [wwp].[NonCustodialParentsReferralAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_NonCustodialParentsReferralAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH NOCHECK ADD  CONSTRAINT [FK_InformalAssessment_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_Participant]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_PostSecondaryEducationAssessmentSection] FOREIGN KEY([PostSecondaryEducationAssessmentSectionId])
REFERENCES [wwp].[PostSecondaryEducationAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_PostSecondaryEducationAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_TransportationAssessmentSection] FOREIGN KEY([TransportationAssessmentSectionId])
REFERENCES [wwp].[TransportationAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_TransportationAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_WorkHistoryAssessmentSection] FOREIGN KEY([WorkHistoryAssessmentSectionId])
REFERENCES [wwp].[WorkHistoryAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_WorkHistoryAssessmentSection]
GO
ALTER TABLE [wwp].[InformalAssessment]  WITH CHECK ADD  CONSTRAINT [FK_InformalAssessment_WorkProgramAssessmentSection] FOREIGN KEY([WorkProgramAssessmentSectionId])
REFERENCES [wwp].[WorkProgramAssessmentSection] ([Id])
GO
ALTER TABLE [wwp].[InformalAssessment] CHECK CONSTRAINT [FK_InformalAssessment_WorkProgramAssessmentSection]
GO
ALTER TABLE [wwp].[InvolvedWorkProgram]  WITH NOCHECK ADD  CONSTRAINT [FK_InvolvedWorkProgram_City] FOREIGN KEY([CityId])
REFERENCES [wwp].[City] ([Id])
GO
ALTER TABLE [wwp].[InvolvedWorkProgram] CHECK CONSTRAINT [FK_InvolvedWorkProgram_City]
GO
ALTER TABLE [wwp].[InvolvedWorkProgram]  WITH NOCHECK ADD  CONSTRAINT [FK_InvolvedWorkProgram_Contact] FOREIGN KEY([ContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[InvolvedWorkProgram] CHECK CONSTRAINT [FK_InvolvedWorkProgram_Contact]
GO
ALTER TABLE [wwp].[InvolvedWorkProgram]  WITH NOCHECK ADD  CONSTRAINT [FK_InvolvedWorkProgram_WorkProgram] FOREIGN KEY([WorkProgramId])
REFERENCES [wwp].[WorkProgram] ([Id])
GO
ALTER TABLE [wwp].[InvolvedWorkProgram] CHECK CONSTRAINT [FK_InvolvedWorkProgram_WorkProgram]
GO
ALTER TABLE [wwp].[InvolvedWorkProgram]  WITH NOCHECK ADD  CONSTRAINT [FK_InvolvedWorkProgram_WorkProgramSection] FOREIGN KEY([WorkProgramSectionId])
REFERENCES [wwp].[WorkProgramSection] ([Id])
GO
ALTER TABLE [wwp].[InvolvedWorkProgram] CHECK CONSTRAINT [FK_InvolvedWorkProgram_WorkProgramSection]
GO
ALTER TABLE [wwp].[InvolvedWorkProgram]  WITH NOCHECK ADD  CONSTRAINT [FK_InvolvedWorkProgram_WorkProgramStatus] FOREIGN KEY([WorkProgramStatusId])
REFERENCES [wwp].[WorkProgramStatus] ([Id])
GO
ALTER TABLE [wwp].[InvolvedWorkProgram] CHECK CONSTRAINT [FK_InvolvedWorkProgram_WorkProgramStatus]
GO
ALTER TABLE [wwp].[JobQueueItem]  WITH CHECK ADD  CONSTRAINT [FK_JobQueueItem_JobQueue] FOREIGN KEY([JobQueueId])
REFERENCES [wwp].[JobQueue] ([Id])
GO
ALTER TABLE [wwp].[JobQueueItem] CHECK CONSTRAINT [FK_JobQueueItem_JobQueue]
GO
ALTER TABLE [wwp].[JobReadiness]  WITH CHECK ADD  CONSTRAINT [FK_JobReadiness_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[JobReadiness] CHECK CONSTRAINT [FK_JobReadiness_Participant]
GO
ALTER TABLE [wwp].[JRApplicationInfo]  WITH CHECK ADD  CONSTRAINT [FK_JRApplicationInfo_JobReadiness] FOREIGN KEY([JobReadinessId])
REFERENCES [wwp].[JobReadiness] ([Id])
GO
ALTER TABLE [wwp].[JRApplicationInfo] CHECK CONSTRAINT [FK_JRApplicationInfo_JobReadiness]
GO
ALTER TABLE [wwp].[JRApplicationInfo]  WITH CHECK ADD  CONSTRAINT [FK_JRApplicationInfo_YesNoUnknownLookup] FOREIGN KEY([NeedDocumentLookupId])
REFERENCES [wwp].[YesNoUnknownLookup] ([Id])
GO
ALTER TABLE [wwp].[JRApplicationInfo] CHECK CONSTRAINT [FK_JRApplicationInfo_YesNoUnknownLookup]
GO
ALTER TABLE [wwp].[JRContactInfo]  WITH CHECK ADD  CONSTRAINT [FK_JRContactInfo_JobReadiness] FOREIGN KEY([JobReadinessId])
REFERENCES [wwp].[JobReadiness] ([Id])
GO
ALTER TABLE [wwp].[JRContactInfo] CHECK CONSTRAINT [FK_JRContactInfo_JobReadiness]
GO
ALTER TABLE [wwp].[JRHistoryInfo]  WITH CHECK ADD  CONSTRAINT [FK_JRHistoryInfo_JobReadiness] FOREIGN KEY([JobReadinessId])
REFERENCES [wwp].[JobReadiness] ([Id])
GO
ALTER TABLE [wwp].[JRHistoryInfo] CHECK CONSTRAINT [FK_JRHistoryInfo_JobReadiness]
GO
ALTER TABLE [wwp].[JRInterviewInfo]  WITH CHECK ADD  CONSTRAINT [FK_JRInterviewInfo_JobReadiness] FOREIGN KEY([JobReadinessId])
REFERENCES [wwp].[JobReadiness] ([Id])
GO
ALTER TABLE [wwp].[JRInterviewInfo] CHECK CONSTRAINT [FK_JRInterviewInfo_JobReadiness]
GO
ALTER TABLE [wwp].[JRWorkPreferences]  WITH CHECK ADD  CONSTRAINT [FK_JRWorkPreferences_JobReadiness] FOREIGN KEY([JobReadinessId])
REFERENCES [wwp].[JobReadiness] ([Id])
GO
ALTER TABLE [wwp].[JRWorkPreferences] CHECK CONSTRAINT [FK_JRWorkPreferences_JobReadiness]
GO
ALTER TABLE [wwp].[KnownLanguage]  WITH NOCHECK ADD  CONSTRAINT [FK_KnownLanguage_Language] FOREIGN KEY([LanguageId])
REFERENCES [wwp].[Language] ([Id])
GO
ALTER TABLE [wwp].[KnownLanguage] CHECK CONSTRAINT [FK_KnownLanguage_Language]
GO
ALTER TABLE [wwp].[KnownLanguage]  WITH NOCHECK ADD  CONSTRAINT [FK_KnownLanguage_LanguageSection] FOREIGN KEY([LanguageSectionId])
REFERENCES [wwp].[LanguageSection] ([Id])
GO
ALTER TABLE [wwp].[KnownLanguage] CHECK CONSTRAINT [FK_KnownLanguage_LanguageSection]
GO
ALTER TABLE [wwp].[LanguageSection]  WITH CHECK ADD  CONSTRAINT [FK_LanguageSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[LanguageSection] CHECK CONSTRAINT [FK_LanguageSection_Participant]
GO
ALTER TABLE [wwp].[LegalIssuesSection]  WITH NOCHECK ADD  CONSTRAINT [FK_LegalIssuesSection_Contact] FOREIGN KEY([CommunitySupervisonContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[LegalIssuesSection] CHECK CONSTRAINT [FK_LegalIssuesSection_Contact]
GO
ALTER TABLE [wwp].[LegalIssuesSection]  WITH CHECK ADD  CONSTRAINT [FK_LegalIssuesSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[LegalIssuesSection] CHECK CONSTRAINT [FK_LegalIssuesSection_Participant]
GO
ALTER TABLE [wwp].[MilitaryTrainingSection]  WITH NOCHECK ADD  CONSTRAINT [FK_MilitaryTrainingSection_MilitaryBranch] FOREIGN KEY([MilitaryBranchId])
REFERENCES [wwp].[MilitaryBranch] ([Id])
GO
ALTER TABLE [wwp].[MilitaryTrainingSection] CHECK CONSTRAINT [FK_MilitaryTrainingSection_MilitaryBranch]
GO
ALTER TABLE [wwp].[MilitaryTrainingSection]  WITH NOCHECK ADD  CONSTRAINT [FK_MilitaryTrainingSection_MilitaryDischargeType] FOREIGN KEY([MilitaryDischargeTypeId])
REFERENCES [wwp].[MilitaryDischargeType] ([Id])
GO
ALTER TABLE [wwp].[MilitaryTrainingSection] CHECK CONSTRAINT [FK_MilitaryTrainingSection_MilitaryDischargeType]
GO
ALTER TABLE [wwp].[MilitaryTrainingSection]  WITH NOCHECK ADD  CONSTRAINT [FK_MilitaryTrainingSection_MilitaryRank] FOREIGN KEY([MilitaryRankId])
REFERENCES [wwp].[MilitaryRank] ([Id])
GO
ALTER TABLE [wwp].[MilitaryTrainingSection] CHECK CONSTRAINT [FK_MilitaryTrainingSection_MilitaryRank]
GO
ALTER TABLE [wwp].[MilitaryTrainingSection]  WITH CHECK ADD  CONSTRAINT [FK_MilitaryTrainingSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[MilitaryTrainingSection] CHECK CONSTRAINT [FK_MilitaryTrainingSection_Participant]
GO
ALTER TABLE [wwp].[MilitaryTrainingSection]  WITH CHECK ADD  CONSTRAINT [FK_MilitaryTrainingSection_PolarLookup] FOREIGN KEY([PolarLookupId])
REFERENCES [wwp].[PolarLookup] ([Id])
GO
ALTER TABLE [wwp].[MilitaryTrainingSection] CHECK CONSTRAINT [FK_MilitaryTrainingSection_PolarLookup]
GO
ALTER TABLE [wwp].[NonCustodialCaretaker]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialCaretaker_ContactInterval] FOREIGN KEY([ContactIntervalId])
REFERENCES [wwp].[ContactInterval] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialCaretaker] CHECK CONSTRAINT [FK_NonCustodialCaretaker_ContactInterval]
GO
ALTER TABLE [wwp].[NonCustodialCaretaker]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialCaretaker_DeleteReason1] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialCaretaker] CHECK CONSTRAINT [FK_NonCustodialCaretaker_DeleteReason1]
GO
ALTER TABLE [wwp].[NonCustodialCaretaker]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialCaretaker_NonCustodialParentRelationship] FOREIGN KEY([NonCustodialParentRelationshipId])
REFERENCES [wwp].[NonCustodialParentRelationship] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialCaretaker] CHECK CONSTRAINT [FK_NonCustodialCaretaker_NonCustodialParentRelationship]
GO
ALTER TABLE [wwp].[NonCustodialCaretaker]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialCaretaker_NonCustodialParentsSection] FOREIGN KEY([NonCustodialParentsSectionId])
REFERENCES [wwp].[NonCustodialParentsSection] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialCaretaker] CHECK CONSTRAINT [FK_NonCustodialCaretaker_NonCustodialParentsSection]
GO
ALTER TABLE [wwp].[NonCustodialChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialChild_ContactInterval] FOREIGN KEY([ContactIntervalId])
REFERENCES [wwp].[ContactInterval] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialChild] CHECK CONSTRAINT [FK_NonCustodialChild_ContactInterval]
GO
ALTER TABLE [wwp].[NonCustodialChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialChild_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialChild] CHECK CONSTRAINT [FK_NonCustodialChild_DeleteReason]
GO
ALTER TABLE [wwp].[NonCustodialChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialChild_HasOtherAdultsYesNoUnknownLookup] FOREIGN KEY([HasOtherAdultsYesNoUnknownLookupId])
REFERENCES [wwp].[YesNoUnknownLookup] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialChild] CHECK CONSTRAINT [FK_NonCustodialChild_HasOtherAdultsYesNoUnknownLookup]
GO
ALTER TABLE [wwp].[NonCustodialChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialChild_IsNeedOfServicesYesNoUnknownLookup] FOREIGN KEY([IsNeedOfServicesYesNoUnknownLookupId])
REFERENCES [wwp].[YesNoUnknownLookup] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialChild] CHECK CONSTRAINT [FK_NonCustodialChild_IsNeedOfServicesYesNoUnknownLookup]
GO
ALTER TABLE [wwp].[NonCustodialChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialChild_NonCustodialCaretaker] FOREIGN KEY([NonCustodialCaretakerId])
REFERENCES [wwp].[NonCustodialCaretaker] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialChild] CHECK CONSTRAINT [FK_NonCustodialChild_NonCustodialCaretaker]
GO
ALTER TABLE [wwp].[NonCustodialParentsReferralSection]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialParentsReferralSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialParentsReferralSection] CHECK CONSTRAINT [FK_NonCustodialParentsReferralSection_Participant]
GO
ALTER TABLE [wwp].[NonCustodialParentsReferralSection]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialParentsReferralSection_YesNoSkipLookup] FOREIGN KEY([HasChildrenId])
REFERENCES [wwp].[YesNoSkipLookup] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialParentsReferralSection] CHECK CONSTRAINT [FK_NonCustodialParentsReferralSection_YesNoSkipLookup]
GO
ALTER TABLE [wwp].[NonCustodialParentsSection]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialParentsSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialParentsSection] CHECK CONSTRAINT [FK_NonCustodialParentsSection_Participant]
GO
ALTER TABLE [wwp].[NonCustodialReferralChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialReferralChild_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialReferralChild] CHECK CONSTRAINT [FK_NonCustodialReferralChild_DeleteReason]
GO
ALTER TABLE [wwp].[NonCustodialReferralChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialReferralChild_NonCustodialReferralParent] FOREIGN KEY([NonCustodialReferralParentId])
REFERENCES [wwp].[NonCustodialReferralParent] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialReferralChild] CHECK CONSTRAINT [FK_NonCustodialReferralChild_NonCustodialReferralParent]
GO
ALTER TABLE [wwp].[NonCustodialReferralChild]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialReferralChild_ReferralContactInterval] FOREIGN KEY([ReferralContactIntervalId])
REFERENCES [wwp].[ReferralContactInterval] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialReferralChild] CHECK CONSTRAINT [FK_NonCustodialReferralChild_ReferralContactInterval]
GO
ALTER TABLE [wwp].[NonCustodialReferralParent]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialReferralParent_Contact] FOREIGN KEY([ContactId])
REFERENCES [wwp].[Contact] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialReferralParent] CHECK CONSTRAINT [FK_NonCustodialReferralParent_Contact]
GO
ALTER TABLE [wwp].[NonCustodialReferralParent]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialReferralParent_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialReferralParent] CHECK CONSTRAINT [FK_NonCustodialReferralParent_DeleteReason]
GO
ALTER TABLE [wwp].[NonCustodialReferralParent]  WITH CHECK ADD  CONSTRAINT [FK_NonCustodialReferralParent_NonCustodialParentsReferralSection] FOREIGN KEY([NonCustodialReferralParentsSectionId])
REFERENCES [wwp].[NonCustodialParentsReferralSection] ([Id])
GO
ALTER TABLE [wwp].[NonCustodialReferralParent] CHECK CONSTRAINT [FK_NonCustodialReferralParent_NonCustodialParentsReferralSection]
GO
ALTER TABLE [wwp].[NonSelfDirectedActivity]  WITH CHECK ADD  CONSTRAINT [FK_SelfDirectedActivity_Activity] FOREIGN KEY([ActivityId])
REFERENCES [wwp].[Activity] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[NonSelfDirectedActivity] CHECK CONSTRAINT [FK_SelfDirectedActivity_Activity]
GO
ALTER TABLE [wwp].[NonSelfDirectedActivity]  WITH CHECK ADD  CONSTRAINT [FK_SelfDirectedActivity_City] FOREIGN KEY([CityId])
REFERENCES [wwp].[City] ([Id])
GO
ALTER TABLE [wwp].[NonSelfDirectedActivity] CHECK CONSTRAINT [FK_SelfDirectedActivity_City]
GO
ALTER TABLE [wwp].[OfficeTransfer]  WITH CHECK ADD  CONSTRAINT [FK_OfficeTransfer_DestinationAssignedWorker] FOREIGN KEY([DestinationAssignedWorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[OfficeTransfer] CHECK CONSTRAINT [FK_OfficeTransfer_DestinationAssignedWorker]
GO
ALTER TABLE [wwp].[OfficeTransfer]  WITH CHECK ADD  CONSTRAINT [FK_OfficeTransfer_DestinationOffice] FOREIGN KEY([DestinationOfficeId])
REFERENCES [wwp].[WWPOffice] ([Id])
GO
ALTER TABLE [wwp].[OfficeTransfer] CHECK CONSTRAINT [FK_OfficeTransfer_DestinationOffice]
GO
ALTER TABLE [wwp].[OfficeTransfer]  WITH CHECK ADD  CONSTRAINT [FK_OfficeTransfer_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[OfficeTransfer] CHECK CONSTRAINT [FK_OfficeTransfer_Participant]
GO
ALTER TABLE [wwp].[OfficeTransfer]  WITH CHECK ADD  CONSTRAINT [FK_OfficeTransfer_ParticipantEnrolledProgram] FOREIGN KEY([ParticipantEnrolledProgramId])
REFERENCES [wwp].[ParticipantEnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[OfficeTransfer] CHECK CONSTRAINT [FK_OfficeTransfer_ParticipantEnrolledProgram]
GO
ALTER TABLE [wwp].[OfficeTransfer]  WITH CHECK ADD  CONSTRAINT [FK_OfficeTransfer_SouceOffice] FOREIGN KEY([SourceOfficeId])
REFERENCES [wwp].[WWPOffice] ([Id])
GO
ALTER TABLE [wwp].[OfficeTransfer] CHECK CONSTRAINT [FK_OfficeTransfer_SouceOffice]
GO
ALTER TABLE [wwp].[OfficeTransfer]  WITH CHECK ADD  CONSTRAINT [FK_OfficeTransfer_SourceAssignedWorker] FOREIGN KEY([SourceAssignedWorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[OfficeTransfer] CHECK CONSTRAINT [FK_OfficeTransfer_SourceAssignedWorker]
GO
ALTER TABLE [wwp].[OrganizationInformation]  WITH CHECK ADD  CONSTRAINT [FK_OrganizationInformation_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[OrganizationInformation] CHECK CONSTRAINT [FK_OrganizationInformation_EnrolledProgram]
GO
ALTER TABLE [wwp].[OrganizationInformation]  WITH CHECK ADD  CONSTRAINT [FK_OrganizationInformation_Organization] FOREIGN KEY([OrganizationId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [wwp].[OrganizationInformation] CHECK CONSTRAINT [FK_OrganizationInformation_Organization]
GO
ALTER TABLE [wwp].[OrganizationLocation]  WITH CHECK ADD  CONSTRAINT [FK_OrganizationLocation_AddressVerificationTypeLookup] FOREIGN KEY([AddressVerificationTypeLookupId])
REFERENCES [wwp].[AddressVerificationTypeLookup] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[OrganizationLocation] CHECK CONSTRAINT [FK_OrganizationLocation_AddressVerificationTypeLookup]
GO
ALTER TABLE [wwp].[OrganizationLocation]  WITH CHECK ADD  CONSTRAINT [FK_OrganizationLocation_City] FOREIGN KEY([CityId])
REFERENCES [wwp].[City] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[OrganizationLocation] CHECK CONSTRAINT [FK_OrganizationLocation_City]
GO
ALTER TABLE [wwp].[OrganizationLocation]  WITH CHECK ADD  CONSTRAINT [FK_OrganizationLocation_OrganizationInformation] FOREIGN KEY([OrganizationInformationId])
REFERENCES [wwp].[OrganizationInformation] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE [wwp].[OrganizationLocation] CHECK CONSTRAINT [FK_OrganizationLocation_OrganizationInformation]
GO
ALTER TABLE [wwp].[OtherDemographics]  WITH CHECK ADD  CONSTRAINT [FK_OtherDemographics_Country] FOREIGN KEY([CountryOfOriginId])
REFERENCES [wwp].[Country] ([Id])
GO
ALTER TABLE [wwp].[OtherDemographics] CHECK CONSTRAINT [FK_OtherDemographics_Country]
GO
ALTER TABLE [wwp].[OtherDemographics]  WITH CHECK ADD  CONSTRAINT [FK_OtherDemographics_CountyAndTribe] FOREIGN KEY([TribalId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
GO
ALTER TABLE [wwp].[OtherDemographics] CHECK CONSTRAINT [FK_OtherDemographics_CountyAndTribe]
GO
ALTER TABLE [wwp].[OtherDemographics]  WITH CHECK ADD  CONSTRAINT [FK_OtherDemographics_Language] FOREIGN KEY([HomeLanguageId])
REFERENCES [wwp].[Language] ([Id])
GO
ALTER TABLE [wwp].[OtherDemographics] CHECK CONSTRAINT [FK_OtherDemographics_Language]
GO
ALTER TABLE [wwp].[OtherDemographics]  WITH CHECK ADD  CONSTRAINT [FK_OtherDemographics_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[OtherDemographics] CHECK CONSTRAINT [FK_OtherDemographics_Participant]
GO
ALTER TABLE [wwp].[OtherJobInformation]  WITH CHECK ADD  CONSTRAINT [FK_OtherJobInformation_JobFoundMethod] FOREIGN KEY([JobFoundMethodId])
REFERENCES [wwp].[JobFoundMethod] ([Id])
GO
ALTER TABLE [wwp].[OtherJobInformation] CHECK CONSTRAINT [FK_OtherJobInformation_JobFoundMethod]
GO
ALTER TABLE [wwp].[OtherJobInformation]  WITH CHECK ADD  CONSTRAINT [FK_OtherJobInformation_JobSector] FOREIGN KEY([JobSectorId])
REFERENCES [wwp].[JobSector] ([Id])
GO
ALTER TABLE [wwp].[OtherJobInformation] CHECK CONSTRAINT [FK_OtherJobInformation_JobSector]
GO
ALTER TABLE [wwp].[OtherJobInformation]  WITH CHECK ADD  CONSTRAINT [FK_OtherJobInformation_WorkProgram] FOREIGN KEY([WorkProgramId])
REFERENCES [wwp].[WorkProgram] ([Id])
GO
ALTER TABLE [wwp].[OtherJobInformation] CHECK CONSTRAINT [FK_OtherJobInformation_WorkProgram]
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantChildrenRelationshipBridge_Children] FOREIGN KEY([ChildId])
REFERENCES [wwp].[Child] ([Id])
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge] CHECK CONSTRAINT [FK_ParticipantChildrenRelationshipBridge_Children]
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantChildrenRelationshipBridge_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge] CHECK CONSTRAINT [FK_ParticipantChildrenRelationshipBridge_Participant]
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantChildrenRelationshipBridge_Relationship] FOREIGN KEY([RelationshipId])
REFERENCES [wwp].[Relationship] ([Id])
GO
ALTER TABLE [wwp].[ParticipantChildRelationshipBridge] CHECK CONSTRAINT [FK_ParticipantChildrenRelationshipBridge_Relationship]
GO
ALTER TABLE [wwp].[ParticipantContactInfo]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantContactInfo_AddressVerificationTypeLookup] FOREIGN KEY([AddressVerificationTypeLookupId])
REFERENCES [wwp].[AddressVerificationTypeLookup] ([Id])
GO
ALTER TABLE [wwp].[ParticipantContactInfo] CHECK CONSTRAINT [FK_ParticipantContactInfo_AddressVerificationTypeLookup]
GO
ALTER TABLE [wwp].[ParticipantContactInfo]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantContactInfo_AlternateMailingAddress] FOREIGN KEY([AlternateMailingAddressId])
REFERENCES [wwp].[AlternateMailingAddress] ([Id])
GO
ALTER TABLE [wwp].[ParticipantContactInfo] CHECK CONSTRAINT [FK_ParticipantContactInfo_AlternateMailingAddress]
GO
ALTER TABLE [wwp].[ParticipantContactInfo]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantContactInfo_City] FOREIGN KEY([CityAddressId])
REFERENCES [wwp].[City] ([Id])
GO
ALTER TABLE [wwp].[ParticipantContactInfo] CHECK CONSTRAINT [FK_ParticipantContactInfo_City]
GO
ALTER TABLE [wwp].[ParticipantContactInfo]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantContactInfo_CountyAndTribe] FOREIGN KEY([CountyOfResidenceId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
GO
ALTER TABLE [wwp].[ParticipantContactInfo] CHECK CONSTRAINT [FK_ParticipantContactInfo_CountyAndTribe]
GO
ALTER TABLE [wwp].[ParticipantContactInfo]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantContactInfo_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ParticipantContactInfo] CHECK CONSTRAINT [FK_ParticipantContactInfo_Participant]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH NOCHECK ADD  CONSTRAINT [FK_ParticipantEnnrolledProgram_Worker] FOREIGN KEY([LFFEPId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnnrolledProgram_Worker]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantEnrolledProgram_CompletionReason] FOREIGN KEY([CompletionReasonId])
REFERENCES [wwp].[CompletionReason] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnrolledProgram_CompletionReason]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantEnrolledProgram_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnrolledProgram_EnrolledProgram]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantEnrolledProgram_EnrolledProgramStatusCode] FOREIGN KEY([EnrolledProgramStatusCodeId])
REFERENCES [wwp].[EnrolledProgramStatusCode] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnrolledProgram_EnrolledProgramStatusCode]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantEnrolledProgram_Office] FOREIGN KEY([OfficeId])
REFERENCES [wwp].[WWPOffice] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnrolledProgram_Office]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantEnrolledProgram_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnrolledProgram_Participant]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantEnrolledProgram_RequestForAssistance] FOREIGN KEY([RequestForAssistanceId])
REFERENCES [wwp].[RequestForAssistance] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnrolledProgram_RequestForAssistance]
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantEnrolledProgram_Worker] FOREIGN KEY([WorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[ParticipantEnrolledProgram] CHECK CONSTRAINT [FK_ParticipantEnrolledProgram_Worker]
GO
ALTER TABLE [wwp].[ParticipationEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationEntry_Activity] FOREIGN KEY([ActivityId])
REFERENCES [wwp].[Activity] ([Id])
GO
ALTER TABLE [wwp].[ParticipationEntry] CHECK CONSTRAINT [FK_ParticipationEntry_Activity]
GO
ALTER TABLE [wwp].[ParticipationEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationEntry_EmployabilityPlan] FOREIGN KEY([EPId])
REFERENCES [wwp].[EmployabilityPlan] ([Id])
GO
ALTER TABLE [wwp].[ParticipationEntry] CHECK CONSTRAINT [FK_ParticipationEntry_EmployabilityPlan]
GO
ALTER TABLE [wwp].[ParticipationEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationEntry_GoodCauseDeniedReason] FOREIGN KEY([GoodCauseDeniedReasonId])
REFERENCES [wwp].[GoodCauseDeniedReason] ([Id])
GO
ALTER TABLE [wwp].[ParticipationEntry] CHECK CONSTRAINT [FK_ParticipationEntry_GoodCauseDeniedReason]
GO
ALTER TABLE [wwp].[ParticipationEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationEntry_GoodCauseGrantedReason] FOREIGN KEY([GoodCauseGrantedReasonId])
REFERENCES [wwp].[GoodCauseGrantedReason] ([Id])
GO
ALTER TABLE [wwp].[ParticipationEntry] CHECK CONSTRAINT [FK_ParticipationEntry_GoodCauseGrantedReason]
GO
ALTER TABLE [wwp].[ParticipationEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationEntry_NonParticipationReason] FOREIGN KEY([NonParticipationReasonId])
REFERENCES [wwp].[NonParticipationReason] ([Id])
GO
ALTER TABLE [wwp].[ParticipationEntry] CHECK CONSTRAINT [FK_ParticipationEntry_NonParticipationReason]
GO
ALTER TABLE [wwp].[ParticipationEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationEntry_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ParticipationEntry] CHECK CONSTRAINT [FK_ParticipationEntry_Participant]
GO
ALTER TABLE [wwp].[ParticipationEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationEntry_PlacementType] FOREIGN KEY([PlacementTypeId])
REFERENCES [wwp].[PlacementType] ([Id])
GO
ALTER TABLE [wwp].[ParticipationEntry] CHECK CONSTRAINT [FK_ParticipationEntry_PlacementType]
GO
ALTER TABLE [wwp].[ParticipationMakeUpEntry]  WITH CHECK ADD  CONSTRAINT [FK_ParticipationMakeUpEntry_ParticipationEntry] FOREIGN KEY([ParticipationEntryId])
REFERENCES [wwp].[ParticipationEntry] ([Id])
GO
ALTER TABLE [wwp].[ParticipationMakeUpEntry] CHECK CONSTRAINT [FK_ParticipationMakeUpEntry_ParticipationEntry]
GO
ALTER TABLE [wwp].[ParticipationStatus]  WITH CHECK ADD  CONSTRAINT [FK_EnrolledProgramParticipationStatus_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[ParticipationStatus] CHECK CONSTRAINT [FK_EnrolledProgramParticipationStatus_EnrolledProgram]
GO
ALTER TABLE [wwp].[ParticipationStatus]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantProfileStatus_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[ParticipationStatus] CHECK CONSTRAINT [FK_ParticipantProfileStatus_Participant]
GO
ALTER TABLE [wwp].[ParticipationStatus]  WITH CHECK ADD  CONSTRAINT [FK_ParticipantProfileStatus_Status] FOREIGN KEY([StatusId])
REFERENCES [wwp].[ParticipationStatusType] ([Id])
GO
ALTER TABLE [wwp].[ParticipationStatus] CHECK CONSTRAINT [FK_ParticipantProfileStatus_Status]
GO
ALTER TABLE [wwp].[PCCTBridge]  WITH CHECK ADD  CONSTRAINT [FK_PCCTBridge_CommentType] FOREIGN KEY([CommentTypeId])
REFERENCES [wwp].[PinCommentType] ([Id])
GO
ALTER TABLE [wwp].[PCCTBridge] CHECK CONSTRAINT [FK_PCCTBridge_CommentType]
GO
ALTER TABLE [wwp].[PCCTBridge]  WITH CHECK ADD  CONSTRAINT [FK_PCCTBridge_PinComment] FOREIGN KEY([PinCommentId])
REFERENCES [wwp].[PinComment] ([Id])
GO
ALTER TABLE [wwp].[PCCTBridge] CHECK CONSTRAINT [FK_PCCTBridge_PinComment]
GO
ALTER TABLE [wwp].[PendingCharge]  WITH NOCHECK ADD  CONSTRAINT [FK_PendingCharge_Conviction] FOREIGN KEY([LegalSectionId])
REFERENCES [wwp].[LegalIssuesSection] ([Id])
GO
ALTER TABLE [wwp].[PendingCharge] CHECK CONSTRAINT [FK_PendingCharge_Conviction]
GO
ALTER TABLE [wwp].[PendingCharge]  WITH NOCHECK ADD  CONSTRAINT [FK_PendingCharge_ConvictionType] FOREIGN KEY([ConvictionTypeID])
REFERENCES [wwp].[ConvictionType] ([Id])
GO
ALTER TABLE [wwp].[PendingCharge] CHECK CONSTRAINT [FK_PendingCharge_ConvictionType]
GO
ALTER TABLE [wwp].[PEPOtherInformation]  WITH CHECK ADD  CONSTRAINT [FK_PEPOtherInformation_ParticipantEnrolledProgram] FOREIGN KEY([PEPId])
REFERENCES [wwp].[ParticipantEnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[PEPOtherInformation] CHECK CONSTRAINT [FK_PEPOtherInformation_ParticipantEnrolledProgram]
GO
ALTER TABLE [wwp].[PinComment]  WITH CHECK ADD  CONSTRAINT [FK_PinComment_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[PinComment] CHECK CONSTRAINT [FK_PinComment_Participant]
GO
ALTER TABLE [wwp].[PostSecondaryCollege]  WITH NOCHECK ADD  CONSTRAINT [FK_PostSecondaryCollege_PostSecondaryEducationSection] FOREIGN KEY([PostSecondaryEducationSectionId])
REFERENCES [wwp].[PostSecondaryEducationSection] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryCollege] CHECK CONSTRAINT [FK_PostSecondaryCollege_PostSecondaryEducationSection]
GO
ALTER TABLE [wwp].[PostSecondaryCollege]  WITH NOCHECK ADD  CONSTRAINT [FK_PostSecondaryCollege_SchoolCollegeEstablishment] FOREIGN KEY([SchoolCollegeEstablishmentId])
REFERENCES [wwp].[SchoolCollegeEstablishment] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryCollege] CHECK CONSTRAINT [FK_PostSecondaryCollege_SchoolCollegeEstablishment]
GO
ALTER TABLE [wwp].[PostSecondaryDegree]  WITH NOCHECK ADD  CONSTRAINT [FK_PostSecondaryDegree_DegreeType] FOREIGN KEY([DegreeTypeId])
REFERENCES [wwp].[DegreeType] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryDegree] CHECK CONSTRAINT [FK_PostSecondaryDegree_DegreeType]
GO
ALTER TABLE [wwp].[PostSecondaryDegree]  WITH NOCHECK ADD  CONSTRAINT [FK_PostSecondaryDegree_PostSecondaryEducationSection] FOREIGN KEY([PostSecondaryEducationSectionId])
REFERENCES [wwp].[PostSecondaryEducationSection] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryDegree] CHECK CONSTRAINT [FK_PostSecondaryDegree_PostSecondaryEducationSection]
GO
ALTER TABLE [wwp].[PostSecondaryEducationSection]  WITH CHECK ADD  CONSTRAINT [FK_PostSecondaryEducationSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryEducationSection] CHECK CONSTRAINT [FK_PostSecondaryEducationSection_Participant]
GO
ALTER TABLE [wwp].[PostSecondaryLicense]  WITH NOCHECK ADD  CONSTRAINT [FK_PostSecondaryLicense_LiscenseType] FOREIGN KEY([LicenseTypeId])
REFERENCES [wwp].[LicenseType] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryLicense] CHECK CONSTRAINT [FK_PostSecondaryLicense_LiscenseType]
GO
ALTER TABLE [wwp].[PostSecondaryLicense]  WITH NOCHECK ADD  CONSTRAINT [FK_PostSecondaryLicense_PolarLookup] FOREIGN KEY([ValidInWIPolarLookupId])
REFERENCES [wwp].[PolarLookup] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryLicense] CHECK CONSTRAINT [FK_PostSecondaryLicense_PolarLookup]
GO
ALTER TABLE [wwp].[PostSecondaryLicense]  WITH NOCHECK ADD  CONSTRAINT [FK_PostSecondaryLicense_PostSecondaryEducationSection] FOREIGN KEY([PostSecondaryEducationSectionId])
REFERENCES [wwp].[PostSecondaryEducationSection] ([Id])
GO
ALTER TABLE [wwp].[PostSecondaryLicense] CHECK CONSTRAINT [FK_PostSecondaryLicense_PostSecondaryEducationSection]
GO
ALTER TABLE [wwp].[RecentParticipant]  WITH CHECK ADD  CONSTRAINT [FK_RecentParticipant_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[RecentParticipant] CHECK CONSTRAINT [FK_RecentParticipant_Participant]
GO
ALTER TABLE [wwp].[RecentParticipant]  WITH CHECK ADD  CONSTRAINT [FK_RecentParticipant_Worker] FOREIGN KEY([WorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[RecentParticipant] CHECK CONSTRAINT [FK_RecentParticipant_Worker]
GO
ALTER TABLE [wwp].[RequestForAssistance]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistance_CountyOfResidence] FOREIGN KEY([CountyOfResidenceId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
ON DELETE SET NULL
GO
ALTER TABLE [wwp].[RequestForAssistance] CHECK CONSTRAINT [FK_RequestForAssistance_CountyOfResidence]
GO
ALTER TABLE [wwp].[RequestForAssistance]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistance_EnrolledProgram] FOREIGN KEY([EnrolledProgramId])
REFERENCES [wwp].[EnrolledProgram] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistance] CHECK CONSTRAINT [FK_RequestForAssistance_EnrolledProgram]
GO
ALTER TABLE [wwp].[RequestForAssistance]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistance_Office] FOREIGN KEY([OfficeId])
REFERENCES [wwp].[WWPOffice] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistance] CHECK CONSTRAINT [FK_RequestForAssistance_Office]
GO
ALTER TABLE [wwp].[RequestForAssistance]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistance_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistance] CHECK CONSTRAINT [FK_RequestForAssistance_Participant]
GO
ALTER TABLE [wwp].[RequestForAssistance]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistance_RequestForAssistanceStatus] FOREIGN KEY([RequestForAssistanceStatusId])
REFERENCES [wwp].[RequestForAssistanceStatus] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistance] CHECK CONSTRAINT [FK_RequestForAssistance_RequestForAssistanceStatus]
GO
ALTER TABLE [wwp].[RequestForAssistanceChild]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistanceChild_Child] FOREIGN KEY([ChildId])
REFERENCES [wwp].[Child] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistanceChild] CHECK CONSTRAINT [FK_RequestForAssistanceChild_Child]
GO
ALTER TABLE [wwp].[RequestForAssistanceChild]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistanceChild_RequestForAssistance] FOREIGN KEY([RequestForAssistanceId])
REFERENCES [wwp].[RequestForAssistance] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistanceChild] CHECK CONSTRAINT [FK_RequestForAssistanceChild_RequestForAssistance]
GO
ALTER TABLE [wwp].[RequestForAssistancePopulationTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistancePopulationTypeBridge_PopulationType] FOREIGN KEY([PopulationTypeId])
REFERENCES [wwp].[PopulationType] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistancePopulationTypeBridge] CHECK CONSTRAINT [FK_RequestForAssistancePopulationTypeBridge_PopulationType]
GO
ALTER TABLE [wwp].[RequestForAssistancePopulationTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistancePopulationTypeBridge_RequestForAssistance] FOREIGN KEY([RequestForAssistanceId])
REFERENCES [wwp].[RequestForAssistance] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistancePopulationTypeBridge] CHECK CONSTRAINT [FK_RequestForAssistancePopulationTypeBridge_RequestForAssistance]
GO
ALTER TABLE [wwp].[RequestForAssistanceRuleReason]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistanceRuleReason_RequestForAssistance] FOREIGN KEY([RequestForAssistanceId])
REFERENCES [wwp].[RequestForAssistance] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistanceRuleReason] CHECK CONSTRAINT [FK_RequestForAssistanceRuleReason_RequestForAssistance]
GO
ALTER TABLE [wwp].[RequestForAssistanceRuleReason]  WITH CHECK ADD  CONSTRAINT [FK_RequestForAssistanceRuleReason_RuleReason] FOREIGN KEY([RuleReasonId])
REFERENCES [wwp].[RuleReason] ([Id])
GO
ALTER TABLE [wwp].[RequestForAssistanceRuleReason] CHECK CONSTRAINT [FK_RequestForAssistanceRuleReason_RuleReason]
GO
ALTER TABLE [wwp].[SchoolCollegeEstablishment]  WITH NOCHECK ADD  CONSTRAINT [FK_SchoolCollegeEstablishment_City] FOREIGN KEY([CityId])
REFERENCES [wwp].[City] ([Id])
GO
ALTER TABLE [wwp].[SchoolCollegeEstablishment] CHECK CONSTRAINT [FK_SchoolCollegeEstablishment_City]
GO
ALTER TABLE [wwp].[State]  WITH NOCHECK ADD  CONSTRAINT [FK_State_Country] FOREIGN KEY([CountryId])
REFERENCES [wwp].[Country] ([Id])
GO
ALTER TABLE [wwp].[State] CHECK CONSTRAINT [FK_State_Country]
GO
ALTER TABLE [wwp].[SupportiveService]  WITH CHECK ADD  CONSTRAINT [FK_SupportiveService_EmployabilityPlan] FOREIGN KEY([EmployabilityPlanId])
REFERENCES [wwp].[EmployabilityPlan] ([Id])
GO
ALTER TABLE [wwp].[SupportiveService] CHECK CONSTRAINT [FK_SupportiveService_EmployabilityPlan]
GO
ALTER TABLE [wwp].[SupportiveService]  WITH CHECK ADD  CONSTRAINT [FK_SupportiveService_SupportiveServiceType] FOREIGN KEY([SupportiveServiceTypeId])
REFERENCES [wwp].[SupportiveServiceType] ([Id])
GO
ALTER TABLE [wwp].[SupportiveService] CHECK CONSTRAINT [FK_SupportiveService_SupportiveServiceType]
GO
ALTER TABLE [wwp].[TimeLimit]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimit_ChangeReason] FOREIGN KEY([ChangeReasonId])
REFERENCES [wwp].[ChangeReason] ([Id])
GO
ALTER TABLE [wwp].[TimeLimit] CHECK CONSTRAINT [FK_TimeLimit_ChangeReason]
GO
ALTER TABLE [wwp].[TimeLimit]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimit_Participant] FOREIGN KEY([ParticipantID])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[TimeLimit] CHECK CONSTRAINT [FK_TimeLimit_Participant]
GO
ALTER TABLE [wwp].[TimeLimit]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimit_TimeLimitState] FOREIGN KEY([StateId])
REFERENCES [wwp].[TimeLimitState] ([Id])
GO
ALTER TABLE [wwp].[TimeLimit] CHECK CONSTRAINT [FK_TimeLimit_TimeLimitState]
GO
ALTER TABLE [wwp].[TimeLimit]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimit_TimeLimitType] FOREIGN KEY([TimeLimitTypeId])
REFERENCES [wwp].[TimeLimitType] ([Id])
GO
ALTER TABLE [wwp].[TimeLimit] CHECK CONSTRAINT [FK_TimeLimit_TimeLimitType]
GO
ALTER TABLE [wwp].[TimeLimitExtension]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimitExtension_ApprovalReason] FOREIGN KEY([ApprovalReasonId])
REFERENCES [wwp].[ApprovalReason] ([Id])
GO
ALTER TABLE [wwp].[TimeLimitExtension] CHECK CONSTRAINT [FK_TimeLimitExtension_ApprovalReason]
GO
ALTER TABLE [wwp].[TimeLimitExtension]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimitExtension_DeleteReason] FOREIGN KEY([DeleteReasonId])
REFERENCES [wwp].[DeleteReason] ([Id])
GO
ALTER TABLE [wwp].[TimeLimitExtension] CHECK CONSTRAINT [FK_TimeLimitExtension_DeleteReason]
GO
ALTER TABLE [wwp].[TimeLimitExtension]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimitExtension_DenialReason] FOREIGN KEY([DenialReasonId])
REFERENCES [wwp].[DenialReason] ([Id])
GO
ALTER TABLE [wwp].[TimeLimitExtension] CHECK CONSTRAINT [FK_TimeLimitExtension_DenialReason]
GO
ALTER TABLE [wwp].[TimeLimitExtension]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimitExtension_ExtensionDecision] FOREIGN KEY([ExtensionDecisionId])
REFERENCES [wwp].[ExtensionDecision] ([Id])
GO
ALTER TABLE [wwp].[TimeLimitExtension] CHECK CONSTRAINT [FK_TimeLimitExtension_ExtensionDecision]
GO
ALTER TABLE [wwp].[TimeLimitExtension]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimitExtension_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[TimeLimitExtension] CHECK CONSTRAINT [FK_TimeLimitExtension_Participant]
GO
ALTER TABLE [wwp].[TimeLimitExtension]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimitExtension_TimeLimitType] FOREIGN KEY([TimeLimitTypeId])
REFERENCES [wwp].[TimeLimitType] ([Id])
GO
ALTER TABLE [wwp].[TimeLimitExtension] CHECK CONSTRAINT [FK_TimeLimitExtension_TimeLimitType]
GO
ALTER TABLE [wwp].[TimeLimitSummary]  WITH CHECK ADD  CONSTRAINT [FK_TimeLimitSummary_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[TimeLimitSummary] CHECK CONSTRAINT [FK_TimeLimitSummary_Participant]
GO
ALTER TABLE [wwp].[TJTMJRfaDetails]  WITH CHECK ADD  CONSTRAINT [FK_TJTMJRfaDetails_Organization] FOREIGN KEY([ContractorId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [wwp].[TJTMJRfaDetails] CHECK CONSTRAINT [FK_TJTMJRfaDetails_Organization]
GO
ALTER TABLE [wwp].[TJTMJRfaDetails]  WITH CHECK ADD  CONSTRAINT [FK_TJTMJRfaDetails_RequestForAssistance] FOREIGN KEY([RequestForAssistanceId])
REFERENCES [wwp].[RequestForAssistance] ([Id])
GO
ALTER TABLE [wwp].[TJTMJRfaDetails] CHECK CONSTRAINT [FK_TJTMJRfaDetails_RequestForAssistance]
GO
ALTER TABLE [wwp].[TransportationSection]  WITH CHECK ADD  CONSTRAINT [FK_TransportationSection_DriversLicenseInvalidReasonType] FOREIGN KEY([DriversLicenseInvalidReasonId])
REFERENCES [wwp].[DriversLicenseInvalidReasonType] ([Id])
GO
ALTER TABLE [wwp].[TransportationSection] CHECK CONSTRAINT [FK_TransportationSection_DriversLicenseInvalidReasonType]
GO
ALTER TABLE [wwp].[TransportationSection]  WITH CHECK ADD  CONSTRAINT [FK_TransportationSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[TransportationSection] CHECK CONSTRAINT [FK_TransportationSection_Participant]
GO
ALTER TABLE [wwp].[TransportationSection]  WITH CHECK ADD  CONSTRAINT [FK_TransportationSection_State] FOREIGN KEY([DriversLicenseStateId])
REFERENCES [wwp].[State] ([Id])
GO
ALTER TABLE [wwp].[TransportationSection] CHECK CONSTRAINT [FK_TransportationSection_State]
GO
ALTER TABLE [wwp].[TransportationSection]  WITH CHECK ADD  CONSTRAINT [FK_TransportationSection_YesNoUnknownLookup_IsVehicleRegistrationCurrent] FOREIGN KEY([IsVehicleRegistrationCurrentId])
REFERENCES [wwp].[YesNoUnknownLookup] ([Id])
GO
ALTER TABLE [wwp].[TransportationSection] CHECK CONSTRAINT [FK_TransportationSection_YesNoUnknownLookup_IsVehicleRegistrationCurrent]
GO
ALTER TABLE [wwp].[TransportationSection]  WITH CHECK ADD  CONSTRAINT [FK_TransportationSection_YesNoUnknownLookup_VehicleInsured] FOREIGN KEY([IsVehicleInsuredId])
REFERENCES [wwp].[YesNoUnknownLookup] ([Id])
GO
ALTER TABLE [wwp].[TransportationSection] CHECK CONSTRAINT [FK_TransportationSection_YesNoUnknownLookup_VehicleInsured]
GO
ALTER TABLE [wwp].[TransportationSectionMethodBridge]  WITH CHECK ADD  CONSTRAINT [FK_TransportationSectionMethodBridge_TransportationSection] FOREIGN KEY([TransportationSectionId])
REFERENCES [wwp].[TransportationSection] ([Id])
GO
ALTER TABLE [wwp].[TransportationSectionMethodBridge] CHECK CONSTRAINT [FK_TransportationSectionMethodBridge_TransportationSection]
GO
ALTER TABLE [wwp].[TransportationSectionMethodBridge]  WITH CHECK ADD  CONSTRAINT [FK_TransportationSectionMethodBridge_TransportationType] FOREIGN KEY([TransporationTypeId])
REFERENCES [wwp].[TransportationType] ([Id])
GO
ALTER TABLE [wwp].[TransportationSectionMethodBridge] CHECK CONSTRAINT [FK_TransportationSectionMethodBridge_TransportationType]
GO
ALTER TABLE [wwp].[WageHour]  WITH CHECK ADD  CONSTRAINT [FK_WageHour_BeginRate_IntervalType] FOREIGN KEY([PastBeginPayRateIntervalId])
REFERENCES [wwp].[IntervalType] ([Id])
GO
ALTER TABLE [wwp].[WageHour] CHECK CONSTRAINT [FK_WageHour_BeginRate_IntervalType]
GO
ALTER TABLE [wwp].[WageHour]  WITH CHECK ADD  CONSTRAINT [FK_WageHour_CurrentPayRate_IntervalType] FOREIGN KEY([CurrentPayRateIntervalId])
REFERENCES [wwp].[IntervalType] ([Id])
GO
ALTER TABLE [wwp].[WageHour] CHECK CONSTRAINT [FK_WageHour_CurrentPayRate_IntervalType]
GO
ALTER TABLE [wwp].[WageHour]  WITH CHECK ADD  CONSTRAINT [FK_WageHour_EndRate_IntervalType] FOREIGN KEY([PastEndPayRateIntervalId])
REFERENCES [wwp].[IntervalType] ([Id])
GO
ALTER TABLE [wwp].[WageHour] CHECK CONSTRAINT [FK_WageHour_EndRate_IntervalType]
GO
ALTER TABLE [wwp].[WageHourHistory]  WITH CHECK ADD  CONSTRAINT [FK_WageHourHistory_IntervalType] FOREIGN KEY([PayRateIntervalId])
REFERENCES [wwp].[IntervalType] ([Id])
GO
ALTER TABLE [wwp].[WageHourHistory] CHECK CONSTRAINT [FK_WageHourHistory_IntervalType]
GO
ALTER TABLE [wwp].[WageHourHistory]  WITH CHECK ADD  CONSTRAINT [FK_WageHourHistory_WageHour] FOREIGN KEY([WageHourId])
REFERENCES [wwp].[WageHour] ([Id])
GO
ALTER TABLE [wwp].[WageHourHistory] CHECK CONSTRAINT [FK_WageHourHistory_WageHour]
GO
ALTER TABLE [wwp].[WageHourHistoryWageTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_WageHourHistoryJobActionBridge_WageHourHistory] FOREIGN KEY([WageHourHistoryId])
REFERENCES [wwp].[WageHourHistory] ([Id])
GO
ALTER TABLE [wwp].[WageHourHistoryWageTypeBridge] CHECK CONSTRAINT [FK_WageHourHistoryJobActionBridge_WageHourHistory]
GO
ALTER TABLE [wwp].[WageHourHistoryWageTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_WageHourHistoryWageTypeBridge_WageType] FOREIGN KEY([WageTypeId])
REFERENCES [wwp].[WageType] ([Id])
GO
ALTER TABLE [wwp].[WageHourHistoryWageTypeBridge] CHECK CONSTRAINT [FK_WageHourHistoryWageTypeBridge_WageType]
GO
ALTER TABLE [wwp].[WageHourWageTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_WageHourJobActionBridge_WageHour] FOREIGN KEY([WageHourId])
REFERENCES [wwp].[WageHour] ([Id])
GO
ALTER TABLE [wwp].[WageHourWageTypeBridge] CHECK CONSTRAINT [FK_WageHourJobActionBridge_WageHour]
GO
ALTER TABLE [wwp].[WageHourWageTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_WageHourWageTypeBridge_WageType] FOREIGN KEY([WageTypeId])
REFERENCES [wwp].[WageType] ([Id])
GO
ALTER TABLE [wwp].[WageHourWageTypeBridge] CHECK CONSTRAINT [FK_WageHourWageTypeBridge_WageType]
GO
ALTER TABLE [wwp].[Worker]  WITH CHECK ADD  CONSTRAINT [FK_Worker_Organization] FOREIGN KEY([OrganizationId])
REFERENCES [wwp].[Organization] ([Id])
GO
ALTER TABLE [wwp].[Worker] CHECK CONSTRAINT [FK_Worker_Organization]
GO
ALTER TABLE [wwp].[WorkerContactInfo]  WITH CHECK ADD  CONSTRAINT [FK_WorkerContactInfot_Worker] FOREIGN KEY([WorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[WorkerContactInfo] CHECK CONSTRAINT [FK_WorkerContactInfot_Worker]
GO
ALTER TABLE [wwp].[WorkerParticipantBridge]  WITH NOCHECK ADD  CONSTRAINT [FK_WorkerParticipantBridge_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[WorkerParticipantBridge] CHECK CONSTRAINT [FK_WorkerParticipantBridge_Participant]
GO
ALTER TABLE [wwp].[WorkerParticipantBridge]  WITH NOCHECK ADD  CONSTRAINT [FK_WorkerParticipantBridge_Worker] FOREIGN KEY([WorkerId])
REFERENCES [wwp].[Worker] ([Id])
GO
ALTER TABLE [wwp].[WorkerParticipantBridge] CHECK CONSTRAINT [FK_WorkerParticipantBridge_Worker]
GO
ALTER TABLE [wwp].[WorkHistorySection]  WITH NOCHECK ADD  CONSTRAINT [FK_WorkHistory_EmploymentStatusType] FOREIGN KEY([EmploymentStatusTypeId])
REFERENCES [wwp].[EmploymentStatusType] ([Id])
GO
ALTER TABLE [wwp].[WorkHistorySection] CHECK CONSTRAINT [FK_WorkHistory_EmploymentStatusType]
GO
ALTER TABLE [wwp].[WorkHistorySection]  WITH CHECK ADD  CONSTRAINT [FK_WorkHistorySection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[WorkHistorySection] CHECK CONSTRAINT [FK_WorkHistorySection_Participant]
GO
ALTER TABLE [wwp].[WorkHistorySection]  WITH CHECK ADD  CONSTRAINT [FK_WorkHistorySection_YesNoUnknownLookup] FOREIGN KEY([HasCareerAssessment])
REFERENCES [wwp].[YesNoUnknownLookup] ([Id])
GO
ALTER TABLE [wwp].[WorkHistorySection] CHECK CONSTRAINT [FK_WorkHistorySection_YesNoUnknownLookup]
GO
ALTER TABLE [wwp].[WorkHistorySectionEmploymentPreventionTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_WorkHistorySectionEmploymentPreventionTypeBridge_EmploymentPreventionType] FOREIGN KEY([EmploymentPreventionTypeId])
REFERENCES [wwp].[EmploymentPreventionType] ([Id])
GO
ALTER TABLE [wwp].[WorkHistorySectionEmploymentPreventionTypeBridge] CHECK CONSTRAINT [FK_WorkHistorySectionEmploymentPreventionTypeBridge_EmploymentPreventionType]
GO
ALTER TABLE [wwp].[WorkHistorySectionEmploymentPreventionTypeBridge]  WITH CHECK ADD  CONSTRAINT [FK_WorkHistorySectionEmploymentPreventionTypeBridge_WorkHistorySection] FOREIGN KEY([WorkHistorySectionId])
REFERENCES [wwp].[WorkHistorySection] ([Id])
GO
ALTER TABLE [wwp].[WorkHistorySectionEmploymentPreventionTypeBridge] CHECK CONSTRAINT [FK_WorkHistorySectionEmploymentPreventionTypeBridge_WorkHistorySection]
GO
ALTER TABLE [wwp].[WorkProgramSection]  WITH CHECK ADD  CONSTRAINT [FK_WorkProgramSection_Participant] FOREIGN KEY([ParticipantId])
REFERENCES [wwp].[Participant] ([Id])
GO
ALTER TABLE [wwp].[WorkProgramSection] CHECK CONSTRAINT [FK_WorkProgramSection_Participant]
GO
ALTER TABLE [wwp].[WWPOffice]  WITH CHECK ADD  CONSTRAINT [FK_WWPOffice_ContractArea] FOREIGN KEY([ContractAreaId])
REFERENCES [wwp].[ContractArea] ([Id])
GO
ALTER TABLE [wwp].[WWPOffice] CHECK CONSTRAINT [FK_WWPOffice_ContractArea]
GO
ALTER TABLE [wwp].[WWPOffice]  WITH CHECK ADD  CONSTRAINT [FK_WWPOffice_CountyAndTribe] FOREIGN KEY([CountyandTribeId])
REFERENCES [wwp].[CountyAndTribe] ([Id])
GO
ALTER TABLE [wwp].[WWPOffice] CHECK CONSTRAINT [FK_WWPOffice_CountyAndTribe]
GO
/****** Object:  StoredProcedure [tbd].[SP_CWWReferredParticipant]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [tbd].[SP_CWWReferredParticipant]
(
	@EntSecOrgCode VARCHAR(10),
	@SchemaName VARCHAR(20)
) as
begin

	declare @Statement1 as varchar(max);
	declare @Statement2 as varchar(max);
	declare @Statement3 as varchar(max);
	declare @Statement4 as varchar(max) ;
	declare @Statement4A as varchar(max) ;
	declare @SQLSelect as varchar(max);
	declare @SQLDelete as varchar(max);
	declare @DB2DBName as varchar(100) ;
	declare @LSDBName as varchar(100) ;
	declare @CountyNumber as varchar(500) ;
	declare @TableName as varchar(200) ;

---
  SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')     THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
                                         WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                         WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END
---

SELECT @CountyNumber = CASE WHEN @EntSecOrgCode IN ('RS','AW','UMS','MAX') THEN '(40)'
                            WHEN @EntSecOrgCode = 'RC' THEN '(45,64,66,67,30,51)'
                            WHEN @EntSecOrgCode = 'FSC'  THEN '(22,23,25,28,33,53,11,13,14,52,56,35,50,60,63,71,58,24,39,68,69,01,29,34,37,43,49,72,19,21,05,15,38,42,20,08,31,36,44,70,59)'
                            WHEN @EntSecOrgCode = 'WCI' THEN '(06,27,32,41,46,61,62,12)'
                            WHEN @EntSecOrgCode = 'WRI' THEN '(02,04,26,54,57,10,03,07,09,16,17,18,47,48,55,65)'
                                     END

-------

print @CountyNumber

print 'sqlselect'


 

	DECLARE @TempInfo TABLE (
		 PinNumber [decimal](10, 0)
		,FirstName VARCHAR(50)
		,MiddleInitialName CHAR(1)
		,LastName VARCHAR(50)
		,SuffixName CHAR(3)
		,DOBDate DATE
		,CountyNumber SMALLINT
		,OfficeNumber SMALLINT
		,ReferralStatus VARCHAR(50)
		,WPReferralDate DATE
		,ProgramCode VARCHAR(50)
		--,LearnFareStatus BIT
		,CASENumber DECIMAL(10, 0)
		,MFWorkerId VARCHAR(6)
		 ,ConfidentialSwitch BIT
	 ,MFConfidentialWorker VARCHAR(06) 
		)



set @Statement1 = 'select  PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   DOBDate,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   CASE WHEN LearnFareStatus = 1 THEN  ''LEARNFARE''
						        WHEN ProgramCode1    = ''WW'' THEN ''W-2''
									end as ProgramCode ,
						   CASENumber,
						   MFWorkerId 
						   			     
FROM OPENQUERY('+@LSDBName+', ''
 SELECT 	B.PIN_NUM        as PinNumber,
            C.FIRST_NAM      as FirstName,
			C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
			C.LAST_NAM as LastName,
			C.SUFFIX_NAM as SuffixName,
			C.DOB_DT as DOBDate,
			B.COUNTY_NUM as CountyNumber,
			B.OFFICE_NUM as OfficeNumber,
			CASE B.WP_SYSTEM_STS_CD WHEN ''''E'''' THEN ''''ENROLLED''''   
			                        WHEN ''''P'''' THEN ''''PEND''''
									WHEN ''''S'''' THEN ''''SCHEDULED''''
									WHEN ''''C'''' THEN ''''DISENROLLED''''
									WHEN ''''R'''' THEN ''''REFERRED''''
									END  as ReferralStatus,
			B.WP_REFERRAL_DT as WPReferralDate,
 	        B.PROGRAM_CD as ProgramCode1,
			CASE B.CURRENT_REG_CD WHEN ''''L'''' THEN ''''1''''
			                       ELSE ''''0'''' END as LearnFareStatus,
			B.CASE_NUM as CASENumber,
			D.ASGN_FEP_ID as MFWorkerId 
		   	            
   FROM  '+@DB2DBName+'.T0018_WP_INDV AS B  
          JOIN '+@DB2DBName+'.T0011_INDIVIDUAL AS C ON B.PIN_NUM = C.PIN_NUM
             LEFT OUTER JOIN  '+@DB2DBName+'.T2536_WP_FEP_WRKR D ON B.CASE_NUM     = D.CASE_NUM    
                                               AND D.HISTORY_CD = 0                                            
  WHERE  B.PIN_NUM > 0   
  	AND B.COUNTY_NUM in '+@CountyNumber+'  
	 AND B.OFFICE_NUM = 1581
	AND B.WP_SYSTEM_STS_CD IN (''''R'''')   
	AND B.PROGRAM_CD NOT IN (''''FS'''',''''  '''',''''ADC'''',''''ZZ'''')                                                                                                            
   WITH UR ; ''                                  
  )'
  PRINT @Statement1

 PRINT 'AFTER TRY BEFORE EXEC'

print 'step3'


    Insert into @TempInfo (PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   DOBDate,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   CASENumber,
						   MFWorkerId 
						    
						   )
     EXEC (@Statement1)

set @Statement2 = 'select  PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   DOBDate,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   CASE WHEN LearnFareStatus = 1 THEN  ''LEARNFARE''
						        WHEN ProgramCode1    = ''WW'' THEN ''W-2''
									end as ProgramCode ,
						   CASENumber,
						   MFWorkerId 
						   			     
FROM OPENQUERY('+@LSDBName+', ''SELECT B.PIN_NUM  as PinNumber,    
									C.FIRST_NAM      as FirstName,
									C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
									C.LAST_NAM as LastName,
									C.SUFFIX_NAM as SuffixName,   
									C.DOB_DT as DOBDate,    
									B.COUNTY_NUM as CountyNumber,
			                        B.OFFICE_NUM as OfficeNumber,    
									''''PENDING'''' as ReferralStatus,
									B.WP_REFERRAL_DT as WPReferralDate,
 	                                B.PROGRAM_CD as ProgramCode1  ,
									CASE B.REFERRAL_REG_CD WHEN ''''L'''' THEN ''''1''''
			                       ELSE ''''0'''' END as LearnFareStatus,
								    B.CASE_NUM as CASENumber,
									D.ASGN_FEP_ID as MFWorkerId  
			                      
							 FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR  AS B  
								   JOIN '+@DB2DBName+'.T0011_INDIVIDUAL AS C ON B.PIN_NUM = C.PIN_NUM
                        LEFT OUTER JOIN '+@DB2DBName+'.T2536_WP_FEP_WRKR D ON B.CASE_NUM     = D.CASE_NUM    
                                                          AND D.HISTORY_CD = 0                
							  WHERE  B.PIN_NUM > 0   
								AND C.PIN_NUM = B.PIN_NUM
								AND B.COUNTY_NUM in '+@CountyNumber+'    
								AND B.OFFICE_NUM = 1581
								AND B.PROGRAM_CD NOT IN (''''FS'''','''' '''',''''ADC'''',''''ZZ'''')
								''
								  )'
  PRINT @Statement2

 PRINT 'AFTER TRY BEFORE EXEC'


     Insert into @TempInfo (PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   DOBDate,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   CASENumber,
						   MFWorkerId 
						    
						   )
     EXEC (@Statement2)




set @Statement3 = 'select  PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   DOBDate,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   CASE WHEN LearnFareStatus = 1 THEN  ''LEARNFARE''
						        WHEN ProgramCode1    = ''WW'' THEN ''W-2''
									end as ProgramCode ,
						   CASENumber,
						   MFWorkerId 
						   			     
FROM OPENQUERY('+@LSDBName+', ''
 SELECT 	B.PIN_NUM        as PinNumber,
            C.FIRST_NAM      as FirstName,
			C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
			C.LAST_NAM as LastName,
			C.SUFFIX_NAM as SuffixName,
			C.DOB_DT as DOBDate,
			B.COUNTY_NUM as CountyNumber,
			B.OFFICE_NUM as OfficeNumber,
			CASE B.WP_SYSTEM_STS_CD WHEN ''''E'''' THEN ''''ENROLLED''''   
			                        WHEN ''''P'''' THEN ''''PEND''''
									WHEN ''''S'''' THEN ''''SCHEDULED''''
									WHEN ''''C'''' THEN ''''DISENROLLED''''
									WHEN ''''R'''' THEN ''''REFERRED''''
									END  as ReferralStatus,
			B.WP_REFERRAL_DT as WPReferralDate,
 	        B.PROGRAM_CD as ProgramCode1,
			CASE B.CURRENT_REG_CD WHEN ''''L'''' THEN ''''1''''
			                       ELSE ''''0'''' END as LearnFareStatus,
			B.CASE_NUM as CASENumber,
			D.ASGN_FEP_ID as MFWorkerId 
		   	            
   FROM  '+@DB2DBName+'.T0018_WP_INDV AS B  
          JOIN '+@DB2DBName+'.T0011_INDIVIDUAL AS C ON B.PIN_NUM = C.PIN_NUM
             LEFT OUTER JOIN  '+@DB2DBName+'.T2536_WP_FEP_WRKR D ON B.CASE_NUM     = D.CASE_NUM    
                                               AND D.HISTORY_CD = 0                                            
  WHERE  B.PIN_NUM > 0   
  	AND B.COUNTY_NUM in '+@CountyNumber+'   
	AND B.WP_SYSTEM_STS_CD IN (''''E'''')   
	AND B.PROGRAM_CD IN (''''WW'''')                        
	AND B.CF_RFA_DT <> ''''9999-12-31''''      
	AND CF_RFA_NUM <> 0              
    AND CF_STS_CD = ''''O''''
	AND TMJ_RFA_NUM <> 0                                                                                 
   WITH UR ; ''                                  
  )'
  PRINT @Statement3

 PRINT 'AFTER TRY BEFORE EXEC'

print 'step3'


    Insert into @TempInfo (PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   DOBDate,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   CASENumber,
						   MFWorkerId 
						    
						   )
     EXEC (@Statement3)


	 --UPDATE @TempInfo
	 --set ReferralStatus = 'Referred'
	 
	 --WHERE ReferralStatus = 'ENROLLED'
	 --  and  a.PinNumber = b.PinNumber
	 -- AND NOT EXISTS ( SELECT 1 
	 --                     FROM WWP.PARTICIPANTENROLLEDPROGRAM c
		--				  WHERE c.ParticipantId = b.id
		--		    	   and  c.EnrolledProgramId in (1,2,3,4,5,6,7,8,11)						
		--				)
	   --and  exists ( select ParticipantId FROM WWP.PARTICIPANTENROLLEDPROGRAM d
				--		  WHERE d.ParticipantId  =b.id
				--		   and  d.EnrolledProgramId = 10
				--   	       and (  d.EnrollmentDate is not null or d.EnrollmentDate <> '9999-12-31' )
				--  )

--SELECT * FROM @TempInfo





print 'step3'



  select A.*, W.FirstName WorkerFirstName, W.MiddleInitial WorkerMiddleInitial, W.LastName WorkerLastName, ROW_NUMBER () OVER(ORDER BY PinNumber)  AS ID
  FROM  @TempInfo A
	LEFT JOIN wwp.Worker W
		ON A.MFWorkerId = W.MFUserId
  ORDER BY A.WPReferralDate DESC

--set @Statement2 = 'select  PinNumber,
--                           FirstName,
--						   MiddleInitialName,						  
--						   LastName,
--						   SuffixName,
--						   DOBDate,
--						   CountyNumber,
--						   OfficeNumber,
--						   ReferralStatus,
--						   WPReferralDate,
--						   ProgramCode,
--						   0 AS LearnFareStatus,
--						   CaseNumber,
--						   '' '' AS MFWorkerId,
--	                       ConfidentialSwitch,
--	                       MFConfidentialWorker
--FROM OPENQUERY('+@LSDBName+', ''SELECT B.PIN_NUM  as PinNumber,    
--									C.FIRST_NAM      as FirstName,
--									C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
--									C.LAST_NAM as LastName,
--									C.SUFFIX_NAM as SuffixName,   
--									C.DOB_DT as DOBDate,    
--									B.COUNTY_NUM as CountyNumber,
--			                        B.OFFICE_NUM as OfficeNumber,    
--									''''PENDING'''' as ReferralStatus,
--									B.WP_REFERRAL_DT as WPReferralDate,
-- 	                                B.PROGRAM_CD as ProgramCode  ,
--									CASE B.REFERRAL_REG_CD WHEN ''''L'''' THEN ''''1''''
--			                       ELSE ''''0'''' END as LearnFareStatus,
--								    B.CASE_NUM as CASENumber,
--			                       CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN ''''1''''
--			                                           WHEN ''''N'''' THEN ''''0'''' END as ConfidentialSwitch ,
--			                        CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN E.USER_ID 
--			                                            WHEN ''''N'''' THEN '''' ''''
--							                          END as MFConfidentialWorker      
--							 FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR  AS B  ,
--								   '+@DB2DBName+'.T0011_INDIVIDUAL AS C  ,
--								   '+@DB2DBName+'.T0212_CS_CASELOAd AS D,
--		                           '+@DB2DBName+'.T0002_CASELOAD_WKR E                 
--							  WHERE  B.PIN_NUM > 0   
--								AND C.PIN_NUM = B.PIN_NUM
--								AND B.COUNTY_NUM in '+@CountyNumber+'    
--								AND B.PROGRAM_CD NOT IN (''''FS'''','''' '''',''''ADC'''')
--								AND D.RFA_CASE_NUM  = B.CASE_NUM  
--	                            AND E.CASELOAD_NUM = D.CASELOAD_NUM 
--	                            AND E.WORKER_TYPE_IND = ''''P''''                                                           
--							  ORDER BY B.WP_REFERRAL_DT DESC                                                                                                
--							   WITH UR ; '')                                  
-- '


    --Insert into @TempInfo (PinNumber,
    --                       FirstName,
				--		   MiddleInitialName,						  
				--		   LastName,
				--		   SuffixName,
				--		   DOBDate,
				--		   CountyNumber,
				--		   OfficeNumber,
				--		   ReferralStatus,
				--		   WPReferralDate,
				--		   ProgramCode,
				--		   LearnFareStatus,
				--		   CASENumber,
				--		   MFWorkerId ,
				--		   ConfidentialSwitch,
				--		   MFConfidentialWorker)
    --EXEC (@Statement2)
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---  UPDATE LEARNFARE STATUS.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- UPDATE @TempInfo 
--    SET ProgramCode = 'LF'
--	WHERE LearnFareStatus = 1


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---- FINAL SELECTION
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	

   --   SELECT A.PinNumber,
	  -- A.FirstName,
	  -- A.MiddleInitialName,						  
	  -- A.LastName,
	  -- A.SuffixName,
	  -- A.DOBDate,
   --    A.CountyNumber,
	  -- A.OfficeNumber,
	  -- A.ReferralStatus,
	  -- A.WPReferralDate,
   --    A.ProgramCode ,
	  -- A.LearnFareStatus,
	  -- A.CASENumber,
	  -- A.MFWorkerId,
	  -- A.ConfidentialSwitch ,
	  -- A.MFConfidentialWorker ,	
	  -- ROW_NUMBER () OVER(ORDER BY A.PinNumber)  AS ID    
	  -- from @TempInfo A
	  -- where  ProgramCode  IN ('WW','LF')
		 ----and A.OfficeNumber in ( select C.OfficeNumber 
		 ----                          from wwp.worker B,
		 ----                                wwp.WorkerOfficePermissionBridge c  
			----				      where  B.WAMSId = A.WAMSId
			----					    and   C.WorkerId = B.Id )	 
       
		 --order by A.WPReferralDate Desc , A.OfficeNumber


end

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---- END
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




GO
/****** Object:  StoredProcedure [wwp].[DB2_T0459_Insert]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[DB2_T0459_Insert]
@PIN_NUM DECIMAL(10,0),
@BENEFIT_MM decimal(06,0), 
@HISTORY_SEQ_NUM SMALLINT, 
@CLOCK_TYPE_CD CHAR(4), 
@CRE_TRAN_CD  CHAR(08),
@FED_CLOCK_IND CHAR(01), 
@FED_CMP_MTH_NUM SMALLINT,  --SMALLINT
@FED_MAX_MTH_NUM SMALLINT,
@HISTORY_CD SMALLINT,       
@OT_CMP_MTH_NUM SMALLINT,
@OVERRIDE_REASON_CD CHAR(3), 
@TOT_CMP_MTH_NUM SMALLINT,                
@TOT_MAX_MTH_NUM SMALLINT,
@UPDATED_DT DATE, 
@USER_ID char(6),
@WW_CMP_MTH_NUM SMALLINT,              
@WW_MAX_MTH_NUM SMALLINT, 
@COMMENT_TXT VARCHAR(75)
AS
BEGIN
	DECLARE @Id int;
	DECLARE @PIN_NUM_S VARCHAR(10)	= CONVERT(varchar(10), @PIN_NUM),
	@BENEFIT_MM_S VARCHAR(06)			= CONVERT(varchar(06), @BENEFIT_MM),
	@HISTORY_SEQ_NUM_S VARCHAR(04)	= CONVERT(varchar(04), @HISTORY_SEQ_NUM),
	@CLOCK_TYPE_CD_S VARCHAR(04)		= CONVERT(varchar(04), @CLOCK_TYPE_CD), 
	@CRE_TRAN_CD_S  VARCHAR(08)		= CONVERT(varchar(08), @CRE_TRAN_CD),
	@FED_CLOCK_IND_S VARCHAR(01)		= CONVERT(varchar(01), @FED_CLOCK_IND), 
	@FED_CMP_MTH_NUM_S VARCHAR(04)	= CONVERT(varchar(04), @FED_CMP_MTH_NUM),  --SMALLINT
	@FED_MAX_MTH_NUM_S VARCHAR(04)	= CONVERT(varchar(04), @FED_MAX_MTH_NUM),
	@HISTORY_CD_S VARCHAR(04)			= CONVERT(varchar(04), @HISTORY_CD),       
	@OT_CMP_MTH_NUM_S VARCHAR(04)		= CONVERT(varchar(04), @OT_CMP_MTH_NUM),
	@OVERRIDE_REASON_CD_S VARCHAR(03) = CONVERT(varchar(03), @OVERRIDE_REASON_CD), 
	@TOT_CMP_MTH_NUM_S VARCHAR(04)	= CONVERT(varchar(04), @TOT_CMP_MTH_NUM),                
	@TOT_MAX_MTH_NUM_S VARCHAR(04)	= CONVERT(varchar(04), @TOT_MAX_MTH_NUM),
	@UPDATED_DT_S VARCHAR(10)			= CONVERT(varchar(10), @UPDATED_DT,126), --use ISO String format yyyy-mm-dd
	@USER_ID_S VARCHAR(06)			= CONVERT(varchar(06), @USER_ID),
	@WW_CMP_MTH_NUM_S VARCHAR(04)		= CONVERT(varchar(04), @WW_CMP_MTH_NUM),              
	@WW_MAX_MTH_NUM_S VARCHAR(04)		= CONVERT(varchar(04), @WW_MAX_MTH_NUM);

	SET NOCOUNT ON;
	DECLARE @statement1 as varchar(max);

	BEGIN TRANSACTION
		BEGIN TRY
		-- 1. Insert Matching wwp.T0459_IN_W2_LIMITS record
			INSERT INTO [WWP].T0459_IN_W2_LIMITS ( PIN_NUM , BENEFIT_MM , HISTORY_SEQ_NUM , CLOCK_TYPE_CD , CRE_TRAN_CD , 
                                                         FED_CLOCK_IND , FED_CMP_MTH_NUM , FED_MAX_MTH_NUM , HISTORY_CD ,       
                                                         OT_CMP_MTH_NUM , OVERRIDE_REASON_CD , TOT_CMP_MTH_NUM ,                
                                                         TOT_MAX_MTH_NUM , UPDATED_DT , USER_ID , WW_CMP_MTH_NUM ,              
                                                          WW_MAX_MTH_NUM , COMMENT_TXT      )                                      
                         VALUES (@PIN_NUM,@BENEFIT_MM,@HISTORY_SEQ_NUM,@CLOCK_TYPE_CD,@CRE_TRAN_CD, 
                                                       @FED_CLOCK_IND , @FED_CMP_MTH_NUM , @FED_MAX_MTH_NUM , @HISTORY_CD ,       
                                                         @OT_CMP_MTH_NUM , @OVERRIDE_REASON_CD, @TOT_CMP_MTH_NUM ,                
                                                         @TOT_MAX_MTH_NUM , @UPDATED_DT , @USER_ID , @WW_CMP_MTH_NUM ,              
                                                         @WW_MAX_MTH_NUM , @COMMENT_TXT )

			-- 2. Insert DB2 Record
			set @statement1 = ' INSERT INTO PWS639TC.T0459_IN_W2_LIMITS ( PIN_NUM , BENEFIT_MM , HISTORY_SEQ_NUM , CLOCK_TYPE_CD , CRE_TRAN_CD , 
                                                         FED_CLOCK_IND , FED_CMP_MTH_NUM , FED_MAX_MTH_NUM , HISTORY_CD ,       
                                                         OT_CMP_MTH_NUM , OVERRIDE_REASON_CD , TOT_CMP_MTH_NUM ,                
                                                         TOT_MAX_MTH_NUM , UPDATED_DT , USER_ID , WW_CMP_MTH_NUM ,              
                                                          WW_MAX_MTH_NUM , COMMENT_TXT      )                                      
                         VALUES ('+@PIN_NUM_S+','+@BENEFIT_MM_S+','+@HISTORY_SEQ_NUM_S+','''+@CLOCK_TYPE_CD_S+''','''+@CRE_TRAN_CD_S+''', 
                                                       '''+@FED_CLOCK_IND_S+''' , '+@FED_CMP_MTH_NUM_S+' , '+@FED_MAX_MTH_NUM_S+' , '+@HISTORY_CD_S+' ,       
                                                         '+@OT_CMP_MTH_NUM_S+' , '''+@OVERRIDE_REASON_CD_S+''', '+@TOT_CMP_MTH_NUM_S+' ,                
                                                         '+@TOT_MAX_MTH_NUM_S+' , '''+@UPDATED_DT_S+''' , '''+@USER_ID_S+''' , '+@WW_CMP_MTH_NUM_S+' ,              
                                                         '+@WW_MAX_MTH_NUM_S+' , '''+@COMMENT_TXT+''' )
							';

			exec (@statement1) at [NETWINFO_D00S_DB2]

		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0  
					ROLLBACK TRANSACTION;
			DECLARE 
			@ErrorMessage    NVARCHAR(4000),
			@ErrorNumber     INT,
			@ErrorSeverity   INT,
			@ErrorState      INT,
			@ErrorLine       INT,
			@ErrorProcedure  NVARCHAR(200);

			-- Assign variables to error-handling functions that 
			-- capture information for RAISERROR.
			SELECT 
				@ErrorNumber = ERROR_NUMBER(),
				@ErrorSeverity = ERROR_SEVERITY(),
				@ErrorState = ERROR_STATE(),
				@ErrorLine = ERROR_LINE(),
				@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

			-- Build the message string that will contain original
			-- error information.
			SELECT @ErrorMessage = 
				N'Error %d, Level %d, State %d, Procedure %s, Line %d, ' + 
					'Message: '+ ERROR_MESSAGE();

			-- Raise an error: msg_str parameter of RAISERROR will contain
			-- the original error information.
			RAISERROR 
				(
				@ErrorMessage, 
				@ErrorSeverity, 
				1,               
				@ErrorNumber,    -- parameter: original error number.
				@ErrorSeverity,  -- parameter: original error severity.
				@ErrorState,     -- parameter: original error state.
				@ErrorProcedure, -- parameter: original error procedure name.
				@ErrorLine       -- parameter: original error line number.
				);
				 
		END CATCH	
		IF @@TRANCOUNT > 0  BEGIN
			COMMIT TRANSACTION
		END
		SET @Id = SCOPE_IDENTITY();
		select @Id as Id;
END

GO
/****** Object:  StoredProcedure [wwp].[DB2_T0459_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[DB2_T0459_Update]
@PIN_NUM DECIMAL(10,0),
@BENEFIT_MM decimal(06,0), 
@HISTORY_SEQ_NUM SMALLINT, 
@CLOCK_TYPE_CD CHAR(4), 
@CRE_TRAN_CD  CHAR(08),
@FED_CLOCK_IND CHAR(01), 
@FED_CMP_MTH_NUM SMALLINT,  --SMALLINT
@FED_MAX_MTH_NUM SMALLINT,
@HISTORY_CD SMALLINT,       
@OT_CMP_MTH_NUM SMALLINT,
@OVERRIDE_REASON_CD CHAR(3), 
@TOT_CMP_MTH_NUM SMALLINT,                
@TOT_MAX_MTH_NUM SMALLINT,
@UPDATED_DT DATE, 
@USER_ID char(6),
@WW_CMP_MTH_NUM SMALLINT,              
@WW_MAX_MTH_NUM SMALLINT, 
@COMMENT_TXT VARCHAR(75)
AS
BEGIN
	SET NOCOUNT ON;
	declare @statement1 as varchar(max);
	declare @Sql2 as varchar(max);

	BEGIN TRANSACTION
		BEGIN TRY
		-- 2. Update Matching wwp.T0459_IN_W2_LIMITS record
		UPDATE [WWP].[T0459_IN_W2_LIMITS]
				SET HISTORY_CD	 = 9
					WHERE PIN_NUM = @PIN_NUM
					    AND BENEFIT_MM = @BENEFIT_MM
						AND HISTORY_SEQ_NUM = @HISTORY_SEQ_NUM
						AND CLOCK_TYPE_CD = @CLOCK_TYPE_CD;



			-- 1. Update DB2 Record
			 if(@@rowcount > 0) BEGIN
			set @statement1 = ' UPDATE PWS639TC.T0459_IN_W2_LIMITS 
            SET  HISTORY_CD        =  9   		      
                      WHERE PIN_NUM = '+CONVERT(varchar(10), @PIN_NUM)+'
					    AND BENEFIT_MM = '+CONVERT(varchar(06), @BENEFIT_MM)+'
						AND HISTORY_SEQ_NUM = '+CONVERT(varchar(04), @HISTORY_SEQ_NUM)+' 
						AND CLOCK_TYPE_CD = '''+CONVERT(varchar(04), @CLOCK_TYPE_CD)+'''
						';
			PRINT @statement1;
			exec (@statement1) at [NETWINFO_D00S_DB2]
			END 

		END TRY
		BEGIN CATCH
			SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage
			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION; 
		END CATCH	
		IF @@TRANCOUNT > 0  
			COMMIT TRANSACTION; 
		return 0;
END

GO
/****** Object:  StoredProcedure [wwp].[DB2_T0460_Insert]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[DB2_T0460_Insert]
@PIN_NUM VARCHAR(10),          --D(10,0)
@CLOCK_TYPE_CD VARCHAR(04),    -- C(4)
@EXT_SEQ_NUM VARCHAR(04),      --SMALLINT
@HISTORY_SEQ_NUM VARCHAR(04),  --SMALLINT 
@AGY_DCSN_CD VARCHAR(03),      --C(3)
@AGY_DCSN_DT VARCHAR(10),      --DATE 
@BENEFIT_MM VARCHAR(06),       --D(6,0)
@DELETE_REASON_CD VARCHAR(02),  --C(2)      
@EXT_BEG_MM VARCHAR(10),        --D(6,0)
@EXT_END_MM VARCHAR(10),        --D(6,0)
@EXT_REQ_PRC_DT VARCHAR(10),    --DATE
@HISTORY_CD VARCHAR(04),        --SMALLINT
@STA_DCSN_CD VARCHAR(04),       --C(4)
@UPDATED_DT VARCHAR(10),        --DATE
@USER_ID VARCHAR(06)            --C(6)
AS
BEGIN

	SET NOCOUNT ON;
    declare @statement1 as varchar(max);

   set @statement1 = ' INSERT INTO PWS639TC.T0460_IN_W2_EXT ( PIN_NUM , CLOCK_TYPE_CD , EXT_SEQ_NUM , HISTORY_SEQ_NUM ,  AGY_DCSN_CD , 
                                                         AGY_DCSN_DT, BENEFIT_MM , DELETE_REASON_CD , EXT_BEG_MM ,       
                                                         EXT_END_MM ,EXT_REQ_PRC_DT, HISTORY_CD ,                
                                                         STA_DCSN_CD , UPDATED_DT , USER_ID     )                                      
                         VALUES ('+@PIN_NUM+','''+@CLOCK_TYPE_CD+''','+@EXT_SEQ_NUM+','+@HISTORY_SEQ_NUM+','''+@AGY_DCSN_CD+''', 
                                                       '''+@AGY_DCSN_DT+''' , '+@BENEFIT_MM+' , '''+@DELETE_REASON_CD+''' , '+@EXT_BEG_MM+' ,       
                                                         '+@EXT_END_MM+' , '''+@EXT_REQ_PRC_DT+''', '+@HISTORY_CD+' ,                
                                                         '''+@STA_DCSN_CD+''' , '''+@UPDATED_DT+''' , '''+@USER_ID+'''  )
                      '


print @statement1
                                         
exec (@statement1) at NETWINFO_D00S_DB2



END

GO
/****** Object:  StoredProcedure [wwp].[DB2_T0460_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[DB2_T0460_Update]
@PIN_NUM VARCHAR(10),          --D(10,0)
@CLOCK_TYPE_CD VARCHAR(04),    -- C(4)
@EXT_SEQ_NUM VARCHAR(04),      --SMALLINT
@HISTORY_SEQ_NUM VARCHAR(04),  --SMALLINT 
@AGY_DCSN_CD VARCHAR(03),      --C(3)
@AGY_DCSN_DT VARCHAR(10),      --DATE 
@BENEFIT_MM VARCHAR(06),       --D(6,0)
@DELETE_REASON_CD VARCHAR(02),  --C(2)      
@EXT_BEG_MM VARCHAR(10),        --D(6,0)
@EXT_END_MM VARCHAR(10),        --D(6,0)
@EXT_REQ_PRC_DT VARCHAR(10),    --DATE
@HISTORY_CD VARCHAR(04),        --SMALLINT
@STA_DCSN_CD VARCHAR(04),       --C(4)
@UPDATED_DT VARCHAR(10),        --DATE
@USER_ID VARCHAR(06)            --C(6)
AS
BEGIN

	SET NOCOUNT ON;
    declare @statement1 as varchar(max);

   set @statement1 = ' UPDATE PWS639TC.T0460_IN_W2_EXT
          SET  HISTORY_SEQ_NUM   = '+@HISTORY_SEQ_NUM+' + 1 , 
		        HISTORY_CD        = 0  
                      WHERE PIN_NUM = '+@PIN_NUM+'
					    AND CLOCK_TYPE_CD = '''+@CLOCK_TYPE_CD+'''
						AND EXT_SEQ_NUM  =  '+@EXT_SEQ_NUM+' 
						AND HISTORY_SEQ_NUM = '+@HISTORY_SEQ_NUM+' 
                                             
                      '


print @statement1
                                         
exec (@statement1) at NETWINFO_D00S_DB2



END

GO
/****** Object:  StoredProcedure [wwp].[DB2_T0754_Insert]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[DB2_T0754_Insert]
@CS_RFA_PRV_PIN_NUM VARCHAR(10),
@CS_RFA_PRV_PIN_IND VARCHAR(01),
@DEPT_ID            VARCHAR(04),
@PROGRAM_CD         VARCHAR(03),
@SUBPROGRAM_CD      VARCHAR(01),
@AG_SEQ_NUM         VARCHAR(04),
@RQST_TMS           VARCHAR(26),
@CNTY_NUM           VARCHAR(04),
@CRE_IND            VARCHAR(01),
@DOC_CD             VARCHAR(04),
@LTR_MO             VARCHAR(06),
@OFC_NUM            VARCHAR(04),
@PROC_DT            VARCHAR(10),
@PRVD_LOC_NUM       VARCHAR(04),
@SEC_RCPT_ID        VARCHAR(10),
@SPRS_USER_ID       VARCHAR(06),
@USER_ID            VARCHAR(06),
@LTR_TXT            VARCHAR(2400)


AS
BEGIN

	SET NOCOUNT ON;
    declare @statement1 as varchar(max);

   set @statement1 = ' INSERT INTO PWS639TC.T0754_LTR_RQST ( CS_RFA_PRV_PIN_NUM, CS_RFA_PRV_PIN_IND, DEPT_ID, PROGRAM_CD, SUBPROGRAM_CD, AG_SEQ_NUM, RQST_TMS,          
                                                             CNTY_NUM, CRE_IND, DOC_CD, LTR_MO, OFC_NUM, PROC_DT, 
															 PRVD_LOC_NUM, SEC_RCPT_ID, SPRS_USER_ID, USER_ID, LTR_TXT  )                                      
                         VALUES ( '+@CS_RFA_PRV_PIN_NUM+', '''+@CS_RFA_PRV_PIN_IND+''', '''+@DEPT_ID+''', '''+@PROGRAM_CD+''', '''+@SUBPROGRAM_CD+''', '+@AG_SEQ_NUM+', '''+@RQST_TMS+''',          
                                  '+@CNTY_NUM+', '''+@CRE_IND+''', '''+@DOC_CD+''', '+@LTR_MO+', '+@OFC_NUM+', '''+@PROC_DT+''',
								  '+@PRVD_LOC_NUM+', '+@SEC_RCPT_ID+', '''+@SPRS_USER_ID+''', '''+@USER_ID+''', '''+@LTR_TXT+''' )
                      '


print @statement1
                                         
exec (@statement1) at NETWINFO_D00S_DB2



END

GO
/****** Object:  StoredProcedure [wwp].[DUMMY_INSERT]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [wwp].[DUMMY_INSERT] (
@noOfRecords INT
)
AS
BEGIN

DECLARE @count int
SET @count = 1;

WHILE (@count < @noOfRecords)
BEGIN
--  INSERT INTO [wwp].[MilitaryBranch] ([name])
    INSERT INTO [wwp].[Error] ([Title])
     VALUES('user_'+CAST(@count AS VARCHAR(256)));

     SET @count = @count + 1;
END
END
GO
/****** Object:  StoredProcedure [wwp].[SP_AuxiliaryPayment]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_AuxiliaryPayment]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
declare @CurrentDate as varchar(10) ;
declare @Pin1 as varchar(10) ;

set @CurrentDate = CAST(GETDATE() AS DATE);

 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

print 1
--delete wwp.AuxillaryPayment where PinNumber = CAST('+@PinNumber+' AS DECIMAL(10, 0)) ;

Set @Pin1 =  @PinNumber  ;

Print @Pin1 ;

delete [wwp].AuxiliaryPayment where PinNumber = CONVERT(numeric(10,0), @PinNumber) ;
print 2  

set @statement1 = '
select PinNumber,
       CONVERT(datetime,RIGHT(EffectiveMonth1,4)+LEFT(EffectiveMonth1,2)+SUBSTRING(EffectiveMonth1,3,2)) as EffectiveMonth,
	   TimeLimitTypeId,
	   StateTimelimit,
	   FederalTimeLimit,
	   TwentyFourMonthLimit,
	   CreatedDateFromCARES,
	   ModifiedBy,
	   PIN_NUM ,	
	   BENEFIT_MM	,
	   HISTORY_SEQ_NUM	,
	   CLOCK_TYPE_CD,
	   CRE_TRAN_CD,
	   FED_CLOCK_IND,
	   FED_CMP_MTH_NUM,
	   FED_MAX_MTH_NUM,
	   HISTORY_CD,
	   OT_CMP_MTH_NUM,
	   OVERRIDE_REASON_CD,
	   TOT_CMP_MTH_NUM,
	   TOT_MAX_MTH_NUM,
	   UPDATED_DT,
       USER_ID,
	   WW_CMP_MTH_NUM,
	   WW_MAX_MTH_NUM, 
	   COMMENT_TXT		
     FROM OPENQUERY('+@LSDBName+',''SELECT PIN_NUM as PinNumber,
       substr(BENEFIT_MM,5,2)||''''01''''|| substr(BENEFIT_MM,1,4) AS EffectiveMonth1,
       CASE CLOCK_TYPE_CD WHEN ''''CMC''''  THEN ''''64''''  
                   WHEN ''''CSJ''''  THEN ''''4'''' 
                   WHEN ''''JOBS'''' THEN ''''2048''''
                   WHEN ''''OPC''''  THEN ''''128''''
                   WHEN ''''OTF''''  THEN ''''256''''
                   WHEN ''''TJB''''  THEN ''''1024''''
                   WHEN ''''TMP''''  THEN ''''32''''
				   WHEN ''''TNP''''  THEN ''''16''''
				   WHEN ''''W2T''''  THEN ''''8''''
				   WHEN ''''60MO'''' THEN  ''''2''''
          END AS TimeLimitTypeId , 		
   CASE CLOCK_TYPE_CD WHEN ''''W2T'''' THEN ''''1''''
                    WHEN ''''CSJ'''' THEN ''''1''''
					WHEN ''''TNP'''' THEN ''''1''''
					WHEN ''''TMP'''' THEN ''''1''''
					WHEN ''''JOBS'''' THEN ''''1''''
					WHEN ''''OTF''''  THEN ''''1''''
					WHEN ''''CMC'''' THEN ''''1''''
					END AS StateTimelimit,


	CASE FED_CLOCK_IND WHEN ''''Y'''' THEN ''''1''''
                           WHEN ''''N'''' THEN ''''0''''
		END AS FederalTimeLimit ,

	  CASE CLOCK_TYPE_CD WHEN ''''W2T'''' THEN ''''1''''
                    WHEN ''''CSJ'''' THEN ''''1''''
					WHEN ''''TNP'''' THEN ''''1''''
					WHEN ''''TMP'''' THEN ''''1''''
					END AS TwentyFourMonthLimit ,

			UPDATED_DT as CreatedDateFromCARES ,
	       ''''WWP''''  as ModifiedBy ,
		    PIN_NUM ,	
		    BENEFIT_MM	,
			HISTORY_SEQ_NUM	,
			CLOCK_TYPE_CD,
			CRE_TRAN_CD,
			FED_CLOCK_IND,
			FED_CMP_MTH_NUM,
			FED_MAX_MTH_NUM,
			HISTORY_CD,
			OT_CMP_MTH_NUM,
			OVERRIDE_REASON_CD,
			TOT_CMP_MTH_NUM,
			TOT_MAX_MTH_NUM,
			UPDATED_DT,
			USER_ID,
			WW_CMP_MTH_NUM,
			WW_MAX_MTH_NUM,
			COMMENT_TXT			 	
  FROM '+@DB2DBName+'.T0459_IN_W2_LIMITS                                 
   WHERE PIN_NUM       =  '+@PinNumber+ '
     AND CRE_TRAN_CD   =  ''''PWCBIPWA''''                                      
     AND HISTORY_CD    =   0              
      AND UPDATED_DT BETWEEN LAST_DAY(CURRENT_DATE - 1 MONTHS) + 1 DAY    
                        AND LAST_DAY(CURRENT_DATE)

'') '



INSERT INTO [wwp].[AuxiliaryPayment]
           ([PinNumber]
           ,[EffectiveMonth]
           ,[TimeLimitTypeId]
           ,[StateTimelimit]
           ,[FederalTimeLimit]
           ,[TwentyFourMonthLimit]
           ,[CreatedDateFromCARES]
           ,[ModifiedBy]
		   ,[PIN_NUM]	
		   ,[BENEFIT_MM]
		   ,[HISTORY_SEQ_NUM]
		   ,[CLOCK_TYPE_CD]
		   ,[CRE_TRAN_CD]
		   ,[FED_CLOCK_IND]
		   ,[FED_CMP_MTH_NUM]
		   ,[FED_MAX_MTH_NUM]
		   ,[HISTORY_CD]
		   ,[OT_CMP_MTH_NUM]
		   ,[OVERRIDE_REASON_CD]
		   ,[TOT_CMP_MTH_NUM]
		   ,[TOT_MAX_MTH_NUM]
		   ,[UPDATED_DT]
		   ,[USER_ID]
		   ,[WW_CMP_MTH_NUM]
		   ,[WW_MAX_MTH_NUM]
		   ,[COMMENT_TXT]
           )
exec (@statement1) 


PRINT 3

select * from [wwp].[AuxiliaryPayment]  where PinNumber = CONVERT(numeric(10,0), @PinNumber) ;


end
	


    
   
       
			

            
                                       

 




GO
/****** Object:  StoredProcedure [wwp].[SP_Barrier_Accommodation_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [wwp].[SP_Barrier_Accommodation_Update]
	@PEPId INT,
	@DisenrollmentDate DATE,
	@IsBatch BIT,
	@UserId VARCHAR(50)
AS
BEGIN
	DECLARE @EnrolledPEPs INT,
			@ParticipantId INT

	SELECT @ParticipantId = ParticipantId
	FROM wwp.ParticipantEnrolledProgram
	WHERE Id = @PEPId
	PRINT @ParticipantId

	SELECT @EnrolledPEPs = COUNT(Id)
	FROM wwp.ParticipantEnrolledProgram
	WHERE ParticipantId = @ParticipantId AND EnrolledProgramStatusCodeId = 2
	PRINT @EnrolledPEPs

	PRINT @IsBatch

	IF @EnrolledPEPs = 1 OR (@IsBatch = 1 AND @EnrolledPEPs = 1)
	BEGIN
		UPDATE wwp.BarrierDetail
		SET EndDate = @DisenrollmentDate, WasClosedAtDisenrollment = 1, ModifiedDate = GETDATE(), ModifiedBy = @UserId
		WHERE ParticipantId = @ParticipantId AND EndDate IS NULL

		UPDATE wwp.BarrierAccommodation
		SET EndDate = @DisenrollmentDate, ModifiedDate = GETDATE(), ModifiedBy = @UserId
		WHERE BarrierDetailsId IN (SELECT Id
								   FROM wwp.BarrierDetail
								   WHERE ParticipantId = @ParticipantId)
		AND DeleteReasonId IS NULL AND BeginDate IS NOT NULL AND EndDate IS NULL
	END
END
GO
/****** Object:  StoredProcedure [wwp].[SP_BatchTimeLimitParticipant]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Palani Chidambaram	
-- Create date: <Create Date,,>  @LinkedServer = 'NETWINFO_D*_DB2'
-- Description:	This Procedure gathers all auxiliary payments made by this process and 
-- =============================================
CREATE PROCEDURE [wwp].[SP_BatchTimeLimitParticipant] 
(
 @NewDate varchar(10),
 @EndDate varchar(10),
 @SchemaName varchar(20)
)
as begin

declare @statement0 varchar(max) ;
declare @statement1 varchar(max) ;
declare @statement2 varchar(max) ; 
declare @statement3 varchar(max) ;
declare @statement4 varchar(max) ;
declare @statement5 varchar(max) ;
declare @statement6 varchar(max) ;
declare @statement7 varchar(max) ;
declare @statement8 varchar(max) ;
declare @statement9 varchar(max) ;
declare @statement9A varchar(max) ;

 DECLARE @statement11 varchar(max) ;
 DECLARE @statement12 varchar(max) ;
 DECLARE @statement13 varchar(max) ;


 
 DECLARE @statement20 varchar(max) ;
 DECLARE @statement21 varchar(max) ;
 DECLARE @statement22 varchar(max) ;
 DECLARE @statement23 varchar(max) ;
 DECLARE @statement24 varchar(max) ;
 DECLARE @statement25 varchar(max) ;

----------- 

declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;

-----------

 --DECLARE @temp TABLE
 --           (
 --             [UPDT_DATE] [DATE] NULL 
 --           );
 
 DECLARE @Temp2 TABLE
            ( PinNumber decimal(10,0) NOT NULL,
              TimeLimitStatus bit NULL 
            )

 --DECLARE @T2598AUXDate DATE ;
 --DECLARE @SqlCurrentDate DATE  ;


----------- 
  
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
		
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
----
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ----
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


----First date of the Previous Month
--SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,0,getdate())-1,0),120) AS [Previous Month Begin Date]
 
---- Last date of the Previous Month
--SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,-1,getdate())-1,-1),120) AS [Previous Month End Date]

----First date of the Current Month
--SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,0,getdate()),0),120) AS [Current Month Begin Date]

---- Last date of the Current Month
--SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,-1,getdate()),-1),120) AS [Current Month End Date]

----- 
----First date of the Next Month
--SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,0,getdate())+1,0),120) AS [Next Month]
 

---- Last date of the Next Month
--SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,-1,getdate())+1,-1),120) AS [Previous Month End Date]


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  
--  SET @statement11 = 'select * FROM OPENQUERY('+@LSDBName+',''SELECT MAX(UPDATED_DT)
--				                                                     FROM '+@DB2DBName+'.T2598_IN_W2_LT_AUX                 
--																    WHERE PIN_NUM       > 0
--																	  AND CRE_TRAN_CD   =  ''''PWCBIPWA''''                                      
--																      AND HISTORY_CD    =   0       
--																     WITH UR ''
--                                              ) '

--   INSERT @temp
--	 EXEC (@statement11) 

-- SET  @T2598AUXDate = (select UPDT_DATE from @temp)

-- print @T2598AUXDate ;


-- SET @SqlCurrentDate =	 (SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,0,getdate()),0),120)  )

-- print @SqlCurrentDate 

--if @T2598AUXDate > @SqlCurrentDate 
-- begin 
--        print 'db2 date is greater than sqldate' 
--	    SET @NewDate = (SELECT CONVERT(date,DATEADD(MONTH, DATEDIFF(MONTH,0,getdate()),0),120))
--		SET @EndDate = (SELECT CONVERT(date,DATEADD(MONTH, DATEDIFF(MONTH,-1,getdate()),-1),120))
----		SET @EndDate = (SELECT CONVERT(VARCHAR(10),DATEADD(MONTH, DATEDIFF(MONTH,-1,getdate()),-1),120))
--		print @NewDate
--		print @EndDate
-- end 
-- else
-- begin 
--        print 'sqldate is greater than db2' 
--	    SET @NewDate = (SELECT CONVERT(date,DATEADD(MONTH, DATEDIFF(MONTH,0,getdate())-1,0),120))
--		SET @EndDate = (SELECT CONVERT(date,DATEADD(MONTH, DATEDIFF(MONTH,-1,getdate())-1,-1),120)) 
		
--		SET @NewDate = '2017-12-01'
--		SET @EndDate = '2017-12-31'

--		print @NewDate
--	    print @EndDate
       
-- end  


-- Remove any old AuxiliaryPayment records
delete wwp.AuxiliaryPayment where UPDATED_DT < @NewDate


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------  GET AUXILIARY PAYMENT INFO FROM T2598 FOR THAT MONTH
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @tempAux TABLE (
	[PIN_NUM] [decimal](10, 0) NULL,
	[BENEFIT_MM] [decimal](6, 0) NULL,
	[HISTORY_SEQ_NUM] [smallint] NULL,
	[CLOCK_TYPE_CD] [char](4) NULL,
	[CRE_TRAN_CD] [char](8) NULL,
	[FED_CLOCK_IND] [char](1) NULL,
	[FED_CMP_MTH_NUM] [smallint] NULL,
	[FED_MAX_MTH_NUM] [smallint] NULL,
	[HISTORY_CD] [smallint] NULL,
	[OT_CMP_MTH_NUM] [smallint] NULL,
	[OVERRIDE_REASON_CD] [char](3) NULL,
	[TOT_CMP_MTH_NUM] [smallint] NULL,
	[TOT_MAX_MTH_NUM] [smallint] NULL,
	[UPDATED_DT] [date] NULL,
	[USER_ID] [char](6) NULL,
	[WW_CMP_MTH_NUM] [smallint] NULL,
	[WW_MAX_MTH_NUM] [smallint] NULL,
	[COMMENT_TXT] [varchar](75) NULL
	);



set @statement12 = '
		SELECT
		   PIN_NUM   ,    
		   BENEFIT_MM       ,  
		   HISTORY_SEQ_NUM  ,
		   CLOCK_TYPE_CD    ,
		   CRE_TRAN_CD      ,
		   FED_CLOCK_IND    ,
		   FED_CMP_MTH_NUM  ,
		   FED_MAX_MTH_NUM   ,
		   HISTORY_CD        ,
		   OT_CMP_MTH_NUM    ,
		   OVERRIDE_REASON_CD,
		   TOT_CMP_MTH_NUM   ,
		   TOT_MAX_MTH_NUM   ,
		   UPDATED_DT        ,
		   USER_ID           ,
		   WW_CMP_MTH_NUM    ,
		   WW_MAX_MTH_NUM    ,
		   COMMENT_TXT 
	   	FROM OPENQUERY('+@LSDBName+',''

SELECT 
	   PIN_NUM   ,    
       BENEFIT_MM       ,  
	   HISTORY_SEQ_NUM  ,
	   CLOCK_TYPE_CD    ,
	   CRE_TRAN_CD      ,
	   FED_CLOCK_IND    ,
       FED_CMP_MTH_NUM  ,
       FED_MAX_MTH_NUM   ,
       HISTORY_CD        ,
       OT_CMP_MTH_NUM    ,
       OVERRIDE_REASON_CD,
       TOT_CMP_MTH_NUM   ,
       TOT_MAX_MTH_NUM   ,
       UPDATED_DT        ,
       USER_ID           ,
       WW_CMP_MTH_NUM    ,
       WW_MAX_MTH_NUM    ,
       COMMENT_TXT  			 	
  FROM '+@DB2DBName+'.T2598_IN_W2_LT_AUX                     
   WHERE PIN_NUM       > 0
     AND CRE_TRAN_CD   =  ''''PWCBIPWA''''                                      
     AND HISTORY_CD    =   0              
     AND UPDATED_DT >= '''''+@NewDate+'''''
	   WITH UR''
	 ) ';

INSERT @tempAux (
		    [PIN_NUM]	
		   ,[BENEFIT_MM]
		   ,[HISTORY_SEQ_NUM]
		   ,[CLOCK_TYPE_CD]
		   ,[CRE_TRAN_CD]
		   ,[FED_CLOCK_IND]
		   ,[FED_CMP_MTH_NUM]
		   ,[FED_MAX_MTH_NUM]
		   ,[HISTORY_CD]
		   ,[OT_CMP_MTH_NUM]
		   ,[OVERRIDE_REASON_CD]
		   ,[TOT_CMP_MTH_NUM]
		   ,[TOT_MAX_MTH_NUM]
		   ,[UPDATED_DT]
		   ,[USER_ID]
		   ,[WW_CMP_MTH_NUM]
		   ,[WW_MAX_MTH_NUM]
		   ,[COMMENT_TXT]
)
exec (@statement12);

-- Insert any records we haven't process online already

INSERT  INTO [wwp].[AuxiliaryPayment]
           ([ModifiedBy],
		   [PIN_NUM]	
		   ,[BENEFIT_MM]
		   ,[HISTORY_SEQ_NUM]
		   ,[CLOCK_TYPE_CD]
		   ,[CRE_TRAN_CD]
		   ,[FED_CLOCK_IND]
		   ,[FED_CMP_MTH_NUM]
		   ,[FED_MAX_MTH_NUM]
		   ,[HISTORY_CD]
		   ,[OT_CMP_MTH_NUM]
		   ,[OVERRIDE_REASON_CD]
		   ,[TOT_CMP_MTH_NUM]
		   ,[TOT_MAX_MTH_NUM]
		   ,[UPDATED_DT]
		   ,[USER_ID]
		   ,[WW_CMP_MTH_NUM]
		   ,[WW_MAX_MTH_NUM]
		   ,[COMMENT_TXT]
           )
		   (select 
		   'WWP Batch'
		   ,t.[PIN_NUM]	
		   ,t.[BENEFIT_MM]
		   ,t.[HISTORY_SEQ_NUM]
		   ,t.[CLOCK_TYPE_CD]
		   ,t.[CRE_TRAN_CD]
		   ,t.[FED_CLOCK_IND]
		   ,t.[FED_CMP_MTH_NUM]
		   ,t.[FED_MAX_MTH_NUM]
		   ,t.[HISTORY_CD]
		   ,t.[OT_CMP_MTH_NUM]
		   ,t.[OVERRIDE_REASON_CD]
		   ,t.[TOT_CMP_MTH_NUM]
		   ,t.[TOT_MAX_MTH_NUM]
		   ,t.[UPDATED_DT]
		   ,t.[USER_ID]
		   ,t.[WW_CMP_MTH_NUM]
		   ,t.[WW_MAX_MTH_NUM]
		   ,t.[COMMENT_TXT]
		   FROM @tempAux t
		   WHERE 
			 --AND t.UPDATED_DT		>  @startOfMonth
			 --AND t.CRE_TRAN_CD		=  'PWCBIPWA'
			 t.HISTORY_CD		=   0            
			 AND NOT EXISTS (SELECT TOP 1 1 from [wwp].[timelimit] tl, [wwp].[participant] p 
				where	tl.ParticipantId		=	p.id
				AND		substring(t.[OVERRIDE_REASON_CD],1,1) <> 'S'
				AND		( (t.CRE_TRAN_CD = 'PWCBIPWA' AND tl.TimelimitTypeid not in (0,256, 128)) OR  t.CRE_TRAN_CD <> 'PWCBIPWA') -- Overwrite OTF/OPC/NONE records
				AND		p.[PinNumber] = t.PIN_NUM
				AND		tl.effectiveMonth	=	convert(date,CONVERT(varchar(6),t.benefit_mm)+'01' ))

			 AND NOT EXISTS(select TOP 1 1 from [wwp].[AuxiliaryPayment] ap 
			 where	t.PIN_NUM			=	ap.PIN_NUM 
				and t.BENEFIT_MM		=	ap.BENEFIT_MM
				AND t.HISTORY_SEQ_NUM	=	ap.HISTORY_SEQ_NUM )) -- App will set effective month after sucessfull insert
--return 0
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 0000000000 AND 0999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement0 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 0000000000 AND 0999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement0) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 1000000000 AND 1999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement1 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 1000000000 AND 1999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement1) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 2000000000 AND 2999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement2 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 2000000000 AND 2999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement2) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 3000000000 AND 3999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement3 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 3000000000 AND 3999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement3) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 4000000000 AND 4999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement4 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 4000000000 AND 4999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement4) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 5000000000 AND 5999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement5 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 5000000000 AND 5999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement5) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 6000000000 AND 6999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement6 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 6000000000 AND 6999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement6) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 7000000000 AND 7999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement7 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 7000000000 AND 7999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement7) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 8000000000 AND 8999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement8 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 8000000000 AND 8999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement8) ;


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 9000000000 AND 9999999999  INSERT
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement9 =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 9000000000 AND 9999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement9) ;



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
------- PARTITION 0000000000 AND 9999999999  INSERT FOR INDVIDUALS WHO WERE OPEN IN PAID PLACEMENT BUT MOVED OVER TO UNPAID PLACEMENT.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @statement9A =

'
select  PinNumber	,
		FirstName	,
		MiddleInitialName,
		LastName	,
		SuffixName	,
		DateOfBirth	,
		DateOfDeath	,
		GenderIndicator	,
		AliasResponse	,
  	    LanguageCode	,
		MaxHistorySequenceNumber	,	
		RaceCode	,	
	 	USCitizenSwitch	,
		AmericanIndianIndicator	,
		AsianIndicator	,
	    BlackIndicator	,
        HispanicIndicator	,
		PacificIslanderIndicator	,
		WhiteIndicator	,
		MCI_ID	,
        TribalMemberIndicator,
		''TimeLimit Batch New Participants'' as ConversionProjectDetails,
         0 as IsDeleted  ,
        ''WWP Conversion'' as ModifiedBy,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT B.PIN_NUM      as	PinNumber	,
		B.FIRST_NAM           	as	FirstName	,
		B.MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		B.LAST_NAM            	as	LastName	,
		B.SUFFIX_NAM          	as	SuffixName	,
		B.DOB_DT              	as	DateOfBirth	,
		B.DEATH_DT            	as	DateOfDeath	,
		B.SEX_IND             	as	GenderIndicator	,
		B.ALIAS_RSP           	as	AliasResponse	,
		B.BIRTH_VER_CD        	as	BirthVerificationCode	,
		B.BIRTHPLACE_CD       	as	BirthPlaceCode	,
		B.CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		B.DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		B.DEATH_VER_CD        	as	DeathVerificationCode	,
		B.LANGUAGE_CD         	as	LanguageCode	,
		B.MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		B.PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		B.PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		B.RACE_CD             	as	RaceCode	,
		B.SSN_APP_DT         	as	SSNAppointmentDate	,
		B.SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		B.SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		B.UPDATED_DT          	as	CaresUpdatedDate	,
		B.US_CITIZEN_SW       	as	USCitizenSwitch	,
		B.WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		B.WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		B.MAID_NUM            	as	MaidNumber	,
		B.CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		B.CHILD_VER_CD        	as	ChildVerificationCode	,
		B.AMR_INDN_IND        	as	AmericanIndianIndicator	,
		B.ASN_IND             	as	AsianIndicator	,
		B.BLK_IND             	as	BlackIndicator	,
		B.HISP_IND         		as	HispanicIndicator	,
		B.PCF_ILD_IND			as	PacificIslanderIndicator	,
		B.WHT_IND          		as	WhiteIndicator	,
		B.MCI_ID				as	MCI_ID	,
		B.MA_CTZN_VFCN_CD		as	MACitizenVerificationCode	,
		B.TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		B.TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		B.TRB_MBR_IND			as	TribalMemberIndicator	,
		B.TRB_MBR_VFCN_CD		as	TribalMemberVerificationCode	,
		B.DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		B.WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode
        FROM  '+@DB2DBName+'.T0011_INDIVIDUAL  B,                                                                                          
	          '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM BETWEEN 0000000000 AND 9999999999 
	AND A.HISTORY_CD      = 9                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''   
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	AND B.PIN_NUM  = A.PIN_NUM  '' ) ru 
	WHERE NOT EXISTS
   (
      SELECT 1
      FROM  '+@SchemaName+'.WWP.Participant C
      WHERE C.PinNumber = ru.PinNumber
 )
        
'




 Insert Participant([PinNumber]
           ,[FirstName]
           ,[MiddleInitialName]
           ,[LastName]
           ,[SuffixName]
           ,[DateOfBirth]
           ,[DateOfDeath]
           ,[GenderIndicator]
           ,[AliasResponse]        
           ,[LanguageCode]
           ,[MaxHistorySequenceNumber]       
           ,[RaceCode]
           ,[USCitizenSwitch]      
           ,[AmericanIndianIndicator]
           ,[AsianIndicator]
           ,[BlackIndicator]
           ,[HispanicIndicator]
           ,[PacificIslanderIndicator]
           ,[WhiteIndicator]
           ,[MCI_ID]
		   ,[TribalMemberIndicator]
           ,[ConversionProjectDetails]
           ,[IsDeleted]   
           ,[ModifiedBy]
		   ,[TimeLimitStatus]
           )
EXEC  (@statement9A) ;



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


print 'begindt' + @EndDate
print 'enddt' + @NewDate 

set @statement20 =

'
select  PinNumber,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT A.PIN_NUM      as	PinNumber	                                                                                       
	     FROM     '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM  BETWEEN 0000000000 AND 1999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	 '' ) ru 
'


Insert @Temp2          
EXEC  (@statement20) ;


print 'flip timelimit status stmt20';

Update wwp.Participant 
set wwp.Participant.TimeLimitStatus = b.timeLimitStatus
From wwp.Participant 
 Inner join @temp2 b On  b.PinNumber = wwp.Participant.PinNumber     
Where wwp.Participant.PinNumber = b.PinNumber

 ;


Delete @Temp2


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



set @statement21 =

'
select  PinNumber,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT A.PIN_NUM      as	PinNumber	                                                                                       
	     FROM     '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM  BETWEEN 2000000000 AND 3999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	 '' ) ru 
'


Insert @Temp2          
EXEC  (@statement21) ;

print 'flip timelimit status stmt21';

Update wwp.Participant 
set wwp.Participant.TimeLimitStatus = b.timeLimitStatus
From wwp.Participant 
 Inner join @temp2 b On  b.PinNumber = wwp.Participant.PinNumber     
Where wwp.Participant.PinNumber = b.PinNumber
 ;


Delete @Temp2

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


set @statement22 =

'
select  PinNumber,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT A.PIN_NUM      as	PinNumber	                                                                                       
	     FROM     '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM  BETWEEN 4000000000 AND 5999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	 '' ) ru      
'


Insert @Temp2          
EXEC  (@statement22) ;

print 'flip timelimit status stmt22';

Update wwp.Participant 
set wwp.Participant.TimeLimitStatus = b.timeLimitStatus
From wwp.Participant 
 Inner join @temp2 b On  b.PinNumber = wwp.Participant.PinNumber     
Where wwp.Participant.PinNumber = b.PinNumber
 ;


Delete @Temp2

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


set @statement23 =

'
select  PinNumber,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT A.PIN_NUM      as	PinNumber	                                                                                       
	     FROM     '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM  BETWEEN 6000000000 AND 7999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	 '' ) ru 
'


Insert @Temp2          
EXEC  (@statement23) ;

print 'flip timelimit status stmt23';

Update wwp.Participant 
set wwp.Participant.TimeLimitStatus = b.timeLimitStatus
From wwp.Participant 
 Inner join @temp2 b On  b.PinNumber = wwp.Participant.PinNumber     
Where wwp.Participant.PinNumber = b.PinNumber

 ;


Delete @Temp2

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


set @statement24 =

'
select  PinNumber,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT A.PIN_NUM      as	PinNumber	                                                                                       
	     FROM     '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM  BETWEEN 8000000000 AND 9999999999 
	AND A.HISTORY_CD      = 0                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	 '' ) ru         
'


Insert @Temp2          
EXEC  (@statement24) ;

print 'flip timelimit status stmt24';

Update wwp.Participant 
set wwp.Participant.TimeLimitStatus = b.timeLimitStatus
From wwp.Participant 
 Inner join @temp2 b On  b.PinNumber = wwp.Participant.PinNumber     
Where wwp.Participant.PinNumber = b.PinNumber
 ;


Delete @Temp2

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
set @statement25 =

'
select  PinNumber,
		1 as TimeLimitStatus
FROM OPENQUERY ('+@LSDBName+', '' SELECT 
		DISTINCT A.PIN_NUM      as	PinNumber	                                                                                       
	     FROM     '+@DB2DBName+'.T0478_CS_WI_WORKS  A                             
		 WHERE A.PIN_NUM  BETWEEN 0000000000 AND 9999999999 
	AND A.HISTORY_CD      = 9                                                       
	AND A.DELETE_REASON_CD = '''' ''''                                               
	AND A.WI_WORKS_SLOT_CD IN (''''CSJ'''' ,''''W2T'''' , ''''TJB'''' , ''''CMC'''' , ''''TMP'''' , ''''TNP'''' , ''''CS1'''' , ''''CS2'''' , ''''CS3'''' )                                                  
    AND A.WW_SLOT_BEGIN_DT <= WW_SLOT_END_DT  
	AND A.WW_SLOT_BEGIN_DT <= '''''+@EndDate+'''''
    AND A.WW_SLOT_END_DT   >= '''''+@NewDate+'''''
	 '' ) ru 
'


Insert @Temp2          
EXEC  (@statement25) ;

print 'flip timelimit status stmt25';

Update wwp.Participant 
set wwp.Participant.TimeLimitStatus = b.timeLimitStatus
From wwp.Participant 
 Inner join @temp2 b On  b.PinNumber = wwp.Participant.PinNumber     
Where wwp.Participant.PinNumber = b.PinNumber
 ;


Delete @Temp2



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






END ;



GO
/****** Object:  StoredProcedure [wwp].[SP_CARESChildCareEligbilityStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>  @LinkedServer = 'MyLinkedServer'
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[SP_CARESChildCareEligbilityStatus] 
(
@CaseNumber varchar(10),
@SchemaName varchar(20)
)
as begin


declare @strsQL varchar(max)



declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @strSQL = 

 ' IF EXISTS (
 SELECT  *
FROM OPENQUERY ('+@LSDBName+', '' SELECT COUNT(*) 
                                         FROM  '+@DB2DBName+'.T0026_AG_ELIG      A                                                                                          
										WHERE A.CASE_NUM    = '+@CaseNumber+'    
											  AND A.PROGRAM_CD  =  ''''CC''''                                   
											  AND A.PAYMENT_BEGIN_DT  <= A.PAYMENT_END_DT                 
											  AND A.ELIGIBILITY_BEG_DT <> ''''9999-12-31''''                    
											  AND A.ESTM_ELIG_END_DT  <> ''''9999-12-31''''                     
											  AND A.CURRENT_ELIG_IND = ''''1''''                                
											  AND A.AG_STS_CD IN (''''O'''',''''C'''',''''P'''',''''D'''')   
											  AND A.CAG_ELIG_SEQ_NUM  =                                  
             (SELECT MAX(B.CAG_ELIG_SEQ_NUM)               
                FROM '+@DB2DBName+'.T0026_AG_ELIG B              
               WHERE B.CASE_NUM          =  A.CASE_NUM     
                 AND B.PROGRAM_CD        =  A.PROGRAM_CD   
                 AND B.SUBPROGRAM_CD     =  A.SUBPROGRAM_CD
                 AND B.AG_SEQ_NUM        =  A.AG_SEQ_NUM   
                 AND B.CURRENT_ELIG_IND  = ''''1''''            
             )                                                                  
											
 HAVING COUNT (*) >= 1      '') ) 
           
                                       
begin 

 print ''1''

select  *
FROM OPENQUERY ('+@LSDBName+', '' Select CASE_NUM, PROGRAM_CD, SUBPROGRAM_CD, AG_STS_CD, AG_STS_RSN_1_CD,AG_STS_RSN_2_CD,AG_STS_RSN_3_CD
                                             FROM  '+@DB2DBName+'.T0026_AG_ELIG  A                                                                                          
											WHERE A.CASE_NUM    = '+@CaseNumber+'       
											  AND A.PROGRAM_CD  =  ''''CC''''        
											    AND A.SUBPROGRAM_CD NOT IN (''''X'''',''''Z'''')                                   
											  AND A.PAYMENT_BEGIN_DT  <= A.PAYMENT_END_DT                 
											  AND A.ELIGIBILITY_BEG_DT <> ''''9999-12-31''''                    
											  AND A.ESTM_ELIG_END_DT  <> ''''9999-12-31''''                     
											  AND A.CURRENT_ELIG_IND = ''''1''''                                
											  AND A.AG_STS_CD IN (''''O'''',''''C'''',''''P'''',''''D'''')   
											  AND A.CAG_ELIG_SEQ_NUM  =                                  
												 (SELECT MAX(B.CAG_ELIG_SEQ_NUM)               
													FROM '+@DB2DBName+'.T0026_AG_ELIG B              
												   WHERE B.CASE_NUM          =  A.CASE_NUM     
													 AND B.PROGRAM_CD        =  A.PROGRAM_CD   
													 AND B.SUBPROGRAM_CD     =  A.SUBPROGRAM_CD
													 AND B.AG_SEQ_NUM        =  A.AG_SEQ_NUM   
													 AND B.CURRENT_ELIG_IND  = ''''1''''            
												 )     
			 
			FETCH FIRST 1 ROWS ONLY''  )                                                      

end

else 

begin 

 print ''2''
select  *
FROM OPENQUERY ('+@LSDBName+', '' Select CASE_NUM, PROGRAM_CD, SUBPROGRAM_CD, AG_STS_CD, AG_STS_RSN_1_CD,AG_STS_RSN_2_CD,AG_STS_RSN_3_CD 
                                             FROM  '+@DB2DBName+'.T0026_AG_ELIG      A                                                                                          
											WHERE A.CASE_NUM    = '+@CaseNumber+'  
											  AND A.PROGRAM_CD  =  ''''CC''''            
											  AND A.SUBPROGRAM_CD IN (''''X'''')                          
											  AND A.PAYMENT_BEGIN_DT  <= A.PAYMENT_END_DT                 
											  AND A.ELIGIBILITY_BEG_DT = ''''9999-12-31''''                    
											  AND A.ESTM_ELIG_END_DT  = ''''9999-12-31''''                     
											  AND A.CURRENT_ELIG_IND = ''''1''''                                
											  AND A.AG_STS_CD IN (''''O'''',''''C'''',''''P'''',''''D'''')   
											  AND A.CAG_ELIG_SEQ_NUM  =                                  
												 (SELECT MAX(B.CAG_ELIG_SEQ_NUM)               
													FROM '+@DB2DBName+'.T0026_AG_ELIG B              
												   WHERE B.CASE_NUM          =  A.CASE_NUM     
													 AND B.PROGRAM_CD        =  A.PROGRAM_CD   
													 AND B.SUBPROGRAM_CD     =  A.SUBPROGRAM_CD
													 AND B.AG_SEQ_NUM        =  A.AG_SEQ_NUM   
													 AND B.CURRENT_ELIG_IND  = ''''1''''            
												 )     
			 
			 FETCH FIRST 1 ROWS ONLY	'' )

end 


 
 '

 end;

 exec (@strSQL) ;
GO
/****** Object:  StoredProcedure [wwp].[SP_CARESEmployment]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[SP_CARESEmployment] 
(
@pinnumber VARCHAR(10),
@SchemaName VARCHAR(20)
)

AS
BEGIN

declare @statement1 as varchar(max)
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end
        

print @pinnumber

set @statement1 =  
 'select  *
FROM OPENQUERY('+@LSDBName+', ''
SELECT A.PIN_NUM  AS PARTICIPANT, 
       A.SEQ_NUM  AS EMPLOYMENTSEQUENCENUMBER,
       A.EMPLOYER_NAM AS EMPLOYERNAME,
	   A.EMP_ADDRESS_TXT AS EMPLOYERADDRESS,
	   A.EMPLOYER_CITY_ADR AS CITY,
       A.EMPLOYER_STATE_ADR AS STATE,
       A.EMPLOYER_ZIP_ADR AS ZIP ,  
	   A.EMPLOYER_PHONE_NUM AS PHONENUMBER ,
       A.FAX_NUM AS FAXNUMBER,
       A.EMPLOYMENT_BEG_DT AS EMPLOYMENTBEGINDATE, 
       A.EMPLOYMENT_END_DT AS EMPLOYMENTENDDATE ,
	   A.EMPLOYMENT_TYPE_CD AS EMPLOYMENTTYPE,
       A.PAY_FRQ_CD AS  PAYFREQUENCY,
	   B.EI_TYP AS WAGETYPE,
       B.HR_RT_AMT AS HOURLYRATEAMOUNT,         
       B.AVG_WRK_HRS AS AVERAGEWORKHOURS,       
       B.EI_TYP_TOT_AMT AS EMPLOYMENTTYPETOTAL,     
       ROW_NUMBER () OVER(ORDER BY A.PIN_NUM)  AS SEQUENCEID 
					 
FROM '+@DB2DBName+'.T0078_IN_EMP_INC A
LEFT OUTER JOIN PWS639TC.T0607_WG_EARN_DTL B
         ON B.PIN_NUM       = A.PIN_NUM   
        AND B.EMP_SEQ_NUM   = A.SEQ_NUM
        AND B.EMP_HIST_SEQ_NUM  = A.HISTORY_SEQ_NUM      
WHERE A.PIN_NUM = '+@pinnumber+ '
  AND A.HISTORY_CD = 0
  AND A.DELETE_REASON_CD  <> ''''AE''''''

)'


exec (@statement1) 



END ;

GO
/****** Object:  StoredProcedure [wwp].[SP_CARESFailureReasonCodes]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>  @LinkedServer = 'MyLinkedServer'
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[SP_CARESFailureReasonCodes] 
(
@ReasonCode varchar(03),
@SchemaName varchar(20)
)
as begin


declare @strsQL varchar(max)

declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---


  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end
          

set @strSQL = 

 ' 
SELECT  *
FROM OPENQUERY ('+@LSDBName+', '' SELECT RSN_CD, LONG_DES_TXT  FROM  '+@DB2DBName+'.T0261_ELIG_RSN_TXT  A                                                                                          
											WHERE A.RSN_CD    = '+@ReasonCode+'       
											  AND A.LANG_CD  =  ''''E''''                                                
											  AND A.TXT_EFF_END_DT = ''''9999-12-31''''                    
											    											        
												'' )     
 '

 end;

 Print @strSql

 exec (@strSQL) ;
GO
/****** Object:  StoredProcedure [wwp].[SP_CaseAddress]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_CaseAddress]
(

@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)

) as
begin
declare @statement1 as varchar(max);
declare @statement2 as varchar(max);
declare @statement3 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
declare @Case as decimal(10,0) ;
 
 
   	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
						END
	---

  
 	DECLARE @TempCurrentCaseInfo TABLE (				   
	  [CASE_NUM] [decimal](10, 0) NOT NULL,
	  [LINE_1_ADDRESS] [varchar](200) NULL,
	  [LINE_2_ADDRESS] [varchar](200) NULL,
	  [CITY_ADR] [varchar](50) NULL,
	  [STATE_ADR] [varchar](10) NULL,
	  [ZIP_ADR] [varchar](10) NULL,
	  [COUNTY_NUM] [smallint] NULL,
	  [ID] [bigint] IDENTITY(1,1) NOT NULL	 
	               	)
 
						 

--INSERT @TempCurrentCaseInfo(CaseNumber)
-- Exec (@statement1) ;


-- If ((select CASENumber from @TempCurrentCaseInfo) > 0 )or ((select CASENumber from @TempCurrentCaseInfo) is not null )

-- Begin
--     set @Case = (select CASENumber from @TempCurrentCaseInfo)
-- End
 
-- Else
-- Begin
   
--     SET @STATEMENT2  =  'SELECT CASE_NUM 
--                         FROM OPENQUERY('+@LSDBName+', ''SELECT A.CASE_NUM 
--						                                   FROM '+@DB2DBName+'.T0015_CS_INDV A
--														  WHERE A.PIN_NUM = '+@PinNumber+'
--														    AND A.DELETE_REASON_CD = '''' ''''
--															AND A.HISTORY_CD = 0
--															AND A.HISTORY_SEQ_NUM =  ( SELECT MAX(AA.HISTORY_SEQ_NUM)
--															                             FROM '+@DB2DBName+'.T0015_CS_INDV AA
--														                                WHERE AA.PIN_NUM = A.PIN_NUM
--																						  AND AA.DELETE_REASON_CD = A.DELETE_REASON_CD
--																						  AND AA.HISTORY_CD  = A.HISTORY_CD
--																					 )
--															'')'


 
set @statement1 = 'SELECT CASE_NUM,
                          LINE_1_ADDRESS,
						  LINE_2_ADDRESS,
						  CITY_ADR,
						  STATE_ADR,
						  ZIP_ADR,
						  COUNTY_NUM
FROM OPENQUERY('+@LSDBName+', ''SELECT  A.CASE_NUM, 
                                        RTRIM(A.ST_NUMBER_ADR) || 
                                        RTRIM(A.UNIT_ADR)|| 
										CASE A.DIRECTION_ADR WHEN ''''W'''' THEN '''' WEST ''''          
															 WHEN ''''S'''' THEN '''' SOUTH ''''                          
															 WHEN ''''E'''' THEN '''' EAST ''''                           
															 WHEN ''''N'''' THEN '''' NORTH ''''    
															 WHEN '''' '''' THEN '''' '''' END||                             
										RTRIM(A.ST_RURAL_ADR) ||'''' ''''||
										LTRIM(RTRIM(A.SUFFIX_ADR)) || 
										RTRIM(A.QUADRANT_ADR) ||'''' ''''||
								        RTRIM(A.APARTMENT_ADR) AS LINE_1_ADDRESS,
										A.LINE_2_ADR as LINE_2_ADDRESS,
										A.CITY_ADR, 
										A.STATE_ADR, 
										SUBSTR(A.ZIP_ADR,1,5) AS ZIP_ADR, 
										A.COUNTY_NUM 										                                       
								  FROM  '+@DB2DBName+'.T0001_CASE    A,       
						               '+@DB2DBName+'.T0018_WP_INDV  B
								   WHERE B.PIN_NUM = '+@PinNumber+'
									 AND B.WP_SYSTEM_STS_CD IN (''''E'''' , ''''R'''')
			 					  	 AND B.PROGRAM_CD = ''''WW''''   
								     AND A.CASE_NUM  = B.CASE_NUM
								  '')'
 
 
INSERT   @TempCurrentCaseInfo  (				   
	  CASE_NUM  ,
	  LINE_1_ADDRESS , 
	  LINE_2_ADDRESS, 
	  CITY_ADR  ,
	  STATE_ADR ,
	  ZIP_ADR , 
	  COUNTY_NUM 
	  ) 
exec (@statement1)


IF ((SELECT CASE_NUM FROM @TempCurrentCaseInfo ) = 0 ) OR ((SELECT CASE_NUM FROM @TempCurrentCaseInfo ) IS NULL ) 

BEGIN

set @statement1 = 'SELECT CASE_NUM,
                          LINE_1_ADDRESS,
						  LINE_2_ADDRESS,
						  CITY_ADR,
						  STATE_ADR,
						  ZIP_ADR,
						  COUNTY_NUM
FROM OPENQUERY('+@LSDBName+', ''SELECT  A.CASE_NUM, 
                                        RTRIM(A.ST_NUMBER_ADR) || 
                                        RTRIM(A.UNIT_ADR)|| 
										CASE A.DIRECTION_ADR WHEN ''''W'''' THEN '''' WEST ''''          
															 WHEN ''''S'''' THEN '''' SOUTH ''''                          
															 WHEN ''''E'''' THEN '''' EAST ''''                           
															 WHEN ''''N'''' THEN '''' NORTH ''''    
															 WHEN '''' '''' THEN '''' '''' END||                             
										RTRIM(A.ST_RURAL_ADR) ||'''' ''''||
										LTRIM(RTRIM(A.SUFFIX_ADR)) || 
										RTRIM(A.QUADRANT_ADR) ||'''' ''''||
								        RTRIM(A.APARTMENT_ADR) AS LINE_1_ADDRESS,
										A.LINE_2_ADR as LINE_2_ADDRESS,
										A.CITY_ADR, 
										A.STATE_ADR, 
										SUBSTR(A.ZIP_ADR,1,5) AS ZIP_ADR, 
										A.COUNTY_NUM 										                                       
								  FROM  '+@DB2DBName+'.T0001_CASE    A,       
						                '+@DB2DBName+'.T0015_CS_INDV B
								    WHERE B.PIN_NUM = '+@PinNumber+'
									  AND B.DELETE_REASON_CD = '''' ''''
									  AND B.HISTORY_CD = 0
									  AND B.HISTORY_SEQ_NUM =  ( SELECT MAX(BB.HISTORY_SEQ_NUM)
															       FROM '+@DB2DBName+'.T0015_CS_INDV BB
														          WHERE BB.PIN_NUM = B.PIN_NUM
																	AND BB.DELETE_REASON_CD = B.DELETE_REASON_CD
																	AND BB.HISTORY_CD  = B.HISTORY_CD
																)  
								     AND A.CASE_NUM  = B.CASE_NUM
								  '')'
 
 
INSERT   @TempCurrentCaseInfo  (				   
	  CASE_NUM  ,
	  LINE_1_ADDRESS , 
	  LINE_2_ADDRESS, 
	  CITY_ADR  ,
	  STATE_ADR ,
	  ZIP_ADR , 
	  COUNTY_NUM 
	  ) 
exec (@statement1)

END



SELECT CASE_NUM  ,
	  LINE_1_ADDRESS , 
	  LINE_2_ADDRESS, 
	  CITY_ADR  ,
	  STATE_ADR ,
	  ZIP_ADR , 
	  COUNTY_NUM ,
ROW_NUMBER () OVER(ORDER BY CASE_NUM)  AS ID   
FROM @TempCurrentCaseInfo 

END



	 
	                                               
         

GO
/****** Object:  StoredProcedure [wwp].[SP_ConfidentialCase]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_ConfidentialCase]
(
@CaseNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
declare @CurrentDate as varchar(10) ;
declare @Case1 as varchar(10) ;

set @CurrentDate = CAST(GETDATE() AS DATE);

 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

print 1
--delete wwp.AuxillaryPayment where PinNumber = CAST('+@PinNumber+' AS DECIMAL(10, 0)) ;

Set @Case1 =  @CaseNumber  ;

delete wwp.ConfidentialCaseInformation where CaseNumber = CONVERT(numeric(10,0), @CaseNumber) ;

print 2  

set @statement1 = '
select CaseNumber,
       ConfidentialSwitch,
	   WorkerId ,
	   CaseloadNumber,
	   WorkerFirstName,
	   WorkerLastName,
	   WorkerMiddleInitial,
	   WorkerSuffixName 
  FROM OPENQUERY('+@LSDBName+',''SELECT A.RFA_CASE_NUM as CaseNumber,
	                                      A.CASE_CNFD_SW as ConfidentialSwitch,   
       B.USER_ID as WorkerId  ,    
       A.CASELOAD_NUM   as CaseloadNumber  ,                                      
       C.WORKER_FIRST_NAM  as WorkerFirstName   ,                             
       C.WORKER_LAST_NAM   as WorkerLastName  , 
	   C.WORKER_MIDDLE_NAM as WorkerMiddleInitial ,
	   C.WORKER_SUFFIX_NAM as WorkerSuffixName	                          
  FROM '+@DB2DBName+'.T0212_CS_CASELOAD A ,                     
       '+@DB2DBName+'.T0002_CASELOAD_WKR B,                     
       '+@DB2DBName+'.T0007_WORKER C                            
 WHERE A.RFA_CASE_NUM  = '+@CaseNumber+'                       
   AND A.RFA_CASE_TYPE_IND  = ''''C''''                         
   AND B.CASELOAD_NUM = A.CASELOAD_NUM       
    AND B.WORKER_TYPE_IND  = ''''P''''                 
   AND C.USER_ID    =   B.USER_ID                         
   WITH UR ;                                              
'') '

 
print @statement1 ;


INSERT INTO [wwp].[ConfidentialCaseInformation]
           ([CaseNumber]
           ,[ConfidentialSwitch]
           ,[WorkerID]
           ,[CaseloadNumber]
           ,[WorkerFirstName]
           ,[WorkerLastName]
           ,[WorkerMiddleInitial]
           ,[WorkerSuffixName]
           )
exec (@statement1) ;


select A.CaseNumber, CASE A.ConfidentialSwitch When 'Y' then 'Yes'
                                               when 'N' then 'No'
                        end  as ConfidendtialSwitch, 
       A.WorkerId,A.WorkerFirstName,A.WorkerLastName,A.WorkerMiddleInitial,A.WorkerSuffixName,B.UserID 
  from wwp.ConfidentialCaseInformation A,
       wwp.WorkerLoginDetails B
	Where A.WorkerFirstName =  b.WorkerFirstName	 
	  and A.WorkerLastName  = b.WorkerLastName
                   ;


end
	


    
   
       
			

            
                                       

 




GO
/****** Object:  StoredProcedure [wwp].[SP_CWWChildCareEligibiltyStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_CWWChildCareEligibiltyStatus]
    (
      @PinNumber VARCHAR(10),
	  @SchemaName VARCHAR(20) 
    )
AS
    BEGIN
        DECLARE @Statement0 VARCHAR(MAX)
        DECLARE @Statement1 VARCHAR(MAX)
		DECLARE @LSDBName VARCHAR(100)
		DECLARE @DB2DBName VARCHAR(100)
		DECLARE @CaseNumber VARCHAR(10)

		DECLARE @Case TABLE (CASE_NUM VARCHAR(10))

		---

		SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
								WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
								WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
								WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
						   END
		---

		SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
								 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
								 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
								 WHEN @SchemaName = 'WWP' THEN 'PWP639TC'
							END
		---

		set @statement0 = 'SELECT CASE_NUM 
                            FROM OPENQUERY('+@LSDBName+', ''SELECT  A.CASE_NUM FROM      
						               '+@DB2DBName+'.T0018_WP_INDV  A
								   WHERE A.PIN_NUM = '+@PinNumber+'
		                           '')'

	 INSERT @Case(CASE_NUM)
	 EXEC (@STATEMENT0)




		--Change the logic to get @CaseNumber
		SET @CaseNumber = (SELECT CASE_NUM FROM @Case)
		
		DECLARE @temp TABLE
            (
              [CASE_NUM] [DECIMAL](10, 0) NULL ,
              [PROGRAM_CD] [VARCHAR](03) NULL ,
              [SUBPROGRAM_CD] [VARCHAR](02) NULL ,
              [AG_STS_CD] [VARCHAR](01) NULL ,
              [AG_STS_RSN_1_CD] [VARCHAR](03) NULL ,
              [AG_STS_RSN_2_CD] [VARCHAR](03) NULL ,
              [AG_STS_RSN_3_CD] [VARCHAR](03) NULL
            );

 
        INSERT  INTO @temp
                EXEC [wwp].[SP_CARESChildCareEligbilityStatus] @CaseNumber = @CaseNumber, @SchemaName = @SchemaName ;


        --PRINT 'after 1 exe';

        DECLARE @Ag_sts_rsn_1_cd VARCHAR(03); 

        SELECT  @Ag_sts_rsn_1_cd = AG_STS_RSN_1_CD
        FROM    @temp;

        DECLARE @RSN_CD VARCHAR(03); 
        DECLARE @LONG_DES_TXTD VARCHAR(250); 


        IF EXISTS ( SELECT  *
                    FROM    @temp
                    WHERE   AG_STS_RSN_1_CD > 0 )
            BEGIN

            --PRINT 'after 2 sql';


                DECLARE @temp2 TABLE
                    (
                      [RSN_CD] [VARCHAR](03) NULL ,
                      [LONG_DES_TXTD] [VARCHAR](250) NULL
                    );

                INSERT  INTO @temp2
                        EXEC [wwp].[SP_CARESFailureReasonCodes] @ReasonCode = @Ag_sts_rsn_1_cd, @SchemaName = @SchemaName;
   
                SELECT  @RSN_CD = [RSN_CD] ,
                        @LONG_DES_TXTD = [LONG_DES_TXTD]
                FROM    @temp2; 


            END;

--------------------
   DECLARE @Ag_sts_rsn_2_cd VARCHAR(03); 

        SELECT  @Ag_sts_rsn_2_cd = AG_STS_RSN_2_CD
        FROM    @temp;

        DECLARE @RSN_CD1 VARCHAR(03); 
        DECLARE @LONG_DES_TXTD1 VARCHAR(250); 


        IF EXISTS ( SELECT  *
                    FROM    @temp
                    WHERE   AG_STS_RSN_2_CD > 0 )
            BEGIN

            --PRINT 'after 2 sql';


                DECLARE @temp3 TABLE
                    (
                      [RSN_CD] [VARCHAR](03) NULL ,
                      [LONG_DES_TXTD] [VARCHAR](250) NULL
                    );

                INSERT  INTO @temp3
                        EXEC [wwp].[SP_CARESFailureReasonCodes] @ReasonCode = @Ag_sts_rsn_2_cd, @SchemaName = @SchemaName;
   
                SELECT  @RSN_CD1 = [RSN_CD] ,
                        @LONG_DES_TXTD1 = [LONG_DES_TXTD]
                FROM    @temp3; 


            END;
 
 ----------------
 --------------------
   DECLARE @Ag_sts_rsn_3_cd VARCHAR(03); 

        SELECT  @Ag_sts_rsn_3_cd = AG_STS_RSN_3_CD
        FROM    @temp;

        DECLARE @RSN_CD2 VARCHAR(03); 
        DECLARE @LONG_DES_TXTD2 VARCHAR(250); 


        IF EXISTS ( SELECT  *
                    FROM    @temp
                    WHERE   AG_STS_RSN_3_CD > 0 )
            BEGIN

            --PRINT 'after 2 sql';


                DECLARE @temp4 TABLE
                    (
                      [RSN_CD] [VARCHAR](03) NULL ,
                      [LONG_DES_TXTD] [VARCHAR](250) NULL
                    );

                INSERT  INTO @temp4
                        EXEC [wwp].[SP_CARESFailureReasonCodes] @ReasonCode = @Ag_sts_rsn_3_cd, @SchemaName = @SchemaName;
   
                SELECT  @RSN_CD2 = [RSN_CD] ,
                        @LONG_DES_TXTD2 = [LONG_DES_TXTD]
                FROM    @temp4; 


            END;
 
 ----------------
 

        SELECT  [CASE_NUM] AS CaseNumber ,
                [PROGRAM_CD] AS ProgramCode ,
                [SUBPROGRAM_CD] AS SubProgramCode ,
                CASE [AG_STS_CD]
                  WHEN 'O' THEN 'OPEN'
                  WHEN 'C' THEN 'CLOSED'
                  WHEN 'P' THEN 'PEND'
                  WHEN 'D' THEN 'DENIED'
                END AS EligibilityStatus ,
                RTRIM(ISNULL(@RSN_CD, '')) AS ReasonCode,
                RTRIM(ISNULL(@LONG_DES_TXTD, '')) AS DescriptionText,
                RTRIM(ISNULL(@RSN_CD1, '')) AS ReasonCode1,
                RTRIM(ISNULL(@LONG_DES_TXTD1, '')) AS DescriptionText1,
				RTRIM(ISNULL(@RSN_CD2, '')) AS ReasonCode2,
                RTRIM(ISNULL(@LONG_DES_TXTD2, '')) AS DescriptionText2
        FROM    @temp; 
 

 
    END;

GO
/****** Object:  StoredProcedure [wwp].[SP_CWWChildCareEligStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>  @LinkedServer = 'MyLinkedServer'
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[SP_CWWChildCareEligStatus] 
(
@CaseNumber varchar(10)
)
as begin


declare @statement1 as varchar(max);

 Declare @temp table
    (
    [CASE_NUM] [decimal](10, 0) NULL,
    [PROGRAM_CD] [varchar](03) NULL,
    [SUBPROGRAM_CD]	[varchar](02) NULL,
	[AG_STS_CD]	[varchar](01)  NULL,
	[AG_STS_RSN_1_CD]	[varchar](03) NULL,
	[AG_STS_RSN_2_CD]	[varchar](03) NULL,
	[AG_STS_RSN_3_CD]	[varchar](03) NULL
    )

 
  insert into @temp
  exec [wwp].[SP_CARESChildCareEligbilityStatus] @CaseNumber = @CaseNumber

  select [CASE_NUM],[PROGRAM_CD] AS PROGRAMCODE,[SUBPROGRAM_CD] AS SUBPROGAMCODE,
         CASE [AG_STS_CD] WHEN 'O' THEN 'OPEN'
		                  WHEN 'C' THEN 'CLOSED'
						  WHEN 'P' THEN 'PEND'
						  WHEN 'D' THEN 'DENIED'
		 END as CCELIGBIBILITYSTATUS
     from @temp 

  Print 'after 1 exe'

  Declare @Ag_sts_rsn_1_cd varchar (03) 

  set @Ag_sts_rsn_1_cd = (SELECT AG_STS_RSN_1_CD FROM @TEMP )


IF EXISTS (Select * from @temp where AG_STS_RSN_1_CD > 0 )

Print 'after 2 sql'




  begin

   Declare @temp2 table
    (
    [RSN_CD] [varchar](03) NULL,
    [LONG_DES_TXTD] [varchar](250) NULL
    )


  insert into @temp2
    exec [wwp].[SP_CARESFailureReasonCodes] @ReasonCode = @Ag_sts_rsn_1_cd
   
   SELECT RSN_CD AS REASONCODE, LONG_DES_TXTD AS DescriptionText FROM @TEMP2 

  END
 


 
 end ;

GO
/****** Object:  StoredProcedure [wwp].[SP_CWWReferredParticipant1]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [wwp].[SP_CWWReferredParticipant1]
(
@WAMSId VARCHAR(50),
@WPGeoArea SMALLINT,
@RefreshIndicator Bit,
@SchemaName VARCHAR(20)
) as
begin

declare @Statement1 as varchar(max);
declare @Statement2 as varchar(max);
declare @Statement3 as varchar(max);
declare @Statement4 as varchar(max) ;
declare @Statement4A as varchar(max) ;
declare @SQLSelect as varchar(max);
declare @SQLDelete as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
declare @CountyNumber as varchar(500) ;
declare @TableName as varchar(200) ;

---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end
---
    If @WPGeoArea = 01 Begin Set @CountyNumber = '(40)' end
	If @WPGeoArea = 02 Begin Set @CountyNumber = '(40)' end
	If @WPGeoArea = 03 Begin Set @CountyNumber = '(40)' end
	If @WPGeoArea = 04 Begin Set @CountyNumber = '(40)' end
	If @WPGeoArea = 05 Begin Set @CountyNumber = '(45,64,66,67,30,51)' end
	If @WPGeoArea = 06 Begin Set @CountyNumber = '(22,23,25,28,33,53,11,13,14,52,56)' end
	If @WPGeoArea = 07 Begin Set @CountyNumber = '(06,27,32,41,46,61,62,12)' end
	If @WPGeoArea = 08 Begin Set @CountyNumber = '(02,04,26,54,57,10,03,07,09,16,17,18,47,48,55,65)' end
	If @WPGeoArea = 09 Begin Set @CountyNumber = '(35,50,60,63,71,58,24,39,68,69,01,29,34,37,43,49,72)' end
	If @WPGeoArea = 10 Begin Set @CountyNumber = '(19,21,05,15,38,42,20,08,31,36,44,70,59)' end
-------

print @CountyNumber

print 'sqlselect'


 

	DECLARE @TempInfo TABLE (
		 PinNumber [decimal](10, 0)
		,FirstName VARCHAR(50)
		,MiddleInitialName CHAR(1)
		,LastName VARCHAR(50)
		,SuffixName CHAR(3)
		,CountyNumber SMALLINT
		,OfficeNumber SMALLINT
		,ReferralStatus VARCHAR(50)
		,WPReferralDate DATE
		,ProgramCode VARCHAR(5)
		,LearnFareStaus BIT
		,CASENumber DECIMAL(10, 0)
		,MFWorkerId VARCHAR(6)
		,ConfidentialSwitch BIT
		,MFConfidentialWorker VARCHAR(06)
		,WAMSId VARCHAR(200)
		)



set @Statement1 = 'select  PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   LearnFareStaus,
						   CASENumber,
						   MFWorkerId ,
						   ConfidentialSwitch,
						   MFConfidentialWorker,
						   '''+@WAMSId+''' as WAMSId
						 
FROM OPENQUERY('+@LSDBName+', ''
 SELECT 	B.PIN_NUM        as PinNumber,
            C.FIRST_NAM      as FirstName,
			C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
			C.LAST_NAM as LastName,
			C.SUFFIX_NAM as SuffixName,
			B.COUNTY_NUM as CountyNumber,
			B.OFFICE_NUM as OfficeNumber,
			CASE B.WP_SYSTEM_STS_CD WHEN ''''E'''' THEN ''''ENROLLED''''   
			                        WHEN ''''P'''' THEN ''''PEND''''
									WHEN ''''S'''' THEN ''''SCHEDULED''''
									WHEN ''''C'''' THEN ''''DISENROLLED''''
									WHEN ''''R'''' THEN ''''REFERRED''''
									END  as ReferralStatus,
			B.WP_REFERRAL_DT as WPReferralDate,
 	        B.PROGRAM_CD as ProgramCode,
			CASE B.CURRENT_REG_CD WHEN ''''L'''' THEN ''''1''''
			                ELSE ''''0'''' END as LearnFareStaus,
			B.CASE_NUM as CASENumber,
			B.CASE_MANAGER_ID as MFWorkerId ,
			CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN ''''1''''
			                    WHEN ''''N'''' THEN ''''0'''' END as ConfidentialSwitch ,
			CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN E.USER_ID 
			                    WHEN ''''N'''' THEN '''' ''''
							  END as MFConfidentialWorker       	            
   FROM  '+@DB2DBName+'.T0018_WP_INDV AS B  ,
         '+@DB2DBName+'.T0011_INDIVIDUAL AS C ,
		 '+@DB2DBName+'.T0212_CS_CASELOAd AS D,
		 '+@DB2DBName+'.T0002_CASELOAD_WKR E                                      
  WHERE  B.PIN_NUM > 0   
    AND C.PIN_NUM = B.PIN_NUM
	AND B.COUNTY_NUM in '+@CountyNumber+'   
	AND B.WP_SYSTEM_STS_CD IN (''''R'''',''''S'''')   
	AND B.PROGRAM_CD NOT IN (''''FS'''')
	AND D.RFA_CASE_NUM  = B.CASE_NUM  
	AND E.CASELOAD_NUM = D.CASELOAD_NUM 
	AND E.WORKER_TYPE_IND = ''''P''''                                                  
  ORDER BY B.WP_REFERRAL_DT DESC                                                                                                
   WITH UR ; '')                                  

  '
  PRINT @Statement1

 PRINT 'AFTER TRY BEFORE EXEC'

print 'step3'


    Insert into @TempInfo (PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   LearnFareStaus,
						   CASENumber,
						   MFWorkerId ,
						   ConfidentialSwitch,
						   MFConfidentialWorker,
						   WAMSId)
     EXEC (@Statement1)


--select * from  @TempInfo

set @Statement2 = 'select  PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   ''0'' AS LearnFareStatus,
						   CaseNumber,
						   '' '' AS MFWorkerId,
	                       ConfidentialSwitch,
	                       MFConfidentialWorker,
						   '''+@WAMSId+''' as WAMSId
FROM OPENQUERY('+@LSDBName+', ''SELECT B.PIN_NUM  as PinNumber,    
									C.FIRST_NAM      as FirstName,
									C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
									C.LAST_NAM as LastName,
									C.SUFFIX_NAM as SuffixName,       
									B.COUNTY_NUM as CountyNumber,
			                        B.OFFICE_NUM as OfficeNumber,    
									''''PENDING'''' as ReferralStatus,
									B.WP_REFERRAL_DT as WPReferralDate,
 	                                B.PROGRAM_CD as ProgramCode  ,
								    B.CASE_NUM as CASENumber,
			                       CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN ''''1''''
			                                           WHEN ''''N'''' THEN ''''0'''' END as ConfidentialSwitch ,
			                        CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN E.USER_ID 
			                                            WHEN ''''N'''' THEN '''' ''''
							                          END as MFConfidentialWorker      
							 FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR  AS B  ,
								   '+@DB2DBName+'.T0011_INDIVIDUAL AS C  ,
								   '+@DB2DBName+'.T0212_CS_CASELOAd AS D,
		                           '+@DB2DBName+'.T0002_CASELOAD_WKR E                 
							  WHERE  B.PIN_NUM > 0   
								AND C.PIN_NUM = B.PIN_NUM
								AND B.COUNTY_NUM in '+@CountyNumber+'    
								AND B.PROGRAM_CD NOT IN (''''FS'''')
								AND D.RFA_CASE_NUM  = B.CASE_NUM  
	                            AND E.CASELOAD_NUM = D.CASELOAD_NUM 
	                            AND E.WORKER_TYPE_IND = ''''P''''                                                           
							  ORDER BY B.WP_REFERRAL_DT DESC                                                                                                
							   WITH UR ; '')                                  
 '


    Insert into @TempInfo (PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   LearnFareStaus,
						   CASENumber,
						   MFWorkerId ,
						   ConfidentialSwitch,
						   MFConfidentialWorker,
						   WAMSId)
    EXEC (@Statement2)
 
----------------------------------------

 -- select * from  @TempInfo



   set @Statement3 = 'SELECT b.PinNumber,
                           b.FirstName,
						   b.MiddleInitialName,						  
						   b.LastName,
						   b.SuffixName,
						   a.CountyNumber,
						   a.OfficeNumber,
						   ''Referred''  AS ReferralStatus,
						   a.ReferralDate AS WPReferralDate,
						   CASE EnrolledProgramId when 9 then ''TMJ''
						                          when 10 then ''CF''
												  when 12 then ''TJ'' 
												  END as ProgramCode, 
						   '' '' as LearnFareStatus,
						   a.CASENumber,
						   '' '' AS MFWorkerId,
		                   '' '' AS ConfidentialSwitch ,
			               '' '' AS MFConfidentialWorker ,
						   ''chidapa1''  as WAMSId 
						   FROM WWP.ParticipantEnrolledProgram a ,
						        wwp.participant b
						       where a.EnrolledProgramId in (9,10,12)  
							     and a.EnrolledProgramStatusCodeId = 1
								 and a.EnrollmentDate is null
								 and a.DisenrollmentDate is null
								 and a.ReferralDate is not null
								 and b.id = a.ParticipantId
								 and a.CountyNumber in '+@CountyNumber+'    
						   '


    Insert into @TempInfo (PinNumber,
                           FirstName,
						   MiddleInitialName,						  
						   LastName,
						   SuffixName,
						   CountyNumber,
						   OfficeNumber,
						   ReferralStatus,
						   WPReferralDate,
						   ProgramCode,
						   LearnFareStaus,
						   CASENumber,
						   MFWorkerId ,
						   ConfidentialSwitch,
						   MFConfidentialWorker,
						   WAMSId)
    EXEC (@Statement3)
 

 




create table #Temp2  ( 
	 [PinNumber] [Decimal](10,0) NOT NULL,
	 [FirstName] [Varchar](50) ,
	 [MiddleInitialName] [Varchar](1),						  
	 [LastName] [Varchar](50),
	 [SuffixName] [Varchar](3),
     [CountyNumber] [SmallInt],
	 [OfficeNumber] [SmallInt],
	 [ReferralStatus] [Varchar](50),
	 [WPReferralDate] [Date],
	 [ProgramCode] [Varchar](50),
	 [LearnFareStatus] [bit] ,
	 [CaseNumber] [Decimal](10,0) ,
	 [MFWorkerId] [Varchar](06) ,
	 [ConfidentialSwitch][bit],
	 [MFConfidentialWorker][Varchar](06) ,
	 [WAMSId] [Varchar](200)
    )





      SELECT A.PinNumber,
	   A.FirstName,
	   A.MiddleInitialName,						  
	   A.LastName,
	   A.SuffixName,
       A.CountyNumber,
	   A.OfficeNumber,
	   A.ReferralStatus,
	   A.WPReferralDate,
	   A.ProgramCode,
	   ' '  AS   LearnFareStatus,
	   A.CASENumber,
	   A.MFWorkerId,
	   A.ConfidentialSwitch ,
	   A.MFConfidentialWorker ,
	   A.WAMSId  ,
	   ROW_NUMBER () OVER(ORDER BY A.PinNumber)  AS ID    
	   from @TempInfo A
	   where A.WAMSId = '' +@WAMSId+ ''
         and ProgramCode  not in ('FS')
		 and A.OfficeNumber in ( select C.OfficeNumber 
		                           from wwp.worker B,
		                                 wwp.WorkerOfficePermissionBridge c  
							      where  B.WAMSId = A.WAMSId
								    and   C.WorkerId = B.Id )
		 order by A.WPReferralDate Desc , A.OfficeNumber

end





-- procedure 

--ALTER PROCEDURE [wwp].[SP_CWWReferredParticipant]
--(
--@WAMSId VARCHAR(50),
--@WPGeoArea SMALLINT,
--@RefreshIndicator Bit,
--@SchemaName VARCHAR(20)
--) as
--begin

--declare @Statement1 as varchar(max);
--declare @Statement2 as varchar(max);
--declare @Statement3 as varchar(max);
--declare @Statement4 as varchar(max) ;
--declare @Statement5 as varchar(max) ;
--declare @Statement4A as varchar(max) ;

--declare @SQLSelect as varchar(max);
--declare @SQLDelete as varchar(max);
--declare @DB2DBName as varchar(100) ;
--declare @LSDBName as varchar(100) ;
--declare @CountyNumber as varchar(500) ;
--declare @TableName as varchar(200) ;
--declare @County1 as Varchar(2) = '0' ;
--declare @County2 as Varchar(2) = '0';
--declare @County3 as Varchar(2) = '0' ;
--declare @County4 as Varchar(2) = '0';
--declare @County5 as Varchar(2) = '0' ;
--declare @County6 as Varchar(2) = '0';
--declare @County7 as Varchar(2) = '0' ;
--declare @County8 as Varchar(2) = '0';
--declare @County9 as Varchar(2) = '0' ;
--declare @County10 as Varchar(2) = '0';
--declare @County11 as Varchar(2) = '0' ;
--declare @County12 as Varchar(2) = '0';
--declare @County13 as Varchar(2) = '0' ;
--declare @County14 as Varchar(2) = '0';
--declare @County15 as Varchar(2) = '0' ;
--declare @County16 as Varchar(2) = '0';
--declare @County17 as Varchar(2) = '0' ;
--declare @County18 as Varchar(2) = '0';
--declare @County19 as Varchar(2) = '0' ;
--declare @County20 as Varchar(2) = '0';
-----
--  if @SchemaName = 'WWPDEV'

--    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

--	      set @DB2DBName = 'PWS639TC' 
-- end
-- -----
--    if @SchemaName = 'WWPSYS'

--    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

--	      set @DB2DBName = 'PWS639TC' 
--    end 
------	
--    if @SchemaName = 'WWPACC'

--    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

--	      set @DB2DBName = 'PWA639TC' 
--    end
-----
 	
--    if @SchemaName = 'WWPTRN'

--    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

--	      set @DB2DBName = 'PWE639TC' 
--    end
-- ---
 	
--    if @SchemaName = 'WWP'

--    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

--	      set @DB2DBName = 'PWP639TC' 
--    end
-----
--    If @WPGeoArea = 01 Begin Set @TableName = 'wwp.Stage_Agency_01' end
--	If @WPGeoArea = 02 Begin Set @TableName = 'wwp.Stage_Agency_02' end
--	If @WPGeoArea = 03 Begin Set @TableName = 'wwp.Stage_Agency_03' end
--	If @WPGeoArea = 04 Begin Set @TableName = 'wwp.Stage_Agency_04' end
--	If @WPGeoArea = 05 Begin Set @TableName = 'wwp.Stage_Agency_05' end
--	If @WPGeoArea = 06 Begin Set @TableName = 'wwp.Stage_Agency_06' end
--	If @WPGeoArea = 07 Begin Set @TableName = 'wwp.Stage_Agency_07' end
--	If @WPGeoArea = 08 Begin Set @TableName = 'wwp.Stage_Agency_08' end
--	If @WPGeoArea = 09 Begin Set @TableName = 'wwp.Stage_Agency_09' end
--	If @WPGeoArea = 10 Begin Set @TableName = 'wwp.Stage_Agency_10' end
---------

--DECLARE @TEMP table
--(CountyNumber varchar(2),
--  ID Integer not null )

-- insert @TEMP
--  Select CountyNumber,ROW_NUMBER () OVER(ORDER BY CountyNumber)  from wwp.CountyAndTribe A 
--  , wwp.WPOrganization B
--  , wwp.Agency C
--  where C.AgencyNumber = @WPGeoArea
--    and B.AgencyId = C.Id
--    and A.Id = B.CountyAndTribeId


----select CountyNumber,ID from @Temp

--set @County1 = (select CountyNumber from @TEMP where id =1 )
--if @County2 is Null Set @County2 = 0  ;
--print @County1
--set @County2 = (select CountyNumber from @TEMP where id =2 )
--if @County2 is Null Set @County2 = 0  ;
--print @County2
--set @County3 = (select CountyNumber from @TEMP where id =3 )
--if @County3 is Null Set @County3 = 0  ;
--print @County3
--set @County4 = (select CountyNumber from @TEMP where id =4 )
--if @County4 is Null Set @County4 = 0  ;
--print @County4
--set @County5 = (select CountyNumber from @TEMP where id =5 )
--if @County5 is Null Set @County5 = 0  ;
--print @County5
--set @County6 = (select CountyNumber from @TEMP where id =6 )
--if @County6 is Null Set @County6 = 0  ;
--print @County6
--set @County7 = (select CountyNumber from @TEMP where id =7 )
--if @County7 is Null Set @County7 = 0  ;
--print @County7
--set @County8 = (select CountyNumber from @TEMP where id =8 )
--if @County8 is Null Set @County8 = 0  ;
--print @County8
--set @County9 = (select CountyNumber from @TEMP where id =9 )
--if @County9 is Null Set @County9 = 0  ;
--print @County9
--set @County10 = (select CountyNumber from @TEMP where id =10 )
--if @County10 is Null Set @County10 = 0  ;
--print @County10
--set @County11 = (select CountyNumber from @TEMP where id =11 )
--if @County11 is Null Set @County11 = 0  ;
--print @County11
--set @County12 = (select CountyNumber from @TEMP where id =12 )
--if @County12 is Null Set @County12 = 0  ;
--print @County12
--set @County13 = (select CountyNumber from @TEMP where id =13 )
--if @County13 is Null Set @County13 = 0  ;
--print @County13
--set @County14 = (select CountyNumber from @TEMP where id =14 )
--if @County14 is Null Set @County14 = 0  ;
--print @County14
--set @County15 = (select CountyNumber from @TEMP where id =15 )
--if @County15 is Null Set @County15 = 0  ;
--print @County15
--set @County16 = (select CountyNumber from @TEMP where id =16 )
--if @County16 is Null Set @County16 = 0  ;
--print @County16
--set @County17 = (select CountyNumber from @TEMP where id =17 )
--if @County17 is Null Set @County17 = 0  ;
--print @County17
--set @County18 = (select CountyNumber from @TEMP where id =18 )
--if @County18 is Null Set @County18 = 0  ;
--print @County18
--set @County19 = (select CountyNumber from @TEMP where id =19 )
--if @County19 is Null Set @County19 = 0  ;
--print @County19
--set @County20 = (select CountyNumber from @TEMP where id =20 )
--if @County20 is Null Set @County20 = 0  ;
--print @County20

--set @CountyNumber = '('+@County1+','+@County2+','+@County3+','+@County4+','+@County5+','+@County6+','+@County7+','+@County8+','+@County9+','+@County10+','+@County11+','+@County12+','+@County13+','+@County14+','+@County15+','+@County16+','+@County17+','+@County18+','+@County19+','+@County20+')'

--print @CountyNumber

--print 'sqlselect'


--if @RefreshIndicator = 1 
--begin

--print 'sqldelete'

--set @SQLDelete = 'Delete  ' + @TableName + ' Where WAMSId = ''' +@WAMSId+ ''''

--print @SQLDelete

--exec (@SQLDelete)												    


--set @Statement1 = 'select  PinNumber,
--                           FirstName,
--						   MiddleInitialName,						  
--						   LastName,
--						   SuffixName,
--						   CountyNumber,
--						   OfficeNumber,
--						   ReferralStatus,
--						   WPReferralDate,
--						   ProgramCode,
--						   LearnFareStaus,
--						   CASENumber,
--						   MFWorkerId ,
--						   ConfidentialSwitch,
--						   MFConfidentialWorker,
--						   '''+@WAMSId+''' as WAMSId
						 
--FROM OPENQUERY('+@LSDBName+', ''
-- SELECT 	B.PIN_NUM        as PinNumber,
--            C.FIRST_NAM      as FirstName,
--			C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
--			C.LAST_NAM as LastName,
--			C.SUFFIX_NAM as SuffixName,
--			B.COUNTY_NUM as CountyNumber,
--			B.OFFICE_NUM as OfficeNumber,
--			CASE B.WP_SYSTEM_STS_CD WHEN ''''E'''' THEN ''''ENROLLED''''   
--			                        WHEN ''''P'''' THEN ''''PEND''''
--									WHEN ''''S'''' THEN ''''SCHEDULED''''
--									WHEN ''''C'''' THEN ''''DISENROLLED''''
--									WHEN ''''R'''' THEN ''''REFERRED''''
--									END  as ReferralStatus,
--			B.WP_REFERRAL_DT as WPReferralDate,
-- 	        B.PROGRAM_CD as ProgramCode,
--			CASE B.CURRENT_REG_CD WHEN ''''L'''' THEN ''''1''''
--			                ELSE ''''0'''' END as LearnFareStaus,
--			B.CASE_NUM as CASENumber,
--			B.CASE_MANAGER_ID as MFWorkerId ,
--			CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN ''''1''''
--			                    WHEN ''''N'''' THEN ''''0'''' END as ConfidentialSwitch ,
--			CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN E.USER_ID 
--			                    WHEN ''''N'''' THEN '''' ''''
--							  END as MFConfidentialWorker       	            
--   FROM  '+@DB2DBName+'.T0018_WP_INDV AS B  ,
--         '+@DB2DBName+'.T0011_INDIVIDUAL AS C ,
--		 '+@DB2DBName+'.T0212_CS_CASELOAd AS D,
--		 '+@DB2DBName+'.T0002_CASELOAD_WKR E                                      
--  WHERE  B.PIN_NUM > 0   
--    AND C.PIN_NUM = B.PIN_NUM
--	AND B.COUNTY_NUM in '+@CountyNumber+'   
--	AND B.WP_SYSTEM_STS_CD IN (''''R'''',''''S'''')   
--	AND D.RFA_CASE_NUM  = B.CASE_NUM  
--	AND E.CASELOAD_NUM = D.CASELOAD_NUM 
--	AND E.WORKER_TYPE_IND = ''''P''''                                                  
--  ORDER BY B.WP_REFERRAL_DT DESC                                                                                                
--   WITH UR ; '')                                  

--  '
--  PRINT @Statement1

-- PRINT 'AFTER TRY BEFORE EXEC'

--print 'step3'

--set @Statement3 = 'Insert into ' + @TableName +'([PinNumber], 
--                                                 [FirstName],
--											     [MiddleInitialName],						  
--												 [LastName],
--												 [SuffixName],
--												 [CountyNumber],						   
--												 [OfficeNumber]  ,
--						                         [ReferralStatus]  ,
--						                         [WPReferralDate] ,
--						                         [ProgramCode] ,	
--												 [LearnFareStatus],										
--												 [CaseNumber] , 
--												 [MFWorkerId],
--	                                             [ConfidentialSwitch] ,
--	                                             [MFConfidentialWorker],
--												 [WAMSId]
--						                         	) '  
----Print @Statement3

--print @Statement3 + @Statement1

--EXEC (@Statement3 + @Statement1)

--set @Statement2 = 'select  PinNumber,
--                           FirstName,
--						   MiddleInitialName,						  
--						   LastName,
--						   SuffixName,
--						   CountyNumber,
--						   OfficeNumber,
--						   ReferralStatus,
--						   WPReferralDate,
--						   ProgramCode,
--						   ''0'' AS LearnFareStatus,
--						   CaseNumber,
--						   '' '' AS MFWorkerId,
--	                       ConfidentialSwitch,
--	                       MFConfidentialWorker,
--						   '''+@WAMSId+''' as WAMSId
--FROM OPENQUERY('+@LSDBName+', ''SELECT B.PIN_NUM  as PinNumber,    
--									C.FIRST_NAM      as FirstName,
--									C.MIDDLE_INITIAL_NAM as MiddleInitialName,			
--									C.LAST_NAM as LastName,
--									C.SUFFIX_NAM as SuffixName,       
--									B.COUNTY_NUM as CountyNumber,
--			                        B.OFFICE_NUM as OfficeNumber,    
--									''''PENDING'''' as ReferralStatus,
--									B.WP_REFERRAL_DT as WPReferralDate,
-- 	                                B.PROGRAM_CD as ProgramCode  ,
--								    B.CASE_NUM as CASENumber,
--			                       CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN ''''1''''
--			                                           WHEN ''''N'''' THEN ''''0'''' END as ConfidentialSwitch ,
--			                        CASE D.CASE_CNFD_SW WHEN ''''Y'''' THEN E.USER_ID 
--			                                            WHEN ''''N'''' THEN '''' ''''
--							                          END as MFConfidentialWorker      
--							 FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR  AS B  ,
--								   '+@DB2DBName+'.T0011_INDIVIDUAL AS C  ,
--								   '+@DB2DBName+'.T0212_CS_CASELOAd AS D,
--		                           '+@DB2DBName+'.T0002_CASELOAD_WKR E                 
--							  WHERE  B.PIN_NUM > 0   
--								AND C.PIN_NUM = B.PIN_NUM
--								AND B.COUNTY_NUM in '+@CountyNumber+'    
--								AND D.RFA_CASE_NUM  = B.CASE_NUM  
--	                            AND E.CASELOAD_NUM = D.CASELOAD_NUM 
--	                            AND E.WORKER_TYPE_IND = ''''P''''                                                           
--							  ORDER BY B.WP_REFERRAL_DT DESC                                                                                                
--							   WITH UR ; '')                                  
-- '

----Print @Statement2

----print @Statement3 + @Statement2

--EXEC (@Statement3 + @Statement2)

 
------------------------------------------

--end 





--create table #Temp2  ( 
--	 [PinNumber] [Decimal](10,0) NOT NULL,
--	 [FirstName] [Varchar](50) ,
--	 [MiddleInitialName] [Varchar](1),						  
--	 [LastName] [Varchar](50),
--	 [SuffixName] [Varchar](3),
--     [CountyNumber] [SmallInt],
--	 [OfficeNumber] [SmallInt],
--	 [ReferralStatus] [Varchar](50),
--	 [WPReferralDate] [Date],
--	 [ProgramCode] [Varchar](50),
--	 [LearnFareStatus] [bit] ,
--	 [CaseNumber] [Decimal](10,0) ,
--	 [MFWorkerId] [Varchar](06) ,
--	 [ConfidentialSwitch][bit],
--	 [MFConfidentialWorker][Varchar](06) ,
--	 [WAMSId] [Varchar](200)
--    )


--set @Statement4 = 'SELECT PinNumber,
--                           FirstName,
--						   MiddleInitialName,						  
--						   LastName,
--						   SuffixName,
--						   CountyNumber,
--						   OfficeNumber,
--						   ReferralStatus,
--						   WPReferralDate,
--						   ProgramCode, 
--						   LearnFareStatus,
--						   CASENumber,
--						   MFWorkerId,
--		                   ConfidentialSwitch ,
--			               MFConfidentialWorker ,
--						   WAMSId 
--						   FROM '  +@TableNAme+ ' where ReferralStatus in (''Referred'',''Scheduled'',''Pending'')
--						   '

--print @Statement4

--set @Statement4A = 'INSERT INTO #TEMP2 (PinNumber,
--                           FirstName,
--						   MiddleInitialName,						  
--						   LastName,
--						   SuffixName,
--						   CountyNumber,
--						   OfficeNumber,
--						   ReferralStatus,
--						   WPReferralDate,
--						   ProgramCode,
--						   LearnFareStatus,
--						   CASENumber,
--						   MFWorkerId ,
--		                   ConfidentialSwitch ,
--			               MFConfidentialWorker ,
--						   WAMSId)  '

--EXEC (@Statement4A + @Statement4)




-- set @Statement5 = 'SELECT b.PinNumber,
--                           b.FirstName,
--						   b.MiddleInitialName,						  
--						   b.LastName,
--						   b.SuffixName,
--						   a.CountyNumber,
--						   a.OfficeNumber,
--						   ''Referred''  AS ReferralStatus,
--						   a.ReferralDate AS WPReferralDate,
--						   CASE EnrolledProgramId when 9 then ''TMJ''
--						                          when 10 then ''CF''
--												  when 12 then ''TJ'' 
--												  END as ProgramCode, 
--						   '' '' as LearnFareStatus,
--						   a.CASENumber,
--						   '' '' AS MFWorkerId,
--		                   '' '' AS ConfidentialSwitch ,
--			               '' '' AS MFConfidentialWorker ,
--						   ''chidapa1''  as WAMSId 
--						   FROM WWP.ParticipantEnrolledProgram a ,
--						        wwp.participant b
--						       where a.EnrolledProgramId in (9,10,12)  
--							     and a.EnrolledProgramStatusCodeId = 1
--								 and a.EnrollmentDate is null
--								 and a.DisenrollmentDate is null
--								 and a.ReferralDate is not null
--								 and b.id = a.ParticipantId
--								 and a.CountyNumber in '+@CountyNumber+'    
--						   '




--print @Statement5


 
--exec (@Statement4A + @Statement5)


--select * from  #TEMP2;

--      SELECT A.PinNumber,
--	   A.FirstName,
--	   A.MiddleInitialName,						  
--	   A.LastName,
--	   A.SuffixName,
--       A.CountyNumber,
--	   A.OfficeNumber,
--	   A.ReferralStatus,
--	   A.WPReferralDate,
--	   A.ProgramCode,
--	   A.LearnFareStatus,
--	   A.CASENumber,
--	   A.MFWorkerId,
--	   A.ConfidentialSwitch ,
--	   A.MFConfidentialWorker ,
--	   A.WAMSId  ,
--	   ROW_NUMBER () OVER(ORDER BY A.PinNumber)  AS ID    
--	   from #TEMP2 A
--	   where A.WAMSId = '' +@WAMSId+ ''
--         and ProgramCode in ('WW','CF')
--		 and A.OfficeNumber in ( select C.OfficeNumber 
--		                           from wwp.worker B,
--		                                 wwp.WorkerOfficePermissionBridge c  
--							      where  B.WAMSId = A.WAMSId
--								    and   C.WorkerId = B.Id )
--		 order by A.WPReferralDate Desc , A.OfficeNumber

--end



GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_Auto_Disenrollment_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[SP_DB2_Auto_Disenrollment_Update] 'WWPDEV', 1
CREATE PROCEDURE [wwp].[SP_DB2_Auto_Disenrollment_Update]
	@SchemaName VARCHAR(20),
	@Debug BIT = 0
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@SelectStmt1 VARCHAR(MAX),
			@Count INT = 1,
			@Max INT,
			@PEPId INT,
			@ParticipantId INT,
			@EnrolledProgramId INT,
			@DisenrollmentDate DATE,
			@EPId INT,
			@ModifiedDate DATE = GETDATE()
	
	DECLARE @TempT0018 TABLE
	(
	 PinNumber DECIMAL(10,0),
	 T0018_StatusCode CHAR(1),
	 T0018_DisenrollmentDate DATE
	)

	DECLARE @TempPEPT0018 TABLE
	(
	 PEPId INT,
	 PinNumber DECIMAL(10,0),
	 ParticipantId INT,
	 EnrolledProgramId INT,
	 EnrolledProgramStatusCodeId INT,
	 EnrollmentDate DATE,
	 DisenrollmentDate DATE,
	 T0018_StatusCode CHAR(1),
	 T0018_DisenrollmentDate DATE
	)

	DECLARE @Temp TABLE
	(
	 Id INT IDENTITY(1,1),
	 PEPId INT,
	 ParticipantId INT,
	 EnrolledProgramId INT,
	 T0018_DisenrollmentDate DATE
	)

	DECLARE @ActivityIds TABLE
	(
	 Id INT
	)

	CREATE TABLE #TempPins
	(
	 Id INT IDENTITY(1,1),
	 PinNumber DECIMAL(10,0)
	)

	---
	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')	   THEN 'PWS639TC'
											  WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
											  WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
											  WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
								   END
	---

	INSERT INTO #TempPins
	SELECT PinNumber
	FROM wwp.Participant P
	INNER JOIN wwp.ParticipantEnrolledProgram PEP
		ON PEP.ParticipantId = P.Id
	WHERE EnrolledProgramStatusCodeId IN (1, 2) AND (EnrolledProgramId BETWEEN 1 AND 8 OR EnrolledProgramId IN (11,13))
	--SELECT * FROM #TempPins

	SET @SelectStmt1 = 'SELECT PIN_NUM, WP_SYSTEM_STS_CD, DISENROLLMENT_DT
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT PIN_NUM, WP_SYSTEM_STS_CD, DISENROLLMENT_DT
															FROM ' + @DB2DBName + '.T0018_WP_INDV
															WHERE WP_SYSTEM_STS_CD = ''''C''''
															WITH UR;'') A
						WHERE EXISTS (SELECT PinNumber
						FROM #TempPins P
						WHERE P.PinNumber = A.PIN_NUM)'

	PRINT @SelectStmt1

	INSERT INTO @TempT0018
	EXEC (@SelectStmt1)
	--SELECT * FROM @TempT0018

	INSERT INTO @TempPEPT0018
	SELECT PEP.Id, P.PinNumber, PEP.ParticipantId, PEP.EnrolledProgramId, PEP.EnrolledProgramStatusCodeId, PEP.EnrollmentDate, PEP.DisenrollmentDate, T.T0018_StatusCode, T.T0018_DisenrollmentDate
	FROM @TempT0018 T
		INNER JOIN wwp.Participant P
			ON T.PinNumber = P.PinNumber
		INNER JOIN wwp.ParticipantEnrolledProgram PEP
			ON PEP.ParticipantId = P.Id
	WHERE PEP.EnrolledProgramStatusCodeId in (1,2) AND (PEP.EnrolledProgramId BETWEEN 1 AND 8 OR PEP.EnrolledProgramId IN (11,13))
	--SELECT * FROM @TempPEPT0018

	INSERT INTO @Temp (PEPId, ParticipantId, EnrolledProgramId)
	SELECT Id, ParticipantId, EnrolledProgramId
	FROM wwp.ParticipantEnrolledProgram
	WHERE ParticipantId IN (SELECT ParticipantId
							FROM @TempPEPT0018)
	AND EnrolledProgramStatusCodeId in (1,2) AND DisenrollmentDate IS NULL

	UPDATE @Temp
	SET T.T0018_DisenrollmentDate = T1.T0018_DisenrollmentDate
	FROM @Temp T
		INNER JOIN @TempPEPT0018 T1
			ON T.ParticipantId = T1.ParticipantId
	--SELECT * FROM @Temp

	SELECT @Max = COUNT(DISTINCT PEPId)
	FROM @Temp
	PRINT @Max

	IF @Debug = 0
	BEGIN
		WHILE @Count <= @Max
		BEGIN
			PRINT @Count

			SELECT @PEPId = PEPId, @ParticipantId = ParticipantId, @EnrolledProgramId = EnrolledProgramId, @DisenrollmentDate = T0018_DisenrollmentDate
			FROM @Temp
			WHERE Id = @Count

			SELECT TOP 1 @EPId = Id
								 FROM wwp.EmployabilityPlan
								 WHERE ParticipantId = @ParticipantId AND EnrolledProgramId = @EnrolledProgramId AND
								 EmployabilityPlanStatusTypeId NOT IN (SELECT Id
																	   FROM wwp.EmployabilityPlanStatusType
																	   WHERE Name IN ('System Deleted','Worker Deleted','Worker Voided', 'Ended'))
								 ORDER BY CASE EmployabilityPlanStatusTypeId WHEN (SELECT Id
																				   FROM wwp.EmployabilityPlanStatusType
																				   WHERE Name = 'In Progress') THEN 1
																			 ELSE 2 End, BeginDate DESC
			
			PRINT @PEPId
			PRINT @ParticipantId
			PRINT @EnrolledProgramId
			PRINT @DisenrollmentDate
			PRINT @EPId

			DELETE FROM @ActivityIds
			INSERT INTO @ActivityIds
			SELECT Id
			FROM wwp.Activity
			WHERE Id IN (SELECT ActivityId
						 FROM wwp.EmployabilityPlanActivityBridge
						 WHERE EmployabilityPlanId = @EPId)
			AND ActivityCompletionReasonId IS NULL

			EXEC [wwp].[SP_Barrier_Accommodation_Update] @PEPId, @DisenrollmentDate, 1, 'WWP Batch'

			UPDATE wwp.ParticipantEnrolledProgram
			SET EnrolledProgramStatusCodeId = (SELECT Id
											   FROM wwp.EnrolledProgramStatusCode
											   WHERE StatusCode = 'Disenrolled'),
				DisenrollmentDate = @DisenrollmentDate,
				ModifiedBy = 'WWP Batch',
				ModifiedDate = @ModifiedDate
			WHERE Id = @PEPId

			UPDATE wwp.EmployabilityPlan
			SET EndDate = CAST(@DisenrollmentDate AS DATE),
				EmployabilityPlanStatusTypeId = (SELECT Id
												 FROM wwp.EmployabilityPlanStatusType
												 WHERE Name = 'Ended'),
				ModifiedBy = 'WWP Batch',
				ModifiedDate = @ModifiedDate
			WHERE Id = @EPId

			UPDATE wwp.Goal
			SET EndDate = CAST(@DisenrollmentDate AS DATE), IsGoalEnded = 1,
				GoalEndReasonId = (SELECT Id
								   FROM wwp.GoalEndReason
								   WHERE Name = 'Disenrollment'),
				ModifiedBy = 'WWP Batch',
				ModifiedDate = @ModifiedDate
			WHERE Id IN (SELECT GoalId
						 FROM wwp.EmployabilityPlanGoalBridge
						 WHERE EmployabilityPlanId = @EPId)
			AND IsGoalEnded = 0

			UPDATE wwp.Activity
			SET EndDate = CAST(@DisenrollmentDate AS DATE),
				ActivityCompletionReasonId = (SELECT Id
											  FROM wwp.ActivityCompletionReason
											  WHERE Name = 'Disenrollment'),
				ModifiedBy = 'WWP Batch',
				ModifiedDate = @ModifiedDate
			WHERE Id IN (SELECT Id
						 FROM @ActivityIds)

			UPDATE wwp.ActivitySchedule
			SET ActualEndDate = CAST(@DisenrollmentDate AS DATE),
				ModifiedBy = 'WWP Batch',
				ModifiedDate = @ModifiedDate
			WHERE ActivityId IN (SELECT Id
								 FROM @ActivityIds)
			AND EmployabilityPlanId = @EPId
			
			UPDATE wwp.ParticipationStatus
			SET IsCurrent = 0,
				EndDate = CAST(@DisenrollmentDate AS DATE),
				ModifiedBy = 'WWP Batch',
				ModifiedDate = @ModifiedDate
			WHERE ParticipantId = @ParticipantId AND IsCurrent = 1 AND EnrolledProgramId = @EnrolledProgramId

			SET @Count += 1
		END
	END

	SELECT P.PinNumber, PEP.Id PEPId, PEP.EnrolledProgramStatusCodeId, PEP.DisenrollmentDate
	FROM wwp.ParticipantEnrolledProgram PEP
		INNER JOIN @Temp T
			ON PEP.Id = T.PEPId
		INNER JOIN wwp.Participant P
			ON PEP.ParticipantId = P.Id
	ORDER BY P.PinNumber

	IF OBJECT_ID('tempdb..#TempPins') IS NOT NULL DROP TABLE #TempPins
END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_CreateRFA]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_DB2_CreateRFA]
(
 @SchemaName                  VARCHAR (20) ,
 @PinNumber                   VARCHAR (10) ,
 @RFAProgramType              VARCHAR (2) ,
 @CreateOrUpdateMode          VARCHAR (1) , 
 @FirstName                   VARCHAR (50) ,
 @LastName                    VARCHAR (50) , 
 @MiddleName                  VARCHAR (1) , 
 @SuffixName                  VARCHAR (3) ,
 @LanguageIndicator		      VARCHAR (1) ,
 @CountyNumber                VARCHAR (4) ,
 @CourtOrderCountyNumber      VARCHAR (4) ,
 @CourtOrderedEffectiveDate   VARCHAR (10) ,
 @RFATimeStamp                VARCHAR (26) ,
 @StreetNumber                VARCHAR (09) ,
 @StreetName                  VARCHAR (20) ,
 @AddressLine2                VARCHAR (200) ,
 @CityAddress                 VARCHAR (50) ,
 @StateAddress                VARCHAR (50) ,
 @ZipAddress                  VARCHAR (10) ,
 @PhoneNumber				  VARCHAR (10) ,
 @AppStatusReasonCode         VARCHAR (03) ,
 @RFAStatusChangeDate         VARCHAR (10) ,
 @MfWorkerId                  VARCHAR (06) ,
 @InputRfaNumber              VARCHAR (10) 

) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;


DECLARE @PINNUM             VARCHAR(10)
DECLARE @RFATYPE            VARCHAR (2)     
DECLARE @ACTIONMODE         VARCHAR (1)     
DECLARE @FIRSTNAM           VARCHAR(50)  
DECLARE @LASTNAM            VARCHAR(50)  
DECLARE @MIDDLENAM          VARCHAR (1)     
DECLARE @SUFFIXNAM          VARCHAR (3)     
DECLARE @LANGUAGEIND		VARCHAR (1)
DECLARE @CNTYNUM            VARCHAR(04)     
DECLARE @COURTORDCTYNUM     VARCHAR(04)  
DECLARE @COURTORDEFFDT      VARCHAR(10)         
DECLARE @RFATS              VARCHAR(26)  
DECLARE @HHSTREETNUM        VARCHAR(09) 
DECLARE @HHSTREETADR		VARCHAR(20) 
DECLARE @HHLINE2ADR         VARCHAR(200) 
DECLARE @CITYADR            VARCHAR(50)  
DECLARE @STATEADR           VARCHAR(50)  
DECLARE @ZIPADR             VARCHAR(10)  
DECLARE @HHPHONENUM         VARCHAR(10)
DECLARE @APPSTSREASONCD     VARCHAR(03)
DECLARE @RFASTSCHANGEDT     VARCHAR(10)
DECLARE @WORKERID           VARCHAR (6)     
DECLARE @INPUTRFANUM        VARCHAR(10)
DECLARE @RFANUM             VARCHAR(10)       
DECLARE @RETURNSTSCD        VARCHAR (1)                
DECLARE @FATALERRINFO       VARCHAR(250)              




SET @PINNUM        =      @PinNumber
SET @RFATYPE       =      @RFAProgramType
SET @ACTIONMODE    =      @CreateOrUpdateMode    
SET @FIRSTNAM      =      @FirstName
SET @LASTNAM       =      @LastName   
SET @MIDDLENAM     =      @MiddleName  
SET @SUFFIXNAM     =      @SuffixName  
SET @LANGUAGEIND   =      @LanguageIndicator  
SET @CNTYNUM       =      @CountyNumber  
SET @COURTORDCTYNUM  = @CourtOrderCountyNumber 
SET @COURTORDEFFDT   = @CourtOrderedEffectiveDate
SET @RFATS           = @RFATimeStamp
--'2018-06-13-05.05.03.180067' 
SET @HHSTREETNUM      = @StreetNumber  
SET @HHSTREETADR     = @StreetName 
SET @HHLINE2ADR      = @AddressLine2  
SET @CITYADR         = @CityAddress
SET @STATEADR        = @StateAddress
SET @ZIPADR          = @ZipAddress
SET @HHPHONENUM      = @PhoneNumber
SET @APPSTSREASONCD  = @AppStatusReasonCode
SET	@RFASTSCHANGEDT  = @RFAStatusChangeDate
SET @WORKERID        = @MfWorkerId
SET @INPUTRFANUM     = @InputRfaNumber
     
IF @RFATYPE = 'TJ' 
 BEGIN SET @RFATYPE ='TM'
 END

---
   SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

 SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END



--SET @PINNUM          =      '9998889684'
--SET @RFATYPE         =      'CF'
--SET @ACTIONMODE      =      'A'
--SET @FIRSTNAM        =      'WPASS'
--SET @LASTNAM         =      'KPASS'   
--SET @MIDDLENAM       =      'F'  
--SET @SUFFIXNAM       =      'G'
--SET @LANGUAGEIND     =      'E'
--SET @CNTYNUM         =      '13'
--SET @COURTORDCTYNUM  = '13'
--SET @COURTORDEFFDT   = '2018-01-01'
--SET @RFATS           = '2018-11-02-05.05.03.180067' 
--SET @HHSTREETNUM     = '201'
--SET @HHSTREETADR     = 'E WASH AVE'
--SET @HHLINE2ADR      = ' '
--SET @CITYADR         = 'MADISON'
--SET @STATEADR        = 'WI'
--SET @ZIPADR          = '53703'
--SET @HHPHONENUM      = '6086086008'
--SET @APPSTSREASONCD  = ' '
--SET	@RFASTSCHANGEDT  = '9999-12-31'
--SET @WORKERID        = 'XCTB9X'
--SET @INPUTRFANUM     = '0'

PRINT @SchemaName          
PRINT @PINNUM          
PRINT @RFATYPE         
PRINT @ACTIONMODE      
PRINT @FIRSTNAM        
PRINT @LASTNAM         
PRINT @MIDDLENAM       
PRINT @SUFFIXNAM     
PRINT @LANGUAGEIND  
PRINT @CNTYNUM         
PRINT @COURTORDCTYNUM  
PRINT @COURTORDEFFDT   
PRINT @RFATS           
PRINT @HHSTREETNUM      
PRINT @HHSTREETADR
PRINT @HHLINE2ADR      
PRINT @CITYADR         
PRINT @STATEADR        
PRINT @ZIPADR      
PRINT @HHPHONENUM     
PRINT @APPSTSREASONCD
PRINT @RFASTSCHANGEDT 
PRINT @WORKERID        
PRINT @INPUTRFANUM     
PRINT @RFANUM       
PRINT @RETURNSTSCD  
PRINT @FATALERRINFO  



exec('call PWS639SC.PWCWPD06(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
	@PINNUM     ,        
    @RFATYPE    ,        
    @ACTIONMODE ,     
    @FIRSTNAM   ,      
	@LASTNAM    ,      
	@MIDDLENAM  ,      
	@SUFFIXNAM  , 
	@LANGUAGEIND		,    
	@CNTYNUM			,     
	@COURTORDCTYNUM		, 
	@COURTORDEFFDT		,   
	@RFATS				,     
	@HHSTREETNUM		,   
    @HHSTREETADR		,   
	@HHLINE2ADR			,    
	@CITYADR			,    
	@STATEADR			,    
	@ZIPADR				, 
	@HHPHONENUM			,   
	@APPSTSREASONCD		,
	@RFASTSCHANGEDT		,  
	@WORKERID			, 
	@INPUTRFANUM        ,   
	@RFANUM   OUTPUT    ,    
	@RETURNSTSCD  OUTPUT,
	@FATALERRINFO OUTPUT   
) 
AT NETWINFO_D00S_DB2

  PRINT 'IN TRY' 

 PRINT 'AFTER TRY BEFORE EXEC'

 select RFANumber = @RFANUM, ReturnStatusCode = @RETURNSTSCD , FatalErrorInfo=@FATALERRINFO 

end
	

              
  

GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_Disenrollment_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-10-08 | GH#3381          | CDO CHANGES FOR TRANSACTION DT IN TABLE T0121                                                      |==
-- ========================================================================================================================================
-- | 2019-10-31 | GH#3445          | CHANGES TO OVERRIDE COMPLETION REASON 'OC' FOR CF                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
CREATE PROCEDURE [wwp].[SP_DB2_Disenrollment_Update]
	@PinNumber         DECIMAL(10,0),              
	@EffectiveDate     DATE ,    
	@CountyNumber      SMALLINT ,
	@OfficeNumber      SMALLINT ,
	@MFWorkerId        VARCHAR(06) ,
	@MFUserId		   VARCHAR(06),
	@ProgramCode       VARCHAR(03) ,
	@SubProgramCode    VARCHAR(01) ,
	@RegistrationCode  Varchar(01) ,
	@CompletionReason  Varchar(02),
	@AnyOtherProgramOpen Varchar(01) ,
	@SchemaName        VARCHAR(20)

AS
BEGIN
 
--  -- declare @EffectiveDate     DATE = '2018-05-22' ;
--declare	@RegistrationCode  Varchar(01) = 'M'
--declare	@CompletionReason  Varchar(02) = 'PP'
--declare	@AnyOtherProgramOpen Varchar(01) = '0' 

print '1'

	SET NOCOUNT ON;
	declare @CurrentDate  as varchar(10) ;
--
    declare @SelectStmt1 as varchar(max);
	declare @SelectStmt2 as varchar(max);
	declare @SelectStmt3 as varchar(max);
	declare @SelectStmt4 as varchar(max);

--
    declare @InsertStmt1   as varchar(max);
	declare @InsertStmt2   as varchar(max);
	declare @InsertStmt3   as varchar(max);
	declare @InsertStmt4   as varchar(max);
	declare @InsertStmt5   as varchar(max);
--
	declare @UpdtStmnt1	  as varchar(max);
	declare @UpdtStmnt2   as varchar(max);
	declare @UpdtStmnt3   as varchar(max);
	declare @UpdtStmnt4   as varchar(max);
    declare @UpdtStmnt5   as varchar(max);
	declare @UpdtStmnt6   as varchar(max);
    declare @UpdtStmnt7   as varchar(max);
	declare @UpdtStmnt8   as varchar(max);
	declare @UpdtStmnt9   as varchar(max);
	declare @UpdtStmnt10  as varchar(max);
	declare @UpdtStmnt11  as varchar(max);
--
	declare @deleteStmt0  as varchar(max);
	declare @deleteStmt1  as varchar(max);
	declare @deleteStmt2  as varchar(max);
	declare @deleteStmt3  as varchar(max);
	declare @deleteStmt4  as varchar(max);
--
	declare @DB2DBName	  as varchar(100) ;
    declare @LSDBName	  as varchar(100) ;

--
	set @CurrentDate = CAST(GETDATE() AS DATE);

---
  SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

 SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ DECLARE STATEMENTS
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @PIN_NUM_18               VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;  
DECLARE @EFFECTIVE_DT_18          VARCHAR(10) =  @EffectiveDate ;


DECLARE @PIN_NUM_D121            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
				DECLARE @TRANSACTION_DT_D121     VARCHAR(10) = CONVERT(VARCHAR(10), GETDATE(), 20)     ;    
				DECLARE @TRANSACTION_CD_D121     VARCHAR(04)  ;    
		 		DECLARE @TRANSACTION_NUM_D121    VARCHAR(04) = 1 ;   
				DECLARE @COUNTY_NUM_D121         VARCHAR(04) = CONVERT(varchar(4), @CountyNumber) ;  
				DECLARE @EFFECTIVE_DT_D121       VARCHAR(10) = @EffectiveDate     ;    
				DECLARE @OFFICE_NUM_D121         VARCHAR(04) = CONVERT(varchar(4), @OfficeNumber ) ;  
				DECLARE @PROGRAM_CD_D121         VARCHAR(3)   ;  
				DECLARE @PROVIDER_ID_D121        VARCHAR(04) = 0000  ;  --REVISIT
				DECLARE @REGISTRATION_CD_D121    VARCHAR(1)  = @RegistrationCode ;
				DECLARE @STAFF_ID_D121           VARCHAR(6)  = @MFUserId ;  
				DECLARE @COMP_ACTION_CD_D121     VARCHAR(1)  = ' '  ;  
				DECLARE @COMPONENT_PHASE_CD_D121 VARCHAR(1)  = ' ';  
				DECLARE @SUBPROGRAM_CD_D121      VARCHAR(1) =  @SubProgramCode  ;
				DECLARE @TRANSACTION_TS_D121     VARCHAR(26) ;  
				DECLARE @WDA_CD_D121             VARCHAR(04)= 0 ;
				DECLARE @CMP_RSN_CD_D121         VARCHAR(2)  = ' ' ;   
				DECLARE @RFA_NUM_D121            VARCHAR(10) = 0 ;     
				DECLARE @CMP_DT_D121             VARCHAR(10) =  '9999-12-31'    ;     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ RESET LEARNFARE AS W-2 FOR OLD SYSTEM 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


    IF @ProgramCode = 'LF'
	 BEGIN 
	  SET @ProgramCode = 'WW'
     END
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--GH#3445
	 IF @ProgramCode = 'CF' and @CompletionReason = 'OC'
	 BEGIN
	     SET @CompletionReason = 'UO'
	 END
--GH#3445
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
print 2

 Declare @TempT18 table
	(T18PinNumber			DECIMAL(10,0)	null,
	T18CaseManagerId		CHAR(06)		null, 
	T18CaseNumber			DECIMAL(10,0)	null,
	T18CountyNumber			SMALLINT		null,  
	T18CurrentRegCode		CHAR(01)		null,  
	T18DisenrollmentCode	SMALLINT		null,  
	T18DisenrollmentDate	DATE			null,  
	T18LastContactDate		DATE			null,
	T18LastDisenrollmentDate DATE			null,    
	T18OffcieNumber			SMALLINT		null,
	T18ProgramCode			CHAR(03)		null,
	T18SubprogramCode		CHAR(01)		null,
	T18WPReferralDate		DATE			null,
	T18WPSystemStatusCode	CHAR(01)		null,
	T18CFRFADate			DATE			null,  
	T18CFStatusCode			CHAR(01)		null,
	T18CFCompReasonCode		CHAR(02)		null,
	T18CFRFANumber			DECIMAL(10,0)	null,
	T18CFCompDate           DATE            null,
	T18TJCompDate			DATE			null,  
	T18TJCmpReasonCode		CHAR(02)		null,
	T18TJRFADate			DATE			null,
	T18TJRFANumber			DECIMAL(10,0)	null,
	T18TJStatusCode			CHAR(01)		null,
	T18WPGeoArea			SMALLINT		null,
	T18TMJCpltDate			DATE			null,
	T18TMJCpltReasonCode	CHAR(02)		null,
	T18TMJRFADate			DATE			null,
	T18TMJRFANumber			DECIMAL(10,0)	null,
	T18TMJStatCode			CHAR(01)		null 
	)

set @SelectStmt1 =   'select   T18PinNumber			,
								T18CaseManagerId		, 
								T18CaseNumber			,
								T18CountyNumber			,  
								T18CurrentRegCode		,
								T18DisenrollmentCode	,
								T18DisenrollmentDate	,
								T18LastContactDate		,
								T18LastDisenrollmentDate,    
								T18OffcieNumber			,
								T18ProgramCode			,
								T18SubprogramCode		,
								T18WPReferralDate		,
								T18WPSystemStatusCode	,
								T18CFRFADate			,  
								T18CFStatusCode			,
								T18CFCompReasonCode		,
								T18CFRFANumber			,
						        T18CFCompDate           ,
								T18TJCompDate			,  
								T18TJCmpReasonCode		,
								T18TJRFADate			,
								T18TJRFANumber			,
								T18TJStatusCode			,
								T18WPGeoArea			,
								T18TMJCpltDate			,
								T18TMJCpltReasonCode	,
								T18TMJRFADate			,
								T18TMJRFANumber			,
								T18TMJStatCode    
FROM OPENQUERY('+@LSDBName+', ''SELECT  PIN_NUM				as T18PinNumber			,
                                        CASE_MANAGER_ID		as T18CaseManagerId		, 
									    CASE_NUM			as T18CaseNumber		,
										COUNTY_NUM			as T18CountyNumber		, 
										CURRENT_REG_CD		as T18CurrentRegCode	,
										DISENROLLMENT_CD	as T18DisenrollmentCode	,
										DISENROLLMENT_DT	as T18DisenrollmentDate	,
										LAST_CONTACT_DT		as T18LastContactDate	,
										LAST_DISENROLL_DT	as T18LastDisenrollmentDate ,   
										OFFICE_NUM			as T18OffcieNumber		,
										PROGRAM_CD			as T18ProgramCode		,
										SUBPROGRAM_CD		as T18SubprogramCode	,
										WP_REFERRAL_DT		as T18WPReferralDate	, 
										WP_SYSTEM_STS_CD	as T18WPSystemStatusCode,
										CF_RFA_DT			as T18CFRFADate			,       
										CF_STS_CD			as T18CFStatusCode		, 
										CF_CMP_RSN_CD		as T18CFCompReasonCode	,
										CF_RFA_NUM			as T18CFRFANumber		,
										CF_CMP_DT           as T18CFCompDate        ,
										TJ_CMP_DT			as T18TJCompDate	    ,
										TJ_CMP_RSN_CD		as T18TJCmpReasonCode	,
										TJ_RFA_DT			as T18TJRFADate			,
										TJ_RFA_NUM			as T18TJRFANumber		,
										TJ_STS_CD			as T18TJStatusCode		,
										WP_GEO_AREA			as T18WPGeoArea			,
										TMJ_CPLT_DT			as T18TMJCpltDate		,
										TMJ_CPLT_RSN_CD		as T18TMJCpltReasonCode	,
										TMJ_RFA_DT			as T18TMJRFADate		,
										TMJ_RFA_NUM			as T18TMJRFANumber		,
										TMJ_STAT_CD			as T18TMJStatCode
  FROM  '+@DB2DBName+'.T0018_WP_INDV                      
 WHERE  PIN_NUM  = '+@PIN_NUM_18+'     
   WITH UR;
  '')'


insert @TempT18 ( T18PinNumber			,
								T18CaseManagerId		, 
								T18CaseNumber			,
								T18CountyNumber			,  
								T18CurrentRegCode		,
								T18DisenrollmentCode	,
								T18DisenrollmentDate	,
								T18LastContactDate		,
								T18LastDisenrollmentDate,    
								T18OffcieNumber			,
								T18ProgramCode			,
								T18SubprogramCode		,
								T18WPReferralDate		,
								T18WPSystemStatusCode	,
								T18CFRFADate			,  
								T18CFStatusCode			,
								T18CFCompReasonCode		,
								T18CFRFANumber			,
								T18CFCompDate           ,
								T18TJCompDate			,  
								T18TJCmpReasonCode		,
								T18TJRFADate			,
								T18TJRFANumber			,
								T18TJStatusCode			,
								T18WPGeoArea			,
								T18TMJCpltDate			,
								T18TMJCpltReasonCode	,
								T18TMJRFADate			,
								T18TMJRFANumber			,
								T18TMJStatCode      ) 
exec (@SelectStmt1);

--SELECT * FROM @TempT18

  IF EXISTS (SELECT 1 FROM @TempT18 where T18PinNumber = @PIN_NUM_18 AND T18ProgramCode  = 'WW' )

   BEGIN

    PRINT 'W2 LOGIC'


    IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18CFRFANumber > 0 AND T18CFCompReasonCode = ' '
                                                               AND T18CFStatusCode     = 'O'
															   AND T18CFCompDate       = '9999-12-31' 
              )

		BEGIN
		  SET @Updtstmnt1 = ' UPDATE  '+@DB2DBName+'.T0018_WP_INDV 
								 SET  WP_SYSTEM_STS_CD = ''E'' ,
									  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
									  CF_STS_CD        = ''C'' ,
											CF_CMP_RSN_CD    =  '''+@CompletionReason+''' ,
											CF_CMP_DT        = '''+@EFFECTIVE_DT_18+''' ,
									  PROGRAM_CD       = '' '' ,
									  SUBPROGRAM_CD    = '' ''
								WHERE PIN_NUM          = '+@PIN_NUM_18+'
								 ';                    
                                                            
		  EXEC (@Updtstmnt1) at NETWINFO_D00S_DB2


		  
               	SET @TRANSACTION_CD_D121  = 195 ;    
				SET @PROGRAM_CD_D121      =   ' '  ;
				SET @SUBPROGRAM_CD_D121   = ' '
			
				SET @CMP_RSN_CD_D121       = @CompletionReason
				SET @RFA_NUM_D121          = (Select T18CFRFANumber from  @TempT18) ;     
			    SET @CMP_DT_D121           = ( Select T18CFCompDate from  @TempT18)   ;     

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

				set @InsertStmt5 = ' INSERT INTO '+@DB2DBName+'.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																			   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																			   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																			   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
										 VALUES ('+@PIN_NUM_D121+', '''+@TRANSACTION_DT_D121+''' , '+@TRANSACTION_CD_D121+','+@TRANSACTION_NUM_D121+','+@COUNTY_NUM_D121+' ,
												 '''+@EFFECTIVE_DT_D121+''','+@OFFICE_NUM_D121+','''+@PROGRAM_CD_D121+''','+@PROVIDER_ID_D121+','''+@REGISTRATION_CD_D121+''', 
												 '''+@STAFF_ID_D121+''' ,'''+@COMP_ACTION_CD_D121+''','''+@COMPONENT_PHASE_CD_D121+''','''+@SUBPROGRAM_CD_D121+''',
												 '''+@WDA_CD_D121+''' ,'''+@CMP_RSN_CD_D121+''' ,'+@RFA_NUM_D121+','''+@CMP_DT_D121+''') '



				 PRINT @InsertStmt5

				 exec (@InsertStmt5) at NETWINFO_D00S_DB2

		END
    ELSE
		BEGIN


		  SET @Updtstmnt2 = ' UPDATE  '+@DB2DBName+'.T0018_WP_INDV 
								 SET  WP_SYSTEM_STS_CD = ''C'' ,
									  DISENROLLMENT_DT = '''+@EFFECTIVE_DT_18+''' ,
									  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' 							
								WHERE PIN_NUM          = '+@PIN_NUM_18+'
								 ';                    
                       	                                       
		  EXEC (@Updtstmnt2) at NETWINFO_D00S_DB2

		  Print 'W2 logic update statment 1'

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ DELETE T0324
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		DECLARE @PIN_NUM_324            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        



		set @deleteStmt1 = ' DELETE               
							  FROM '+@DB2DBName+'.T0324_WP_DISENROLL          
							 WHERE PIN_NUM = '+@PIN_NUM_324+' '



		 PRINT @deleteStmt1

		 exec (@deleteStmt1) at NETWINFO_D00S_DB2


 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- UPDATE T0018 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   
 --DECLARE @PIN_NUM_18            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        
 ----DECLARE @EFFECTIVE_DT_18          VARCHAR(10) = @EffectiveDate ;

 -- set @statement4 = ' UPDATE PWS639TC.T0018_WP_INDV 
 --                        SET  WP_SYSTEM_STS_CD = ''C'' ,
	--	                      DISENROLLMENT_DT = '''+@EFFECTIVE_DT_18+''' ,
	--						  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' 
 --                       WHERE PIN_NUM = '+@PIN_NUM_18+'
 --                        ';                    
                       
 
 --PRINT @statement4                                        
 -- exec (@statement4) at NETWINFO_D00S_DB2

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- UPDATE T0018 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




     END


  END

 ELSE 

   BEGIN

   PRINT 'OTHER THAN WW'


	 --  IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18TJRFANumber > 0
		--														AND T18TJCmpReasonCode   = ' '
		--														AND T18TJStatusCode = 'O'
		--														AND T18TJRFADate <> '9999-12-31' 
		--														AND T18TJCompDate = '9999-12-31'
		--		)

		--BEGIN
		--  PRINT 'TJ EXITS'

		   
 
		-- END
	
	 

 	   IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18TMJRFANumber > 0
																AND T18TMJCpltReasonCode   = ' '
																AND T18TMJStatCode = 'O'
																AND T18TMJRFADate <> '9999-12-31' 
																AND T18TMJCpltDate = '9999-12-31'
				)

		BEGIN
		  PRINT 'TMJ EXITS'

			IF @ProgramCode = 'TMJ'

			BEGIN

			IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18CFRFANumber > 0 AND T18CFCompReasonCode = ' '
																		AND T18CFStatusCode = 'O'
																		AND T18CFRFADate <> '9999-12-31' 
																		AND T18CFCompDate = '9999-12-31' )
				BEGIN
				  PRINT 'CF EXITS'
				   set @UpdtStmnt6 = '	 UPDATE  '+@DB2DBName+'.T0018_WP_INDV 
											 SET  WP_SYSTEM_STS_CD = ''E'' ,
												  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
												  CF_STS_CD        = ''O'' ,
												  PROGRAM_CD       = '' '' ,
												  SUBPROGRAM_CD    = '' '',
												  TMJ_CPLT_DT       = '''+@EFFECTIVE_DT_18+''' ,
												  TMJ_CPLT_RSN_CD  =  '''+@CompletionReason+''' ,
												  TMJ_STAT_CD      = ''C'' 
											WHERE PIN_NUM          = '+@PIN_NUM_18+'
											 ';                 
					  Exec (@UpdtStmnt6) at NETWINFO_D00S_DB2
		         END
			ELSE
			   BEGIN
			   Set @UpdtStmnt7 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
									 SET  WP_SYSTEM_STS_CD = ''C'' ,
										  DISENROLLMENT_DT = '''+@EFFECTIVE_DT_18+''' ,
										  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
										  TMJ_STAT_CD        = ''C'' ,
										  TMJ_CPLT_RSN_CD    = '''+@CompletionReason+''' ,
										  TMJ_CPLT_DT        = '''+@EFFECTIVE_DT_18+'''									 
									WHERE PIN_NUM = '+@PIN_NUM_18+'
									 ';                    

				PRINT @UpdtStmnt7                                        
				Exec (@UpdtStmnt7) at NETWINFO_D00S_DB2


				END

				SET @TRANSACTION_CD_D121  = 259 ;    
				SET @PROGRAM_CD_D121      =   ' '  ;
				SET @SUBPROGRAM_CD_D121   = ' '
			
				SET @CMP_RSN_CD_D121       = @CompletionReason
				SET @RFA_NUM_D121          = (Select T18TMJRFANumber from  @TempT18) ;     
			    SET @CMP_DT_D121           = ( Select T18TMJCpltDate from  @TempT18)   ;     

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

				set @InsertStmt3 = ' INSERT INTO '+@DB2DBName+'.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																			   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																			   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																			   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
										 VALUES ('+@PIN_NUM_D121+', '''+@TRANSACTION_DT_D121+''' , '+@TRANSACTION_CD_D121+','+@TRANSACTION_NUM_D121+','+@COUNTY_NUM_D121+' ,
												 '''+@EFFECTIVE_DT_D121+''','+@OFFICE_NUM_D121+','''+@PROGRAM_CD_D121+''','+@PROVIDER_ID_D121+','''+@REGISTRATION_CD_D121+''', 
												 '''+@STAFF_ID_D121+''' ,'''+@COMP_ACTION_CD_D121+''','''+@COMPONENT_PHASE_CD_D121+''','''+@SUBPROGRAM_CD_D121+''',
												 '''+@WDA_CD_D121+''' ,'''+@CMP_RSN_CD_D121+''' ,'+@RFA_NUM_D121+','''+@CMP_DT_D121+''') '



				 PRINT @InsertStmt3

				 exec (@InsertStmt3) at NETWINFO_D00S_DB2


		


			 END


---------------------------- TJ CHECK

 IF @ProgramCode = 'TJ'

			BEGIN

			IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18CFRFANumber > 0 AND T18CFCompReasonCode = ' '
																		AND T18CFStatusCode = 'O'
																		AND T18CFRFADate <> '9999-12-31' 
																		AND T18CFCompDate = '9999-12-31' )
				BEGIN

		    		PRINT 'TJ AND CF logic, leave CF open'


					 set @UpdtStmnt4 = '	 UPDATE  '+@DB2DBName+'.T0018_WP_INDV 
											 SET  WP_SYSTEM_STS_CD = ''E'' ,
												  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
												  CF_STS_CD        = ''O'' ,
												  PROGRAM_CD       = '' '' ,
												  SUBPROGRAM_CD    = '' '',
												  TMJ_CPLT_DT       = '''+@EFFECTIVE_DT_18+''' ,
												  TMJ_CPLT_RSN_CD  =  '''+@CompletionReason+''' ,
												  TMJ_STAT_CD      = ''C'' 
											WHERE PIN_NUM          = '+@PIN_NUM_18+'
											 ';                 
					  exec (@UpdtStmnt4) at NETWINFO_D00S_DB2

				 END
				 ELSE
				BEGIN

				  Set @UpdtStmnt5 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
									 SET  WP_SYSTEM_STS_CD = ''C'' ,
										  DISENROLLMENT_DT = '''+@EFFECTIVE_DT_18+''' ,
										  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
									   	 TMJ_STAT_CD        = ''C'' ,
										  TMJ_CPLT_RSN_CD    = '''+@CompletionReason+''' ,
										  TMJ_CPLT_DT        = '''+@EFFECTIVE_DT_18+'''										 
									WHERE PIN_NUM = '+@PIN_NUM_18+'
									 ';                    
                       
 
				PRINT @UpdtStmnt5                                        
				exec (@UpdtStmnt5) at NETWINFO_D00S_DB2

				END
			
		   	SET @TRANSACTION_CD_D121  = 259 ;    
				SET @PROGRAM_CD_D121      =   ' '  ;
				SET @SUBPROGRAM_CD_D121   = ' '
			
				SET @CMP_RSN_CD_D121       = @CompletionReason
				SET @RFA_NUM_D121          = (Select T18TMJRFANumber from  @TempT18) ;     
			    SET @CMP_DT_D121           = ( Select T18TMJCpltDate from  @TempT18)   ;     

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

				set @InsertStmt2 = ' INSERT INTO '+@DB2DBName+'.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																			   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																			   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																			   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
										 VALUES ('+@PIN_NUM_D121+', '''+@TRANSACTION_DT_D121+''' , '+@TRANSACTION_CD_D121+','+@TRANSACTION_NUM_D121+','+@COUNTY_NUM_D121+' ,
												 '''+@EFFECTIVE_DT_D121+''','+@OFFICE_NUM_D121+','''+@PROGRAM_CD_D121+''','+@PROVIDER_ID_D121+','''+@REGISTRATION_CD_D121+''', 
												 '''+@STAFF_ID_D121+''' ,'''+@COMP_ACTION_CD_D121+''','''+@COMPONENT_PHASE_CD_D121+''','''+@SUBPROGRAM_CD_D121+''',
												 '''+@WDA_CD_D121+''' ,'''+@CMP_RSN_CD_D121+''' ,'+@RFA_NUM_D121+','''+@CMP_DT_D121+''') '



				 PRINT @InsertStmt2

				 exec (@InsertStmt2) at NETWINFO_D00S_DB2
            END


	    END
   





   
		PRINT 'AAAAAAAAAAAAAA'
		IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18CFRFANumber > 0 AND T18CFCompReasonCode = ' '
																		AND T18CFStatusCode = 'O'
																		AND T18CFRFADate <> '9999-12-31' 
																		AND T18CFCompDate = '9999-12-31' )
        BEGIN

		IF @ProgramCode = 'CF '

		 BEGIN

				IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18TMJRFANumber > 0
																		AND T18TMJCpltReasonCode   = ' '
																		AND T18TMJStatCode = 'O'
																		AND T18TMJRFADate <> '9999-12-31' 
																		AND T18TMJCpltDate = '9999-12-31'
						)
				BEGIN 
				PRINT 'CF CO-EXISTS WITH TMJ OR TJ'

				 Set @UpdtStmnt8 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
									   SET   WP_SYSTEM_STS_CD = ''E'' ,
											LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
											CF_STS_CD        = ''C'' ,
											CF_CMP_RSN_CD    =  '''+@CompletionReason+''' ,
											CF_CMP_DT        = '''+@EFFECTIVE_DT_18+''' ,
											PROGRAM_CD       = '' '' ,
											SUBPROGRAM_CD    = '' '',
											TMJ_STAT_CD         = ''O'' 							 
									WHERE PIN_NUM = '+@PIN_NUM_18+'
									 ';                    

				PRINT @UpdtStmnt8                                        
				Exec (@UpdtStmnt8) at NETWINFO_D00S_DB2

				END
                
				--IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18TJRFANumber > 0
				--														AND T18TJCmpReasonCode   = ' '
				--														AND T18TJStatusCode = 'O'
				--														AND T18TJRFADate <> '9999-12-31' 
				--														AND T18TJCompDate = '9999-12-31'
				--		)
				--BEGIN 
				--PRINT 'CF CO-EXISTS WITH TJ'
				--	 Set @UpdtStmnt9 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
				--					   SET   WP_SYSTEM_STS_CD = ''E'' ,
				--							LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
				--							CF_STS_CD        = ''C'' ,
				--							CF_CMP_RSN_CD    =  '''+@CompletionReason+''' ,
				--							CF_CMP_DT        = '''+@EFFECTIVE_DT_18+''' ,
				--							PROGRAM_CD       = '' '' ,
				--							SUBPROGRAM_CD    = '' '',
				--							TJ_STS_CD         = ''O'' 							 
				--					WHERE PIN_NUM = '+@PIN_NUM_18+'
				--					 ';                    

				--PRINT @UpdtStmnt9                                        
				--Exec (@UpdtStmnt9) at NETWINFO_D00S_DB2

				--END

				IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18ProgramCode = 'WW'
													AND T18WPSystemStatusCode = 'E'

						)
				BEGIN 
				PRINT 'CF CO-EXISTS WITH W2 CO-EXISTS'

				Set @UpdtStmnt10 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
									   SET   WP_SYSTEM_STS_CD = ''E'' ,
											LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
											CF_STS_CD        = ''C'' ,
											CF_CMP_RSN_CD    =  '''+@CompletionReason+''' ,
											CF_CMP_DT        = '''+@EFFECTIVE_DT_18+''' 						 
									WHERE PIN_NUM = '+@PIN_NUM_18+'
									 ';                    

				PRINT @UpdtStmnt10                                        
				Exec (@UpdtStmnt10) at NETWINFO_D00S_DB2
				END

						IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18CFStatusCode     = 'O'
						                                    AND T18CFRFADate        <> '9999-12-31' 
														    AND T18TMJStatCode = ' '
															AND T18TMJCpltReasonCode = ' '
															AND T18ProgramCode = ' '
						)
						BEGIN
						PRINT 'ONLY CF EXISTS'

						Set @UpdtStmnt11 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
									   SET   WP_SYSTEM_STS_CD = ''C'' ,
											LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
											CF_STS_CD        = ''C'' ,
											CF_CMP_RSN_CD    =  '''+@CompletionReason+''' ,
											CF_CMP_DT        = '''+@EFFECTIVE_DT_18+''' , 	
											DISENROLLMENT_DT = '''+@EFFECTIVE_DT_18+'''				 
									WHERE PIN_NUM = '+@PIN_NUM_18+'
									 ';                    

			      	   PRINT @UpdtStmnt11      
					                                     
				       Exec (@UpdtStmnt11) at NETWINFO_D00S_DB2

						END

               	SET @TRANSACTION_CD_D121  = 195 ;    
				SET @PROGRAM_CD_D121      =   ' '  ;
				SET @SUBPROGRAM_CD_D121   = ' '
			
				SET @CMP_RSN_CD_D121       = @CompletionReason
				SET @RFA_NUM_D121          = (Select T18CFRFANumber from  @TempT18) ;     
			    SET @CMP_DT_D121           = ( Select T18CFCompDate from  @TempT18)   ;     

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

				set @InsertStmt4 = ' INSERT INTO '+@DB2DBName+'.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																			   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																			   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																			   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
										 VALUES ('+@PIN_NUM_D121+', '''+@TRANSACTION_DT_D121+''' , '+@TRANSACTION_CD_D121+','+@TRANSACTION_NUM_D121+','+@COUNTY_NUM_D121+' ,
												 '''+@EFFECTIVE_DT_D121+''','+@OFFICE_NUM_D121+','''+@PROGRAM_CD_D121+''','+@PROVIDER_ID_D121+','''+@REGISTRATION_CD_D121+''', 
												 '''+@STAFF_ID_D121+''' ,'''+@COMP_ACTION_CD_D121+''','''+@COMPONENT_PHASE_CD_D121+''','''+@SUBPROGRAM_CD_D121+''',
												 '''+@WDA_CD_D121+''' ,'''+@CMP_RSN_CD_D121+''' ,'+@RFA_NUM_D121+','''+@CMP_DT_D121+''') '



				 PRINT @InsertStmt4

				 exec (@InsertStmt4) at NETWINFO_D00S_DB2
				END
		END

       
END




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ CLOSURE OF ALL PROGRAM. THE INDVIDUAL DOES NOT HAVE ANY OTHER OPEN PROGAM.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 IF @AnyOtherProgramOpen = 0 

 Begin
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------- INSERT INTO TRANSACTION TABLE
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @PIN_NUM            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
-- GH#3381 --DECLARE @TRANSACTION_DT     VARCHAR(10) = @EffectiveDate     ;    
DECLARE @TRANSACTION_DT     VARCHAR(10) = @CurrentDate     ; 
DECLARE @TRANSACTION_DT_1     VARCHAR(10) = CONVERT(VARCHAR(10), GETDATE(), 20)     ;    
DECLARE @TRANSACTION_CD     VARCHAR(04) = 931 ;    
DECLARE @TRANSACTION_NUM    VARCHAR(04) = 1 ;   
DECLARE @COUNTY_NUM         VARCHAR(04) = CONVERT(varchar(4), @CountyNumber) ;  
DECLARE @EFFECTIVE_DT       VARCHAR(10) = @EffectiveDate     ;    
DECLARE @OFFICE_NUM         VARCHAR(04) = CONVERT(varchar(4), @OfficeNumber ) ;  
DECLARE @PROGRAM_CD         VARCHAR(3)  = 'WW'  ;  
DECLARE @PROVIDER_ID        VARCHAR(04) = 0000  ;   
DECLARE @REGISTRATION_CD    VARCHAR(1)  = @RegistrationCode ;
DECLARE @STAFF_ID           VARCHAR(6)  = @MFWorkerId ;  
DECLARE @COMP_ACTION_CD     VARCHAR(1)  = ' '  ;  
DECLARE @COMPONENT_PHASE_CD VARCHAR(1)  = ' ';  
DECLARE @SUBPROGRAM_CD      VARCHAR(1) =  @SubProgramCode  ;
DECLARE @TRANSACTION_TS     VARCHAR(26) ;  
DECLARE @WDA_CD             VARCHAR(04)= 0 ;
DECLARE @CMP_RSN_CD         VARCHAR(2)  = ' ' ;   
DECLARE @RFA_NUM            VARCHAR(10) = 0 ;     
DECLARE @CMP_DT             VARCHAR(10) =     '9999-12-31'    ;     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

set @InsertStmt3 = ' INSERT INTO '+@DB2DBName+'.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
                                                               EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
															   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
															   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
                         VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT_1+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
						         '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
							     '''+@STAFF_ID_D121+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
								 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



 PRINT @InsertStmt3

 EXEC (@InsertStmt3) at NETWINFO_D00S_DB2

 END


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @T0492Select NVARCHAR(MAX)
	DECLARE @T0492Insert NVARCHAR(MAX)
	DECLARE @T0492Update NVARCHAR(MAX)
	DECLARE @PIN_NUM_492            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;              

   


	DECLARE @T0492Temp TABLE
	(
	 PinNumber varchar(10) null
	)


  	SET @T0492Select = 'SELECT PinNumber
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT PIN_NUM  AS PinNumber
															FROM '+ @DB2DBName + '.T0492_WP_DRIVER
															WHERE PIN_NUM = ' + @PIN_NUM_492 + ' 
															WITH UR'')'



		INSERT INTO @T0492Temp (PinNumber) 
	          EXEC (@T0492Select)





	IF NOT EXISTS (
			SELECT 1
			FROM @T0492Temp
			)
	BEGIN
	

	SET @T0492Insert = 'INSERT INTO ' + @DB2DBName + '.T0492_WP_DRIVER (PIN_NUM, WPEN_REQR_IND,
WPED_REQR_IND,
WPAW_REQR_IND,
WPJR_REQR_IND,
WPEL_REQR_IND,
WPEH_REQR_IND,
AIPO_REQR_IND,    
WPJS_REQR_IND,    
WPCH_REQR_IND,     
WPCS_REQR_IND,    
WPAS_REQR_IND,    
SCREEN_PROTECT_SW, 
NEW_ASMT_SW,       
WPBD_REQR_IND,
WPRU_REQR_IND,
WPPE_REQR_IND) VALUES (' + @PIN_NUM_492 + ', ''N'' , ''N'', ''N'', ''N'', ''N'', ''N'', ''N'', ''N'', ''N'', ''N'', ''N'',''N'', '' '', ''N'', ''N'', ''N'')'



	EXEC (@T0492Insert) AT NETWINFO_D00S_DB2

	END

	ELSE
	BEGIN



		SET @T0492Update = 'UPDATE ' + @DB2DBName + '.T0492_WP_DRIVER
						SET WPEN_REQR_IND = ''N'' ,
WPED_REQR_IND = ''N'' ,
WPAW_REQR_IND = ''N'' ,
WPJR_REQR_IND = ''N'' ,
WPEL_REQR_IND = ''N'' ,
WPEH_REQR_IND = ''N'' ,
AIPO_REQR_IND = ''N'' ,    
WPJS_REQR_IND = ''N'' ,    
WPCH_REQR_IND = ''N'' ,     
WPCS_REQR_IND = ''N'' ,    
WPAS_REQR_IND = ''N'' ,    
SCREEN_PROTECT_SW = ''N'' , 
NEW_ASMT_SW = '' '' ,       
WPBD_REQR_IND = ''N'' ,
WPRU_REQR_IND = ''N'' 
						WHERE PIN_NUM = ' + @PIN_NUM_492 + '  '



	EXEC (@T0492Update) AT NETWINFO_D00S_DB2


	END





-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ DELETE T0163
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


			DECLARE @PIN_NUM_163            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        

			PRINT @PIN_NUM_163

			 DECLARE @Temp1 table
			 (PendingPinNumber		DECIMAL(10,0) null,
			  PendingOfficeNumber	SMALLINT NULL,
			  PendingRefferalDate	DATE NULL,
			  PendingCaseNumber		DECIMAL(10,0) NULL,
			  PendingCountyNumber	SMALLINT NULL,
			  PendingProgramCode	VARCHAR(03) NULL,
			  PendingSubProgramCode VARCHAR(01) NULL,
			  PendingWPGeoArea		VARCHAR(02) NULL)

			set @SelectStmt2 =   'select PendingPinNumber,
										  PendingOfficeNumber,
										  PendingRefferalDate,      
										  PendingCaseNumber,
										  PendingCountyNumber,
										  PendingProgramCode  , 
										  PendingSubProgramCode,       
										  PendingWPGeoArea    
			FROM OPENQUERY('+@LSDBName+', ''SELECT PIN_NUM			as PendingPinNumber ,
												   OFFICE_NUM		as PendingOfficeNumber,
												   WP_REFERRAL_DT	as PendingRefferalDate,      
												   CASE_NUM			as PendingCaseNumber,
												   COUNTY_NUM		as PendingCountyNumber,
												   PROGRAM_CD		as PendingProgramCode  , 
												   SUBPROGRAM_CD	as PendingSubProgramCode,       
												   WP_GEO_AREA		as PendingWPGeoArea               
			  FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR                      
			 WHERE  PIN_NUM  = '+@PIN_NUM_163+'     
			   WITH UR;
			  '')'



			insert @Temp1(PendingPinNumber,
						  PendingOfficeNumber,
						  PendingRefferalDate,      
						  PendingCaseNumber,
						  PendingCountyNumber,
						  PendingProgramCode  , 
						  PendingSubProgramCode,       
						  PendingWPGeoArea    ) 
			exec (@SelectStmt2)




			IF EXISTS(SELECT PendingPinNumber   FROM @Temp1 where PendingPinNumber = @PIN_NUM_163)


				 Begin


				  PRINT 'ALREADY PENDING REFERRAL EXISTS'

				 DECLARE @PIN_NUM_D18           VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        
				 DECLARE @EFFECTIVE_DT_D18      VARCHAR(10) = @EffectiveDate ;
				 DECLARE @DISENROLLMENT_DT_D18  VARCHAR(10) = '9999-12-31' ;
				 DECLARE @PROGRAM_CD_D18        VARCHAR(03) = (SELECT PendingProgramCode  FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
				 DECLARE @SUBPROGRAM_CD_D18     VARCHAR(01) = (SELECT PendingSubProgramCode  FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
				 DECLARE @COUNTY_NUM_D18        VARCHAR(04) =  (SELECT PendingCountyNumber  FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
				 DECLARE @OFFICE_NUM_D18        VARCHAR(04) =  (SELECT PendingOfficeNumber  FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
				 DECLARE @CASE_NUM_D18          VARCHAR(10) = (SELECT PendingCaseNumber FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
				 DECLARE @WP_REFERRAL_DT_D18    VARCHAR(10) = (SELECT PendingRefferalDate FROM @TEMP1 where PendingPinNumber = @PIN_NUM_163) ;

				 --NOTE:  WE WILL UPDATE THE CASE MANAGER ID LATER, ONCE FEP CONCEPT IS FINALIZED.


				  set @Updtstmnt3 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
										 SET  WP_SYSTEM_STS_CD = ''R'' ,
											  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,
											  WP_REFERRAL_DT   = '''+@WP_REFERRAL_DT_D18+''' ,
											  PROGRAM_CD       = '''+@PROGRAM_CD_D18+'''  ,
											  SUBPROGRAM_CD    = '''+@SUBPROGRAM_CD_D18+''',
											  COUNTY_NUM       = '+@COUNTY_NUM_D18+',
											  OFFICE_NUM       = '+@OFFICE_NUM_D18+',
											  CASE_NUM         = '+@CASE_NUM_D18+',
											  DISENROLLMENT_DT = ''9999-12-31'' 
										WHERE PIN_NUM = '+@PIN_NUM_D18+'
										 ';                    
				  PRINT @Updtstmnt3

				  exec (@Updtstmnt3) at NETWINFO_D00S_DB2


				  PRINT 'UPDATE OF T0018'


				 set @deleteStmt2 = ' DELETE      
										 FROM '+@DB2DBName+'.T0163_WP_PNDNG_RFR           
									   WHERE PIN_NUM = '+@PIN_NUM_163+' '



				 PRINT @deleteStmt2

				 exec (@deleteStmt2) at NETWINFO_D00S_DB2

				 PRINT 'DELETE OF T0163'



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 
				  Declare @Temp121 table
                  (MAXTRANSACTION SMALLINT NULL )

				SET @SelectStmt1 = 'Select MAXTRANSACTION
				   	  FROM OPENQUERY('+@LSDBName+', 
					  ''SELECT MAX(TRANSACTION_NUM)  AS MAXTRANSACTION                               
					      FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                      
					   	WHERE  PIN_NUM  = '+@PIN_NUM_18+ '           
						AND   TRANSACTION_DT = '''''+@TRANSACTION_DT+'''''
						AND   TRANSACTION_CD = ''''392''''
					'')'

				Insert @Temp121(MAXTRANSACTION) 
				Exec (@SelectStmt1)

---select * from @Temp1		 
		    
			
			If exists (select 1 from @Temp121 where MAXTRANSACTION >= 1 )
			Begin

			Update @Temp121
			Set MAXTRANSACTION = MAXTRANSACTION + 1

			END

            ELSE
			 BEGIN
			 Update @Temp121
			  set MAXTRANSACTION = 1

			 END
			
				SET @TRANSACTION_CD_D121      = 025 ;    
				SET @PROGRAM_CD_D121            = 'WW'  ; 
			    SET @TRANSACTION_NUM_D121  = (SELECT MAXTRANSACTION FROM @Temp121)   ;
				SET @COUNTY_NUM_D121 =  (SELECT PendingCountyNumber  FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
				SET @OFFICE_NUM_D121 = (SELECT PendingOfficeNumber  FROM @Temp1 where PendingPinNumber = @PIN_NUM_163)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

				set @InsertStmt1 = ' INSERT INTO '+@DB2DBName+'.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																			   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																			   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																			   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
										 VALUES ('+@PIN_NUM_D121+', '''+@TRANSACTION_DT_D121+''' , '+@TRANSACTION_CD_D121+','+@TRANSACTION_NUM_D121+','+@COUNTY_NUM_D121+' ,
												 '''+@EFFECTIVE_DT_D121+''','+@OFFICE_NUM_D121+','''+@PROGRAM_CD_D121+''','+@PROVIDER_ID_D121+','''+@REGISTRATION_CD_D121+''', 
												 '''+@STAFF_ID_D121+''' ,'''+@COMP_ACTION_CD_D121+''','''+@COMPONENT_PHASE_CD_D121+''','''+@SUBPROGRAM_CD_D121+''',
												 '''+@WDA_CD_D121+''' ,'''+@CMP_RSN_CD_D121+''' ,'+@RFA_NUM_D121+','''+@CMP_DT_D121+''') '



				 PRINT @InsertStmt1

				 exec (@InsertStmt1) at NETWINFO_D00S_DB2


				END
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
END

GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_Enrollment_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-10-08 | GH#3381          | CDO CHANGES FOR TRANSACTION DT IN TABLE T0121                                                      |==
-- ========================================================================================================================================
-- | 2020-02-03 | GH#3789          | W-2 enrollment fails if W-2 and CF both referred on T0018                                          |==
-- ========================================================================================================================================
-- |            |                  |                                                                                                    |==
-- ========================================================================================================================================
-- |            |                  |                                                                                                    |==
-- ========================================================================================================================================
-- |            |                  |                                                                                                    |==
-- ========================================================================================================================================
-- |            |                  |                                                                                                    |==
-- ========================================================================================================================================
CREATE PROCEDURE [wwp].[SP_DB2_Enrollment_Update]
@PinNumber DECIMAL(10,0),            
@EffectiveDate DATE ,    
@CountyNumber SMALLINT ,
@OfficeNumber SMALLINT ,
@MFWorkerId   VARCHAR(06) ,
@MFUserId VARCHAR(06),
@ProgramCode  VARCHAR(03) ,
@SubProgramCode VARCHAR(01) ,
@CurrentRegCode VARCHAR(1),
@SchemaName VARCHAR(20) ,
@RFANumber     DECIMAL(10,0)

AS
BEGIN

	SET NOCOUNT ON;
--
    Declare @CurrentDate  as varchar(10) ;
--
    Declare @SelectStmt1 as varchar(max);
	Declare @SelectStmt2 as varchar(max);
	Declare @SelectStmt3 as varchar(max);
	Declare @SelectStmt4 as varchar(max);
	Declare @SelectStmt5 as varchar(max);
	Declare @SelectStmt6 as varchar(max);
	Declare @SelectStmt11 as varchar(max);
	Declare @SelectStmt33 as varchar(max);
--
    Declare @InsertStmt1   as varchar(max);
	Declare @InsertStmt2   as varchar(max);
	Declare @InsertStmt3   as varchar(max);
	Declare @InsertStmt4   as varchar(max);
	Declare @InsertStmt5   as varchar(max);
	Declare @InsertStmt6   as varchar(max);
	Declare @InsertStmt7   as varchar(max);
	Declare @InsertStmt8   as varchar(max);
--
	Declare @UpdtStmnt0	  as varchar(max);
	Declare @UpdtStmnt1	  as varchar(max);
	Declare @UpdtStmnt2   as varchar(max);
	Declare @UpdtStmnt3   as varchar(max);
	Declare @UpdtStmnt4   as varchar(max);
    Declare @UpdtStmnt5   as varchar(max);
	Declare @UpdtStmnt6   as varchar(max);
    Declare @UpdtStmnt7   as varchar(max);
	Declare @UpdtStmnt8   as varchar(max);
	Declare @UpdtStmnt9   as varchar(max);
	Declare @UpdtStmnt10  as varchar(max);
	Declare @UpdtStmnt11  as varchar(max);
--
	Declare @deleteStmt0  as varchar(max);
	Declare @deleteStmt1  as varchar(max);
	Declare @deleteStmt2  as varchar(max);
	Declare @deleteStmt3  as varchar(max);
	Declare @deleteStmt4  as varchar(max);
--
	Declare @DB2DBName	  as varchar(100) ;
    Declare @LSDBName	  as varchar(100) ;

--
	Set @CurrentDate = CAST(GETDATE() AS DATE);
	 

---
    SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

   SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- NEED TO TREAT LEARNFARE AS W-2 IN OLD SYSTEM
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    IF @ProgramCode = 'LF'
	 BEGIN 
	  SET @ProgramCode = 'WW'
     END
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--Declare @PINTemp table (PINCOUNT int)

	--set @CheckStatement = 'SELECT PINCOUNT
	--					   FROM OPENQUERY (' + @LSDBName +', ''SELECT COUNT(PIN_NUM) AS PINCOUNT
	--														   FROM ' + @DB2DBName + '.T0018_WP_INDV
	--														   WHERE PIN_NUM = ' + CAST(@PinNumber AS VARCHAR(10)) + ''')'

	--INSERT @PINTemp(PINCOUNT)
	--EXEC (@CheckStatement)

	--declare @PINCount int
	--declare @InsertCheck int = 0
	--select @PINCount = PINCOUNT from @PINTemp


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--IF @PINCount <> 0
--BEGIN

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ DECLARE STATEMENTS
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @PIN_NUM_18               VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;  
	DECLARE @EFFECTIVE_DT_18          VARCHAR(10) =  @EffectiveDate ;

	---
	print 2
	---

	DECLARE @PIN_NUM            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
--GH#3381	--DECLARE @TRANSACTION_DT     VARCHAR(10) = @EffectiveDate     ;    
	DECLARE @TRANSACTION_DT     VARCHAR(10) = @CurrentDate     ;    
	DECLARE @TRANSACTION_CD     VARCHAR(04) ;    --- CHANGE  
	DECLARE @TRANSACTION_NUM    VARCHAR(04) ;    --- CHANGE
	DECLARE @COUNTY_NUM         VARCHAR(04) = CONVERT(varchar(4), @CountyNumber) ;  
	DECLARE @EFFECTIVE_DT       VARCHAR(10) = @EffectiveDate     ;    
	DECLARE @OFFICE_NUM         VARCHAR(04) = CONVERT(varchar(4), @OfficeNumber ) ;  
	DECLARE @PROGRAM_CD         VARCHAR(3)  = @ProgramCode    ; 
	DECLARE @PROVIDER_ID        VARCHAR(04) = 0000  ;  --REVISIT
	DECLARE @REGISTRATION_CD    VARCHAR(1)  = '1'  ;  
	DECLARE @STAFF_ID           VARCHAR(6)  = @MFWorkerId ;  
	DECLARE @STAFF_ID_121		VARCHAR(6)  = @MFUserId;
	DECLARE @COMP_ACTION_CD     VARCHAR(1)  = ' '  ;  
	DECLARE @COMPONENT_PHASE_CD VARCHAR(1)  = ' ';  
	DECLARE @SUBPROGRAM_CD      VARCHAR(1)  =  @SubProgramCode  ;  
	DECLARE @TRANSACTION_TS     VARCHAR(26) ;  
	DECLARE @WDA_CD             VARCHAR(04)= 0 ;
	DECLARE @CMP_RSN_CD         VARCHAR(2)  = ' ' ;   
	DECLARE @RFA_NUM            VARCHAR(10) = CONVERT(varchar(10), @RFANumber) ;
	DECLARE @CMP_DT             VARCHAR(10) =     '9999-12-31'    ;     
	DECLARE @CURRENT_REG_CD_18	VARCHAR(1)  = @CurrentRegCode;


---------------
	DECLARE @PIN_NUM_66            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        
	DECLARE @COMPONENT_CD_66       VARCHAR(02) = 'EO' ;
	DECLARE @COMPONENT_BEG_DT_66   VARCHAR(10) = @EffectiveDate ;
	DECLARE @COMPONENT_PHASE_CD_66 VARCHAR(01) = 'A' ;
	DECLARE @HISTORY_SEQ_NUM_66    VARCHAR(04) = 1 ;
	DECLARE @COMP_ANT_END_DT_66    VARCHAR(10) = '9999-12-31' ;
	DECLARE @COMPONENT_CMP_CD_66   VARCHAR(01) = ' ' ;
	DECLARE @COMPONENT_END_DT_66   VARCHAR(10) = @EffectiveDate ;
	DECLARE @DELETE_COMP_SW_66     VARCHAR(01) = ' ' ;
	DECLARE @EMP_ACT_PRV_ID_66     VARCHAR(10) = 0000 ;
	DECLARE @FUNDING_SOURCE_NAM_66 VARCHAR(06) = ' ' ;
	DECLARE @JOB_CD_66             VARCHAR(03) = ' ' ;
	DECLARE @NON_APPROVAL_CD_66    VARCHAR(02) = ' ' ;
	DECLARE @OFFICE_NUM_66         VARCHAR(04) = CONVERT(varchar(4),@OfficeNumber ) ;
	DECLARE @PROVIDER_ID_66        VARCHAR(04) = 0000  ;
	DECLARE @SCHEDULED_HRS_66      VARCHAR(04) = 0000  ;
	DECLARE @SITE_CD_66            VARCHAR(04) = ' '  ;
	DECLARE @STAFF_ID_66           VARCHAR(06) = @MFWorkerId ; 
	--DECLARE @COMPONENT_TS_66       VARCHAR(26) =   ;
	DECLARE @FRQ_DAYS_PER_MM_66    VARCHAR(04) = 0  ;
	DECLARE @DLY_SCHD_HRS_66       VARCHAR(04) = 0  ;
	DECLARE @MRF_REQ_SW_66         VARCHAR(01) = ' ' ;
	DECLARE @W2_HRS_REDUCE_SW_66   VARCHAR(01) = ' '  ;
	DECLARE @HISTORY_CD_66         VARCHAR(04) = 0  ;
	DECLARE @UPDATED_DT_66         VARCHAR(10) = @EffectiveDate ; 
	DECLARE @WORKER_ID_66          VARCHAR(06) = ' '  ;
	DECLARE @REGION_NUM_66         VARCHAR(04) = 0  ;


---------------

	 Declare @TempT18 table
		(T18PinNumber			DECIMAL(10,0)	null,
		T18CaseManagerId		CHAR(06)		null, 
		T18CaseNumber			DECIMAL(10,0)	null,
		T18CountyNumber			SMALLINT		null,  
		T18CurrentRegCode		CHAR(01)		null,  
		T18DisenrollmentCode	SMALLINT		null,  
		T18DisenrollmentDate	DATE			null,  
		T18LastContactDate		DATE			null,
		T18LastDisenrollmentDate DATE			null,    
		T18OffcieNumber			SMALLINT		null,
		T18ProgramCode			CHAR(03)		null,
		T18SubprogramCode		CHAR(01)		null,
		T18WPReferralDate		DATE			null,
		T18WPSystemStatusCode	CHAR(01)		null,
		T18CFRFADate			DATE			null,  
		T18CFStatusCode			CHAR(01)		null,
		T18CFCompReasonCode		CHAR(02)		null,
		T18CFRFANumber			DECIMAL(10,0)	null,
		T18CFCompDate           DATE            null,
		T18TJCompDate			DATE			null,  
		T18TJCmpReasonCode		CHAR(02)		null,
		T18TJRFADate			DATE			null,
		T18TJRFANumber			DECIMAL(10,0)	null,
		T18TJStatusCode			CHAR(01)		null,
		T18WPGeoArea			SMALLINT		null,
		T18TMJCpltDate			DATE			null,
		T18TMJCpltReasonCode	CHAR(02)		null,
		T18TMJRFADate			DATE			null,
		T18TMJRFANumber			DECIMAL(10,0)	null,
		T18TMJStatCode			CHAR(01)		null 
		)

SET @SelectStmt1 =   'select   T18PinNumber			,
								T18CaseManagerId		, 
								T18CaseNumber			,
								T18CountyNumber			,  
								T18CurrentRegCode		,
								T18DisenrollmentCode	,
								T18DisenrollmentDate	,
								T18LastContactDate		,
								T18LastDisenrollmentDate,    
								T18OffcieNumber			,
								T18ProgramCode			,
								T18SubprogramCode		,
								T18WPReferralDate		,
								T18WPSystemStatusCode	,
								T18CFRFADate			,  
								T18CFStatusCode			,
								T18CFCompReasonCode		,
								T18CFRFANumber			,
						        T18CFCompDate           ,
								T18TJCompDate			,  
								T18TJCmpReasonCode		,
								T18TJRFADate			,
								T18TJRFANumber			,
								T18TJStatusCode			,
								T18WPGeoArea			,
								T18TMJCpltDate			,
								T18TMJCpltReasonCode	,
								T18TMJRFADate			,
								T18TMJRFANumber			,
								T18TMJStatCode    
					FROM OPENQUERY('+@LSDBName+', ''SELECT  PIN_NUM				as T18PinNumber			,
															CASE_MANAGER_ID		as T18CaseManagerId		, 
															CASE_NUM			as T18CaseNumber		,
															COUNTY_NUM			as T18CountyNumber		, 
															CURRENT_REG_CD		as T18CurrentRegCode	,
															DISENROLLMENT_CD	as T18DisenrollmentCode	,
															DISENROLLMENT_DT	as T18DisenrollmentDate	,
															LAST_CONTACT_DT		as T18LastContactDate	,
															LAST_DISENROLL_DT	as T18LastDisenrollmentDate ,   
															OFFICE_NUM			as T18OffcieNumber		,
															PROGRAM_CD			as T18ProgramCode		,
															SUBPROGRAM_CD		as T18SubprogramCode	,
															WP_REFERRAL_DT		as T18WPReferralDate	, 
															WP_SYSTEM_STS_CD	as T18WPSystemStatusCode,
															CF_RFA_DT			as T18CFRFADate			,       
															CF_STS_CD			as T18CFStatusCode		, 
															CF_CMP_RSN_CD		as T18CFCompReasonCode	,
															CF_RFA_NUM			as T18CFRFANumber		,
															CF_CMP_DT           as T18CFCompDate        ,
															TJ_CMP_DT			as T18TJCompDate	    ,
															TJ_CMP_RSN_CD		as T18TJCmpReasonCode	,
															TJ_RFA_DT			as T18TJRFADate			,
															TJ_RFA_NUM			as T18TJRFANumber		,
															TJ_STS_CD			as T18TJStatusCode		,
															WP_GEO_AREA			as T18WPGeoArea			,
															TMJ_CPLT_DT			as T18TMJCpltDate		,
															TMJ_CPLT_RSN_CD		as T18TMJCpltReasonCode	,
															TMJ_RFA_DT			as T18TMJRFADate		,
															TMJ_RFA_NUM			as T18TMJRFANumber		,
															TMJ_STAT_CD			as T18TMJStatCode
					  FROM  '+@DB2DBName+'.T0018_WP_INDV                      
					 WHERE  PIN_NUM  = '+@PIN_NUM_18+'     
					   WITH UR;
					  '')'


			Insert @TempT18 ( T18PinNumber			,
											T18CaseManagerId		, 
											T18CaseNumber			,
											T18CountyNumber			,  
											T18CurrentRegCode		,
											T18DisenrollmentCode	,
											T18DisenrollmentDate	,
											T18LastContactDate		,
											T18LastDisenrollmentDate,    
											T18OffcieNumber			,
											T18ProgramCode			,
											T18SubprogramCode		,
											T18WPReferralDate		,
											T18WPSystemStatusCode	,
											T18CFRFADate			,  
											T18CFStatusCode			,
											T18CFCompReasonCode		,
											T18CFRFANumber			,
											T18CFCompDate           ,
											T18TJCompDate			,  
											T18TJCmpReasonCode		,
											T18TJRFADate			,
											T18TJRFANumber			,
											T18TJStatusCode			,
											T18WPGeoArea			,
											T18TMJCpltDate			,
											T18TMJCpltReasonCode	,
											T18TMJRFADate			,
											T18TMJRFANumber			,
											T18TMJStatCode      ) 
			Exec (@SelectStmt1);

      
	  --select * from @TempT18
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------SCENARIO 1:   W2 ENROLLMENT FOR THE FIRST TIME.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @W2UPADATE1 BIT  = 0;
DECLARE @W2UPADATE2 BIT  = 0 ;


	  IF EXISTS (SELECT 1 FROM @TempT18 where T18PinNumber = @PIN_NUM_18 AND T18ProgramCode  = 'WW' AND T18WPSystemStatusCode = 'R')

	   BEGIN

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
       PRINT 'W2 LOGIC AND CF IS REFERRED'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18CFRFANumber > 0 
													 AND T18CFCompReasonCode = ' '
													 AND T18CFStatusCode     = 'O'
													 AND T18CFCompDate       = '9999-12-31' 
								)

            BEGIN
                  PRINT 'CF IS ALSO REFERRED OR ENROLLED, WPASS WOULD HANDLE TO DISENROLL CF THEN ENROLL IN W2' 

		     IF @ProgramCode = 'WW'

		      BEGIN

--- CHANGES DONE ON 09/27/2018		  
	          SET @UpdtStmnt0 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                                     SET  WP_SYSTEM_STS_CD = ''E'' ,
		                                  LAST_CONTACT_DT = '''+@EFFECTIVE_DT_18+''' ,
										  CASE_MANAGER_ID  = '''+@MFWorkerId+'''
                                    WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                                            
			                                     
               EXEC (@UpdtStmnt0) at NETWINFO_D00S_DB2

------------------------------------  UPDATE      ---------------------------------------------------------------------------------------------------------------------------------
          
		      SET @W2UPADATE1 = 1

  
		      END

            END 

           ELSE
      
            BEGIN

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PRINT 'ONLY W2'
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	   
	         SET @UpdtStmnt1 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  WP_SYSTEM_STS_CD = ''E'' ,
		                      LAST_CONTACT_DT = '''+@EFFECTIVE_DT_18+''' ,
							    CASE_MANAGER_ID  = '''+@MFWorkerId+'''
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';   
						 
						 PRINT  @UpdtStmnt1                                         
			                                     
              EXEC (@UpdtStmnt1) at NETWINFO_D00S_DB2


			   SET @W2UPADATE2 = 1

------------------------------------  UPDATE TRANSACTION TABLE    ---------------------------------------------------------------------------------------------------------------------------------
          

		  END

	  END


	  IF @W2UPADATE1 = 1 OR @W2UPADATE2 = 1

	  BEGIN
	    Declare @Temp1 table
                  (MAXTRANSACTION SMALLINT NULL )

				SET @SelectStmt1 = 'Select MAXTRANSACTION
				   	  FROM OPENQUERY('+@LSDBName+', 
					  ''SELECT MAX(TRANSACTION_NUM)  AS MAXTRANSACTION                               
					      FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                      
					   	WHERE  PIN_NUM  = '+@PIN_NUM_18+ '           
						AND   TRANSACTION_DT = '''''+@TRANSACTION_DT+'''''
						AND   TRANSACTION_CD = ''''392''''
					'')'

				Insert @Temp1(MAXTRANSACTION) 
				Exec (@SelectStmt1)

---select * from @Temp1		 
		    
			
			If exists (select 1 from @Temp1 where MAXTRANSACTION >= 1 )
			Begin

			Update @Temp1
			Set MAXTRANSACTION = MAXTRANSACTION + 1

			END

            ELSE
			 BEGIN
			 Update @Temp1
			  set MAXTRANSACTION = 1

			 END

--- select * from @Temp1

			  SET @TRANSACTION_CD = 392

			  SET @TRANSACTION_NUM  = (SELECT MAXTRANSACTION FROM @Temp1)   

			  print 'TRANSACTION_NUM' + @TRANSACTION_NUM

			  SET @InsertStmt1 = ' INSERT INTO ' + @DB2DBName + '.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																	   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																	   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																	   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
								 VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
										 '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
										 '''+@STAFF_ID_121+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
										 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '

              PRINT @InsertStmt1

              Exec (@InsertStmt1)  at NETWINFO_D00S_DB2

------------------------------------  UPDATE  ACTIVITY    ---------------------------------------------------------------------------------------------------------------------------------
			    Declare @Temp11 table
                  (MAXACTIVITY SMALLINT null )


				SET @SelectStmt11 = 'select MAXACTIVITY
										FROM OPENQUERY('+@LSDBName+', ''SELECT COUNT(*)  AS MAXACTIVITY                              
					FROM  '+@DB2DBName+'.T0066_WP_IN_COMP                  
					WHERE  PIN_NUM  = '+@PIN_NUM_18+'           
					AND   COMPONENT_BEG_DT = '''''+@TRANSACTION_DT+'''''
					AND   COMPONENT_CD  = ''''EO''''
					AND   HISTORY_SEQ_NUM  =  1
					'')'
				Insert @Temp11(MAXACTIVITY) 
				Exec (@SelectStmt11)

---select * from @Temp11

			If exists (select 1 from @Temp11 where MAXACTIVITY = 0 )

				BEGIN
				
				PRINT 'INTO W2 ONLY ACTIVITY LOGIC'
			 
			  SET @InsertStmt2 = 'INSERT INTO ' + @DB2DBName + '.T0066_WP_IN_COMP  (PIN_NUM , COMPONENT_CD , COMPONENT_BEG_DT , COMPONENT_PHASE_CD ,   
																					 HISTORY_SEQ_NUM , COMP_ANT_END_DT , COMPONENT_CMP_CD ,             
																					 COMPONENT_END_DT , DELETE_COMP_SW , EMP_ACT_PRV_ID ,               
																					 FUNDING_SOURCE_NAM , JOB_CD , NON_APPROVAL_CD , OFFICE_NUM ,       
																					 PROVIDER_ID , SCHEDULED_HRS , SITE_CD , STAFF_ID , 
																					 FRQ_DAYS_PER_MM , DLY_SCHD_HRS , MRF_REQ_SW , W2_HRS_REDUCE_SW ,   
																					 HISTORY_CD , UPDATED_DT , WORKER_ID , REGION_NUM    )                                  
								   VALUES ('+@PIN_NUM_66+', '''+@COMPONENT_CD_66+''' , '''+@COMPONENT_BEG_DT_66+''','''+@COMPONENT_PHASE_CD_66+''' ,
										   '+@HISTORY_SEQ_NUM_66+' ,  '''+@COMP_ANT_END_DT_66+''' ,  '''+@COMPONENT_CMP_CD_66+''' ,             
										   '''+@COMPONENT_END_DT_66+''' ,  '''+@DELETE_COMP_SW_66+'''  ,  '+@EMP_ACT_PRV_ID_66+' ,               
										   '''+@FUNDING_SOURCE_NAM_66+''' ,  '''+@JOB_CD_66+''' ,  '''+@NON_APPROVAL_CD_66+''' ,  '+@OFFICE_NUM_66+' ,       
										   '+@PROVIDER_ID_66+' ,  '+@SCHEDULED_HRS_66+' ,  '''+@SITE_CD_66+''' ,  '''+@STAFF_ID_66+''' ,  
										   '+@FRQ_DAYS_PER_MM_66+' ,  '+@DLY_SCHD_HRS_66+' ,  '''+@MRF_REQ_SW_66+''' ,  '''+@W2_HRS_REDUCE_SW_66+''' ,   
										   '+@HISTORY_CD_66+' ,  '''+@UPDATED_DT_66+''' ,  '''+@WORKER_ID_66+''' ,  '+@REGION_NUM_66+' ) '



				 PRINT @InsertStmt2

				 Exec (@InsertStmt2) at NETWINFO_D00S_DB2

			END
	END 
   
	      
	  

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--- END OF SCENARIO 1
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--- SCENARIO 2 : NON ELIGIBILITY RELATED W-2 OPEN FOR THE FIRST TIME
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   
   
    IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18PinNumber = @PIN_NUM_18 
                                       AND T18ProgramCode  = ' ' AND T18WPSystemStatusCode = 'R')

	 BEGIN

		IF EXISTS (SELECT 1 FROM @TempT18 WHERE (T18CFRFANumber > 0 
											 AND T18CFCompReasonCode = ' '
											 AND T18CFStatusCode     = 'O'
											 AND T18CFCompDate       = '9999-12-31'  )
											 OR
											 (T18TMJRFANumber > 0 
											 AND T18TMJCpltReasonCode = ' '
											 AND T18TMJStatCode     = 'O'
											 AND T18TMJCpltDate       = '9999-12-31' 
											 ))
		BEGIN

	 			  SET @UpdtStmnt2 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
							 SET  WP_SYSTEM_STS_CD = ''E'' ,
								  CURRENT_REG_CD = '''+@CURRENT_REG_CD_18+''',
								  LAST_CONTACT_DT = '''+@EFFECTIVE_DT_18+''' ,
								  CASE_MANAGER_ID =  '''+@STAFF_ID+'''
							WHERE PIN_NUM = '+@PIN_NUM_18+'
							 ';                    

				  EXEC (@UpdtStmnt2) at NETWINFO_D00S_DB2



	------------------------------------  UPDATE TRANSACTION TABLE    ---------------------------------------------------------------------------------------------------------------------------------
				 Declare @Temp2 table
					  (MAXTRANSACTION SMALLINT null)

				 Set @SelectStmt2 = 'SELECT MAXTRANSACTION
											FROM OPENQUERY('+@LSDBName+', ''SELECT MAX(TRANSACTION_NUM)  AS MAXTRANSACTION                               
																		  	  FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                      
																			 WHERE  PIN_NUM  = '+@PIN_NUM_18+'           
																		  	   AND  TRANSACTION_DT = '''''+@TRANSACTION_DT+'''''
																			   AND  TRANSACTION_CD = ''''392''''
																			'')'
				 Insert @Temp2(MAXTRANSACTION) 
				 Exec (@SelectStmt2)

			   			
                 If exists (select 1 from @Temp2 where MAXTRANSACTION >= 1 )
					 Begin

					 UPDATE @Temp2
						SET MAXTRANSACTION = MAXTRANSACTION + 1

					 END
				ELSE
					BEGIN
					UPDATE @Temp2
					SET MAXTRANSACTION = 1

				END

				  SET @TRANSACTION_CD = 392

				  SET @TRANSACTION_NUM  = (SELECT MAXTRANSACTION FROM @Temp2)   

				  SET @InsertStmt3 = ' INSERT INTO ' + @DB2DBName + '.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																		   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																		   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																		   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
									 VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
											 '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
											 '''+@STAFF_ID_121+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
											 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



              	  Exec (@InsertStmt3)  at NETWINFO_D00S_DB2


                  Declare @Temp33 table
					  (MAXACTIVITY SMALLINT null)

	             SET @SelectStmt33 = 'select MAXACTIVITY
										FROM OPENQUERY('+@LSDBName+', ''SELECT COUNT(*)  AS MAXACTIVITY                              
					FROM  '+@DB2DBName+'.T0066_WP_IN_COMP                  
					WHERE  PIN_NUM  = '+@PIN_NUM_18+'           
					AND   COMPONENT_BEG_DT = '''''+@TRANSACTION_DT+'''''
					AND   COMPONENT_CD  = ''''EO''''
					AND   HISTORY_SEQ_NUM  =  1
					'')'
				Insert @Temp33(MAXACTIVITY) 
				Exec (@SelectStmt11)

--select * from @Temp33

			If exists (select 1 from @Temp33 where MAXACTIVITY = 0 )

				BEGIN
				
				PRINT 'INTO W2 ONLY ACTIVITY LOGIC'
	------------------------------------  UPDATE  ACTIVITY    ---------------------------------------------------------------------------------------------------------------------------------
				  SET @InsertStmt4 = 'INSERT INTO ' + @DB2DBName + '.T0066_WP_IN_COMP  (PIN_NUM , COMPONENT_CD , COMPONENT_BEG_DT , COMPONENT_PHASE_CD ,   
																						 HISTORY_SEQ_NUM , COMP_ANT_END_DT , COMPONENT_CMP_CD ,             
																						 COMPONENT_END_DT , DELETE_COMP_SW , EMP_ACT_PRV_ID ,               
																						 FUNDING_SOURCE_NAM , JOB_CD , NON_APPROVAL_CD , OFFICE_NUM ,       
																						 PROVIDER_ID , SCHEDULED_HRS , SITE_CD , STAFF_ID , 
																						 FRQ_DAYS_PER_MM , DLY_SCHD_HRS , MRF_REQ_SW , W2_HRS_REDUCE_SW ,   
																						 HISTORY_CD , UPDATED_DT , WORKER_ID , REGION_NUM    )                                  
									   VALUES ('+@PIN_NUM_66+', '''+@COMPONENT_CD_66+''' , '''+@COMPONENT_BEG_DT_66+''','''+@COMPONENT_PHASE_CD_66+''' ,
											   '+@HISTORY_SEQ_NUM_66+' ,  '''+@COMP_ANT_END_DT_66+''' ,  '''+@COMPONENT_CMP_CD_66+''' ,             
											   '''+@COMPONENT_END_DT_66+''' ,  '''+@DELETE_COMP_SW_66+'''  ,  '+@EMP_ACT_PRV_ID_66+' ,               
											   '''+@FUNDING_SOURCE_NAM_66+''' ,  '''+@JOB_CD_66+''' ,  '''+@NON_APPROVAL_CD_66+''' ,  '+@OFFICE_NUM_66+' ,       
											   '+@PROVIDER_ID_66+' ,  '+@SCHEDULED_HRS_66+' ,  '''+@SITE_CD_66+''' ,  '''+@STAFF_ID_66+''' ,  
											   '+@FRQ_DAYS_PER_MM_66+' ,  '+@DLY_SCHD_HRS_66+' ,  '''+@MRF_REQ_SW_66+''' ,  '''+@W2_HRS_REDUCE_SW_66+''' ,   
											   '+@HISTORY_CD_66+' ,  '''+@UPDATED_DT_66+''' ,  '''+@WORKER_ID_66+''' ,  '+@REGION_NUM_66+' ) '



					 PRINT @InsertStmt4

					 Exec (@InsertStmt4) at NETWINFO_D00S_DB2   

           END 
	------------------------------------  UPDATE TRANSACTION TABLE BASED ON PROGRAM    ---------------------------------------------------------------------------------------------------------------------------------

		           SELECT @TRANSACTION_CD =
					 CASE WHEN @ProgramCode = 'CF' THEN  196     
						  WHEN @ProgramCode = 'TJ' THEN 258
		   				  WHEN @ProgramCode = 'TMJ' THEN 258
					END

				   Declare @Temp3 table
					  (MAXTRANSACTION SMALLINT null)

				  Set @SelectStmt3 = 'select MAXTRANSACTION
											FROM OPENQUERY('+@LSDBName+', ''SELECT MAX(TRANSACTION_NUM)  AS MAXTRANSACTION                               
																			FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                      
																			WHERE  PIN_NUM  = '+@PIN_NUM_18+'           
																			AND   TRANSACTION_DT = '''''+@TRANSACTION_DT+'''''
																			AND   TRANSACTION_CD = '+@TRANSACTION_CD+'
																			'')'
					Insert @Temp3(MAXTRANSACTION) 
					Exec (@SelectStmt3)

               If exists (select 1 from @Temp3 where MAXTRANSACTION >= 1 )
					 Begin

					 Update @Temp3
						Set MAXTRANSACTION = MAXTRANSACTION + 1

					 END
				ELSE
					BEGIN
					UPDATE @Temp3
					SET MAXTRANSACTION = 1

				END


				  SET @TRANSACTION_NUM  = (SELECT MAXTRANSACTION FROM @Temp3)   

						SET @InsertStmt5 = ' INSERT INTO ' + @DB2DBName + '.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																		   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																		   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																		   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
									 VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
											 '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
											 '''+@STAFF_ID_121+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
											 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



              			Exec (@InsertStmt5)  at NETWINFO_D00S_DB2


		  END

		END

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--- END OF SCENARIO 2
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ SCENARIO3:   W2 ENROLLED ALREADY AND CF ENROLLMENT. ONLY CF CAN CO-ENROLLED WITH W2
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   PRINT 'IIIIIIII'


   IF EXISTS (SELECT 1 FROM @TempT18 where T18PinNumber = @PIN_NUM_18 AND T18ProgramCode  = 'WW' AND T18WPSystemStatusCode = 'E')

    BEGIN

    PRINT 'W2 IS ENROLLED AND CF IS REFERRED'

	 IF EXISTS (SELECT 1 FROM @TempT18 WHERE T18CFRFANumber > 0 
	                                     AND T18CFCompReasonCode = ' '
                                         AND T18CFStatusCode     = 'O'
										 AND T18CFCompDate       = '9999-12-31' )

      BEGIN

	 
		         Declare @Temp4 table
                  (MAXTRANSACTION SMALLINT null)

            SELECT @TRANSACTION_CD =
		 CASE    WHEN @ProgramCode = 'CF' THEN  196     
              WHEN @ProgramCode = 'TJ' THEN 258
		   	 WHEN @ProgramCode = 'TMJ' THEN 258
          END  
			 

				Set @SelectStmt4 = 'select MAXTRANSACTION
										FROM OPENQUERY('+@LSDBName+', ''SELECT MAX(TRANSACTION_NUM)  AS MAXTRANSACTION                               
					FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                      
					WHERE  PIN_NUM  = '+@PIN_NUM_18+'           
					AND   TRANSACTION_DT = '''''+@TRANSACTION_DT+'''''
					AND   TRANSACTION_CD = '+@TRANSACTION_CD+'
					'')'
				Insert @Temp4(MAXTRANSACTION) 
				Exec (@SelectStmt4)

   If exists (select 1 from @Temp4 where MAXTRANSACTION >= 1 )
					 Begin

					 Update @Temp4
						Set MAXTRANSACTION = MAXTRANSACTION + 1

					 END
				ELSE
					BEGIN
					Update @Temp4
					set MAXTRANSACTION = 1

				END


     

			  SET @TRANSACTION_NUM  = (SELECT MAXTRANSACTION FROM @Temp4)   

					set @InsertStmt6 = ' INSERT INTO ' + @DB2DBName + '.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
																	   EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
																	   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
																	   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
								 VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
										 '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
										 '''+@STAFF_ID_121+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
										 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



              			Exec (@InsertStmt6)  at NETWINFO_D00S_DB2


	 

     END

   END
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--- END OF SCENARIO 3
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ SCENARIO 4:  NON ELIGBILITY RELATED PROGRAM ALREADY EXIST, CO-ENROLL OTHER NON ELIGIBILITY RELATED PROGRAM.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

   IF EXISTS (SELECT 1 FROM @TempT18 where T18PinNumber = @PIN_NUM_18 AND T18ProgramCode  = ' ' AND T18WPSystemStatusCode = 'E')

   BEGIN
     PRINT  'NON ELIG SECOND TIME LOGIC'
	 DECLARE @CFReferralExists BIT
	 DECLARE @TJRefferalExists BIT
	 DECLARE @TMJRefferalExists BIT

   IF EXISTS (SELECT 1 FROM @TempT18 WHERE (T18CFRFANumber > 0 
	                                     AND T18CFCompReasonCode = ' '
                                         AND T18CFStatusCode     = 'O'
										 AND T18CFCompDate       = '9999-12-31'  )
										 OR
										 (T18TMJRFANumber > 0 
	                                     AND T18TMJCpltReasonCode = ' '
                                         AND T18TMJStatCode     = 'O'
										 AND T18TMJCpltDate       = '9999-12-31' 							 
										 ))
    BEGIN

	    SET @UpdtStmnt3 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  LAST_CONTACT_DT = '''+@EFFECTIVE_DT_18+''',
							  CURRENT_REG_CD = '''+@CURRENT_REG_CD_18+'''
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
           PRINT @UpdtStmnt3                                       
           EXEC (@UpdtStmnt3) at NETWINFO_D00S_DB2
	  		  
		
	  SELECT @TRANSACTION_CD =
         CASE WHEN @ProgramCode = 'CF' THEN  196     
              WHEN @ProgramCode = 'TJ' THEN 258
		   	 WHEN @ProgramCode = 'TMJ' THEN 258
           END

		         Declare @Temp5 table
                  (MAXTRANSACTION SMALLINT null)

				Set @SelectStmt5 = 'select MAXTRANSACTION
										FROM OPENQUERY('+@LSDBName+', ''SELECT MAX(TRANSACTION_NUM)  AS MAXTRANSACTION                               
					FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                      
					WHERE  PIN_NUM  = '+@PIN_NUM_18+'           
					AND   TRANSACTION_DT = '''''+@TRANSACTION_DT+'''''
					AND   TRANSACTION_CD = '+@TRANSACTION_CD+'
					'')'

	PRINT @SelectStmt5

				Insert @Temp5(MAXTRANSACTION) 
				Exec (@SelectStmt5)

	--SELECT * FROM @Temp5

   	
			If exists (select 1 from @Temp5 where MAXTRANSACTION >= 1 )
			Begin

			Update @Temp5
			Set MAXTRANSACTION = MAXTRANSACTION + 1

			END

            ELSE
			 BEGIN
			 Update @Temp5
			  set MAXTRANSACTION = 1

			 END

--SELECT * FROM @Temp5

		

		   SET @TRANSACTION_NUM = (SELECT MAXTRANSACTION FROM @Temp5)

		    set @InsertStmt7 = ' INSERT INTO ' + @DB2DBName + '.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
                                                               EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
															   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
															   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
                         VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
						         '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
							     '''+@STAFF_ID_121+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
								 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



               PRINT @InsertStmt7

               exec (@InsertStmt7) at NETWINFO_D00S_DB2

		
		  END

		END

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @T0492Select NVARCHAR(MAX)
	DECLARE @T0492Insert NVARCHAR(MAX)
	DECLARE @T0492Update NVARCHAR(MAX)
	DECLARE @PIN_NUM_492            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;              

   


	DECLARE @T0492Temp TABLE
	(
	 PinNumber varchar(10) null
	)


  	SET @T0492Select = 'SELECT PinNumber
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT PIN_NUM  AS PinNumber
															FROM '+ @DB2DBName + '.T0492_WP_DRIVER
															WHERE PIN_NUM = ' + @PIN_NUM_492 + ' 
															WITH UR'')'



		INSERT INTO @T0492Temp (PinNumber) 
	          EXEC (@T0492Select)





	IF NOT EXISTS (
			SELECT 1
			FROM @T0492Temp
			)
	BEGIN
	

	SET @T0492Insert = 'INSERT INTO ' + @DB2DBName + '.T0492_WP_DRIVER (PIN_NUM, WPEN_REQR_IND,
WPED_REQR_IND,
WPAW_REQR_IND,
WPJR_REQR_IND,
WPEL_REQR_IND,
WPEH_REQR_IND,
AIPO_REQR_IND,    
WPJS_REQR_IND,    
WPCH_REQR_IND,     
WPCS_REQR_IND,    
WPAS_REQR_IND,    
SCREEN_PROTECT_SW, 
NEW_ASMT_SW,       
WPBD_REQR_IND,
WPRU_REQR_IND,
WPPE_REQR_IND) VALUES (' + @PIN_NUM_492 + ', ''N'' , ''N'', ''N'', ''N'', ''N'', ''N'', ''N'', ''Y'', ''Y'', ''Y'', ''Y'',''N'', '' '', ''N'', ''N'', ''N'')'



	EXEC (@T0492Insert) at NETWINFO_D00S_DB2

	END

	ELSE
	BEGIN



		SET @T0492Update = 'UPDATE ' + @DB2DBName + '.T0492_WP_DRIVER
						SET WPEN_REQR_IND = ''N'' ,
WPED_REQR_IND = ''N'' ,
WPAW_REQR_IND = ''N'' ,
WPJR_REQR_IND = ''N'' ,
WPEL_REQR_IND = ''N'' ,
WPEH_REQR_IND = ''N'' ,
AIPO_REQR_IND = ''N'' ,    
WPJS_REQR_IND = ''Y'' ,    
WPCH_REQR_IND = ''Y'' ,     
WPCS_REQR_IND = ''Y'' ,    
WPAS_REQR_IND = ''Y'' ,    
SCREEN_PROTECT_SW = ''N'' , 
NEW_ASMT_SW = '' '' ,       
WPBD_REQR_IND = ''N'' ,
WPRU_REQR_IND = ''N'' 
						WHERE PIN_NUM = ' + @PIN_NUM_492 + '  '



	EXEC (@T0492Update) at NETWINFO_D00S_DB2


	END


  END
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----  END 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_InformalAssessment_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-10-08 | GH#3381          | CDO CHANGES FOR TRANSACTION DT IN TABLE T0121                                                      |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
/* Sample Execute
EXEC [wwp].[SP_DB2_InformalAssessment_Update] 3009006560, '2018-03-28', 'XCTB9X', 'WWPDEV'
*/

CREATE PROCEDURE [wwp].[SP_DB2_InformalAssessment_Update]
@PinNumber DECIMAL(10,0),
@EffectiveDate DATE,
@MFWorkerId   VARCHAR(06),
@SchemaName VARCHAR(20)
AS
BEGIN
	SET NOCOUNT ON

	--- DECLARE VARIABLES
	--GH#3381--			@TRANSACTION_DT		VARCHAR(10) = @EffectiveDate,
	--GH#3381 ADDED NEW LINES OF CODE TO DECLARE VARIABLE. 
	 Declare @CurrentDate  as varchar(10) ;
	 Set @CurrentDate = CAST(GETDATE() AS DATE);
	--GH#3381

	DECLARE @DB2DBName			VARCHAR(100),
			@LSDBName			VARCHAR(100),
			@SelectStmt1		VARCHAR(MAX),
			@InsertStmt1		VARCHAR(MAX),
			@SelectStmt2		VARCHAR(MAX),
			@InsertStmt2		VARCHAR(MAX),
			@PIN_NUM			VARCHAR(10) = CONVERT(VARCHAR(10), @PinNumber),
	        @TRANSACTION_DT		VARCHAR(10) = @CurrentDate,
			@CountyNumber		VARCHAR(4),
			@OfficeNumber		VARCHAR(4),
			@TRANSACTION_CD_IA	VARCHAR(04) = 227,
			@TRANSACTION_CD_CNS	VARCHAR(04) = 931,
			@MAXTRANSACTION_NUM	VARCHAR(04),
			@TRANSACTION_NUM	VARCHAR(04),
			@EFFECTIVE_DT		VARCHAR(10) = @EffectiveDate,
			@PROGRAM_CD         VARCHAR(3)  = 'WW',
			@PROVIDER_ID        VARCHAR(04) = 0000,
			@REGISTRATION_CD    VARCHAR(1)  = ' ',
			@STAFF_ID           VARCHAR(6)  = @MFWorkerId,
			@COMP_ACTION_CD     VARCHAR(1)  = ' ',
			@COMPONENT_PHASE_CD VARCHAR(1)  = ' ',
			@SUBPROGRAM_CD      VARCHAR(1)  = ' ',
			@WDA_CD             VARCHAR(04) = 0,
			@CMP_RSN_CD         VARCHAR(2)  = ' ',
			@RFA_NUM            VARCHAR(10) = 0,
			@CMP_DT             VARCHAR(10) = '9999-12-31'
	
	--- SET LS PARAMETER
	 SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')	THEN 'NETWINFO_D00S_DB2'
							 WHEN @SchemaName = 'WWPACC'				THEN 'NETWINFO_D00A_DB2'
                             WHEN @SchemaName = 'WWPTRN'				THEN 'NETWINFO_D00E_DB2'
                             WHEN @SchemaName = 'WWP'					THEN 'NETWINFO_D40P_DB2'
						END
	
	--- SET LS DB PARAMETER
	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')	THEN 'PWS639TC'
                             WHEN @SchemaName = 'WWPACC'				THEN 'PWA639TC'
                             WHEN @SchemaName = 'WWPTRN'				THEN 'PWE639TC'
                             WHEN @SchemaName = 'WWP'					THEN 'PWP639TC'
                        END
	
	--- UPDATE TRANSACTION TABLE
	DECLARE @Temp1 TABLE
    (
	 TRANSACTION_DT DATE,
	 TRANSACTION_CD SMALLINT,
	 TRANSACTION_NUM SMALLINT
	)

	DECLARE @T0018 TABLE
	(
	 COUNTY_NUM SMALLINT,
	 OFFICE_NUM SMALLINT
	)

	SET @SelectStmt1 = 'SELECT TRANSACTION_DT, TRANSACTION_CD, TRANSACTION_NUM
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT TRANSACTION_DT, TRANSACTION_CD, TRANSACTION_NUM
														   FROM ' + @DB2DBName + '.T0121_WP_IN_SRV_HI
														   WHERE PIN_NUM = ' + @PIN_NUM + ' 
															     AND TRANSACTION_CD IN (' + @TRANSACTION_CD_IA + ', ' + @TRANSACTION_CD_CNS + ')'')'

	PRINT @SelectStmt1
	
	INSERT @Temp1 (TRANSACTION_DT, TRANSACTION_CD, TRANSACTION_NUM)
	EXEC (@SelectStmt1)

	--SELECT * FROM @Temp1

	SET @SelectStmt2 = 'SELECT COUNTY_NUM, OFFICE_NUM
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT COUNTY_NUM, OFFICE_NUM
														   FROM ' + @DB2DBName + '.T0018_WP_INDV
														   WHERE PIN_NUM = ' + @PIN_NUM + ''')'

	PRINT @SelectStmt2
	
	INSERT @T0018 (COUNTY_NUM, OFFICE_NUM)
	EXEC (@SelectStmt2)

	--SELECT * FROM @T0018

	SELECT @MAXTRANSACTION_NUM = MAX(TRANSACTION_NUM)
	FROM @Temp1
	WHERE TRANSACTION_CD = @TRANSACTION_CD_IA AND TRANSACTION_DT = @TRANSACTION_DT

	SELECT @TRANSACTION_NUM = IIF(@MAXTRANSACTION_NUM >= 1, @MAXTRANSACTION_NUM + 1, 1)

	SELECT @CountyNumber = COUNTY_NUM
	FROM @T0018

	SELECT @OfficeNumber = OFFICE_NUM
	FROM @T0018

	PRINT 'MAXTRANSACTION_NUM: ' + ISNULL(@MAXTRANSACTION_NUM, 0)
	PRINT 'TRANSACTION_NUM: ' + @TRANSACTION_NUM
	PRINT 'COUNTY_NUM: ' + ISNULL(@CountyNumber, 0)
	PRINT 'OFFICE_NUM: ' + ISNULL(@OfficeNumber, 0)

	IF NOT EXISTS (SELECT 1
			   FROM @Temp1
			   WHERE TRANSACTION_DT = @TRANSACTION_DT AND TRANSACTION_CD = @TRANSACTION_CD_CNS)
	BEGIN
		SET @InsertStmt1 = 'INSERT INTO ' + @DB2DBName + '.T0121_WP_IN_SRV_HI (PIN_NUM, TRANSACTION_DT, TRANSACTION_CD, TRANSACTION_NUM, COUNTY_NUM, EFFECTIVE_DT, OFFICE_NUM, PROGRAM_CD,
										 PROVIDER_ID, REGISTRATION_CD, STAFF_ID, COMP_ACTION_CD, COMPONENT_PHASE_CD, SUBPROGRAM_CD, WDA_CD, CMP_RSN_CD,	RFA_NUM, CMP_DT)
								 VALUES (' + @PIN_NUM + ', ''' + @TRANSACTION_DT + ''', ' + @TRANSACTION_CD_IA + ', ' + @TRANSACTION_NUM + ', ' + @CountyNumber + ', ''' + @EFFECTIVE_DT + ''', '
							        + @OfficeNumber +', ''' + @PROGRAM_CD + ''', ' + @PROVIDER_ID + ', ''' + @REGISTRATION_CD + ''', ''' + @STAFF_ID + ''', ''' + @COMP_ACTION_CD + ''', '''
									+ @COMPONENT_PHASE_CD + ''', ''' + @SUBPROGRAM_CD + ''', ''' + @WDA_CD + ''', ''' + @CMP_RSN_CD + ''', ' + @RFA_NUM + ', ''' + @CMP_DT + ''')'

        PRINT @InsertStmt1

        EXEC (@InsertStmt1) AT NETWINFO_D00S_DB2
	END
END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_NE_Disenrollment_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[SP_DB2_NE_Disenrollment_Update] 1
CREATE PROCEDURE [wwp].[SP_DB2_NE_Disenrollment_Update]
	@Debug BIT = 0
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@SelectStmt1 VARCHAR(MAX),
			@PinNumbers VARCHAR(MAX),
			@PinNumber DECIMAL(10, 0),
			@Count INT = 1,
			@Max INT,
			@PEPId INT,
			@OfficeId INT,
			@EnrolledProgramId INT,
			@HasAnyOtherOpenPrograms INT,
			@DisenrollmentDate DATE,
			@CountyNumber SMALLINT,
			@OfficeNumber SMALLINT,
			@MFWorkerId VARCHAR(06),
			@MFUserId VARCHAR(06),
			@ProgramCode VARCHAR(03),
			@SubProgramCode VARCHAR(01),
			@RegistrationCode Varchar(01),
			@CompletionReasonId INT,
			@CompletionReason Varchar(02),
			@AnyOtherProgramOpen Varchar(01),
			@SchemaName VARCHAR(20),
			@Coenrolled BIT

	---
	SELECT @LSDBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
                            WHEN DB_NAME() = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                            WHEN DB_NAME() = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                            WHEN DB_NAME() = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                       END
	---

	SELECT @DB2DBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS')	   THEN 'PWS639TC'
							 WHEN DB_NAME() = 'WWPACC'  THEN 'PWA639TC'
							 WHEN DB_NAME() = 'WWPTRN'  THEN 'PWE639TC'
							 WHEN DB_NAME() = 'WWP'     THEN 'PWP639TC'
						END
	---

	DECLARE @CoEnroll TABLE
	(
	 PinNumber DECIMAL(10,0),
	 Rn INT
	)

	;WITH CTE AS (SELECT P.PinNumber, Rn = ROW_NUMBER() OVER(PARTITION BY PEP.ParticipantId ORDER BY PEP.ParticipantId)
			  FROM wwp.Participant P
			  INNER JOIN wwp.ParticipantEnrolledProgram PEP
				  ON P.Id = PEP.ParticipantId
			  WHERE PEP.EnrolledProgramStatusCodeId IN (1,2))

	INSERT INTO @CoEnroll (PinNumber, Rn)
	SELECT PinNumber, Rn
	FROM CTE
	WHERE Rn > 1
	
	--SELECT * FROM @CoEnroll

	DECLARE @Disenroll TABLE
	(
	 Id INT IDENTITY(1,1),
	 PinNumber DECIMAL(10,0),
	 PEPId INT,
	 EPId INT,
	 StatusDate DATE,
	 PEPStatus VARCHAR(50),
	 CoEnrolled BIT
	)

	INSERT INTO @Disenroll (PinNumber, PEPId, EPId, StatusDate, PEPStatus, CoEnrolled)
	SELECT DISTINCT P.PinNumber, PEP.Id, PEP.EnrolledProgramId, PEP.ReferralDate, EPS.StatusCode,
		   CASE WHEN C.PinNumber IS NULL THEN 0
				WHEN C.PinNumber IS NOT NULL THEN 1
		   END
	FROM wwp.Participant P
		INNER JOIN wwp.ParticipantEnrolledProgram PEP
			ON P.Id = PEP.ParticipantId
		LEFT JOIN wwp.EnrolledProgramStatusCode EPS
			ON PEP.EnrolledProgramStatusCodeId = EPS.Id
		LEFT JOIN @CoEnroll C
			ON P.PinNumber = C.PinNumber
		WHERE PEP.EnrolledProgramId IN (9,10, 12) AND PEP.EnrolledProgramStatusCodeId = 1
			  AND DATEDIFF(DAY, CAST(PEP.ReferralDate AS DATE), CAST(GETDATE() AS DATE)) >= CASE PEP.EnrolledProgramId WHEN 9 THEN 30
																													   WHEN 10 THEN 120
																													   WHEN 12 THEN 30
																							END

	--SELECT * FROM @Disenroll

	SELECT @Max = COUNT(DISTINCT PEPId)
	FROM @Disenroll
	PRINT @Max
	
	IF @Debug = 0
	BEGIN
		WHILE @Count <= @Max
		BEGIN
			PRINT @Count

			SELECT @Coenrolled = Coenrolled
			FROM @Disenroll
			WHERE Id = @Count

			IF @Coenrolled = 0
			BEGIN
				SELECT @PEPId = PEPId
				FROM @Disenroll
				WHERE Id = @Count
				PRINT @PEPId

				SELECT @PinNumber = PinNumber
				FROM @Disenroll
				WHERE Id = @Count
				PRINT @PinNumber

				SELECT @DisenrollmentDate = CAST(GETDATE() AS DATE)
				PRINT @DisenrollmentDate

				SELECT @ProgramCode = ProgramCode, @SubProgramCode = ' ', @RegistrationCode = 'M', @CountyNumber = CountyNumber, @OfficeNumber = OfficeNumber,
					   @EnrolledProgramId = EnrolledProgramId
				FROM wwp.ParticipantEnrolledProgram PEP
					INNER JOIN wwp.EnrolledProgram EP
						ON PEP.EnrolledProgramId = EP.Id
					INNER JOIN wwp.WWPOffice O
						ON PEP.OfficeId = O.Id
					INNER JOIN wwp.CountyAndTribe CT
						ON O.CountyandTribeId = CT.Id
				WHERE PEP.Id = @PEPId
				PRINT @EnrolledProgramId
				PRINT @ProgramCode
				PRINT @CountyNumber
				PRINT @OfficeNumber
				PRINT @ProgramCode
				PRINT @SubProgramCode
			
				SET @MFWorkerId = 'WWP'
				SET @MFUserId = 'WWP'

				SELECT @CompletionReasonId = CASE @EnrolledProgramId WHEN 9 THEN 29
																	 WHEN 10 THEN 11
																	 WHEN 12 THEN 30
											 END

				SELECT @CompletionReason = Code
										   FROM wwp.CompletionReason
										   WHERE Id = @CompletionReasonId
				PRINT @CompletionReason

				SELECT @HasAnyOtherOpenPrograms = COUNT(*)
												  FROM wwp.ParticipantEnrolledProgram
												  WHERE ParticipantId = (SELECT Id
																		 FROM wwp.Participant
																		 WHERE PinNumber = @PinNumber)
												  AND EnrolledProgramId <> @EnrolledProgramId AND EnrolledProgramStatusCodeId = 2

				SET @AnyOtherProgramOpen = IIF(@HasAnyOtherOpenPrograms > 0, 1, 0)
				PRINT @AnyOtherProgramOpen
				SET @SchemaName = DB_NAME()
				PRINT @SchemaName
				
				EXEC [wwp].[SP_DB2_Disenrollment_Update] 
						@PinNumber,
						@DisenrollmentDate,
						@CountyNumber,
						@OfficeNumber,
						@MFWorkerId,
						@MFUserId,
						@ProgramCode,
						' ',
						'M',
						@CompletionReason,
						@AnyOtherProgramOpen,
						@SchemaName
			
				UPDATE wwp.ParticipantEnrolledProgram
				SET EnrolledProgramStatusCodeId = (SELECT Id
												   FROM wwp.EnrolledProgramStatusCode
												   WHERE StatusCode = 'Disenrolled'),
					DisenrollmentDate = GETDATE(), CompletionReasonId = @CompletionReasonId, ModifiedBy = 'WWP Batch', ModifiedDate = GETDATE()
				WHERE Id = @PEPId
			END

			SET @Count += 1
		END

		SELECT D.PinNumber, D.PEPId, CASE EP.Name WHEN 'Transitional Jobs' THEN 'TJ'
												  WHEN 'Transform Milwaukee Jobs' THEN 'TMJ'
												  WHEN  'Children First' THEN 'CF'
									 END EnrolledProgram, PEP.DisenrollmentDate StatusDate, EPS.StatusCode PEPStatus, D.CoEnrolled
		FROM @Disenroll D
			INNER JOIN wwp.ParticipantEnrolledProgram PEP
				ON D.PEPId = PEP.Id
			LEFT JOIN wwp.EnrolledProgram EP
				ON D.EPId = EP.Id
			LEFT JOIN wwp.EnrolledProgramStatusCode EPS
				ON PEP.EnrolledProgramStatusCodeId = EPS.Id
		ORDER BY D.CoEnrolled DESC
	END
	ELSE
	BEGIN
		SELECT D.PinNumber, D.PEPId, CASE EP.Name WHEN 'Transitional Jobs' THEN 'TJ'
												  WHEN 'Transform Milwaukee Jobs' THEN 'TMJ'
												  WHEN  'Children First' THEN 'CF'
									 END EnrolledProgram, D.StatusDate, D.PEPStatus, D.CoEnrolled
		FROM @Disenroll D
			LEFT JOIN wwp.EnrolledProgram EP
				ON D.EPId = EP.Id
		ORDER BY D.CoEnrolled DESC
	END
END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_PendingReferral_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [wwp].[SP_DB2_PendingReferral_Update]
	@PinNumber163         DECIMAL(10,0),
	@UpdateT0018          VARCHAR(01) ,              
	@SchemaName           VARCHAR(20) 



AS
BEGIN
 
    declare @SelectStmt1 as varchar(max);
	declare @SelectStmt2 as varchar(max);
	declare @SelectStmt3 as varchar(max);
	declare @SelectStmt4 as varchar(max);

--
    declare @InsertStmt1   as varchar(max);
	declare @InsertStmt2   as varchar(max);
	declare @InsertStmt3   as varchar(max);
	declare @InsertStmt4   as varchar(max);
	declare @InsertStmt5   as varchar(max);
--
	declare @UpdtStmnt1	  as varchar(max);
	declare @UpdtStmnt2   as varchar(max);
	declare @UpdtStmnt3   as varchar(max);
	declare @UpdtStmnt4   as varchar(max);
    declare @UpdtStmnt5   as varchar(max);
	declare @UpdtStmnt6   as varchar(max);
    declare @UpdtStmnt7   as varchar(max);
	declare @UpdtStmnt8   as varchar(max);
	declare @UpdtStmnt9   as varchar(max);
	declare @UpdtStmnt10  as varchar(max);
	declare @UpdtStmnt11  as varchar(max);
--
	declare @deleteStmt0  as varchar(max);
	declare @deleteStmt1  as varchar(max);
	declare @deleteStmt2  as varchar(max);
    declare @Result_execute as varchar(01) ;

--
	declare @DB2DBName	  as varchar(100) ;
    declare @LSDBName	  as varchar(100) ;


	--


  SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

 SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END
    -- Insert statements for procedure here
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ DELETE T0163
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ DELETE T0163
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


			 print '@PinNumber163'  ;
			 print @PinNumber163 ;
			 print '@UpdateT0018' ;
			 print @UpdateT0018;

 DECLARE @PIN_NUM_163            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber163) ;  
 
           print '@PIN_NUM_163' ;
		   print @PIN_NUM_163 ;      

  --DECLARE @Temp1 table
		--	 (PendingPinNumber		DECIMAL(10,0) null,
		--	  PendingOfficeNumber	SMALLINT NULL,
		--	  PendingRefferalDate	DATE NULL,
		--	  PendingCaseNumber		DECIMAL(10,0) NULL,
		--	  PendingCountyNumber	SMALLINT NULL,
		--	  PendingProgramCode	VARCHAR(03) NULL,
		--	  PendingSubProgramCode VARCHAR(01) NULL,
		--	  PendingWPGeoArea		VARCHAR(02) NULL)

		--	set @SelectStmt2 =   'select PendingPinNumber,
		--								  PendingOfficeNumber,
		--								  PendingRefferalDate,      
		--								  PendingCaseNumber,
		--								  PendingCountyNumber,
		--								  PendingProgramCode  , 
		--								  PendingSubProgramCode,       
		--								  PendingWPGeoArea    
		--	FROM OPENQUERY('+@LSDBName+', ''SELECT PIN_NUM			as PendingPinNumber ,
		--										   OFFICE_NUM		as PendingOfficeNumber,
		--										   WP_REFERRAL_DT	as PendingRefferalDate,      
		--										   CASE_NUM			as PendingCaseNumber,
		--										   COUNTY_NUM		as PendingCountyNumber,
		--										   PROGRAM_CD		as PendingProgramCode  , 
		--										   SUBPROGRAM_CD	as PendingSubProgramCode,       
		--										   WP_GEO_AREA		as PendingWPGeoArea               
		--	  FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR                      
		--	 WHERE  PIN_NUM  = '+@PIN_NUM_163+'     
		--	   WITH UR;
		--	  '')'


--
--print @SelectStmt2
--

--			insert @Temp1(PendingPinNumber,
--						  PendingOfficeNumber,
--						  PendingRefferalDate,      
--						  PendingCaseNumber,
--						  PendingCountyNumber,
--						  PendingProgramCode  , 
--						  PendingSubProgramCode,       
--						  PendingWPGeoArea    ) 
--			exec (@SelectStmt2)
----
 --PendingRefferalDate,      
	--									  PendingCaseNumber,
	--									  PendingCountyNumber,
	--									  PendingProgramCode  , 
	--									  PendingSubProgramCode,       
	--									  PendingWPGeoArea    ,
	--									  PendingAGSeqNum ,
	--									  PendingReferralRegCode ,
	--									  PendingOVRDWPGeo
 --WP_REFERRAL_DT	as PendingRefferalDate,      
	--											   CASE_NUM			as PendingCaseNumber,
	--											   COUNTY_NUM		as PendingCountyNumber,
	--											   PROGRAM_CD		as PendingProgramCode  , 
	--											   SUBPROGRAM_CD	as PendingSubProgramCode,       
	--											   WP_GEO_AREA		as PendingWPGeoArea ,     
	--											   AG_SEQ_NUM       as PendingAGSeqNum   ,
	--											   REFERRAL_REG_CD  as PendingReferralRegCode ,
	--											   OVRD_WP_GEO_AREA as PendingOVRDWPGeo      


--(PendingPinNumber,
--						  PendingOfficeNumber,
--						  PendingRefferalDate,      
--						  PendingCaseNumber,
--						  PendingCountyNumber,
--						  PendingProgramCode  , 
--						  PendingSubProgramCode,       
--						  PendingWPGeoArea,    
--						  PendingAGSeqNum,
--						  PendingReferralRegCode ,
--					      PendingOVRDWPGeo) 

		--	select * from @Temp1

		--	IF EXISTS(SELECT PendingPinNumber   FROM @Temp1 where PendingPinNumber = @PIN_NUM_163)
		  
		    IF EXISTS(SELECT 1 
			            FROM NETWINFO_D00S_DB2.NETWINFO_D00S.PWS639TC.T0163_WP_PNDNG_RFR                      
			           WHERE  PIN_NUM  = ''+@PIN_NUM_163+''     
			          )
		    
			 BEGIN 
				--	  LAST_CONTACT_DT  = '''+@EFFECTIVE_DT_18+''' ,

				  PRINT 'UPDATE OF T0018'


				  DECLARE @Temp1 table
			 (PendingPinNumber		DECIMAL(10,0) null,
			  PendingOfficeNumber	SMALLINT NULL
		)

				  set @SelectStmt2 =   'select PendingPinNumber,
										  PendingOfficeNumber
										FROM OPENQUERY('+@LSDBName+', ''SELECT PIN_NUM			as PendingPinNumber ,
												   OFFICE_NUM		as PendingOfficeNumber
												            
			  FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR                      
			 WHERE  PIN_NUM  = '+@PIN_NUM_163+'     
			   WITH UR;
			  '')'

			insert @Temp1 (PendingPinNumber , PendingOfficeNumber)
			  Exec (@SelectStmt2)

--
             select *  from @Temp1
--
				 set @deleteStmt2 = ' DELETE      
										 FROM '+@DB2DBName+'.T0163_WP_PNDNG_RFR           
									   WHERE PIN_NUM = '+@PIN_NUM_163+' '

--

				 PRINT @deleteStmt2
--
				 exec (@deleteStmt2) at NETWINFO_D00S_DB2
--
				 PRINT 'DELETE OF T0163'
--

				 IF @UpdateT0018 = 'Y' 
				 	 
					 Begin


				  PRINT 'ALREADY PENDING REFERRAL EXISTS'

	--					 DECLARE @PIN_NUM_D18           VARCHAR(10) =  CONVERT(varchar(10), @PinNumber163) ;        
	--					 DECLARE @OFFICE_NUM_D18        VARCHAR(04) = (SELECT PendingOfficeNumber   FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
	--					 DECLARE @WP_REFERRAL_DT_D18    VARCHAR(10) = (SELECT PendingRefferalDate   FROM @TEMP1 where PendingPinNumber = @PIN_NUM_163) ;
	--				--	 DECLARE @AG_SEQ_NUM_D18        VARCHAR(02) = (SELECT PendingAGSeqNum FROM @Temp1  where PendingPinNumber = @PIN_NUM_163) ;
	--					 DECLARE @DISENROLLMENT_DT_D18  VARCHAR(10) = '9999-12-31' ;
	--					 DECLARE @PROGRAM_CD_D18        VARCHAR(03) = (SELECT PendingProgramCode    FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
	--					 DECLARE @SUBPROGRAM_CD_D18     VARCHAR(01) = (SELECT PendingSubProgramCode FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
	--					 DECLARE @COUNTY_NUM_D18        VARCHAR(04) = (SELECT PendingCountyNumber   FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;				 
	--					 DECLARE @CASE_NUM_D18          VARCHAR(10) = (SELECT PendingCaseNumber     FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
	--		     --        DECLARE @REFERRAL_REG_CD_D18   VARCHAR(01) = (SELECT  PendingReferralRegCode FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
	--			--		 DECLARE @OVRD_WP_GEO_AREA_D18	VARCHAR(04) = (SELECT PendingOVRDWPGeo FROM @Temp1 where PendingPinNumber = @PIN_NUM_163) ;
                         

	--					  set @Updtstmnt3 = ' UPDATE '+@DB2DBName+'.T0018_WP_INDV 
	--											 SET  WP_SYSTEM_STS_CD = ''R'' ,
	--												  WP_REFERRAL_DT   = '''+@WP_REFERRAL_DT_D18+''' ,
	--												  PROGRAM_CD       = '''+@PROGRAM_CD_D18+'''  ,
	--												  SUBPROGRAM_CD    = '''+@SUBPROGRAM_CD_D18+''',
	--												  COUNTY_NUM       = '+@COUNTY_NUM_D18+',
	--												  OFFICE_NUM       = '+@OFFICE_NUM_D18+',
	--												  CASE_NUM         = '+@CASE_NUM_D18+',
	--												  DISENROLLMENT_DT = ''9999-12-31'' 
										
	--											WHERE PIN_NUM = '+@PIN_NUM_D18+'
	--											 ';                    
	--					  PRINT @Updtstmnt3
	----		  AG_SEQ_NUM       = '+@AG_SEQ_NUM_D18+',
	--										--		  REFERRAL_REG_CD  = '''+@REFERRAL_REG_CD_D18+''',
 --                                            --         OVRD_WP_GEO_AREA = '+@OVRD_WP_GEO_AREA_D18+'
	--					  Exec (@Updtstmnt3) at NETWINFO_D00S_DB2


						  set @Result_execute = 'Y'
                End

				PRINT @Result_execute 
				
	END 
			--BEGIN CATCH
			--	DECLARE 
			--	@ErrorMessage    NVARCHAR(4000),
			--	@ErrorNumber     INT,
			--	@ErrorSeverity   INT,
			--	@ErrorState      INT,
			--	@ErrorLine       INT,
			--	@ErrorProcedure  NVARCHAR(200);

			--	-- Assign variables to error-handling functions that 
			--	-- capture information for RAISERROR.
			--	SELECT 
			--		@ErrorNumber = ERROR_NUMBER(),
			--		@ErrorSeverity = ERROR_SEVERITY(),
			--		@ErrorState = ERROR_STATE(),
			--		@ErrorLine = ERROR_LINE(),
			--		@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

			--	-- Build the message string that will contain original
			--	-- error information.
			--	SELECT @ErrorMessage = 
			--		N'Error %d, Level %d, State %d, Procedure %s, Line %d, ' + 
			--			'Message: '+ ERROR_MESSAGE();

			--	 set @Result_execute = 'N'
			--	 PRINT @Result_execute 
			--	-- Raise an error: msg_str parameter of RAISERROR will contain
			--	-- the original error information.
			--	RAISERROR 
			--		(
			--		@ErrorMessage, 
			--		@ErrorSeverity, 
			--		1,               
			--		@ErrorNumber,    -- parameter: original error number.
			--		@ErrorSeverity,  -- parameter: original error severity.
			--		@ErrorState,     -- parameter: original error state.
			--		@ErrorProcedure, -- parameter: original error procedure name.
			--		@ErrorLine       -- parameter: original error line number.
			--		);
				 
			--END CATCH	



     END

--END

GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_PreCheck_POP_Claim]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[SP_DB2_PreCheck_POP_Claim] 'WWPDEV', 0585125350, 1
CREATE PROCEDURE [wwp].[SP_DB2_PreCheck_POP_Claim]
(@SchemaName VARCHAR(20),
 @PinNumber VARCHAR(10),
 @EmploymentSequenceNumber VARCHAR(4)
)
AS
BEGIN
	SET FMTONLY OFF
---
    DECLARE @SelectStmt1 VARCHAR(MAX)
	DECLARE @SelectStmt2 VARCHAR(MAX)
	DECLARE @DB2DBName VARCHAR(100)
    DECLARE @LSDBName VARCHAR(100)
	DECLARE @Id INT

	DECLARE @ClaimInformation TABLE 
	(
	 ClaimNumberCount INT NOT NULL
	)

	DECLARE @PopClaim TABLE
	(
	 PopClaim BIT
	)
---

    SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

   SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END

---

	SET @SelectStmt1 = 'SELECT *
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT count(A.CLM_NUM) as ClaimNumberCount
															FROM ' + @DB2DBName + '.T2241_PO_CLM A,
																 ' + @DB2DBName + '.T2243_PO_CLM_EMPL B
															WHERE A.PIN_NUM = ' + @PinNumber + '
															AND B.EMPL_SEQ_NUM  = ' + @EmploymentSequenceNumber + '
															AND A.HISTORY_CD =  0
															AND A.CLM_NUM =  B.CLM_NUM
															AND A.STAT_CD NOT IN (''''CD'''',''''IU'''',''''SU'''',''''NC'''',''''NT'''',''''DJ'''' ,''''W1'''',''''W2'''',''''W3'''',
																				  ''''W4'''',''''W5'''',''''W6'''',''''WS'''')
															WITH UR'')'

	PRINT @SelectStmt1
	INSERT @ClaimInformation (ClaimNumberCount)
	EXEC (@SelectStmt1)

	DECLARE @ClaimNumberCount INT = (SELECT ClaimNumberCount FROM @ClaimInformation)

	IF (@ClaimNumberCount >= 1) 
	BEGIN
		INSERT INTO @PopClaim VALUES (1)
	END
	ELSE  
	BEGIN
		INSERT INTO @PopClaim VALUES (0)
	END

	SELECT *
	FROM @PopClaim

END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_ReassignLFCaseManager]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 08/21/2018
-- Description:	Update the Case Manager in T0018 when reassigning LF Worker in WWP
-- =============================================

/* Sample Execute
EXEC [wwp].[SP_DB2_ReassignLFCaseManager] '8009237671', 'XCTF5O', 'WWPDEV'
*/

CREATE PROCEDURE [wwp].[SP_DB2_ReassignLFCaseManager]
(
@PinNumber DECIMAL(10,0),
@MFUserId VARCHAR(10),
@SchemaName VARCHAR(10)
)
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@ParticipantId INT,
			@OpenPrograms INT,
			@EnrolledProgramId INT = 0,
			@Statement1 VARCHAR(MAX),
			@PIN_NUM VARCHAR(10) = CONVERT(VARCHAR(10), @PinNumber)

---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN N'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN N'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP' THEN N'NETWINFO_D40P_DB2'
						END
---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'PWS639TC'
                             WHEN @SchemaName = 'WWPACC' THEN N'PWA639TC'
                             WHEN @SchemaName = 'WWPTRN' THEN N'PWE639TC'
                             WHEN @SchemaName = 'WWP' THEN N'PWP639TC'
                        END
---

	SELECT @ParticipantId = Id
	FROM wwp.Participant
	WHERE PinNumber = @PinNumber

	PRINT @ParticipantId

	SELECT @OpenPrograms = COUNT(*)
	FROM wwp.ParticipantEnrolledProgram
	WHERE ParticipantId = @ParticipantId AND DisenrollmentDate IS NULL

	PRINT @OpenPrograms
---

	IF @OpenPrograms = 1
	BEGIN
		SELECT @EnrolledProgramId = EnrolledProgramId
		FROM wwp.ParticipantEnrolledProgram
		WHERE ParticipantId = @ParticipantId AND DisenrollmentDate IS NULL

		PRINT @EnrolledProgramId

		IF @EnrolledProgramId IN (9,10,12,13)
		BEGIN
			SET @Statement1 = 'UPDATE ' + @DB2DBName + '.T0018_WP_INDV
							   SET CASE_MANAGER_ID = ''' + @MFUserId + '''
							   WHERE PIN_NUM = ' + @PIN_NUM + ''
		
			PRINT @Statement1
			EXEC (@Statement1) AT NETWINFO_D00S_DB2
		END
	END
END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_ReassignW2CaseManager]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Palani
-- Create date: 05/02/2019
-- Description:	Update the Case Manager in T0018 when reassigning LF Worker in WWP
-- =============================================

/* Sample Execute
EXEC [wwp].[SP_DB2_ReassignLFCaseManager] '8009237671', 'XCTF5O', 'WWPDEV'
*/

CREATE PROCEDURE [wwp].[SP_DB2_ReassignW2CaseManager]
(
@PinNumber DECIMAL(10,0),
@FEPid VARCHAR(10),
@SchemaName VARCHAR(10)
)
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@ParticipantId INT,
			@OpenPrograms INT,
			@EnrolledProgramId INT = 0,
			@Statement1 VARCHAR(MAX),
			@PIN_NUM VARCHAR(10) = CONVERT(VARCHAR(10), @PinNumber)

---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN N'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN N'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP' THEN N'NETWINFO_D40P_DB2'
						END
---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'PWS639TC'
                             WHEN @SchemaName = 'WWPACC' THEN N'PWA639TC'
                             WHEN @SchemaName = 'WWPTRN' THEN N'PWE639TC'
                             WHEN @SchemaName = 'WWP' THEN N'PWP639TC'
                        END
---

	
			SET @Statement1 = 'UPDATE ' + @DB2DBName + '.T0018_WP_INDV
							   SET CASE_MANAGER_ID = ''' + @FEPid + '''
							   WHERE PIN_NUM = ' + @PIN_NUM + ''
		
			PRINT @Statement1
			EXEC (@Statement1) AT NETWINFO_D00S_DB2

END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_Referral_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-10-08 | GH#3381           | CDO CHANGES FOR TRANSACTION DT IN TABLE T0121                                                     |==
-- ========================================================================================================================================
-- | 2019-12-03 | GH#3445           | CF REMAINS OPEN ON T0018 AFTER DISERNOLLMENT FROM WWP.                                            |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================

CREATE PROCEDURE [wwp].[SP_DB2_Referral_Update]
@PinNumber DECIMAL(10,0),
@RFANumber     DECIMAL(10,0),            
@EffectiveDate DATE ,    
@CountyNumber SMALLINT ,
@OfficeNumber SMALLINT ,
@CourtOrderedCounty SMALLINT ,
@CourtOrderedDate DATE,
@MFWorkerId   VARCHAR(06) ,
@ProgramCode  VARCHAR(03) ,
@SubProgramCode VARCHAR(01) ,
@ReferralRegCode VARCHAR(1),
@SchemaName VARCHAR(20),
@AppDate Date

AS
BEGIN

	SET NOCOUNT ON;
	declare @CurrentDate  as varchar(10) ;
--
    declare @SelectStmt1 as varchar(max);
	declare @SelectStmt2 as varchar(max);
	declare @SelectStmt3 as varchar(max);
	declare @SelectStmt4 as varchar(max);

--
    declare @InsertStmt1   as varchar(max);
	declare @InsertStmt2   as varchar(max);
	declare @InsertStmt3   as varchar(max);
	declare @InsertStmt4   as varchar(max);
--
	declare @UpdtStmnt1	  as varchar(max);
	declare @UpdtStmnt2   as varchar(max);
	declare @UpdtStmnt3   as varchar(max);
	declare @UpdtStmnt4   as varchar(max);
    declare @UpdtStmnt5   as varchar(max);
	declare @UpdtStmnt6   as varchar(max);
    declare @UpdtStmnt7   as varchar(max);
	declare @UpdtStmnt8   as varchar(max);
	declare @UpdtStmnt9   as varchar(max);
	declare @UpdtStmnt10  as varchar(max);
	declare @UpdtStmnt11  as varchar(max);
--
	declare @deleteStmt0  as varchar(max);
	declare @deleteStmt1  as varchar(max);
	declare @deleteStmt2  as varchar(max);
	declare @deleteStmt3  as varchar(max);
	declare @deleteStmt4  as varchar(max);
--
	declare @DB2DBName	  as varchar(100) ;
    declare @LSDBName	  as varchar(100) ;

--
	set @CurrentDate = CAST(GETDATE() AS DATE);

---
  SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

 SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END



	

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ READ T0121 TO GET THE TRANSACTION NUMBER
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 Declare @Temp1 table
 (MAXTRANSACTION SMALLINT null)

Declare @PIN_NUM_S VARCHAR(10)	= CONVERT(varchar(10), @PinNumber) ;
--GH#3381 -- DECLARE @TRANSACTION_DT_S VARCHAR(10) = @EffectiveDate ;
DECLARE @TRANSACTION_DT_S VARCHAR(10) = @CurrentDate ;

set @SelectStmt1 = 'Select MAXTRANSACTION
				   	  FROM OPENQUERY('+@LSDBName+', 
					  ''SELECT MAX(TRANSACTION_NUM)  AS MAXTRANSACTION                               
					      FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                      
					   	WHERE  PIN_NUM  = '+@PIN_NUM_S+ '           
						AND   TRANSACTION_DT = '''''+@TRANSACTION_DT_S+'''''
						AND   TRANSACTION_CD = ''''25''''
						'')'
Insert @Temp1(MAXTRANSACTION) 
exec (@SelectStmt1)


If exists (select 1 from @Temp1 where MAXTRANSACTION >= 1 )
Begin

Update @Temp1
Set MAXTRANSACTION = MAXTRANSACTION + 1

END

ELSE
 BEGIN
 Update @Temp1
  set MAXTRANSACTION = 1

 END



--SELECT * FROM @Temp1

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ INSERT INTO TRANSACTION TABLE
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @PIN_NUM            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
--GH#3381 --DECLARE @TRANSACTION_DT     VARCHAR(10) = @EffectiveDate  ;   
DECLARE @TRANSACTION_DT     VARCHAR(10) = @CurrentDate  ;     
DECLARE @TRANSACTION_CD     VARCHAR(04) = 025 ;    
DECLARE @TRANSACTION_NUM    VARCHAR(04) = (SELECT MAXTRANSACTION FROM @Temp1)  ;   
DECLARE @COUNTY_NUM         VARCHAR(04) = CONVERT(varchar(4), @CountyNumber) ;  
DECLARE @EFFECTIVE_DT       VARCHAR(10) = @EffectiveDate     ;    
DECLARE @OFFICE_NUM         VARCHAR(04) = CONVERT(varchar(4), @OfficeNumber ) ;  
DECLARE @PROGRAM_CD         VARCHAR(3)  = CONVERT(VARCHAR(3), @ProgramCode ) ;
DECLARE @PROVIDER_ID        VARCHAR(04) = 0000  ;  --REVISIT
DECLARE @REGISTRATION_CD    VARCHAR(1)  = '1'  ;  
DECLARE @STAFF_ID           VARCHAR(6)  = @MFWorkerId ;  
DECLARE @COMP_ACTION_CD     VARCHAR(1)  = ' '  ;  
DECLARE @COMPONENT_PHASE_CD VARCHAR(1)  = ' ';  
DECLARE @SUBPROGRAM_CD      VARCHAR(1) =  ISNULL(@SubProgramCode, ' ')  ;
DECLARE @TRANSACTION_TS     VARCHAR(26) ;  
DECLARE @WDA_CD             VARCHAR(04)= 0 ;
DECLARE @CMP_RSN_CD         VARCHAR(2)  = ' ' ;   
DECLARE @RFA_NUM            VARCHAR(10) =  CONVERT(varchar(10), @RFANumber) ; ;     
DECLARE @CMP_DT             VARCHAR(10) =     '9999-12-31'    ;     






---------------------------------------------------------------------------------------------------------------------------------------------

set @InsertStmt1 = ' INSERT INTO ' + @DB2DBName + '.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
                                                               EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
															   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
															   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
                         VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
						         '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
							     '''+@STAFF_ID+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
								 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



 PRINT @InsertStmt1

 exec (@InsertStmt1) at NETWINFO_D00S_DB2

 print '1'

 ------------------------------------------------------------------------------------------------------------------------------------------------
Declare @Temp2 table
 (PinNumber decimal(10,0) null ,
  SystemStatus Varchar(1) null)

----------------

  DECLARE @PIN_NUM_18				VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
  DECLARE @ABAWD_SW_18              VARCHAR(1)  =  'N';
  DECLARE @AG_SEQ_NUM_18			VARCHAR(4)  =  0;
  DECLARE @AUDIT_IND_18				VARCHAR(1)  = 'N';
  DECLARE @CASE_MANAGER_ID_18		VARCHAR(06) =  @MFWorkerId;
  DECLARE @CASE_NUM_18				VARCHAR(10) =  0;
  DECLARE @CF_CMP_DT_18				VARCHAR(10) = '9999-12-31'    ;     
  DECLARE @CF_CMP_RSN_CD_18			VARCHAR(02) = ' ';
  DECLARE @CF_RFA_DT_18				VARCHAR(10) = '9999-12-31'    ;     
  DECLARE @CF_RFA_NUM_18			VARCHAR(10) = 0;
  DECLARE @CF_STS_CD_18				VARCHAR(1)  = ' ';
  DECLARE @COUNTY_NUM_18			VARCHAR(4)  = 0;
  DECLARE @COURT_ORD_CTY_NUM_18		VARCHAR(4)  = 0;
  DECLARE @COURT_ORD_EFF_DT_18		VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @CURRENT_REG_CD_18		VARCHAR(1)  = ' ';
  DECLARE @DISENROLLMENT_CD_18		VARCHAR(4)  = 0;
  DECLARE @DISENROLLMENT_DT_18		VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @LAST_CONTACT_DT_18		VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @LAST_DISENROLL_DT_18		VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @OFFICE_NUM_18			VARCHAR(4)  = 0;
  DECLARE @PROGRAM_CD_18			VARCHAR(3)  = ' ';
  DECLARE @REFERRAL_REG_CD_18		VARCHAR(1)  = @ReferralRegCode;
  DECLARE @SUBPROGRAM_CD_18			VARCHAR(1)  = ' ';
  DECLARE @WP_REFERRAL_DT_18		VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @WP_SYSTEM_STS_CD_18		VARCHAR(1)  = ' ';
  DECLARE @TJ_CMP_DT_18				VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @TJ_CMP_RSN_CD_18			VARCHAR(2)  = ' ' ;
  DECLARE @TJ_RFA_DT_18				VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @TJ_RFA_NUM_18			VARCHAR(10) = 0;
  DECLARE @TJ_STS_CD_18				VARCHAR(1)  =' ';
  DECLARE @WP_GEO_AREA_18			VARCHAR(4)  = 0;
  DECLARE @TMJ_CPLT_DT_18			VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @TMJ_CPLT_RSN_CD_18		VARCHAR(2)  = ' ';
  DECLARE @TMJ_RFA_DT_18			VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @TMJ_RFA_NUM_18			VARCHAR(10) = 0;;
  DECLARE @TMJ_STAT_CD_18			VARCHAR(1)  = ' '
  DECLARE @MILITARY_BEG_DT_18			VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @MILITARY_END_DT_18 	  	    VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @REFUGEE_ENTRY_DT_18			VARCHAR(10) = '9999-12-31'    ;    
  DECLARE @WP_CONVERSION_DT_18	  	    VARCHAR(10) = '9999-12-31'    ; 
  DECLARE @HIGH_DT	VARCHAR(10) = '9999-12-31' ; 

set @SelectStmt1 = 'Select PinNumber, SystemStatus
				   	  FROM OPENQUERY('+@LSDBName+', 
					  ''SELECT PIN_NUM AS PinNumber , WP_SYSTEM_STS_CD AS SystemStatus                             
					     FROM  '+@DB2DBName+'.T0018_WP_INDV     
					   	WHERE  PIN_NUM  = '+@PIN_NUM_18+ '           
						'')'
Insert @Temp2(PinNumber,SystemStatus) 
exec (@SelectStmt1)


If not exists (select 1 from @Temp2 where PinNumber >= 0 )
Begin

 

set @InsertStmt2 = ' INSERT INTO ' + @DB2DBName + '.T0018_WP_INDV (PIN_NUM, ABAWD_SW, AG_SEQ_NUM, AUDIT_IND, CASE_MANAGER_ID,
																   CASE_NUM, CF_CMP_DT, CF_CMP_RSN_CD, CF_RFA_DT, CF_RFA_NUM, CF_STS_CD,
																   COUNTY_NUM, COURT_ORD_CTY_NUM, COURT_ORD_EFF_DT, CURRENT_REG_CD, DISENROLLMENT_CD, DISENROLLMENT_DT, 
																   LAST_CONTACT_DT, LAST_DISENROLL_DT, OFFICE_NUM, PROGRAM_CD, REFERRAL_REG_CD,  SUBPROGRAM_CD,
																   WP_REFERRAL_DT, WP_SYSTEM_STS_CD, TJ_CMP_DT, TJ_CMP_RSN_CD, TJ_RFA_DT, TJ_RFA_NUM, TJ_STS_CD,
																   WP_GEO_AREA, TMJ_CPLT_DT, TMJ_CPLT_RSN_CD, TMJ_RFA_DT, TMJ_RFA_NUM, TMJ_STAT_CD,
																   MILITARY_BEG_DT,MILITARY_END_DT, REFUGEE_ENTRY_DT,WP_CONVERSION_DT) 
															VALUES ( '+@PIN_NUM_18+', '''+@ABAWD_SW_18+''', '+@AG_SEQ_NUM_18+', '''+@AUDIT_IND_18+''', '''+@CASE_MANAGER_ID_18+''',
																'+@CASE_NUM_18+', '''+@CF_CMP_DT_18+''', '''+@CF_CMP_RSN_CD_18+''', '''+@CF_RFA_DT_18+''', '+@CF_RFA_NUM_18+', '''+@CF_STS_CD_18+''',
																'+@COUNTY_NUM_18+', '+@COURT_ORD_CTY_NUM_18+', '''+@COURT_ORD_EFF_DT_18+''','''+@CURRENT_REG_CD_18+''', '''+@DISENROLLMENT_CD_18+''', '''+@DISENROLLMENT_DT_18+''', 
																'''+@LAST_CONTACT_DT_18+''', '''+@LAST_DISENROLL_DT_18+''', '+@OFFICE_NUM_18+', '''+@PROGRAM_CD_18+''', '''+@REFERRAL_REG_CD_18+''',  '''+@SUBPROGRAM_CD_18+''',
																'''+@WP_REFERRAL_DT_18+''', '''+@WP_SYSTEM_STS_CD_18+''', '''+@TJ_CMP_DT_18+''','''+@TJ_CMP_RSN_CD_18+''','''+@TJ_RFA_DT_18+''', '+@TJ_RFA_NUM_18+', '''+@TJ_STS_CD_18+''',
																'+@WP_GEO_AREA_18+', '''+@TMJ_CPLT_DT_18+''', '''+@TMJ_CPLT_RSN_CD_18+''', '''+@TMJ_RFA_DT_18+''', '+@TMJ_RFA_NUM_18+', '''+@TMJ_STAT_CD_18+''',
																'''+@MILITARY_BEG_DT_18+''', '''+@MILITARY_END_DT_18+'''  ,'''+@REFUGEE_ENTRY_DT_18+''' , '''+@WP_CONVERSION_DT_18+''')
  
  '

PRINT @InsertStmt2

 exec (@InsertStmt2) at NETWINFO_D00S_DB2
 



    
 DECLARE @COUNTY_NUM_U18			VARCHAR(4)  = CONVERT(varchar(4), @CountyNumber) ;
 DECLARE @OFFICE_NUM_U18			VARCHAR(4)  = CONVERT(varchar(4), @OfficeNumber) ;
 DECLARE @COURT_ORD_CTY_NUM_U18	    VARCHAR(4)  = CONVERT(varchar(4), @CourtOrderedCounty) ;
 DECLARE @COURT_ORD_EFF_DT_U18          VARCHAR(10) = @CourtOrderedDate
 DECLARE @EFFECTIVE_DT_U18          VARCHAR(10) = @EffectiveDate
 DECLARE @RFANumber_U18             VARCHAR(10) =  CONVERT(varchar(10), @RfaNumber) ;        



IF @ProgramCode = 'CF ' 
 BEGIN
  set @UpdtStmnt1 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET
                              CASE_MANAGER_ID   = '''+@MFWorkerId+'''       ,
							  COUNTY_NUM        =  '+@COUNTY_NUM_U18+'      ,
						      WP_SYSTEM_STS_CD  = ''R''                     ,
							  OFFICE_NUM        =  '+@OFFICE_NUM_U18+'      ,  
		                      WP_REFERRAL_DT    = '''+@EFFECTIVE_DT_U18+''' ,
							  CF_RFA_NUM        = '+@RFANumber_U18+'        ,
							  CF_STS_CD         = ''O''                     ,    
							  CF_RFA_DT         = '''+@EFFECTIVE_DT_U18+'''  ,
							  COURT_ORD_CTY_NUM = '+@COURT_ORD_CTY_NUM_U18+'       ,
							  COURT_ORD_EFF_DT  = '''+@COURT_ORD_EFF_DT_U18+'''  ,
							   CF_CMP_RSN_CD     =  '''+@CF_CMP_RSN_CD_18+'''	,			 
                              CF_CMP_DT          =  '''+@CF_CMP_DT_18+'''	   
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt1                                        
  exec (@UpdtStmnt1) at NETWINFO_D00S_DB2

END



IF @ProgramCode = 'TMJ' 
 BEGIN
  set @UpdtStmnt2 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  CASE_MANAGER_ID   = '''+@MFWorkerId+'''       ,
							  COUNTY_NUM        =  '+@COUNTY_NUM_U18+'      ,
						      WP_SYSTEM_STS_CD  = ''R''                     ,
							  OFFICE_NUM        =  '+@OFFICE_NUM_U18+'      ,  
		                      WP_REFERRAL_DT    = '''+@EFFECTIVE_DT_U18+''' ,
							  TMJ_RFA_NUM      = '+@RFANumber_U18+'         ,
							  TMJ_STAT_CD  = ''O''                           ,
							  TMJ_RFA_DT         = '''+@EFFECTIVE_DT_U18+'''  
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt2                                        
  exec (@UpdtStmnt2) at NETWINFO_D00S_DB2

END

IF @ProgramCode = 'TJ ' 
 BEGIN
  set @UpdtStmnt3 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  CASE_MANAGER_ID   = '''+@MFWorkerId+'''       ,
							  COUNTY_NUM        =  '+@COUNTY_NUM_U18+'      ,
						      WP_SYSTEM_STS_CD  = ''R''                     ,
							  OFFICE_NUM        =  '+@OFFICE_NUM_U18+'      ,  
		                      WP_REFERRAL_DT    = '''+@EFFECTIVE_DT_U18+''' ,
							  TMJ_RFA_NUM        = '+@RFANumber_U18+'        ,
							  TMJ_STAT_CD         = ''O''                     ,   
							  TMJ_RFA_DT         =  '''+@EFFECTIVE_DT_U18+''' 
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt3                                        
  exec (@UpdtStmnt3) at NETWINFO_D00S_DB2

END




End

ELSE

BEGIN
print 'done with stmt2'


    DECLARE @COUNTY_NUM_M18			VARCHAR(4)  = CONVERT(varchar(4), @CountyNumber) ;
 DECLARE @OFFICE_NUM_M18			VARCHAR(4)  = CONVERT(varchar(4), @OfficeNumber) ;
 DECLARE @COURT_ORD_CTY_NUM_M18	    VARCHAR(4)  = CONVERT(varchar(4), @CourtOrderedCounty) ;
 DECLARE @COURT_ORD_EFF_DT_M18          VARCHAR(10) = @CourtOrderedDate
 DECLARE @EFFECTIVE_DT_M18          VARCHAR(10) = @EffectiveDate
 DECLARE @RFANumber_M18             VARCHAR(10) =  CONVERT(varchar(10), @RfaNumber) ;     

   IF exists (select 1 from @Temp2 where PinNumber >= 0 AND SystemStatus = 'C' )


     BEGIN
	    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- UPDATE T0018 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   
     
     

IF @ProgramCode = 'CF ' 
 BEGIN
  set @UpdtStmnt1 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET
							  CASE_MANAGER_ID   = '''+@MFWorkerId+'''           ,
							  COUNTY_NUM        =  '+@COUNTY_NUM_M18+'          ,
						      WP_SYSTEM_STS_CD  = ''R''                         ,
							  PROGRAM_CD        = '' ''                         ,
							  SUBPROGRAM_CD     = '' ''                         ,
							  OFFICE_NUM        =  '+@OFFICE_NUM_M18+'          ,  
		                      WP_REFERRAL_DT    = '''+@EFFECTIVE_DT_M18+'''     ,
							  CF_RFA_NUM        = '+@RFANumber_M18+'            ,
							  CF_STS_CD         = ''O''                         ,    
							  CF_RFA_DT         = '''+@EFFECTIVE_DT_M18+'''     ,
							  COURT_ORD_CTY_NUM = '+@COURT_ORD_CTY_NUM_M18+'    ,
							  COURT_ORD_EFF_DT  = '''+@COURT_ORD_EFF_DT_M18+''' ,
						  	  CF_CMP_RSN_CD     =  '''+@CF_CMP_RSN_CD_18+'''	,			 
                              CF_CMP_DT         =  '''+@CF_CMP_DT_18+'''		, 	
							  TMJ_RFA_NUM       =   0                           ,
							  TMJ_STAT_CD       =  '' ''                        ,
							  TMJ_RFA_DT        =  '''+@HIGH_DT+'''             ,
							  TMJ_CPLT_DT       =  '''+@HIGH_DT+'''             ,
                              TMJ_CPLT_RSN_CD   =  '' ''					    ,
							  LAST_DISENROLL_DT =  '''+@HIGH_DT+'''             , 
							  DISENROLLMENT_DT  = '''+@HIGH_DT+'''              ,
							  DISENROLLMENT_CD  = 0
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt1                                        
  exec (@UpdtStmnt1) at NETWINFO_D00S_DB2

END



IF @ProgramCode = 'TMJ' 
 BEGIN
  set @UpdtStmnt2 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  
							  CASE_MANAGER_ID   = '''+@MFWorkerId+'''         ,
							  COUNTY_NUM        =  '+@COUNTY_NUM_M18+'        ,
						      WP_SYSTEM_STS_CD  = ''R''                       ,
							  PROGRAM_CD        = '' ''                       ,
							  SUBPROGRAM_CD     = '' ''                       ,
							  OFFICE_NUM        =  '+@OFFICE_NUM_M18+'        ,  
		                      WP_REFERRAL_DT    = '''+@EFFECTIVE_DT_M18+'''   ,
							  TMJ_RFA_NUM       = '+@RFANumber_M18+'          ,
							  TMJ_STAT_CD       = ''O''                       ,
							  TMJ_RFA_DT        = '''+@EFFECTIVE_DT_M18+'''   ,
							  TMJ_CPLT_DT       =  '''+@TMJ_CPLT_DT_18+'''    ,
                              TMJ_CPLT_RSN_CD   = '''+@TMJ_CPLT_RSN_CD_18+''' ,
							    CF_RFA_NUM        = 0                         ,
							  CF_STS_CD         = '' ''                       ,    
							  CF_RFA_DT         = '''+@HIGH_DT+'''            ,
							  COURT_ORD_CTY_NUM = 0                           ,
							  COURT_ORD_EFF_DT  = '''+@HIGH_DT+'''            ,
						  	  CF_CMP_RSN_CD     =  '' ''	                      ,			 
                              CF_CMP_DT         =  '''+@HIGH_DT+'''	          ,
							  LAST_DISENROLL_DT =  '''+@HIGH_DT+'''           , 
							  DISENROLLMENT_DT  = '''+@HIGH_DT+'''            ,
							  DISENROLLMENT_CD  = 0	  	
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt2                                        
  exec (@UpdtStmnt2) at NETWINFO_D00S_DB2

END

IF @ProgramCode = 'TJ ' 
 BEGIN
  set @UpdtStmnt3 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  
							 CASE_MANAGER_ID    = '''+@MFWorkerId+'''         ,
							  COUNTY_NUM        =  '+@COUNTY_NUM_M18+'        ,
						      WP_SYSTEM_STS_CD  = ''R''                       ,
							  PROGRAM_CD        = '' ''                       ,
							  SUBPROGRAM_CD     = '' ''                       , 
							  OFFICE_NUM        =  '+@OFFICE_NUM_M18+'        ,  
		                      WP_REFERRAL_DT    = '''+@EFFECTIVE_DT_M18+'''   ,
							  TMJ_RFA_NUM       = '+@RFANumber_M18+'          ,
							  TMJ_STAT_CD       = ''O''                       ,   
							  TMJ_RFA_DT        =  '''+@EFFECTIVE_DT_M18+'''  ,
							  TMJ_CPLT_DT       =  '''+@TMJ_CPLT_DT_18+'''    ,
                              TMJ_CPLT_RSN_CD   = '''+@TMJ_CPLT_RSN_CD_18+''' ,
							     CF_RFA_NUM     = 0                           ,
							  CF_STS_CD         = '' ''                       ,    
							  CF_RFA_DT         = '''+@HIGH_DT+'''            ,
							  COURT_ORD_CTY_NUM = 0                           ,
							  COURT_ORD_EFF_DT  = '''+@HIGH_DT+'''            ,
						  	  CF_CMP_RSN_CD     = '' ''	                      ,			 
                              CF_CMP_DT         =  '''+@HIGH_DT+'''		      ,
							  LAST_DISENROLL_DT =  '''+@HIGH_DT+'''           , 
							  DISENROLLMENT_DT  = '''+@HIGH_DT+'''            ,
							  DISENROLLMENT_CD  = 0
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt3                                        
  exec (@UpdtStmnt3) at NETWINFO_D00S_DB2

END

END

ELSE
 BEGIN


IF @ProgramCode = 'CF ' 
 BEGIN
  set @UpdtStmnt1 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET
							  CF_RFA_NUM        = '+@RFANumber_M18+'            ,
							  CF_STS_CD         = ''O''                         ,    
							  CF_RFA_DT         = '''+@EFFECTIVE_DT_M18+'''     ,
							  COURT_ORD_CTY_NUM = '+@COURT_ORD_CTY_NUM_M18+'    ,
							  COURT_ORD_EFF_DT  = '''+@COURT_ORD_EFF_DT_M18+''' ,
							  TMJ_CPLT_DT       =  '''+@TMJ_CPLT_DT_18+'''      ,
                              TMJ_CPLT_RSN_CD   = '''+@TMJ_CPLT_RSN_CD_18+'''   ,
							   CF_CMP_RSN_CD    =  '''+@CF_CMP_RSN_CD_18+'''	, 			 
                              CF_CMP_DT         =  '''+@CF_CMP_DT_18+'''	
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt1                                        
  exec (@UpdtStmnt1) at NETWINFO_D00S_DB2

END



IF @ProgramCode = 'TMJ' 
 BEGIN
  set @UpdtStmnt2 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  
							  TMJ_RFA_NUM      = '+@RFANumber_M18+'            ,
							  TMJ_STAT_CD  = ''O''                             ,
							  TMJ_RFA_DT         = '''+@EFFECTIVE_DT_M18+'''   ,
							  TMJ_CPLT_DT       =  '''+@TMJ_CPLT_DT_18+'''     ,
                              TMJ_CPLT_RSN_CD   = '''+@TMJ_CPLT_RSN_CD_18+'''
			
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt2                                        
  exec (@UpdtStmnt2) at NETWINFO_D00S_DB2

END

IF @ProgramCode = 'TJ ' 
 BEGIN
  set @UpdtStmnt3 = ' UPDATE ' + @DB2DBName + '.T0018_WP_INDV 
                         SET  
							  TMJ_RFA_NUM        = '+@RFANumber_M18+'         ,
							  TMJ_STAT_CD         = ''O''                     ,   
							  TMJ_RFA_DT         =  '''+@EFFECTIVE_DT_M18+''' ,
							  TMJ_CPLT_DT       =  '''+@TMJ_CPLT_DT_18+'''    ,
                              TMJ_CPLT_RSN_CD   = '''+@TMJ_CPLT_RSN_CD_18+'''
                        WHERE PIN_NUM = '+@PIN_NUM_18+'
                         ';                    
                       
 
 PRINT @UpdtStmnt3                                        
  exec (@UpdtStmnt3) at NETWINFO_D00S_DB2

END

END
 
 END
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- UPDATE T0018 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- INSERT T2381_WP_NELG_DET
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 



 DECLARE @RFANumber_M2381            VARCHAR(10) =  CONVERT(varchar(10), @RfaNumber) ;        
 DECLARE @HISTORY_SEQ_NUM_M2381      VARCHAR(04) = '1' ;
 DECLARE @HISTORY_CD_M2381      VARCHAR(04) = '0' ;
 DECLARE @APPDate_M2381        VARCHAR(10) = @AppDate ;
 DECLARE @PinNumber_M2381         VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;       
 DECLARE @ProgramCode_M2381      Varchar(02) ;
 
 PRINT  @RFANumber_M2381 

 

SELECT @ProgramCode_M2381 = CASE WHEN @ProgramCode = 'TMJ'  THEN  'TM'
                                 WHEN @ProgramCode = 'TJ'  THEN  'TM'
                       END 
 

IF @ProgramCode_M2381 = ('TM') and @RfaNumber <> 0
BEGIN
 
  DECLARE @ContractNumber VARCHAR(02) = ( SELECT CASE A.EntsecAgencyCode WHEN 'CMA' THEN '03'
                                WHEN 'EM'  THEN '02'
								WHEN 'CEP' THEN '04'
								WHEN 'UMS' THEN '01'
								WHEN 'RC' THEN '07'
								END AS ContractNumber
   FROM 
	WWP.Organization A,
	WWP.CONTRACTAREA B,
	WWP.WWPOffice C,
	WWP.RequestForAssistance D
	WHERE D.RfaNumber = @RFANumber_M2381
	AND C.ID = D.OfficeId
	AND B.ID = C.ContractAreaId
	AND A.ID = B.OrganizationId)

	PRINT 'CONTRACT NUMBER'
	PRINT @CONTRACTNUMBER

 IF @ContractNumber <> ' ' AND @ContractNumber IS NOT NULL
 BEGIN
   set @InsertStmt3 = ' INSERT INTO ' + @DB2DBName + '.T2381_WP_NELG_DET  (RFA_NUM, APP_DT, PGM_CD, HISTORY_SEQ_NUM , CTRC_NUM, HISTORY_CD, PIN_NUM)                               
															VALUES ( '+@RFANumber_M2381+','''+@APPDate_M2381+''', '''+@ProgramCode_M2381+''', '+@HISTORY_SEQ_NUM_M2381+', '''+@ContractNumber+''', '+@HISTORY_CD_M2381+','+@PinNumber_M2381+') '
   PRINT @InsertStmt3

   exec (@InsertStmt3) at NETWINFO_D00S_DB2
 END

 END


END


GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_RFAs]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 05/11/2018
-- Description:	Get all the RFAs for a Participant in DB2
-- =============================================

/* Sample Execute
EXEC [wwp].[SP_DB2_RFAs] 2007745721, 'WWPSYS'
*/

CREATE PROCEDURE [wwp].[SP_DB2_RFAs]
(
@PinNumber DECIMAL(10,0),
@SchemaName VARCHAR(20)
)
AS
BEGIN
SET FMTONLY OFF
BEGIN TRY
	DECLARE @SQL VARCHAR(MAX)
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @Temp TABLE
	(
	PinNumber DECIMAL(10,0),
	RfaNumber DECIMAL(10,0),
	ProgramName VARCHAR(100),
	CountyNumber SMALLINT,
	ApplicationDate DATE,
	Program_End_Dt DATE,
	RfaStatus VARCHAR(25),
	CourtOrderDate DATE
	)
	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP' THEN 'PWP639TC'
						END
	---
	SET @SQL = '
	SELECT PinNumber, RfaNumber, ProgramName, CountyNumber, ApplicationDate, Program_End_Dt, RfaStatus,
	CASE WHEN CourtOrderDate = ''9999-12-31'' THEN NULL ELSE CourtOrderDate END CourtOrderDate
	FROM OPENQUERY
	(' + @LSDBName + ', ''
	SELECT  A.PIN_NUM PinNumber,
			B.COUNTY_NUM CountyNumber,
			A.PROGRAM_BEGIN_DT ApplicationDate,
			A.PROGRAM_END_DT,
			A.RFA_CASE_NUM RfaNumber,
			CASE A.RFA_TYPE_CD WHEN ''''CF'''' THEN ''''Children First''''
							   ELSE CASE WHEN B.COUNTY_NUM = 40 THEN ''''Transform Milwaukee Jobs''''
										 ELSE ''''Transitional Jobs''''
									END
			END ProgramName,
			CASE B.APP_STS_IND WHEN ''''P'''' THEN ''''Pending''''
							   WHEN ''''R'''' THEN ''''Processed''''
							   WHEN ''''W'''' THEN ''''Withdrawn''''
							   WHEN ''''D'''' THEN ''''Denied''''
							   WHEN ''''I'''' THEN ''''Initial''''
			END RfaStatus,
			B.COURT_ORD_EFF_DT CourtOrderDate
	FROM ' + @DB2DBName + '.T0143_IN_PR_CNCT_H A,
		 ' + @DB2DBName + '.T0055_RFA B
	WHERE A.PIN_NUM = ' + CAST(@PinNumber AS VARCHAR(15)) + '
	AND A.RFA_CASE_IND = ''''R''''
	AND A.RFA_TYPE_CD IN (''''CF'''', ''''TJ'''', ''''TM'''')
	AND A.RFA_CASE_NUM = B.RFA_NUM
	WITH UR;
	'')'

	PRINT @SQL

	INSERT INTO @Temp
	EXEC (@SQL)

	--SELECT * FROM @Temp

	SELECT T.PinNumber, T.ProgramName, T.RfaNumber, T.RfaStatus, T.ApplicationDate, T.Program_End_Dt, T.CourtOrderDate,
	T.CountyNumber, CT.CountyName--, C.ContractAreaName, ORG.AgencyName
	FROM @Temp T
		LEFT JOIN wwp.CountyAndTribe CT
			ON T.CountyNumber = CT.CountyNumber
	WHERE ApplicationDate < (SELECT CAST(ParameterValue AS DATE)
							 FROM wwp.SpecialInitiative
							 WHERE ParameterName = 'Phase1 Date')
		/*INNER JOIN wwp.ContractArea C
			ON O.ContractAreaId = C.Id
		INNER JOIN wwp.Organization ORG
			ON C.OrganizationId = ORG.Id*/
END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS [Error_Number],
	   ERROR_SEVERITY() AS [Error_Severity],
	   ERROR_STATE() AS [Error_ State],
	   ERROR_LINE() AS [Error_Line],
	   ISNULL(ERROR_PROCEDURE(), '-') AS [Error_Procedure]
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_T0164_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- =============================================
	-- PENDING TASK 
	-- 1) ASSIGNING PROVIDER ID 
	-- 2) MODIFY PROGRAM CODE
	-- 3) REDESIGN OR RELOOK FOR CO-ENROLLMENT
	-- 4) UPDATE CASE MAANGER ID IN WRITEBACK
	-- =============================================

-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-11-21 | GH#3536           | Work history writeback to include hourly wage                                                     |==
-- ========================================================================================================================================
	CREATE PROCEDURE [wwp].[SP_DB2_T0164_Update]

	(@SchemaName VARCHAR(20),
	 @ParticipantId Int   ,
   	 @EmploymentSequenceNumber Smallint,
	 @MFUserId VARCHAR(10) ,
	 @IsDeletedEmployment BIT,
	 @IsNewEmployment BIT,
	 @ComputedDB2WageRateValue VARCHAR(10))

	AS
	BEGIN

		SET NOCOUNT ON;
--
    Declare @SelectStmt1 as varchar(max);
	Declare @SelectStmt2 as varchar(max);
	Declare @SelectStmt3 as varchar(max);
	Declare @SelectStmt4 as varchar(max);
	Declare @SelectStmt5 as varchar(max);
	Declare @SelectStmt6 as varchar(max);
	Declare @SelectStmt11 as varchar(max);
	Declare @SelectStmt33 as varchar(max);
--
    Declare @InsertStmt1   as varchar(max);
	Declare @InsertStmt2   as varchar(max);
	Declare @InsertStmt3   as varchar(max);
	Declare @InsertStmt4   as varchar(max);
	Declare @InsertStmt5   as varchar(max);
	Declare @InsertStmt6   as varchar(max);
	Declare @InsertStmt7   as varchar(max);
	Declare @InsertStmt8   as varchar(max);
--
	Declare @UpdtStmt1	  as varchar(max);
	Declare @UpdtStmt2   as varchar(max);
	Declare @UpdtStmt3   as varchar(max);
	Declare @UpdtStmnt4   as varchar(max);
    Declare @UpdtStmnt5   as varchar(max);
	Declare @UpdtStmnt6   as varchar(max);
    Declare @UpdtStmnt7   as varchar(max);
	Declare @UpdtStmnt8   as varchar(max);
	Declare @UpdtStmnt9   as varchar(max);
	Declare @UpdtStmnt10  as varchar(max);
	Declare @UpdtStmnt11  as varchar(max);
--
	Declare @deleteStmt0  as varchar(max);
	Declare @deleteStmt1  as varchar(max);
	Declare @deleteStmt2  as varchar(max);
	Declare @deleteStmt3  as varchar(max);
	Declare @deleteStmt4  as varchar(max);
--
	Declare @DB2DBName	  as varchar(100) ;
    Declare @LSDBName	  as varchar(100) ;
	Declare @Id as int
--
--	Set @CurrentDate = CAST(GETDATE() AS DATE);
	 

---
    SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

   SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END

----
		 --Declare @TempT0164 table
		 --( ParticiapntId             INT
		 -- ,PIN_NUM                   DECIMAL(10,0)
		 -- ,EmploymentSequenceNumber  INT
		 -- ,IsDeleted                 BIT
		 -- ,CreatedDate               DATE
		 -- ,ModifiedDate              DATE
		 -- )



	  --INSERT INTO @TempT0164(ParticiapntId,EmploymentSequenceNumber,IsDeleted,CreatedDate,ModifiedDate)
	  --SELECT ParticiapntId,EmploymentSequenceNumber,IsDeleted,CreatedDate,ModifiedDate FROM tbd.T0164WritebackTrigger
 
	  -- ;

	  --Update  @TempT0164
	  --set PIN_NUM = ( SELECT PinNumber FROM WWP.Participant WHERE ID = ParticiapntId)
	  --WHERE ParticiapntId > 0

	  --DECLARE @PIN_NUM_S164 VARCHAR(10) = (select PIN_NUM from @TempT0164)
	  --DECLARE @EMP_SEQ_NUM_S164 VARCHAR(4) = (SELECT EmploymentSequenceNumber from @TempT0164)
	  --DECLARE @ParticipantId INT = (Select ParticiapntId from @TempT0164)

	  --print @PIN_NUM_S164
	  --print @EMP_SEQ_NUM_S164


	  --select * from @TempT0164
---


	  DECLARE @EmploymentInformation TABLE 
	   (
		[ParticipantId]				[int]			NOT NULL,
		[WorkHistorySectionId]		[int]			NULL,
		[JobTypeId]					[int]			NULL,
		[JobTypeName]				[varchar](100)	NULL,
		[JobBeginDate]				[date]			NULL,
		[JobEndDate]				[date]			NULL,
		[IsCurrentlyEmployed]		[bit]			NULL,
		[JobPosition]				[varchar](140)	NULL,
		[CompanyName]				[varchar](140)	NULL,
		[Fein]						[varchar](10)	NULL,
		[StreetAddress]				[varchar](140)	NULL,
		[ZipAddress]				[varchar](9)	NULL,
		[CityId]					[int]			NULL,
		[ContactId]					[int]			NULL,
		[JobDutiesId]				[int]			NULL,
		[LeavingReasonId]			[int]			NULL,
		[SortOrder]					[int]			NULL,
		[ModifiedBy]				[varchar](100)	NULL,
		[ModifiedDate]				[datetime]		NULL, 
		[DeleteReasonId]			[int]			NULL,
		[OtherJobInformationId]		[int]			NULL,
		[WageHoursId]				[int]			NULL,
		[Notes]						[varchar](1000) NULL,
		[EmploymentProgramtypeId]	[int]			NULL,
		[LeavingReasonDetails]		[varchar](1000) NULL,
		[EmployerOfRecordTypeId]	[int]			NULL,
	    [EmploymentSequenceNumber]	[smallint]		NULL,
	    [OriginalOfficeNumber]		[smallint]		NULL ,
	    [PinNumber]                 VARCHAR(10)     NULL )
 
	 INSERT INTO @EmploymentInformation ( [ParticipantId]
		  ,[WorkHistorySectionId]
		  ,[JobTypeId]
		  ,[JobTypeName]
		  ,[JobBeginDate]
		  ,[JobEndDate]
		  ,[IsCurrentlyEmployed]
		  ,[JobPosition]
		  ,[CompanyName]
		  ,[Fein]
		  ,[StreetAddress]
		  ,[ZipAddress]
		  ,[CityId]
		  ,[ContactId]
		  ,[JobDutiesId]
		  ,[LeavingReasonId]
		  ,[SortOrder]
		  ,[ModifiedBy]
		  ,[ModifiedDate]
		  ,[DeleteReasonId]
		  ,[OtherJobInformationId]
		  ,[WageHoursId]
		  ,[Notes]
		  ,[EmploymentProgramtypeId]
		  ,[LeavingReasonDetails]
		  ,[EmployerOfRecordTypeId] 
		  ,[EmploymentSequenceNumber]
		  ,[OriginalOfficeNumber] )

	 SELECT 
		   EI.[ParticipantId]
		  ,EI.[WorkHistorySectionId]
		  ,EI.[JobTypeId]
		  ,CASE JT.[Name] WHEN 'Subsidized'									THEN 'S'
						  WHEN 'Unsubsidized'								THEN 'U'
						  WHEN 'Volunteer'									THEN 'V'
						  WHEN 'Work Experience'							THEN 'W'
						  WHEN 'Internship'									THEN 'U'
						  WHEN 'Externship'									THEN 'U'
						  WHEN 'Self-Employed'								THEN 'U'
						  WHEN 'TMJ (Unsubsidized)'							THEN 'J'
						  WHEN 'TJ (Unsubsidized)'							THEN 'J'
						  WHEN 'TEMP Non-Custodial Parent (Unsubsidized)'	THEN 'U'
						  WHEN 'TEMP Custodial Parent (Unsubsidized)'		THEN 'U'
						  WHEN 'Staffing Agency'							THEN 'U'
						  WHEN 'TMJ (Subsidized)'							THEN 'M'
						  WHEN 'TJ (Subsidized)'							THEN 'M'
						  WHEN 'TEMP Non-Custodial Parent (Subsidized)'		THEN 'N'
						  WHEN 'TEMP Custodial Parent (Subsidized)'			THEN 'T'
		   END
		  ,EI.[JobBeginDate]
		  ,EI.[JobEndDate]
		  ,EI.[IsCurrentlyEmployed]
		  ,EI.[JobPosition]
		  ,EI.[CompanyName]
		  ,EI.[Fein]
		  ,EI.[StreetAddress]
		  ,EI.[ZipAddress]
		  ,EI.[CityId]
		  ,EI.[ContactId]
		  ,EI.[JobDutiesId]
		  ,EI.[LeavingReasonId]
		  ,EI.[SortOrder]
		  ,EI.[ModifiedBy]
		  ,EI.[ModifiedDate]
		  ,EI.[DeleteReasonId]
		  ,EI.[OtherJobInformationId]
		  ,EI.[WageHoursId]
		  ,EI.[Notes]
		  ,EI.[EmploymentProgramtypeId]
		  ,EI.[LeavingReasonDetails]
		  ,EI.[EmployerOfRecordTypeId]
		  ,EI.[EmploymentSequenceNumber]
		  ,EI.[OriginalOfficeNumber] 
	  FROM WWP.EmploymentInformation EI
		LEFT JOIN wwp.JobType JT
			ON EI.JobTypeId = JT.Id
	  WHERE ParticipantId = @ParticipantId
	  AND EmploymentSequenceNumber = @EmploymentSequenceNumber
	
---		    
     UPDATE @EmploymentInformation 
	    SET PinNumber = (select  PinNumber from wwp.Participant where Id = @ParticipantId ),
		    JobEndDate = (SELECT CASE WHEN JobEndDate IS NULL THEN '9999-12-31' else JobEndDate End)
		where ParticipantId = @ParticipantId
 

---
--	 SELECT * FROM @EmploymentInformation
--
--	 	  DECLARE @JOB_END_DT_S164 VARCHAR(10) = (SELECT CASE JobEndDate WHEN NULL THEN '9999-12-31' else JobEndDate end as JobEndDate FROM @EmploymentInformation)
--		  	  print @JOB_END_DT_S164

--Print 1

DECLARE @PIN_NUM            VARCHAR(10)    = (Select PinNumber FROM wwp.Participant WHERE Id = @ParticipantId)
DECLARE @EMPLOYER_SEQ_NUM   VARCHAR(04)    = @EmploymentSequenceNumber

DECLARE @T0164 TABLE
(
PIN_NUM VARCHAR(10),
EMPLOYER_SEQ_NUM SMALLINT,
DEL_IND VARCHAR(01),
EMPLOYER_NAM CHAR(30),
EMPLOYMENT_BEG_DT VARCHAR(10),
EMPLOYMENT_END_DT VARCHAR(10),
HISTORY_SEQ_NUM  SMALLINT,
JOB_TYP CHAR(1),
OFFICE_NUM VARCHAR(4)
)


SET @SelectStmt1 = 'SELECT *
				    FROM OPENQUERY(' + @LSDBName + ', ''SELECT A.PIN_NUM, A.EMPLOYER_SEQ_NUM, A.DEL_IND, A.EMPLOYER_NAM, A.EMPLOYMENT_BEG_DT, A.EMPLOYMENT_END_DT, A.HISTORY_SEQ_NUM, A.JOB_TYP,
														A.OFFICE_NUM
														FROM ' + @DB2DBName + '.T0164_WP_IN_WKR_HI A
														WHERE A.PIN_NUM = ' + @PIN_NUM + '
														AND A.EMPLOYER_SEQ_NUM = ' + @EMPLOYER_SEQ_NUM + '
														AND A.HISTORY_CD  = 0 
													    AND A.HISTORY_SEQ_NUM = (SELECT MAX(B.HISTORY_SEQ_NUM)
																				 FROM '+@DB2DBName+'.T0164_WP_IN_WKR_HI B                  
					     														 WHERE B.PIN_NUM  = A.PIN_NUM
								                                                 AND B.EMPLOYER_SEQ_NUM = A.EMPLOYER_SEQ_NUM
								                                             	 AND B.HISTORY_CD = 0)
														ORDER BY HISTORY_SEQ_NUM DESC
														FETCH FIRST 1 ROWS ONLY
														WITH UR;
								'')'

INSERT @T0164 (PIN_NUM, EMPLOYER_SEQ_NUM, DEL_IND, EMPLOYER_NAM, EMPLOYMENT_BEG_DT, EMPLOYMENT_END_DT,HISTORY_SEQ_NUM, JOB_TYP, OFFICE_NUM)
EXEC (@SelectStmt1)

DECLARE @AVG_WK_HRS         SMALLINT
DECLARE @DEL_IND            VARCHAR(01)    = CASE WHEN @IsDeletedEmployment = 1 THEN 'Y'
												  WHEN (Select DeleteReasonId FROM @EmploymentInformation) IS NULL THEN ' '
												  WHEN (Select DeleteReasonId FROM @EmploymentInformation) IS NOT NULL THEN ' '
											 END
--IIF((Select DeleteReasonId FROM @EmploymentInformation) IS NULL, ' ', 'Y')
DECLARE @DURATION_EMP_IND   CHAR(01)        
DECLARE @EE_IND             CHAR(01)   
DECLARE @EMP_CITY_ADR       CHAR(15)  
DECLARE @EMP_LINE_1_ADR     CHAR(30)  
DECLARE @EMP_LINE_2_ADR     CHAR(30)  
DECLARE @EMP_STATE_ADR      CHAR(02)   
DECLARE @EMP_TYPE_CD        CHAR(02)   
DECLARE @EMP_ZIP_ADR        CHAR(09)   
DECLARE @EMPLOYER_NAM       CHAR(30)        = IIF(@IsDeletedEmployment = 0, (SELECT UPPER(CompanyName) FROM @EmploymentInformation), (SELECT EMPLOYER_NAM FROM @T0164))
SET @EMPLOYER_NAM							= IIF(@EMPLOYER_NAM IS NULL, ' ', @EMPLOYER_NAM)
DECLARE @EMPLOYMENT_BEG_DT  VARCHAR(10)     = IIF(@IsDeletedEmployment = 0, (SELECT JobBeginDate FROM @EmploymentInformation), (SELECT EMPLOYMENT_BEG_DT FROM @T0164))
DECLARE @EMPLOYMENT_END_DT  VARCHAR(10)     = IIF(@IsDeletedEmployment = 0, (SELECT JobEndDate FROM @EmploymentInformation), (SELECT EMPLOYMENT_END_DT FROM @T0164))
DECLARE @HISTORY_CD         VARCHAR(04)     = 0
DECLARE @HOURLY_WAGE_AMT    DECIMAL(5,2)
DECLARE @JOB_CD             CHAR(03)        = ' '
DECLARE @JOB_DUTIES_1_TXT   CHAR(35) 
DECLARE @JOB_DUTIES_2_TXT   CHAR(35)        
DECLARE @JOB_DUTIES_3_TXT   CHAR(35)        
DECLARE @MEDICAL_BEN_IND    CHAR(01)         
DECLARE @OFFICE_NUM         VARCHAR(04)      = IIF(@IsDeletedEmployment = 0, (SELECT OriginalOfficeNumber FROM @EmploymentInformation), (SELECT OFFICE_NUM FROM @T0164))
--DECLARE @OFFICE_NUM         VARCHAR(04)      =  0
DECLARE @OT_BEN_CD          CHAR(02)         
DECLARE @PAY_CD             CHAR(02)         
DECLARE @PROVIDER_ID        SMALLINT 
DECLARE @STAFF_ID           CHAR(06)       
DECLARE @USER_ID            VARCHAR(06)     = UPPER(@MFUserId)
DECLARE @WORK_LEFT_CD       CHAR(02)      
DECLARE @HRS_OR_WAGE_CHG_DT DATE      
DECLARE @JOB_TYP            CHAR(01)		= IIF(@IsDeletedEmployment = 0, (SELECT UPPER(JobTypeName) FROM @EmploymentInformation), (SELECT JOB_TYP FROM @T0164))
SET @JOB_TYP								= IIF(@JOB_TYP IS NULL, ' ', @JOB_TYP)
DECLARE @RES_MILW_ITIV_IND  CHAR(01)  

IF EXISTS(
SELECT IIF(DeleteReasonId IS NULL, ' ', 'Y') DEL_IND, CompanyName EMPLOYER_NAM, JobBeginDate EMPLOYMENT_BEG_DT,
JobEndDate EMPLOYMENT_END_DT, JobTypeName JOB_TYP FROM @EmploymentInformation
EXCEPT
SELECT DEL_IND, EMPLOYER_NAM, EMPLOYMENT_BEG_DT, EMPLOYMENT_END_DT, JOB_TYP FROM @T0164) OR @IsDeletedEmployment = 1
BEGIN
	
	--Declare @Temp1 table
	--				  (MAXHistory SMALLINT NULL )


		-- SET @SelectStmt2 =   'SELECT MaxHistory
		--		       			 FROM OPENQUERY('+@LSDBName+', 
		--					 '' SELECT MAX(HISTORY_SEQ_NUM)  AS MaxHistory                               
		--						  FROM  '+@DB2DBName+'.T0164_WP_IN_WKR_HI                      
		--			     		 WHERE PIN_NUM  = '+@PIN_NUM+ '           
		--						   AND EMPLOYER_SEQ_NUM = '+@EMPLOYER_SEQ_NUM+'
		--						   	AND HISTORY_CD  = 0
		--					  '')'
	 
	 
		--print 2 

 
	    --SELECT HISTORY_SEQ_NUM FROM @T0164


	   --select * from @Temp1


	DECLARE @HISTORY_SEQ_NUM    VARCHAR(04)    = (SELECT  HISTORY_SEQ_NUM + 1 FROM @T0164)
	DECLARE @HISTORY_SEQ_NUM_UPD    VARCHAR(04)    = (SELECT  HISTORY_SEQ_NUM FROM @T0164)

	  --------------

 
	PRINT @PIN_NUM
	PRINT @EMPLOYER_SEQ_NUM
	PRINT @HISTORY_SEQ_NUM
	PRINT @DEL_IND
	PRINT @EMPLOYER_NAM
	PRINT @EMPLOYMENT_BEG_DT
	PRINT @EMPLOYMENT_END_DT
	PRINT @HISTORY_CD
	PRINT @OFFICE_NUM
	PRINT @USER_ID
	PRINT @JOB_TYP

	IF @HISTORY_SEQ_NUM_UPD IS NULL 

	BEGIN
	PRINT 'ABC'
	SET @HISTORY_SEQ_NUM_UPD  = 0
	SET @HISTORY_SEQ_NUM = 1
	END


	IF @HISTORY_SEQ_NUM_UPD <> 0
	BEGIN

	  set @UpdtStmt1 = ' UPDATE ' + @DB2DBName + '.T0164_WP_IN_WKR_HI
			  SET  HISTORY_CD  =  9  
						  WHERE PIN_NUM = '+@PIN_NUM+'
							AND EMPLOYER_SEQ_NUM = '+@EMPLOYER_SEQ_NUM+'
							AND HISTORY_SEQ_NUM = '+@HISTORY_SEQ_NUM_UPD+' 
							AND HISTORY_CD  = 0 
												 '
	  print @UpdtStmt1
                                         
	exec (@UpdtStmt1) at NETWINFO_D00S_DB2  

	END
	-----

	PRINT @PIN_NUM

		BEGIN TRY
		
	   if (@EMPLOYER_NAM not like '%''%' and @IsNewEmployment = 0)
	   set @InsertStmt1 = ' INSERT INTO ' + @DB2DBName + '.T0164_WP_IN_WKR_HI ( PIN_NUM , EMPLOYER_SEQ_NUM , HISTORY_SEQ_NUM ,DEL_IND, 
																	  EMPLOYER_NAM ,EMPLOYMENT_BEG_DT ,EMPLOYMENT_END_DT ,
																	  HISTORY_CD , USER_ID ,OFFICE_NUM, JOB_TYP )                                      
							 VALUES ('+@PIN_NUM+', '+@EMPLOYER_SEQ_NUM+',  '+@HISTORY_SEQ_NUM+' ,'''+@DEL_IND+''', 
																	  '''+@EMPLOYER_NAM+''' ,'''+@EMPLOYMENT_BEG_DT+''' ,'''+@EMPLOYMENT_END_DT+''' ,
																	  '+@HISTORY_CD+' ,'''+@USER_ID+''','+ISNULL(@OFFICE_NUM, 0)+','''+@JOB_TYP+''' )
						  '


	   else if (@EMPLOYER_NAM like '%''%' and @IsNewEmployment = 0)
	   set @InsertStmt1 = ' INSERT INTO ' + @DB2DBName + '.T0164_WP_IN_WKR_HI ( PIN_NUM , EMPLOYER_SEQ_NUM , HISTORY_SEQ_NUM ,DEL_IND, 
																	  EMPLOYER_NAM ,EMPLOYMENT_BEG_DT ,EMPLOYMENT_END_DT ,
																	  HISTORY_CD , USER_ID ,OFFICE_NUM, JOB_TYP )                                      
							 VALUES ('+@PIN_NUM+', '+@EMPLOYER_SEQ_NUM+',  '+@HISTORY_SEQ_NUM+' ,'''+@DEL_IND+''', 
																	  '''+REPLACE(@EMPLOYER_NAM, '''', '''''')+''' ,'''+@EMPLOYMENT_BEG_DT+''' ,'''+@EMPLOYMENT_END_DT+''' ,
																	  '+@HISTORY_CD+' ,'''+@USER_ID+''','+ISNULL(@OFFICE_NUM, 0)+','''+@JOB_TYP+''' )
						  '
		else if (@EMPLOYER_NAM not like '%''%' and @IsNewEmployment = 1)
		set @InsertStmt1 = ' INSERT INTO ' + @DB2DBName + '.T0164_WP_IN_WKR_HI ( PIN_NUM , EMPLOYER_SEQ_NUM , HISTORY_SEQ_NUM ,DEL_IND, 
																	  EMPLOYER_NAM ,EMPLOYMENT_BEG_DT ,EMPLOYMENT_END_DT ,
																	  HISTORY_CD , USER_ID ,OFFICE_NUM, JOB_TYP, HOURLY_WAGE_AMT )                                      
							 VALUES ('+@PIN_NUM+', '+@EMPLOYER_SEQ_NUM+',  '+@HISTORY_SEQ_NUM+' ,'''+@DEL_IND+''', 
																	  '''+@EMPLOYER_NAM+''' ,'''+@EMPLOYMENT_BEG_DT+''' ,'''+@EMPLOYMENT_END_DT+''' ,
																	  '+@HISTORY_CD+' ,'''+@USER_ID+''','+ISNULL(@OFFICE_NUM, 0)+','''+@JOB_TYP+''', '''+@ComputedDB2WageRateValue+''' )
						  '
		else if (@EMPLOYER_NAM like '%''%' and @IsNewEmployment = 1)
	   set @InsertStmt1 = ' INSERT INTO ' + @DB2DBName + '.T0164_WP_IN_WKR_HI ( PIN_NUM , EMPLOYER_SEQ_NUM , HISTORY_SEQ_NUM ,DEL_IND, 
																	  EMPLOYER_NAM ,EMPLOYMENT_BEG_DT ,EMPLOYMENT_END_DT ,
																	  HISTORY_CD , USER_ID ,OFFICE_NUM, JOB_TYP, HOURLY_WAGE_AMT )                                      
							 VALUES ('+@PIN_NUM+', '+@EMPLOYER_SEQ_NUM+',  '+@HISTORY_SEQ_NUM+' ,'''+@DEL_IND+''', 
																	  '''+REPLACE(@EMPLOYER_NAM, '''', '''''')+''' ,'''+@EMPLOYMENT_BEG_DT+''' ,'''+@EMPLOYMENT_END_DT+''' ,
																	  '+@HISTORY_CD+' ,'''+@USER_ID+''','+ISNULL(@OFFICE_NUM, 0)+','''+@JOB_TYP+''', '+@ComputedDB2WageRateValue+' )
						  '

	print @InsertStmt1
                                         
	exec (@InsertStmt1) at NETWINFO_D00S_DB2

	END TRY
			BEGIN CATCH
				DECLARE 
				@ErrorMessage    NVARCHAR(4000),
				@ErrorNumber     INT,
				@ErrorSeverity   INT,
				@ErrorState      INT,
				@ErrorLine       INT,
				@ErrorProcedure  NVARCHAR(200);

				-- Assign variables to error-handling functions that 
				-- capture information for RAISERROR.
				SELECT 
					@ErrorNumber = ERROR_NUMBER(),
					@ErrorSeverity = ERROR_SEVERITY(),
					@ErrorState = ERROR_STATE(),
					@ErrorLine = ERROR_LINE(),
					@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-');

				-- Build the message string that will contain original
				-- error information.
				SELECT @ErrorMessage = 
					N'Error %d, Level %d, State %d, Procedure %s, Line %d, ' + 
						'Message: '+ ERROR_MESSAGE();

				-- Raise an error: msg_str parameter of RAISERROR will contain
				-- the original error information.
				RAISERROR 
					(
					@ErrorMessage, 
					@ErrorSeverity, 
					1,               
					@ErrorNumber,    -- parameter: original error number.
					@ErrorSeverity,  -- parameter: original error severity.
					@ErrorState,     -- parameter: original error state.
					@ErrorProcedure, -- parameter: original error procedure name.
					@ErrorLine       -- parameter: original error line number.
					);
				 
			END CATCH	
			
			END
	--		SET @Id = SCOPE_IDENTITY();
	--		select @Id as Id;

END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_T0532_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[SP_DB2_T0532_Update] 3009249438, 'XCTF5O', 'TMJ', 'WWPDEV'
CREATE PROCEDURE [wwp].[SP_DB2_T0532_Update]
@PinNumber DECIMAL(10,0),
@MFWorkerId VARCHAR(6),
@ProgramCode VARCHAR(3),
@SchemaName VARCHAR(20)

AS
BEGIN
	SET NOCOUNT ON
	SET FMTONLY OFF

	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @WP_PGM_CD VARCHAR(2) = CASE WHEN @ProgramCode = 'TMJ' THEN 'TM' 
	                                     WHEN @ProgramCode = 'TJ'  THEN 'TM'  
										 WHEN @ProgramCode = 'CF'  THEN 'CF'  
									END
	DECLARE @T0532Select NVARCHAR(MAX)
	DECLARE @T0532Insert NVARCHAR(MAX)
	DECLARE @T0532Update NVARCHAR(MAX)
	DECLARE @PIN_NUM VARCHAR(10) = CAST(@PinNumber AS VARCHAR(10))
	DECLARE @T0532Temp TABLE
	(
	 PIN_NUM VARCHAR(10),
	 WP_PGM_CD VARCHAR(25),
	 WORKER_ID VARCHAR(25)
	)

---
	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END

---
	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
						END

---
	SET @T0532Select = 'SELECT PIN_NUM, WP_PGM_CD, WORKER_ID
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT PIN_NUM, WP_PGM_CD, WORKER_ID
															FROM '+ @DB2DBName + '.T0532_WP_WKR
															WHERE PIN_NUM = ' + @PIN_NUM + ' AND WP_PGM_CD = ''''' + @WP_PGM_CD + '''''
															WITH UR'')'
	PRINT @T0532Select

	INSERT INTO @T0532Temp (PIN_NUM, WP_PGM_CD, WORKER_ID)
	EXEC (@T0532Select)

---
	SET @T0532Insert = 'INSERT INTO ' + @DB2DBName + '.T0532_WP_WKR (PIN_NUM, WP_PGM_CD, WORKER_ID) VALUES (' + @PIN_NUM + ', ''' + @WP_PGM_CD + ''', ''' + @MFWorkerId + ''')'
	PRINT @T0532Insert

	SET @T0532Update = 'UPDATE ' + @DB2DBName + '.T0532_WP_WKR
						SET WORKER_ID = ''' + @MFWorkerId + '''
						WHERE PIN_NUM = ' + @PIN_NUM + ' AND WP_PGM_CD = ''' + @WP_PGM_CD + ''''
	PRINT @T0532Update

---
	IF EXISTS (SELECT 1 FROM @T0532Temp WHERE PIN_NUM = @PIN_NUM AND WP_PGM_CD = @WP_PGM_CD)
		EXEC (@T0532Update) AT NETWINFO_D00S_DB2
	ELSE
		EXEC (@T0532Insert) AT NETWINFO_D00S_DB2

END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_T2643_Confidentiality_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[SP_DB2_T2643_Confidentiality_Update] 6009478162, 0, 'XCTF50', 'WWPDEV'
CREATE PROCEDURE [wwp].[SP_DB2_T2643_Confidentiality_Update]
@PinNumber DECIMAL(10,0),
@IsConfidential BIT,
@MFWorkerId VARCHAR(6),
@SchemaName VARCHAR(20)

AS
BEGIN
	SET NOCOUNT ON
	SET FMTONLY OFF

	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @T2643Select NVARCHAR(MAX)
	DECLARE @T2643Insert NVARCHAR(MAX)
	DECLARE @T2643Update NVARCHAR(MAX)
	DECLARE @PIN_NUM VARCHAR(10) = CAST(@PinNumber AS VARCHAR(10))
	DECLARE @CNFD_IND CHAR(01) = CASE @IsConfidential WHEN 0 THEN 'N'
													  WHEN 1 THEN 'Y'
								 END
	DECLARE @T2643Temp TABLE
	(
	 PIN_NUM VARCHAR(10),
	 CNFD_IND CHAR(01),
	 [USER_ID] VARCHAR(25)
	)

---
	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END

---
	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
						END

---
	SET @T2643Select = 'SELECT PIN_NUM, CNFD_IND, [USER_ID]
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT PIN_NUM, CNFD_IND, USER_ID
															FROM '+ @DB2DBName + '.T2643_WWP_CNFD_PIN
															WHERE PIN_NUM = ' + @PIN_NUM + '
															WITH UR'')'
	PRINT @T2643Select

	INSERT INTO @T2643Temp (PIN_NUM, CNFD_IND, [USER_ID])
	EXEC (@T2643Select)

---
	SET @MFWorkerId = IIF(@MFWorkerId IS NULL OR LTRIM(RTRIM(@MFWorkerId)) = '', (SELECT ParameterValue FROM wwp.SpecialInitiative WHERE ParameterName = 'FnMFId'), @MFWorkerId)
 	PRINT @MFWorkerId

	SET @T2643Insert = 'INSERT INTO ' + @DB2DBName + '.T2643_WWP_CNFD_PIN (PIN_NUM, CNFD_IND, USER_ID) VALUES (' + @PIN_NUM + ', ''' + @CNFD_IND + ''', ''' + @MFWorkerId + ''')'
	PRINT @T2643Insert

	SET @T2643Update = 'UPDATE ' + @DB2DBName + '.T2643_WWP_CNFD_PIN
						SET CNFD_IND = ''' + @CNFD_IND + ''',
							USER_ID = ''' + @MFWorkerId + '''
						WHERE PIN_NUM = ' + @PIN_NUM + ''
	PRINT @T2643Update

---
	IF EXISTS (SELECT 1 FROM @T2643Temp WHERE PIN_NUM = @PIN_NUM)
	BEGIN
		PRINT 'Try Updating'
		EXEC (@T2643Update) AT NETWINFO_D00S_DB2
		PRINT 'Updated'
	END
	ELSE IF (@IsConfidential = 1)
	BEGIN
		PRINT 'Try Inserting'
		EXEC (@T2643Insert) AT NETWINFO_D00S_DB2
		PRINT 'Inserted'
	END

END
GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_Test_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- PENDING TASK 
-- 1) ASSIGNING PROVIDER ID 
-- 2) MODIFY PROGRAM CODE
-- 3) REDESIGN OR RELOOK FOR CO-ENROLLMENT
-- 4) UPDATE CASE MAANGER ID IN WRITEBACK
-- =============================================
CREATE PROCEDURE [wwp].[SP_DB2_Test_Update]
@PinNumber DECIMAL(10,0),              
@EffectiveDate DATE ,    
@OutGoingCountyNumber SMALLINT ,
@OutGoingOfficeNumber SMALLINT ,
@IncomingCountyNumber SMALLINT ,
@IncomingOfficeNumber SMALLINT ,
@MFWorkerId   VARCHAR(06) ,
@ProgramCode  VARCHAR(03) ,
@SubProgramCode VARCHAR(01) ,
@RegistrationCode Varchar(01) ,
@SchemaName VARCHAR(20)
 

AS
BEGIN

	SET NOCOUNT ON;
	declare @CurrentDate as varchar(10) ;
    declare @statement1 as varchar(max);
	declare @statement2 as varchar(max);
	declare @statement3 as varchar(max);
	declare @statement4 as varchar(max);
	declare @deleteState1 as varchar(max);
	declare @deleteState2 as varchar(max);
	declare @deleteState3 as varchar(max);
	declare @deleteState4 as varchar(max);
	declare @DB2DBName as varchar(100) ;
    declare @LSDBName as varchar(100) ;
	declare @DONOTEXUTE1 as bit ;
	declare @DONOTEXUTE2 as bit;
	
	set @CurrentDate = CAST(GETDATE() AS DATE);

	 

---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end


	 SET XACT_ABORT ON ;

	 SET @DONOTEXUTE1 = 0;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ INSERT INTO TRANSACTION TABLE
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @PIN_NUM            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
DECLARE @TRANSACTION_DT     VARCHAR(10) = @EffectiveDate     ;    
DECLARE @TRANSACTION_CD     VARCHAR(04) = 939 ;    
DECLARE @TRANSACTION_NUM    VARCHAR(04) = 1 ;   
DECLARE @COUNTY_NUM         VARCHAR(04) = CONVERT(varchar(4), @OutGoingCountyNumber) ;  
DECLARE @EFFECTIVE_DT       VARCHAR(10) = @EffectiveDate     ;    
DECLARE @OFFICE_NUM         VARCHAR(04) = CONVERT(varchar(4), @OutGoingOfficeNumber ) ;  
DECLARE @PROGRAM_CD         VARCHAR(3)  = 'WW'  ;  ---REVIST
DECLARE @PROVIDER_ID        VARCHAR(04) = 0000  ;  --REVISIT
DECLARE @REGISTRATION_CD    VARCHAR(1)  = @RegistrationCode ;
DECLARE @STAFF_ID           VARCHAR(6)  = @MFWorkerId ;  
DECLARE @COMP_ACTION_CD     VARCHAR(1)  = ' '  ;  
DECLARE @COMPONENT_PHASE_CD VARCHAR(1)  = ' ';  
DECLARE @SUBPROGRAM_CD      VARCHAR(1) =  @SubProgramCode  ;
DECLARE @TRANSACTION_TS     VARCHAR(26) ;  
DECLARE @WDA_CD             VARCHAR(04)= 0 ;
DECLARE @CMP_RSN_CD         VARCHAR(2)  = ' ' ;   
DECLARE @RFA_NUM            VARCHAR(10) = 0 ;     
DECLARE @CMP_DT             VARCHAR(10) =     '9999-12-31'    ;     






---------------------------------------------------------------------------------------------------------------------------------------------

set @statement1 = ' INSERT INTO PWS639TC.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
                                                               EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
															   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
															   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
                         VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
						         '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
							     '''+@STAFF_ID+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
								 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



 PRINT @statement1

 begin

    declare @trancount int;
    set @trancount = @@trancount;
    begin try

            begin transaction
			
			    print 'begin tran'   
				exec (@statement1) at NETWINFO_D00S_DB2

            commit;


	  end try
    begin catch

	   print 'into catch22'


      Declare @ErrorMessage    NVARCHAR(4000),
			@ErrorNumber     INT,
			@ErrorSeverity   INT,
			@ErrorState      INT,
			@ErrorLine       INT,
			@ErrorProcedure  NVARCHAR(200),
			@xstate  INT ;

	 

        SELECT 
				@ErrorNumber = ERROR_NUMBER(),
				@ErrorSeverity = ERROR_SEVERITY(),
				@ErrorState = ERROR_STATE(),
				@ErrorLine = ERROR_LINE(),
				@ErrorProcedure = ISNULL(ERROR_PROCEDURE(), '-'), 
				@xstate = XACT_STATE();
		
		 
        if @xstate = -1
            rollback ;
        if @xstate = 1 and @trancount = 0
            rollback 
        if @xstate = 1 and @trancount > 0
            rollback transaction SP_DB2_Test_Update;

    raiserror ('SP_DB2_Test_Update: %d: %s', 16, 1, @ErrorNumber, @ErrorMessage) ;

    end catch
end

 
   

--BEGIN TRY 
--  BEGIN TRANSACTION
  
--  exec (@statement1) at NETWINFO_D00S_DB2

-- -- COMMIT TRANSACTION
--END TRY
--BEGIN CATCH

-- PRINT 'WITH IN CATCH'
----RAISERROR (N'ERROR CALLED ON OUTGOING AGENCY',16,1)
--IF (XACT_STATE()) = -1 --UNCOMMITABLE 
-- BEGIN
--  print 'in xact-1' 

--  SET @DONOTEXUTE1 = 1

--  PRINT 'DONOTEXUTE1 BEFORE ROLLBACK' 
--  PRINT  @DONOTEXUTE1

--  ROLLBACK TRANSACTION

--END

--IF (XACT_STATE()) = 1 --UNCOMMITABLE 
-- BEGIN
--  print 'in xact1' 

--  SET @DONOTEXUTE1 = 0

--    PRINT 'DONOTEXUTE1 BEFORE COMMIT' 
--	PRINT @DONOTEXUTE1

--  COMMIT 

--END
--END CATCH

--print 'AFTER STATMENT1 COMPLETED'
--PRINT @DONOTEXUTE1

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---- UPDATE T0018 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   
-- DECLARE @PIN_NUM_18            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        
-- --DECLARE @IncomingCountyNumber_18          VARCHAR(4) = CONVERT(varchar(04),@IncomingCountyNumber) ;
-- --DECLARE @IncomingOfficeNumber_18          VARCHAR(4) = CONVERT(varchar(04),@IncomingOfficeNumber) ;
-- DECLARE @IncomingCountyNumber_18          VARCHAR(4) =  @IncomingCountyNumber ;
-- DECLARE @IncomingOfficeNumber_18          VARCHAR(4) =  @IncomingOfficeNumber;


-- print @IncomingOfficeNumber_18 + ' office'
-- print @IncomingCountyNumber_18 + ' county'

--  set @statement2 = ' UPDATE PWS639TC.T0018_WP_INDV 
--                         SET  COUNTY_NUM = '+@IncomingCountyNumber_18+' ,
--		                      OFFICE_NUM = '+@IncomingOfficeNumber_18+' 
--                        WHERE PIN_NUM = '+@PIN_NUM_18+'
--                         ';                    
                       
--IF @DONOTEXUTE1 = 0
-- PRINT @statement2                                        
--BEGIN
--  exec (@statement2) at NETWINFO_D00S_DB2
--END
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---- INSERT T0121 FOR INCOMING
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




 
--DECLARE @PIN_NUM_D121            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
--DECLARE @TRANSACTION_DT_D121     VARCHAR(10) = @EffectiveDate     ;    
--DECLARE @TRANSACTION_CD_D121     VARCHAR(04) = 030 ;    
--DECLARE @TRANSACTION_NUM_D121    VARCHAR(04) = 1 ;   
--DECLARE @COUNTY_NUM_D121         VARCHAR(04) = CONVERT(varchar(4), @IncomingCountyNumber) ;  
--DECLARE @EFFECTIVE_DT_D121       VARCHAR(10) = @EffectiveDate     ;    
--DECLARE @OFFICE_NUM_D121         VARCHAR(04) = CONVERT(varchar(4), @IncomingOfficeNumber ) ;  
--DECLARE @PROGRAM_CD_D121         VARCHAR(3)  = 'WW'  ;  ---REVIST
--DECLARE @PROVIDER_ID_D121        VARCHAR(04) = 0000  ;  --REVISIT
--DECLARE @REGISTRATION_CD_D121    VARCHAR(1)  = @RegistrationCode ;
--DECLARE @STAFF_ID_D121           VARCHAR(6)  = @MFWorkerId ;  
--DECLARE @COMP_ACTION_CD_D121     VARCHAR(1)  = ' '  ;  
--DECLARE @COMPONENT_PHASE_CD_D121 VARCHAR(1)  = ' ';  
--DECLARE @SUBPROGRAM_CD_D121      VARCHAR(1) =  @SubProgramCode  ;
--DECLARE @TRANSACTION_TS_D121     VARCHAR(26) ;  
--DECLARE @WDA_CD_D121             VARCHAR(04)= 0 ;
--DECLARE @CMP_RSN_CD_D121         VARCHAR(2)  = ' ' ;   
--DECLARE @RFA_NUM_D121            VARCHAR(10) = 0 ;     
--DECLARE @CMP_DT_D121             VARCHAR(10) =  '9999-12-31'    ;     






-----------------------------------------------------------------------------------------------------------------------------------------------

--set @statement3 = ' INSERT INTO PWS639TC.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
--                                                               EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
--															   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
--															   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
--                         VALUES ('+@PIN_NUM_D121+', '''+@TRANSACTION_DT_D121+''' , '+@TRANSACTION_CD_D121+','+@TRANSACTION_NUM_D121+','+@COUNTY_NUM_D121+' ,
--						         '''+@EFFECTIVE_DT_D121+''','+@OFFICE_NUM_D121+','''+@PROGRAM_CD_D121+''','+@PROVIDER_ID_D121+','''+@REGISTRATION_CD_D121+''', 
--							     '''+@STAFF_ID_D121+''' ,'''+@COMP_ACTION_CD_D121+''','''+@COMPONENT_PHASE_CD_D121+''','''+@SUBPROGRAM_CD_D121+''',
--								 '''+@WDA_CD_D121+''' ,'''+@CMP_RSN_CD_D121+''' ,'+@RFA_NUM_D121+','''+@CMP_DT_D121+''') '



----PRINT @statement3



--BEGIN TRY 

--  PRINT 'INTO @STATMENT3'

--  BEGIN TRANSACTION
  
--  exec (@statement3) at NETWINFO_D00S_DB2

--  COMMIT 

--END TRY
--BEGIN CATCH

-- PRINT 'WITH IN CATCH'
----RAISERROR (N'ERROR CALLED ON OUTGOING AGENCY',16,1)
--IF (XACT_STATE()) = -1 --UNCOMMITABLE 
-- BEGIN
--  print 'in xact-1' 

--  SET @DONOTEXUTE2 = 1

--  PRINT 'DONOTEXUTE1 BEFORE ROLLBACK' 
--  PRINT  @DONOTEXUTE2

--  ROLLBACK TRANSACTION

--END

--IF (XACT_STATE()) = 1 --UNCOMMITABLE 
-- BEGIN
--  print 'in xact1' 

--  SET @DONOTEXUTE2 = 0

--    PRINT 'DONOTEXUTE1 BEFORE COMMIT' 
--	PRINT @DONOTEXUTE2

--  COMMIT TRANSACTION

--END
--END CATCH

PRINT 'END OF SP'

END

GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_Transfer_Activity]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- PENDING TASK 
-- 1) ASSIGNING PROVIDER ID 
-- 2) MODIFY PROGRAM CODE
-- 3) REDESIGN OR RELOOK FOR CO-ENROLLMENT
-- 4) UPDATE CASE MAANGER ID IN WRITEBACK
-- =============================================
CREATE PROCEDURE [wwp].[SP_DB2_Transfer_Activity]
@PinNumber DECIMAL(10,0),              
@SchemaName VARCHAR(20)

AS
BEGIN

	SET NOCOUNT ON;
	declare @CurrentDate as varchar(10) ;
    declare @PreviousDate as varchar(10) ;
    declare @statement1 as varchar(max);
	declare @statement2 as varchar(max);
	declare @statement3 as varchar(max);
	declare @statement4 as varchar(max);
	declare @deleteState1 as varchar(max);
	declare @deleteState2 as varchar(max);
	declare @deleteState3 as varchar(max);
	declare @deleteState4 as varchar(max);
	declare @SelectStatement1 as varchar(max);
	declare @UpdateStatement1 as varchar(max);
	declare @InsertStatement1 as varchar(max);
	declare @InsertStatement2 as varchar(max);
	declare @DB2DBName as varchar(100) ;
    declare @LSDBName as varchar(100) ;
	set @CurrentDate = CAST(GETDATE() AS DATE);
	set @PreviousDate =   dateadd(day,-1, cast(getdate() as date))
	 

---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end


 Declare @TempT0066 table
   (PIN_NUM_S66         DECIMAL (10,0) , 
    COMPONENT_CD_S66    CHAR (02),
    COMPONENT_BEG_DT_S66  DATE,
	COMPONENT_PHASE_CD_S66 CHAR(01),
	HISTORY_SEQ_NUM_S66    SMALLINT,
	COMP_ANT_END_DT_S66    DATE,
	COMPONENT_CMP_CD_S66   CHAR(01),
	COMPONENT_END_DT_S66   DATE   ,
	DELETE_COMP_SW_S66     CHAR(1)  , 
	EMP_ACT_PRV_ID_S66     INTEGER,
	FUNDING_SOURCE_NAM_S66 CHAR(6)   ,
	JOB_CD_S66             CHAR(3)  , 
	NON_APPROVAL_CD_S66    CHAR(2)  , 
	OFFICE_NUM_S66         SMALLINT  ,    
	PROVIDER_ID_S66        SMALLINT  ,    
	SCHEDULED_HRS_S66      SMALLINT  ,   
	SITE_CD_S66            CHAR(4)   ,       
	STAFF_ID_S66           CHAR(6)   ,       
	COMPONENT_TS_S66       VARCHAR(26) ,      
	FRQ_DAYS_PER_MM_S66    SMALLINT  ,		
	DLY_SCHD_HRS_S66       SMALLINT  ,    
	MRF_REQ_SW_S66         CHAR(1)   ,       
	W2_HRS_REDUCE_SW_S66   CHAR(1)   ,       
	HISTORY_CD_S66         SMALLINT, 
	UPDATED_DT_S66         DATE    ,      
	WORKER_ID_S66          CHAR(6)  ,        
	REGION_NUM_S66         SMALLINT  ,
	ID                     INT
 
)



DECLARE @PIN_NUM            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;   


set @SelectStatement1 =   'select PIN_NUM_S66          , 
								COMPONENT_CD_S66       ,
								COMPONENT_BEG_DT_S66   ,  
								COMPONENT_PHASE_CD_S66 ,
								HISTORY_SEQ_NUM_S66    ,  
								COMP_ANT_END_DT_S66    ,  
								COMPONENT_CMP_CD_S66   , 
								COMPONENT_END_DT_S66   , 
								DELETE_COMP_SW_S66     ,  
								EMP_ACT_PRV_ID_S66     ,
								FUNDING_SOURCE_NAM_S66 ,
								JOB_CD_S66             ,
								NON_APPROVAL_CD_S66    ,
								OFFICE_NUM_S66         , 
								PROVIDER_ID_S66        ,  
								SCHEDULED_HRS_S66      , 
								SITE_CD_S66            ,       
								STAFF_ID_S66           ,      
								COMPONENT_TS_S66       ,  
								FRQ_DAYS_PER_MM_S66    ,    
								DLY_SCHD_HRS_S66       ,    
								MRF_REQ_SW_S66         ,   
								W2_HRS_REDUCE_SW_S66   ,  
								HISTORY_CD_S66         ,     
								UPDATED_DT_S66         ,        
								WORKER_ID_S66          ,           
								REGION_NUM_S66         ,
								ID    
FROM OPENQUERY('+@LSDBName+', ''SELECT PIN_NUM              as PIN_NUM_S66             , 
                                       COMPONENT_CD         as COMPONENT_CD_S66        ,
                                       COMPONENT_BEG_DT     as COMPONENT_BEG_DT_S66    ,  
									   COMPONENT_PHASE_CD   as COMPONENT_PHASE_CD_S66  ,
									   HISTORY_SEQ_NUM      as HISTORY_SEQ_NUM_S66     ,  
									   COMP_ANT_END_DT      as COMP_ANT_END_DT_S66     ,  
									   COMPONENT_CMP_CD     as COMPONENT_CMP_CD_S66    , 
									   COMPONENT_END_DT     as COMPONENT_END_DT_S66    , 
									   DELETE_COMP_SW       as DELETE_COMP_SW_S66      ,  
									   EMP_ACT_PRV_ID       as EMP_ACT_PRV_ID_S66      ,
									   FUNDING_SOURCE_NAM   as FUNDING_SOURCE_NAM_S66  ,
									   JOB_CD               as JOB_CD_S66              ,
									   NON_APPROVAL_CD      as NON_APPROVAL_CD_S66     ,
									   OFFICE_NUM           as OFFICE_NUM_S66          , 
									   PROVIDER_ID          as PROVIDER_ID_S66         ,  
									   SCHEDULED_HRS        as SCHEDULED_HRS_S66       , 
									   SITE_CD              as SITE_CD_S66             ,        
									   STAFF_ID             as STAFF_ID_S66            ,      
									   COMPONENT_TS         as COMPONENT_TS_S66        ,  
									   FRQ_DAYS_PER_MM      as FRQ_DAYS_PER_MM_S66     ,    
									   DLY_SCHD_HRS         as DLY_SCHD_HRS_S66        ,    
									   MRF_REQ_SW           as MRF_REQ_SW_S66          ,   
									   W2_HRS_REDUCE_SW     as W2_HRS_REDUCE_SW_S66    ,  
									   HISTORY_CD           as HISTORY_CD_S66          ,     
									   UPDATED_DT           as UPDATED_DT_S66          ,        
									   WORKER_ID            as WORKER_ID_S66           ,           
									   REGION_NUM           as REGION_NUM_S66             ,
									   ROW_NUMBER () OVER(ORDER BY PIN_NUM)  AS ID                                                             
  FROM  '+@DB2DBName+'.T0066_WP_IN_COMP                      
 WHERE  PIN_NUM          = '+@PIN_NUM+' 
   AND  HISTORY_CD       = 0     
   AND  COMPONENT_END_DT = ''''9999-12-31''''
   AND 	DELETE_COMP_SW   = '''' ''''
   AND  COMPONENT_CD     NOT IN (''''EN'''',''''EO'''')
 ORDER BY COMPONENT_CD,               
          COMPONENT_BEG_DT,           
          COMPONENT_PHASE_CD          
   WITH UR;
  '')'

  PRINT @SelectStatement1



 Insert  @TempT0066 (PIN_NUM_S66           , 
					COMPONENT_CD_S66       ,
					COMPONENT_BEG_DT_S66   ,  
					COMPONENT_PHASE_CD_S66 ,
					HISTORY_SEQ_NUM_S66    ,  
					COMP_ANT_END_DT_S66    ,  
					COMPONENT_CMP_CD_S66   , 
					COMPONENT_END_DT_S66   , 
					DELETE_COMP_SW_S66     ,  
					EMP_ACT_PRV_ID_S66     ,
					FUNDING_SOURCE_NAM_S66 ,
					JOB_CD_S66             ,
					NON_APPROVAL_CD_S66    ,
					OFFICE_NUM_S66         , 
					PROVIDER_ID_S66        ,  
					SCHEDULED_HRS_S66      , 
					SITE_CD_S66            ,       
					STAFF_ID_S66           ,      
					COMPONENT_TS_S66       ,  
					FRQ_DAYS_PER_MM_S66    ,      
					DLY_SCHD_HRS_S66       ,    
					MRF_REQ_SW_S66         ,   
					W2_HRS_REDUCE_SW_S66   ,  
					HISTORY_CD_S66         ,     
					UPDATED_DT_S66         ,        
					WORKER_ID_S66          ,           
					REGION_NUM_S66         ,
					ID )
exec (@SelectStatement1)

select * from @TempT0066


DECLARE @MAXID INT = (select MAX(ID) from @TempT0066)

PRINT @MAXID

-----------------------------------------------------------------------------------------------------------------------

IF @MAXID >= 1
 
BEGIN 
  set @Updatestatement1 = ' UPDATE PWS639TC.T0066_WP_IN_COMP 
                         SET  HISTORY_CD = 9
                       WHERE  PIN_NUM = '+@PIN_NUM+' 
				   		 AND  HISTORY_CD       = 0     
                         AND  COMPONENT_END_DT = ''9999-12-31''
                         AND  DELETE_COMP_SW   = '' ''
                         AND  COMPONENT_CD     NOT IN (''EN'',''EO'')
                         ';      
PRINT @Updatestatement1                                        
  exec (@Updatestatement1) at NETWINFO_D00S_DB2

 DECLARE @intFlag INT
SET @intFlag = 1
WHILE (@intFlag <=@MAXID)
 
 BEGIN
    PRINT @intFlag
   
    
DECLARE @PIN_NUM_66            VARCHAR(10) = CONVERT(varchar(10),(select PIN_NUM_S66 from @TempT0066 where ID = @intFlag)) ;        
DECLARE @COMPONENT_CD_66       VARCHAR(02) = CONVERT(varchar(02),(select COMPONENT_CD_S66 from @TempT0066 where ID = @intFlag)) ;        
DECLARE @COMPONENT_BEG_DT_66   VARCHAR(10) = CONVERT(varchar(10),(select COMPONENT_BEG_DT_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @COMPONENT_BEG_DT_REOPEN   VARCHAR(10) = CONVERT(varchar(10),(@CurrentDate)) ;
DECLARE @COMPONENT_PHASE_CD_66 VARCHAR(01) = CONVERT(varchar(01),(select COMPONENT_PHASE_CD_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @HISTORY_SEQ_NUM_66    VARCHAR(04) = CONVERT(varchar(04),(select HISTORY_SEQ_NUM_S66 + 1 from @TempT0066 where ID = @intFlag)) ;
DECLARE @HISTORY_SEQ_NUM_REOPEN    VARCHAR(04) = CONVERT(varchar(04),(select HISTORY_SEQ_NUM_S66 + 2 from @TempT0066 where ID = @intFlag)) ;
DECLARE @COMP_ANT_END_DT_66    VARCHAR(10) = CONVERT(varchar(10),(select COMP_ANT_END_DT_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @COMPONENT_CMP_CD_66   VARCHAR(01) = 'R'
DECLARE @COMPONENT_CMP_CD_REOPEN VARCHAR(01) = ' '
DECLARE @COMPONENT_END_DT_66   VARCHAR(10) = CONVERT(varchar(10),(@PreviousDate)) ; --transfer dt -1 day
DECLARE @COMPONENT_END_DT_REOPEN   VARCHAR(10) =  '9999-12-31' ;
DECLARE @DELETE_COMP_SW_66     VARCHAR(01) = CONVERT(varchar(01),(select DELETE_COMP_SW_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @EMP_ACT_PRV_ID_66     VARCHAR(10) = CONVERT(varchar(10),(select EMP_ACT_PRV_ID_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @FUNDING_SOURCE_NAM_66 VARCHAR(06) = CONVERT(varchar(06),(select FUNDING_SOURCE_NAM_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @JOB_CD_66             VARCHAR(03) = CONVERT(varchar(03),(select JOB_CD_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @NON_APPROVAL_CD_66    VARCHAR(02) = CONVERT(varchar(02),(select NON_APPROVAL_CD_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @OFFICE_NUM_66         VARCHAR(04) = CONVERT(varchar(04),(select OFFICE_NUM_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @PROVIDER_ID_66        VARCHAR(04) = CONVERT(varchar(04),(select PROVIDER_ID_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @SCHEDULED_HRS_66      VARCHAR(04) = CONVERT(varchar(04),(select SCHEDULED_HRS_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @SITE_CD_66            VARCHAR(04) = CONVERT(varchar(04),(select SITE_CD_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @STAFF_ID_66           VARCHAR(06) = CONVERT(varchar(06),(select STAFF_ID_S66 from @TempT0066 where ID = @intFlag)) ;
--DECLARE @COMPONENT_TS_66       VARCHAR(26) =   ;
DECLARE @FRQ_DAYS_PER_MM_66    VARCHAR(04) = CONVERT(varchar(04),(select FRQ_DAYS_PER_MM_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @DLY_SCHD_HRS_66       VARCHAR(04) = CONVERT(varchar(04),(select DLY_SCHD_HRS_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @MRF_REQ_SW_66         VARCHAR(01) = CONVERT(varchar(01),(select MRF_REQ_SW_S66   from @TempT0066 where ID = @intFlag)) ;
DECLARE @W2_HRS_REDUCE_SW_66   VARCHAR(01) = CONVERT(varchar(01),(select W2_HRS_REDUCE_SW_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @HISTORY_CD_66         VARCHAR(04) = 0  ;
DECLARE @UPDATED_DT_66         VARCHAR(10) = CONVERT(varchar(10),(@CurrentDate)) ; -- should be transfer dt
DECLARE @WORKER_ID_66          VARCHAR(06) = CONVERT(varchar(06),(select WORKER_ID_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @REGION_NUM_66         VARCHAR(04) = CONVERT(varchar(04),(select REGION_NUM_S66 from @TempT0066 where ID = @intFlag)) ;


--DECLARE @OFFICE_NUM_66         VARCHAR(04) = CONVERT(varchar(4),@OfficeNumber ) ;



set @statement1 = ' INSERT INTO PWS639TC.T0066_WP_IN_COMP  ( PIN_NUM , COMPONENT_CD , COMPONENT_BEG_DT , COMPONENT_PHASE_CD ,   
															HISTORY_SEQ_NUM , COMP_ANT_END_DT , COMPONENT_CMP_CD ,             
															COMPONENT_END_DT , DELETE_COMP_SW , EMP_ACT_PRV_ID ,               
															FUNDING_SOURCE_NAM , JOB_CD , NON_APPROVAL_CD , OFFICE_NUM ,       
															PROVIDER_ID , SCHEDULED_HRS , SITE_CD , STAFF_ID , 
															FRQ_DAYS_PER_MM , DLY_SCHD_HRS , MRF_REQ_SW , W2_HRS_REDUCE_SW ,   
															HISTORY_CD , UPDATED_DT , WORKER_ID , REGION_NUM    )                                  
                         VALUES ('+@PIN_NUM_66+', '''+@COMPONENT_CD_66+''' , '''+@COMPONENT_BEG_DT_66+''','''+@COMPONENT_PHASE_CD_66+''' ,
						        '+@HISTORY_SEQ_NUM_66+' ,  '''+@COMP_ANT_END_DT_66+''' ,  '''+@COMPONENT_CMP_CD_66+''' ,             
															 '''+@COMPONENT_END_DT_66+''' ,  '''+@DELETE_COMP_SW_66+'''  ,  '+@EMP_ACT_PRV_ID_66+' ,               
															 '''+@FUNDING_SOURCE_NAM_66+''' ,  '''+@JOB_CD_66+''' ,  '''+@NON_APPROVAL_CD_66+''' ,  '+@OFFICE_NUM_66+' ,       
															 '+@PROVIDER_ID_66+' ,  '+@SCHEDULED_HRS_66+' ,  '''+@SITE_CD_66+''' ,  '''+@STAFF_ID_66+''' ,  
															 '+@FRQ_DAYS_PER_MM_66+' ,  '+@DLY_SCHD_HRS_66+' ,  '''+@MRF_REQ_SW_66+''' ,  '''+@W2_HRS_REDUCE_SW_66+''' ,   
															 '+@HISTORY_CD_66+' ,  '''+@UPDATED_DT_66+''' ,  '''+@WORKER_ID_66+''' ,  '+@REGION_NUM_66+' ) '



 PRINT @statement1
  exec (@statement1) at NETWINFO_D00S_DB2

 set @statement2 = ' INSERT INTO PWS639TC.T0066_WP_IN_COMP  ( PIN_NUM , COMPONENT_CD , COMPONENT_BEG_DT , COMPONENT_PHASE_CD ,   
															HISTORY_SEQ_NUM , COMP_ANT_END_DT , COMPONENT_CMP_CD ,             
															COMPONENT_END_DT , DELETE_COMP_SW , EMP_ACT_PRV_ID ,               
															FUNDING_SOURCE_NAM , JOB_CD , NON_APPROVAL_CD , OFFICE_NUM ,       
															PROVIDER_ID , SCHEDULED_HRS , SITE_CD , STAFF_ID , 
															FRQ_DAYS_PER_MM , DLY_SCHD_HRS , MRF_REQ_SW , W2_HRS_REDUCE_SW ,   
															HISTORY_CD , UPDATED_DT , WORKER_ID , REGION_NUM    )                                  
                         VALUES ('+@PIN_NUM_66+', '''+@COMPONENT_CD_66+''' , '''+@COMPONENT_BEG_DT_REOPEN+''','''+@COMPONENT_PHASE_CD_66+''' ,
						        '+@HISTORY_SEQ_NUM_REOPEN+' ,  '''+@COMP_ANT_END_DT_66+''' ,  '''+@COMPONENT_CMP_CD_REOPEN+''' ,             
															 '''+@COMPONENT_END_DT_REOPEN+''' ,  '''+@DELETE_COMP_SW_66+'''  ,  '+@EMP_ACT_PRV_ID_66+' ,               
															 '''+@FUNDING_SOURCE_NAM_66+''' ,  '''+@JOB_CD_66+''' ,  '''+@NON_APPROVAL_CD_66+''' ,  '+@OFFICE_NUM_66+' ,       
															 '+@PROVIDER_ID_66+' ,  '+@SCHEDULED_HRS_66+' ,  '''+@SITE_CD_66+''' ,  '''+@STAFF_ID_66+''' ,  
															 '+@FRQ_DAYS_PER_MM_66+' ,  '+@DLY_SCHD_HRS_66+' ,  '''+@MRF_REQ_SW_66+''' ,  '''+@W2_HRS_REDUCE_SW_66+''' ,   
															 '+@HISTORY_CD_66+' ,  '''+@UPDATED_DT_66+''' ,  '''+@WORKER_ID_66+''' ,  '+@REGION_NUM_66+' ) '



 exec (@statement2) at NETWINFO_D00S_DB2
   
    SET @intFlag = @intFlag + 1
END


END

END

GO
/****** Object:  StoredProcedure [wwp].[SP_DB2_Transfer_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-10-08 | GH#3381           | CDO CHANGES FOR TRANSACTION DT IN TABLE T0121                                                     |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
-- |            |                   |                                                                                                   |==
-- ========================================================================================================================================
CREATE PROCEDURE [wwp].[SP_DB2_Transfer_Update]
@PinNumber DECIMAL(10,0),              
@EffectiveDate DATETIME ,    
@OutGoingCountyNumber SMALLINT ,
@OutGoingOfficeNumber SMALLINT ,
@IncomingCountyNumber SMALLINT ,
@IncomingOfficeNumber SMALLINT ,
@MFWorkerId   VARCHAR(06) ,
@MFUserId VARCHAR(06),
@ProgramCode  VARCHAR(03) ,
@SubProgramCode VARCHAR(01) ,
@RegistrationCode Varchar(01) ,
@SchemaName VARCHAR(20),
@FEPId VARCHAR(06) 

AS
BEGIN

	SET NOCOUNT ON;
	declare @CurrentDate as varchar(10) ;
	declare @PreviousDate as varchar(10) ;
    declare @statement1 as varchar(max);
	declare @statement2 as varchar(max);
	declare @statement3 as varchar(max);
	declare @statement4 as varchar(max);
	declare @statement5 as varchar(max);
	declare @statement6a as varchar(max);
	declare @statement6b as varchar(max);

	declare @deleteState1 as varchar(max);
	declare @deleteState2 as varchar(max);
	declare @deleteState3 as varchar(max);
	declare @deleteState4 as varchar(max);
	declare @deleteState5 as varchar(max);
	declare @SelectStatement1 as varchar(max);
	declare @SelectStatement2 as varchar(max);
	declare @UpdateStatement1 as varchar(max);
	declare @UpdateStatement2 as varchar(max);
	declare @InsertStatement1 as varchar(max);
	declare @InsertStatement2 as varchar(max);
	declare @DB2DBName as varchar(100) ;
    declare @LSDBName as varchar(100) ;
	set @CurrentDate = CAST(GETDATE() AS DATE);
	set @PreviousDate =   dateadd(day,-1, cast(getdate() as date))
	 

---
 SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

 SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ PRE-TRANSFER READ SQL TABLE
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @TEMPSPECIALINTIATIVE TABLE
(ParameterName VARCHAR(25) ,
 ParameterValue VARCHAR(100) 
 )
 ;

 INSERT @TEMPSPECIALINTIATIVE(ParameterName,ParameterValue)
   SELECT ParameterName,ParameterValue  from wwp.SpecialInitiative 
   where ParameterName in ('EPGoLive','EndActivityWriteBack')
;

SELECT * FROM @TEMPSPECIALINTIATIVE;

DECLARE @EPBeginWriteBack date = (select ParameterValue from @TEMPSPECIALINTIATIVE where  ParameterName = 'EPGoLive' ) ;
DECLARE @EPEndWriteBack date = (select ParameterValue from @TEMPSPECIALINTIATIVE where  ParameterName = 'EndActivityWriteBack' ) ;

PRINT @EPBeginWriteBack;
PRINT @EPEndWriteBack;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ INSERT INTO TRANSACTION TABLE
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @PIN_NUM            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
--- GH#3381--DECLARE @TRANSACTION_DT     VARCHAR(10) = CONVERT(date, @EffectiveDate)     ;    
DECLARE @TRANSACTION_DT     VARCHAR(10) = CONVERT(date, @CurrentDate)     ; 
DECLARE @TRANSACTION_CD     VARCHAR(04) = 939 ;    
DECLARE @TRANSACTION_NUM    VARCHAR(04) = 1 ;   
DECLARE @COUNTY_NUM         VARCHAR(04) = CONVERT(varchar(4), @OutGoingCountyNumber) ;  
DECLARE @EFFECTIVE_DT       VARCHAR(10) = CONVERT(date, @EffectiveDate)   ;    
DECLARE @OFFICE_NUM         VARCHAR(04) = CONVERT(varchar(4), @OutGoingOfficeNumber ) ;  
DECLARE @PROGRAM_CD         VARCHAR(3)  = 'WW'  ;  ---REVIST
DECLARE @PROVIDER_ID        VARCHAR(04) = 0000  ;  --REVISIT
DECLARE @REGISTRATION_CD    VARCHAR(1)  = @RegistrationCode ;
DECLARE @STAFF_ID           VARCHAR(6)  = @MFWorkerId ;  
DECLARE @STAFF_ID_121		VARCHAR(6)  = @MFUserId;
DECLARE @COMP_ACTION_CD     VARCHAR(1)  = ' '  ;  
DECLARE @COMPONENT_PHASE_CD VARCHAR(1)  = ' ';  
DECLARE @SUBPROGRAM_CD      VARCHAR(1) =  @SubProgramCode  ;
DECLARE @TRANSACTION_TS     VARCHAR(26) ;  
DECLARE @WDA_CD             VARCHAR(04)= 0 ;
DECLARE @CMP_RSN_CD         VARCHAR(2)  = ' ' ;   
DECLARE @RFA_NUM            VARCHAR(10) = 0 ;     
DECLARE @CMP_DT             VARCHAR(10) =     '9999-12-31'    ;     

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- NEED TO TREAT LEARNFARE AS W-2 IN OLD SYSTEM
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    IF @ProgramCode = 'LF'
	 BEGIN 
	  SET @ProgramCode = 'WW'
     END

---------------------------------------------------------------------------------------------------------------------------------------------

set @statement1 = ' INSERT INTO PWS639TC.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
                                                               EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
															   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
															   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
                         VALUES ('+@PIN_NUM+', '''+@TRANSACTION_DT+''' , '+@TRANSACTION_CD+','+@TRANSACTION_NUM+','+@COUNTY_NUM+' ,
						         '''+@EFFECTIVE_DT+''','+@OFFICE_NUM+','''+@PROGRAM_CD+''','+@PROVIDER_ID+','''+@REGISTRATION_CD+''', 
							     '''+@STAFF_ID_121+''' ,'''+@COMP_ACTION_CD+''','''+@COMPONENT_PHASE_CD+''','''+@SUBPROGRAM_CD+''',
								 '''+@WDA_CD+''' ,'''+@CMP_RSN_CD+''' ,'+@RFA_NUM+','''+@CMP_DT+''') '



 PRINT @statement1

 exec (@statement1) at NETWINFO_D00S_DB2


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- INSERT T0121 FOR INCOMING
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
DECLARE @PIN_NUM_D121            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;
--GH#3381--DECLARE @TRANSACTION_DT_D121     VARCHAR(10) =  CONVERT(date, @EffectiveDate)     ;    
DECLARE @TRANSACTION_DT_D121     VARCHAR(10) =  CONVERT(date, @CurrentDate)     ;    
DECLARE @TRANSACTION_CD_D121     VARCHAR(04) = 030 ;    
DECLARE @TRANSACTION_NUM_D121    VARCHAR(04) = 1 ;   
DECLARE @COUNTY_NUM_D121         VARCHAR(04) = CONVERT(varchar(4), @IncomingCountyNumber) ;  
DECLARE @EFFECTIVE_DT_D121       VARCHAR(10) = CONVERT(date, @EffectiveDate)     ;    
DECLARE @OFFICE_NUM_D121         VARCHAR(04) = CONVERT(varchar(4), @IncomingOfficeNumber ) ;  
DECLARE @PROGRAM_CD_D121         VARCHAR(3)  = 'WW'  ;  ---REVIST
DECLARE @PROVIDER_ID_D121        VARCHAR(04) = 0000  ;  --REVISIT
DECLARE @REGISTRATION_CD_D121    VARCHAR(1)  = @RegistrationCode ;
DECLARE @STAFF_ID_D121           VARCHAR(6)  = @MFWorkerId ;  
DECLARE @COMP_ACTION_CD_D121     VARCHAR(1)  = ' '  ;  
DECLARE @COMPONENT_PHASE_CD_D121 VARCHAR(1)  = ' ';  
DECLARE @SUBPROGRAM_CD_D121      VARCHAR(1) =  @SubProgramCode  ;
DECLARE @TRANSACTION_TS_D121     VARCHAR(26) ;  
DECLARE @WDA_CD_D121             VARCHAR(04)= 0 ;
DECLARE @CMP_RSN_CD_D121         VARCHAR(2)  = ' ' ;   
DECLARE @RFA_NUM_D121            VARCHAR(10) = 0 ;     
DECLARE @CMP_DT_D121             VARCHAR(10) =  '9999-12-31'    ;     






---------------------------------------------------------------------------------------------------------------------------------------------

set @statement3 = ' INSERT INTO PWS639TC.T0121_WP_IN_SRV_HI  ( PIN_NUM,  TRANSACTION_DT ,  TRANSACTION_CD , TRANSACTION_NUM , COUNTY_NUM ,
                                                               EFFECTIVE_DT , OFFICE_NUM , PROGRAM_CD , PROVIDER_ID ,REGISTRATION_CD ,
															   STAFF_ID , COMP_ACTION_CD , COMPONENT_PHASE_CD , SUBPROGRAM_CD,
															   WDA_CD , CMP_RSN_CD , RFA_NUM , CMP_DT )                                  
                         VALUES ('+@PIN_NUM_D121+', '''+@TRANSACTION_DT_D121+''' , '+@TRANSACTION_CD_D121+','+@TRANSACTION_NUM_D121+','+@COUNTY_NUM_D121+' ,
						         '''+@EFFECTIVE_DT_D121+''','+@OFFICE_NUM_D121+','''+@PROGRAM_CD_D121+''','+@PROVIDER_ID_D121+','''+@REGISTRATION_CD_D121+''', 
							     '''+@STAFF_ID_121+''' ,'''+@COMP_ACTION_CD_D121+''','''+@COMPONENT_PHASE_CD_D121+''','''+@SUBPROGRAM_CD_D121+''',
								 '''+@WDA_CD_D121+''' ,'''+@CMP_RSN_CD_D121+''' ,'+@RFA_NUM_D121+','''+@CMP_DT_D121+''') '



 PRINT @statement3

 exec (@statement3) at NETWINFO_D00S_DB2


 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- UPDATE T0018 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------   
 DECLARE @PIN_NUM_18            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        
 --DECLARE @IncomingCountyNumber_18          VARCHAR(4) = CONVERT(varchar(04),@IncomingCountyNumber) ;
 --DECLARE @IncomingOfficeNumber_18          VARCHAR(4) = CONVERT(varchar(04),@IncomingOfficeNumber) ;
 DECLARE @IncomingCountyNumber_18          VARCHAR(4) =  @IncomingCountyNumber ;
 DECLARE @IncomingOfficeNumber_18          VARCHAR(4) =  @IncomingOfficeNumber;


 print @IncomingOfficeNumber_18 + ' office'
 print @IncomingCountyNumber_18 + ' county'

  IF LTRIM(RTRIM(@ProgramCode)) = 'TJ'
	SET @statement2 = 'UPDATE PWS639TC.T0018_WP_INDV
					   SET CASE_MANAGER_ID = ''' + @MFWorkerId + ''',
						   COUNTY_NUM = ' + @IncomingCountyNumber_18 + ',
						   OFFICE_NUM = ' + @IncomingOfficeNumber_18 + '
                       WHERE PIN_NUM = '+@PIN_NUM_18+'';
  ELSE
  IF LTRIM(RTRIM(@ProgramCode)) = 'CF'
	  SET @statement2 = 'UPDATE PWS639TC.T0018_WP_INDV
						 SET CASE_MANAGER_ID = ''' + @MFWorkerId + ''', 
						  COUNTY_NUM = ' + @IncomingCountyNumber_18 + ',
						 OFFICE_NUM = ' + @IncomingOfficeNumber_18 + '
						 WHERE PIN_NUM = '+@PIN_NUM_18+'';      
 ELSE
	  SET @statement2 = 'UPDATE PWS639TC.T0018_WP_INDV
						 SET CASE_MANAGER_ID = ''' + @FEPId + ''', 
						  COUNTY_NUM = ' + @IncomingCountyNumber_18 + ',
						 OFFICE_NUM = ' + @IncomingOfficeNumber_18 + '
						 WHERE PIN_NUM = '+@PIN_NUM_18+'';            
 
 PRINT @statement2                                        
 EXEC (@statement2) AT NETWINFO_D00S_DB2


 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @EPINWWP BIT = 0; 
DECLARE @EPINMF BIT  = 0;

DECLARE @formatted_datetime char(23)
SET @formatted_datetime = CONVERT(char(23), GETDATE(), 121)

  
 print @formatted_datetime
 print @EPBeginWriteBack
 print @EPEndWriteBack

IF EXISTS (SELECT 1
             FROM wwp.EmployabilityPlan A ,
                  WWP.EmployabilityPlanActivityBridge B  ,
	              WWP.Activity C 
            WHERE A.ParticipantId = (select ID FROM WWP.PARTICIPANT WHERE PINNUMBER = @PinNumber )
			  AND A.IsDeleted = 0
			  AND A.CanSaveWithoutActivity = 0
		      AND (A.EndDate is null or A.EndDate = '9999-12-31')
	          AND B.EmployabilityPlanId = A.ID
			  AND C.ID = B.ActivityId 
			  AND ( C.EndDate IS NULL OR C.EndDate = '' )
            )
BEGIN

PRINT 'EP EXISTS IN WWP'




 IF @formatted_datetime > @EPBeginWriteBack 

  BEGIN

  IF   @formatted_datetime < @EPEndWriteBack 
    BEGIN 
     PRINT 'EP IS STILL IN WWP AND IS REQUIRED TO WRITEBACK DURING TRANSFER AND THESE INFO IS ALREADY PRESENT IN DB2, WILL CONTINUE AS NORMAL TRANSFER PROCESS'

     SET @EPINWWP = 1
   
   END 
    
	ELSE

     BEGIN
    
	   PRINT 'EP IS STILL IN WWP BUT NO LONGER REQUIRED TO WRITEBACK DURING TRANSFER' 

     END

  END

  ELSE

  BEGIN
  
  PRINT 'FORMATTED DATE IS LESS THAN EPBeginWriteBack'

  END

 END

ELSE

  BEGIN

  PRINT ' NO OPEN EP IN WWP, IF THE CURRENT DATE IS STILL LESS THAN EP END WRITE BACK DATE'

  IF @formatted_datetime < @EPEndWriteBack 

    BEGIN

     SET @EPINMF = 1

	 print @EPINMF

   END

END





IF @EPINMF = 1 OR @EPINWWP = 1

BEGIN

 print 'inside the t0066 logic'

 Declare @TempT0066 table
   (PIN_NUM_S66         DECIMAL (10,0) , 
    COMPONENT_CD_S66    CHAR (02),
    COMPONENT_BEG_DT_S66  DATE,
	COMPONENT_PHASE_CD_S66 CHAR(01),
	HISTORY_SEQ_NUM_S66    SMALLINT,
	COMP_ANT_END_DT_S66    DATE,
	COMPONENT_CMP_CD_S66   CHAR(01),
	COMPONENT_END_DT_S66   DATE   ,
	DELETE_COMP_SW_S66     CHAR(1)  , 
	EMP_ACT_PRV_ID_S66     INTEGER,
	FUNDING_SOURCE_NAM_S66 CHAR(6)   ,
	JOB_CD_S66             CHAR(3)  , 
	NON_APPROVAL_CD_S66    CHAR(2)  , 
	OFFICE_NUM_S66         SMALLINT  ,    
	PROVIDER_ID_S66        SMALLINT  ,    
	SCHEDULED_HRS_S66      SMALLINT  ,   
	SITE_CD_S66            CHAR(4)   ,       
	STAFF_ID_S66           CHAR(6)   ,       
	COMPONENT_TS_S66       VARCHAR(26) ,      
	FRQ_DAYS_PER_MM_S66    SMALLINT  ,		
	DLY_SCHD_HRS_S66       SMALLINT  ,    
	MRF_REQ_SW_S66         CHAR(1)   ,       
	W2_HRS_REDUCE_SW_S66   CHAR(1)   ,       
	HISTORY_CD_S66         SMALLINT, 
	UPDATED_DT_S66         DATE    ,      
	WORKER_ID_S66          CHAR(6)  ,        
	REGION_NUM_S66         SMALLINT  ,
	ID                     INT
 
)



--DECLARE @PIN_NUM            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;   


set @SelectStatement1 =   'select PIN_NUM_S66          , 
								COMPONENT_CD_S66       ,
								COMPONENT_BEG_DT_S66   ,  
								COMPONENT_PHASE_CD_S66 ,
								HISTORY_SEQ_NUM_S66    ,  
								COMP_ANT_END_DT_S66    ,  
								COMPONENT_CMP_CD_S66   , 
								COMPONENT_END_DT_S66   , 
								DELETE_COMP_SW_S66     ,  
								EMP_ACT_PRV_ID_S66     ,
								FUNDING_SOURCE_NAM_S66 ,
								JOB_CD_S66             ,
								NON_APPROVAL_CD_S66    ,
								OFFICE_NUM_S66         , 
								PROVIDER_ID_S66        ,  
								SCHEDULED_HRS_S66      , 
								SITE_CD_S66            ,       
								STAFF_ID_S66           ,      
								COMPONENT_TS_S66       ,  
								FRQ_DAYS_PER_MM_S66    ,    
								DLY_SCHD_HRS_S66       ,    
								MRF_REQ_SW_S66         ,   
								W2_HRS_REDUCE_SW_S66   ,  
								HISTORY_CD_S66         ,     
								UPDATED_DT_S66         ,        
								WORKER_ID_S66          ,           
								REGION_NUM_S66         ,
								ID    
FROM OPENQUERY('+@LSDBName+', ''SELECT PIN_NUM              as PIN_NUM_S66             , 
                                       COMPONENT_CD         as COMPONENT_CD_S66        ,
                                       COMPONENT_BEG_DT     as COMPONENT_BEG_DT_S66    ,  
									   COMPONENT_PHASE_CD   as COMPONENT_PHASE_CD_S66  ,
									   HISTORY_SEQ_NUM      as HISTORY_SEQ_NUM_S66     ,  
									   COMP_ANT_END_DT      as COMP_ANT_END_DT_S66     ,  
									   COMPONENT_CMP_CD     as COMPONENT_CMP_CD_S66    , 
									   COMPONENT_END_DT     as COMPONENT_END_DT_S66    , 
									   DELETE_COMP_SW       as DELETE_COMP_SW_S66      ,  
									   EMP_ACT_PRV_ID       as EMP_ACT_PRV_ID_S66      ,
									   FUNDING_SOURCE_NAM   as FUNDING_SOURCE_NAM_S66  ,
									   JOB_CD               as JOB_CD_S66              ,
									   NON_APPROVAL_CD      as NON_APPROVAL_CD_S66     ,
									   OFFICE_NUM           as OFFICE_NUM_S66          , 
									   PROVIDER_ID          as PROVIDER_ID_S66         ,  
									   SCHEDULED_HRS        as SCHEDULED_HRS_S66       , 
									   SITE_CD              as SITE_CD_S66             ,        
									   STAFF_ID             as STAFF_ID_S66            ,      
									   COMPONENT_TS         as COMPONENT_TS_S66        ,  
									   FRQ_DAYS_PER_MM      as FRQ_DAYS_PER_MM_S66     ,    
									   DLY_SCHD_HRS         as DLY_SCHD_HRS_S66        ,    
									   MRF_REQ_SW           as MRF_REQ_SW_S66          ,   
									   W2_HRS_REDUCE_SW     as W2_HRS_REDUCE_SW_S66    ,  
									   HISTORY_CD           as HISTORY_CD_S66          ,     
									   UPDATED_DT           as UPDATED_DT_S66          ,        
									   WORKER_ID            as WORKER_ID_S66           ,           
									   REGION_NUM           as REGION_NUM_S66             ,
									   ROW_NUMBER () OVER(ORDER BY PIN_NUM)  AS ID                                                             
  FROM  '+@DB2DBName+'.T0066_WP_IN_COMP                      
 WHERE  PIN_NUM          = '+@PIN_NUM+' 
   AND  HISTORY_CD       = 0     
   AND  COMPONENT_END_DT = ''''9999-12-31''''
   AND 	DELETE_COMP_SW   = '''' ''''
   AND  COMPONENT_CD     NOT IN (''''EN'''',''''EO'''')
 ORDER BY COMPONENT_CD,               
          COMPONENT_BEG_DT,           
          COMPONENT_PHASE_CD          
   WITH UR;
  '')'

  PRINT @SelectStatement1



 Insert  @TempT0066 (PIN_NUM_S66           , 
					COMPONENT_CD_S66       ,
					COMPONENT_BEG_DT_S66   ,  
					COMPONENT_PHASE_CD_S66 ,
					HISTORY_SEQ_NUM_S66    ,  
					COMP_ANT_END_DT_S66    ,  
					COMPONENT_CMP_CD_S66   , 
					COMPONENT_END_DT_S66   , 
					DELETE_COMP_SW_S66     ,  
					EMP_ACT_PRV_ID_S66     ,
					FUNDING_SOURCE_NAM_S66 ,
					JOB_CD_S66             ,
					NON_APPROVAL_CD_S66    ,
					OFFICE_NUM_S66         , 
					PROVIDER_ID_S66        ,  
					SCHEDULED_HRS_S66      , 
					SITE_CD_S66            ,       
					STAFF_ID_S66           ,      
					COMPONENT_TS_S66       ,  
					FRQ_DAYS_PER_MM_S66    ,      
					DLY_SCHD_HRS_S66       ,    
					MRF_REQ_SW_S66         ,   
					W2_HRS_REDUCE_SW_S66   ,  
					HISTORY_CD_S66         ,     
					UPDATED_DT_S66         ,        
					WORKER_ID_S66          ,           
					REGION_NUM_S66         ,
					ID )
exec (@SelectStatement1)

DECLARE @MAXID INT = (select MAX(ID) from @TempT0066)

PRINT @MAXID


 IF @MAXID >= 1
 
BEGIN 
  set @Updatestatement1 = ' UPDATE PWS639TC.T0066_WP_IN_COMP 
                         SET  HISTORY_CD = 9
                       WHERE  PIN_NUM = '+@PIN_NUM+' 
				   		 AND  HISTORY_CD       = 0     
                         AND  COMPONENT_END_DT = ''9999-12-31''
                         AND  DELETE_COMP_SW   = '' ''
                         AND  COMPONENT_CD     NOT IN (''EN'',''EO'')
                         ';      
PRINT @Updatestatement1                                        
  exec (@Updatestatement1) at NETWINFO_D00S_DB2

 DECLARE @intFlag INT
SET @intFlag = 1
WHILE (@intFlag <=@MAXID)
 
 BEGIN
    PRINT @intFlag
   
    
DECLARE @PIN_NUM_66            VARCHAR(10) = CONVERT(varchar(10),(select PIN_NUM_S66 from @TempT0066 where ID = @intFlag)) ;        
DECLARE @COMPONENT_CD_66       VARCHAR(02) = CONVERT(varchar(02),(select COMPONENT_CD_S66 from @TempT0066 where ID = @intFlag)) ;        
DECLARE @COMPONENT_BEG_DT_66   VARCHAR(10) = CONVERT(varchar(10),(select COMPONENT_BEG_DT_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @COMPONENT_BEG_DT_REOPEN   VARCHAR(10) = CONVERT(varchar(10),(@CurrentDate)) ;
DECLARE @COMPONENT_PHASE_CD_66 VARCHAR(01) = CONVERT(varchar(01),(select COMPONENT_PHASE_CD_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @HISTORY_SEQ_NUM_66    VARCHAR(04) = CONVERT(varchar(04),(select HISTORY_SEQ_NUM_S66 + 1 from @TempT0066 where ID = @intFlag)) ;
DECLARE @HISTORY_SEQ_NUM_REOPEN    VARCHAR(04) = CONVERT(varchar(04),(select HISTORY_SEQ_NUM_S66 + 2 from @TempT0066 where ID = @intFlag)) ;
DECLARE @COMP_ANT_END_DT_66    VARCHAR(10) = CONVERT(varchar(10),(select COMP_ANT_END_DT_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @COMPONENT_CMP_CD_66   VARCHAR(01) = 'R'
DECLARE @COMPONENT_CMP_CD_REOPEN VARCHAR(01) = ' '
DECLARE @COMPONENT_END_DT_66   VARCHAR(10) = CONVERT(varchar(10),(@PreviousDate)) ; --transfer dt -1 day
DECLARE @COMPONENT_END_DT_REOPEN   VARCHAR(10) =  '9999-12-31' ;
DECLARE @DELETE_COMP_SW_66     VARCHAR(01) = CONVERT(varchar(01),(select DELETE_COMP_SW_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @EMP_ACT_PRV_ID_66     VARCHAR(10) = CONVERT(varchar(10),(select EMP_ACT_PRV_ID_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @FUNDING_SOURCE_NAM_66 VARCHAR(06) = CONVERT(varchar(06),(select FUNDING_SOURCE_NAM_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @JOB_CD_66             VARCHAR(03) = CONVERT(varchar(03),(select JOB_CD_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @NON_APPROVAL_CD_66    VARCHAR(02) = CONVERT(varchar(02),(select NON_APPROVAL_CD_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @OFFICE_NUM_66         VARCHAR(04) = CONVERT(varchar(04),(select OFFICE_NUM_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @PROVIDER_ID_66        VARCHAR(04) = CONVERT(varchar(04),(select PROVIDER_ID_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @SCHEDULED_HRS_66      VARCHAR(04) = CONVERT(varchar(04),(select SCHEDULED_HRS_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @SITE_CD_66            VARCHAR(04) = CONVERT(varchar(04),(select SITE_CD_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @STAFF_ID_66           VARCHAR(06) = CONVERT(varchar(06),(select STAFF_ID_S66 from @TempT0066 where ID = @intFlag)) ;
--DECLARE @COMPONENT_TS_66       VARCHAR(26) =   ;
DECLARE @FRQ_DAYS_PER_MM_66    VARCHAR(04) = CONVERT(varchar(04),(select FRQ_DAYS_PER_MM_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @DLY_SCHD_HRS_66       VARCHAR(04) = CONVERT(varchar(04),(select DLY_SCHD_HRS_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @MRF_REQ_SW_66         VARCHAR(01) = CONVERT(varchar(01),(select MRF_REQ_SW_S66   from @TempT0066 where ID = @intFlag)) ;
DECLARE @W2_HRS_REDUCE_SW_66   VARCHAR(01) = CONVERT(varchar(01),(select W2_HRS_REDUCE_SW_S66 from @TempT0066 where ID = @intFlag)) ;
DECLARE @HISTORY_CD_66         VARCHAR(04) = 0  ;
DECLARE @UPDATED_DT_66         VARCHAR(10) = CONVERT(varchar(10),(@CurrentDate)) ; -- should be transfer dt
DECLARE @WORKER_ID_66          VARCHAR(06) = CONVERT(varchar(06),(select WORKER_ID_S66  from @TempT0066 where ID = @intFlag)) ;
DECLARE @REGION_NUM_66         VARCHAR(04) = CONVERT(varchar(04),(select REGION_NUM_S66 from @TempT0066 where ID = @intFlag)) ;


--DECLARE @OFFICE_NUM_66         VARCHAR(04) = CONVERT(varchar(4),@OfficeNumber ) ;



set @statement1 = ' INSERT INTO PWS639TC.T0066_WP_IN_COMP  ( PIN_NUM , COMPONENT_CD , COMPONENT_BEG_DT , COMPONENT_PHASE_CD ,   
															HISTORY_SEQ_NUM , COMP_ANT_END_DT , COMPONENT_CMP_CD ,             
															COMPONENT_END_DT , DELETE_COMP_SW , EMP_ACT_PRV_ID ,               
															FUNDING_SOURCE_NAM , JOB_CD , NON_APPROVAL_CD , OFFICE_NUM ,       
															PROVIDER_ID , SCHEDULED_HRS , SITE_CD , STAFF_ID , 
															FRQ_DAYS_PER_MM , DLY_SCHD_HRS , MRF_REQ_SW , W2_HRS_REDUCE_SW ,   
															HISTORY_CD , UPDATED_DT , WORKER_ID , REGION_NUM    )                                  
                         VALUES ('+@PIN_NUM_66+', '''+@COMPONENT_CD_66+''' , '''+@COMPONENT_BEG_DT_66+''','''+@COMPONENT_PHASE_CD_66+''' ,
						        '+@HISTORY_SEQ_NUM_66+' ,  '''+@COMP_ANT_END_DT_66+''' ,  '''+@COMPONENT_CMP_CD_66+''' ,             
															 '''+@COMPONENT_END_DT_66+''' ,  '''+@DELETE_COMP_SW_66+'''  ,  '+@EMP_ACT_PRV_ID_66+' ,               
															 '''+@FUNDING_SOURCE_NAM_66+''' ,  '''+@JOB_CD_66+''' ,  '''+@NON_APPROVAL_CD_66+''' ,  '+@OFFICE_NUM_66+' ,       
															 '+@PROVIDER_ID_66+' ,  '+@SCHEDULED_HRS_66+' ,  '''+@SITE_CD_66+''' ,  '''+@STAFF_ID_66+''' ,  
															 '+@FRQ_DAYS_PER_MM_66+' ,  '+@DLY_SCHD_HRS_66+' ,  '''+@MRF_REQ_SW_66+''' ,  '''+@W2_HRS_REDUCE_SW_66+''' ,   
															 '+@HISTORY_CD_66+' ,  '''+@UPDATED_DT_66+''' ,  '''+@WORKER_ID_66+''' ,  '+@REGION_NUM_66+' ) '



 PRINT @statement1
  exec (@statement1) at NETWINFO_D00S_DB2

 set @statement2 = ' INSERT INTO PWS639TC.T0066_WP_IN_COMP  ( PIN_NUM , COMPONENT_CD , COMPONENT_BEG_DT , COMPONENT_PHASE_CD ,   
															HISTORY_SEQ_NUM , COMP_ANT_END_DT , COMPONENT_CMP_CD ,             
															COMPONENT_END_DT , DELETE_COMP_SW , EMP_ACT_PRV_ID ,               
															FUNDING_SOURCE_NAM , JOB_CD , NON_APPROVAL_CD , OFFICE_NUM ,       
															PROVIDER_ID , SCHEDULED_HRS , SITE_CD , STAFF_ID , 
															FRQ_DAYS_PER_MM , DLY_SCHD_HRS , MRF_REQ_SW , W2_HRS_REDUCE_SW ,   
															HISTORY_CD , UPDATED_DT , WORKER_ID , REGION_NUM    )                                  
                         VALUES ('+@PIN_NUM_66+', '''+@COMPONENT_CD_66+''' , '''+@COMPONENT_BEG_DT_REOPEN+''','''+@COMPONENT_PHASE_CD_66+''' ,
						        '+@HISTORY_SEQ_NUM_REOPEN+' ,  '''+@COMP_ANT_END_DT_66+''' ,  '''+@COMPONENT_CMP_CD_REOPEN+''' ,             
															 '''+@COMPONENT_END_DT_REOPEN+''' ,  '''+@DELETE_COMP_SW_66+'''  ,  '+@EMP_ACT_PRV_ID_66+' ,               
															 '''+@FUNDING_SOURCE_NAM_66+''' ,  '''+@JOB_CD_66+''' ,  '''+@NON_APPROVAL_CD_66+''' ,  '+@IncomingOfficeNumber_18+' ,       
															 '+@PROVIDER_ID_66+' ,  '+@SCHEDULED_HRS_66+' ,  '''+@SITE_CD_66+''' ,  '''+@STAFF_ID_66+''' ,  
															 '+@FRQ_DAYS_PER_MM_66+' ,  '+@DLY_SCHD_HRS_66+' ,  '''+@MRF_REQ_SW_66+''' ,  '''+@W2_HRS_REDUCE_SW_66+''' ,   
															 '+@HISTORY_CD_66+' ,  '''+@UPDATED_DT_66+''' ,  '''+@WORKER_ID_66+''' ,  '+@REGION_NUM_66+' ) '



 exec (@statement2) at NETWINFO_D00S_DB2
   
    SET @intFlag = @intFlag + 1
END



END

END


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------ DELETE T0163
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


			DECLARE @PIN_NUM_163            VARCHAR(10) =  CONVERT(varchar(10), @PinNumber) ;        

			PRINT @PIN_NUM_163

			 DECLARE @Temp1 table
			 (PendingPinNumber		DECIMAL(10,0) null,
			  PendingOfficeNumber	SMALLINT NULL,
			  PendingRefferalDate	DATE NULL,
			  PendingCaseNumber		DECIMAL(10,0) NULL,
			  PendingCountyNumber	SMALLINT NULL,
			  PendingProgramCode	VARCHAR(03) NULL,
			  PendingSubProgramCode VARCHAR(01) NULL,
			  PendingWPGeoArea		VARCHAR(02) NULL)

			set @statement5 =   'select PendingPinNumber,
										  PendingOfficeNumber,
										  PendingRefferalDate,      
										  PendingCaseNumber,
										  PendingCountyNumber,
										  PendingProgramCode  , 
										  PendingSubProgramCode,       
										  PendingWPGeoArea    
			FROM OPENQUERY('+@LSDBName+', ''SELECT PIN_NUM			as PendingPinNumber ,
												   OFFICE_NUM		as PendingOfficeNumber,
												   WP_REFERRAL_DT	as PendingRefferalDate,      
												   CASE_NUM			as PendingCaseNumber,
												   COUNTY_NUM		as PendingCountyNumber,
												   PROGRAM_CD		as PendingProgramCode  , 
												   SUBPROGRAM_CD	as PendingSubProgramCode,       
												   WP_GEO_AREA		as PendingWPGeoArea               
			  FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR                      
			 WHERE  PIN_NUM  = '+@PIN_NUM_163+'     
			   WITH UR;
			  '')'



			insert @Temp1(PendingPinNumber,
						  PendingOfficeNumber,
						  PendingRefferalDate,      
						  PendingCaseNumber,
						  PendingCountyNumber,
						  PendingProgramCode  , 
						  PendingSubProgramCode,       
						  PendingWPGeoArea    ) 
			exec (@statement5)




			IF EXISTS(SELECT PendingPinNumber   FROM @Temp1 where PendingPinNumber = @PIN_NUM_163)


				 Begin


				  PRINT 'ALREADY PENDING REFERRAL EXISTS'

				

				  PRINT 'UPDATE OF T0018'


				 set @deleteState5 = ' DELETE      
										 FROM '+@DB2DBName+'.T0163_WP_PNDNG_RFR           
									   WHERE PIN_NUM = '+@PIN_NUM_163+' '



				 PRINT @deleteState5

				 exec (@deleteState5) at NETWINFO_D00S_DB2

				 PRINT 'DELETE OF T0163'

       END


END

GO
/****** Object:  StoredProcedure [wwp].[SP_DeleteContact]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_DeleteContact] ( @ContactId INT, @ModifiedBy VARCHAR(50) )
AS
    BEGIN

	declare @returnValue int 

	
     IF EXISTS ( SELECT  *
                    FROM    wwp.Contact
                    WHERE   Id = @ContactId
					  and    IsDeleted = 0 )

       Begin

        UPDATE  wwp.Contact
        SET     IsDeleted = 1,
		ModifiedBy = @ModifiedBy,
		ModifiedDate = GETDATE()
        WHERE   Id = @ContactId


---- SQL TO GET ALL FOREIGN KEY REFERENCE ON CONTACT TABLE


--SELECT CONSTRAINT_NAME = name, 
--       FOREIGN_SCHEMA = OBJECT_SCHEMA_NAME(parent_object_id), 
--       FOREIGN_TABLE = OBJECT_NAME(parent_object_id), 
--       REFERENCED_SCHEMA = OBJECT_SCHEMA_NAME(referenced_object_id), 
--       REFERENCED_TABLE = OBJECT_NAME(referenced_object_id) 
--FROM sys.foreign_keys
--WHERE OBJECT_NAME(referenced_object_id) = 'CONTACT';
--GO

update wwp.EmploymentInformation 
    set ContactId = Null
  where ContactId = @ContactId 

UPDATE  WWP.InvolvedWorkProgram
  set ContactId = Null
  where ContactId = @ContactId 


 UPDATE  FamilyBarriersSection
    set SsiApplicationContactId = Null
  where SsiApplicationContactId = @ContactId 

 UPDATE  LegalIssuesSection
   set CommunitySupervisonContactId = Null
 WHERE CommunitySupervisonContactId = @ContactId 

 Set @returnValue = 0

 select @returnValue as Return_Value,  ROW_NUMBER () OVER(ORDER BY @returnValue)  AS ID

 End
 Else
 Begin

 set @returnValue = 1

  select @returnValue as Return_Value,  ROW_NUMBER () OVER(ORDER BY @returnValue)  AS ID
 
 End

    END;
	
	 
GO
/****** Object:  StoredProcedure [wwp].[SP_FSETStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_FSETStatus]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @statement1 = 'select  *
FROM OPENQUERY('+@LSDBName+', ''
 SELECT B.PIN_NUM as PARTICIPANT,case B.ENRL_STAT_CD when ''''E'''' then ''''Enrolled''''
                                                     when ''''R'''' then ''''Referred''''
  when ''''D'''' then ''''Disenrolled''''
  when ''''W'''' then ''''Withdrawn''''
  end as CURRENT_STATUS_CD, B.ENRL_DT as ENROLLMENT_DATE, B.DENRL_DT as DISENROLLMENT_DATE,  B.DENRL_RSN_CD AS DISENROLLMENT_REASON_CD, ROW_NUMBER () OVER(ORDER BY B.PIN_NUM)  AS ID                                      
  FROM  '+@DB2DBName+'.T2394_FSET_REF B                                                                
 WHERE  B.PIN_NUM  = '+@PinNumber+ '                                                                 
   AND  B.HISTORY_CD =  0                                                                   
   AND  B.HISTORY_SEQ_NUM = ( SELECT MAX(BB.HISTORY_SEQ_NUM)        
                                FROM '+@DB2DBName+'.T2394_FSET_REF BB     
                               WHERE BB.PIN_NUM = B.PIN_NUM         
                                 AND BB.HISTORY_CD = B.HISTORY_CD   
					    		 AND BB.ENRL_STAT_CD = B.ENRL_STAT_CD
)                                        
                    WITH UR ; '')                                  

  '

exec (@statement1) 


print @statement1


end
	
	 
	                                               
  

GO
/****** Object:  StoredProcedure [wwp].[SP_GetCARESCaseNumber]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_GetCARESCaseNumber]
(

@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)

) as
begin
set fmtonly off
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
declare @Case as varchar(10) ;
 
---
    SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

   SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
								END
	--Change the logic to get @CaseNumber

        
declare @CaseNumber table (CaseNumber decimal(10,0))

set @statement1 = 'select  CASE_NUM as CaseNumber
FROM OPENQUERY('+@LSDBName+', ''SELECT  CASE_NUM                                       
  FROM  '+@DB2DBName+'.T0018_WP_INDV                       
 WHERE  PIN_NUM  = '+@PinNumber+ '
  '')'

insert into @CaseNumber
exec (@statement1) 


print @statement1

select * from @CaseNumber
end
	
	 
	                                               
         


GO
/****** Object:  StoredProcedure [wwp].[SP_LearnFareStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_LearnFareStatus]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @statement1 = 'select *
FROM OPENQUERY('+@LSDBName+', '' SELECT DISTINCT A.SOURCE_PIN_NUM , B.FIRST_NAM,B.MIDDLE_INITIAL_NAM,B.LAST_NAM ,
        B.DOB_DT , A.REL_CD ,   CASE C.INDV_LF_STS_CD WHEN ''''WCA'''' THEN ''''CARING FOR AN INFANT''''
                              WHEN ''''WCC'''' THEN ''''NO CHILD CARE''''
                              WHEN ''''WDR'''' THEN ''''DROPOUT''''
                              WHEN ''''WEX'''' THEN ''''EXCUSED FROM SCHOOL''''
                              WHEN ''''WHT'''' THEN ''''HABITUALLY TRUANT''''
                              WHEN ''''WIL'''' THEN ''''ILLNESS''''
                              WHEN ''''WIN'''' THEN ''''INCARCERATED''''
                              WHEN ''''WMP'''' THEN ''''MINOR PARENT''''
                              WHEN ''''WNE'''' THEN ''''NOT ENROLLED''''
                              WHEN ''''WNV'''' THEN ''''SCHOOL ENROLLMENT NOT VERIFIED''''
                              WHEN ''''WPA'''' THEN ''''PHYSICIAN APPROVAL''''
                              WHEN ''''WPX'''' THEN ''''PENDING EXPULSION''''
                              WHEN ''''WRT'''' THEN ''''RETURNING DROPOUT''''
                              WHEN ''''WST'''' THEN ''''STUDENT IN GOOD STANDING''''
                              WHEN ''''WTR'''' THEN ''''NO TRANSPORTATION TO CHILD CARE''''
                              WHEN ''''WVO'''' THEN ''''VOLUNTARY''''
                              WHEN ''''WWL'''' THEN ''''ON WAITING LIST/CHILD -AT-RISK PROGRAM''''
                              WHEN ''''WXP'''' THEN ''''EXPELLED''''
                              WHEN ''''WZG'''' THEN ''''CHILD NOT IN W-2 GROUP''''
                              END AS LEARN_FARE_STATUS   ,                     
         ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) AS AGE
		 ,ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM)  AS ID   
FROM 	 '+@DB2DBName+'.T0116_CS_IN_HH_REL A,                                
         '+@DB2DBName+'.T0011_INDIVIDUAL B, 
         '+@DB2DBName+'.T0486_IN_LF_SANC C      
 WHERE  A.REFERENCE_PIN_NUM = '+@PinNumber+ ' 
   AND  A.HISTORY_CD         = 0                                      
   AND  A.DELETE_REASON_CD  = '''' ''''  
   AND  (A.REL_CD = ''''SON'''' OR A.REL_CD =''''DAU'''' OR A.REL_CD =''''STD'''' OR A.REL_CD =''''STS'''' OR A.REL_CD =''''NOT'''' OR A.REL_CD =''''NQR'''' OR A.REL_CD =''''OQR'''')
   AND  B.PIN_NUM = A.SOURCE_PIN_NUM
   AND  ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) >= 6
   AND  ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) <= 17  
   AND  C.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.HISTORY_CD = 0
   AND  C.DELETE_REASON_CD = '''' ''''
   AND  C.EFFECTIVE_MM  = (SELECT MAX (CC.EFFECTIVE_MM)
                                  FROM '+@DB2DBName+'.T0486_IN_LF_SANC CC
                              WHERE CC.CASE_NUM = C.CASE_NUM
                                AND CC.PIN_NUM  = C.PIN_NUM
                                AND CC.HISTORY_CD = C.HISTORY_CD
                                AND CC.DELETE_REASON_CD = C.DELETE_REASON_CD
                           )
   AND C.HISTORY_SEQ_NUM  = (SELECT MAX(CCC.HISTORY_SEQ_NUM) 
                             FROM '+@DB2DBName+'.T0486_IN_LF_SANC CCC
                              WHERE CCC.CASE_NUM = C.CASE_NUM
                               AND CCC.PIN_NUM  = C.PIN_NUM
                                AND CCC.HISTORY_CD = C.HISTORY_CD
                                AND CCC.DELETE_REASON_CD = C.DELETE_REASON_CD       
                             )           
                    WITH UR ;
   '') '

print @statement1

exec (@statement1) 


print @statement1


end
	
	 
GO
/****** Object:  StoredProcedure [wwp].[SP_MostRecentFEPFromDB2]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_MostRecentFEPFromDB2]


(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
SET FMTONLY OFF

declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end
	
	declare @MostRecentFEP table (MostRecentMFFepId varchar(10), Id INT)

set @statement1 = 'select  MostRecentMFFepId, Id
FROM OPENQUERY('+@LSDBName+', '' SELECT A.ASGN_FEP_ID as MostRecentMFFepId
                                        ,ROW_NUMBER () OVER(ORDER BY A.ASGN_FEP_ID)  AS Id   
                                   FROM '+@DB2DBName+'.T2536_WP_FEP_WRKR A,
              '+@DB2DBName+'.T0018_WP_INDV B
           WHERE B.PIN_NUM = '+@PinNumber+'  
           AND  B.PROGRAM_CD = ''''WW''''
           AND  A.CASE_NUM = B.CASE_NUM
           AND  A.HISTORY_CD = 0
           AND  A.HISTORY_SEQ_NUM =  ( SELECT MAX(AA.HISTORY_SEQ_NUM) 
                                         FROM '+@DB2DBName+'.T2536_WP_FEP_WRKR  AA
                                        WHERE AA.CASE_NUM = A.CASE_NUM
                                      )
                                      WITH UR 		   '')                                  

  '
print @statement1

insert into @MostRecentFEP
exec (@statement1) 

select * from @MostRecentFEP


end
	
	 
	                                               
         

GO
/****** Object:  StoredProcedure [wwp].[SP_OtherParticipant]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- PROCEDURE
--EXEC [wwp].[SP_OtherParticipant] 2008891551, '2019-11-01', '2019-11-30', 'WWPDEV'
CREATE PROCEDURE [wwp].[SP_OtherParticipant]
(
@PinNumber VARCHAR(10),
@BeginDate Date,
@EndDate Date,
@SchemaName VARCHAR(20)
) AS
BEGIN
	DECLARE @Statement1 AS VARCHAR(MAX);
	DECLARE @Statement2 AS VARCHAR(MAX);
	DECLARE @DB2DBName AS VARCHAR(100) ;
	DECLARE @LSDBName AS VARCHAR(100) ;
	DECLARE @OTHER_PARTICIPANT1 AS VARCHAR(10);
	DECLARE @WI_WORKS_BEGIN_DT AS DATE ;
	DECLARE @WI_WORKS_END_DT AS DATE ;
	DECLARE @WI_SLOT_BEGIN_DT AS DATE ;
	DECLARE @WW_SLOT_END_DT  AS DATE ;
	DECLARE @PAYMENT_BEGIN_DT AS VARCHAR(10) ;
	DECLARE @PAYMENT_END_DT AS VARCHAR(10) ;
	DECLARE @WI_WORKS_SLOT_CD AS VARCHAR(03) ;
	DECLARE @WI_PIN_NUM AS VARCHAR(10);
	DECLARE @ISPLACED AS VARCHAR(03);

	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
						END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
								WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
								WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
								WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
						END
	---

	SELECT @PAYMENT_BEGIN_DT = CONVERT(DATE, @BeginDate, 126)
	SELECT @PAYMENT_END_DT = CONVERT(DATE, @EndDate, 126)

    DECLARE @Temp TABLE
    (
        [OTHER_PARTICIPANT] [DECIMAL](10, 0) NULL,
		[PARTICIPANT] [DECIMAL](10, 0) NULL,
        [FIRST_NAME] [VARCHAR](30) NULL,
        [LAST_NAME] [VARCHAR](30) NULL,
        [MIDDLE_INITIAL_NAME] [VARCHAR](03) NULL,
        [BIRTH_DATE] [DATE] NULL,
        [DEATH_DATE] [DATE] NULL,
		[GENDER] [VARCHAR](10) NULL,
        [RELATIONSHIP] [VARCHAR](30) NULL,
		[AGE] [VARCHAR](03) NULL,
		[ELIGIBILITY_PART_STATUS_CODE] [VARCHAR](25),
		[PAYMENT_BEGIN_DATE] [DATE],
		[PAYMENT_END_DATE] [DATE],	
		[ISINPLACEMENTPLACED][VARCHAR](03),	  
		[ID][INT],
		[Rn][INT]
    );

    DECLARE @Temp2 TABLE
    (
        [PIN_NUM] [DECIMAL](10, 0) NULL,
		[WI_WORKS_BEGIN_DT] [DATE] NULL,
        [WI_WORKS_END_DT] [DATE] NULL,
        [WW_SLOT_BEGIN_DT] [DATE] NULL,
        [WW_SLOT_END_DT] [DATE] NULL,
        [WI_WORKS_SLOT_CD] [VARCHAR](03)  NULL
    );

 


	SET @Statement1 = 'SELECT OTHER_PARTICIPANT, PARTICIPANT, FIRST_NAME, LAST_NAME, MIDDLE_INITIAL_NAME, BIRTH_DATE, DEATH_DATE, GENDER, RELATIONSHIP, AGE,
							  ELIGIBILITY_PART_STATUS_CODE, PAYMENT_BEGIN_DATE, PAYMENT_END_DATE, ISINPLACEMENTPLACED, ID
					   FROM OPENQUERY('+@LSDBName+', ''SELECT A.SOURCE_PIN_NUM AS OTHER_PARTICIPANT, A.REFERENCE_PIN_NUM  AS PARTICIPANT, B.FIRST_NAM  AS FIRST_NAME,
													   B.LAST_NAM   AS LAST_NAME, B.MIDDLE_INITIAL_NAM AS MIDDLE_INITIAL_NAME, B.DOB_DT AS BIRTH_DATE, B.DEATH_DT AS DEATH_DATE,
													   CASE B.SEX_IND WHEN ''''M'''' THEN ''''MALE''''
																	  WHEN ''''F'''' THEN ''''FEMALE''''
													   END AS GENDER,
													   CASE A.REL_CD WHEN ''''FRD'''' THEN ''''FRIEND''''
																	 WHEN ''''HUS'''' THEN ''''HUSBAND''''
																	 WHEN ''''NOT'''' THEN ''''NOT RELATED''''
																	 WHEN ''''NQR'''' THEN ''''NON QUALIFIED''''
																	 WHEN ''''OQR'''' THEN ''''OTHER QUALIFIED''''
																	 WHEN ''''WIF'''' THEN ''''WIFE''''
													   END AS RELATIONSHIP,
													   YEAR(DATE(CURRENT DATE) - DATE(B.DOB_DT)) AS AGE,
													   CASE C.PART_STS_CD WHEN ''''EA'''' THEN ''''ELIGIBLE ADULT''''
																		  WHEN ''''IA'''' THEN ''''INCLUDED ADULT''''
																		  WHEN ''''XA'''' THEN ''''EXCLUDED ADULT''''
													   END AS ELIGIBILITY_PART_STATUS_CODE,
													   C.PAYMENT_BEGIN_DT AS PAYMENT_BEGIN_DATE, C.PAYMENT_END_DT AS PAYMENT_END_DATE, '''' '''' AS ISINPLACEMENTPLACED,
													   ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM) AS ID
													   FROM ' + @DB2DBName + '.T0015_CS_INDV AS M
														INNER JOIN ' + @DB2DBName + '.T0116_CS_IN_HH_REL AS A ON A.REFERENCE_PIN_NUM = M.PIN_NUM
															AND A.REL_CD IN (''''FRD'''',''''HUS'''', ''''NOT'''',''''WIF'''') AND A.HISTORY_CD = 0
															AND A.DELETE_REASON_CD   = '''' '''' AND A.HISTORY_SEQ_NUM = (SELECT MAX(AA.HISTORY_SEQ_NUM)
																														  FROM ' + @DB2DBName + '.T0116_CS_IN_HH_REL AA
																														  WHERE AA.REFERENCE_PIN_NUM = A.REFERENCE_PIN_NUM
																														  AND AA.SOURCE_PIN_NUM = A.SOURCE_PIN_NUM AND
																														  AA.CASE_NUM = A.CASE_NUM
																														  AND AA.DELETE_REASON_CD = A.DELETE_REASON_CD
																														  AND AA.EFF_BEGIN_MM = (SELECT MAX(AAA.EFF_BEGIN_MM)
																																				 FROM ' + @DB2DBName + '.T0116_CS_IN_HH_REL AAA
																																				 WHERE AAA.REFERENCE_PIN_NUM  = AA.REFERENCE_PIN_NUM
																																				 AND AAA.SOURCE_PIN_NUM = AA.SOURCE_PIN_NUM
																																				 AND AAA.CASE_NUM = AA.CASE_NUM
																																				 AND AAA.DELETE_REASON_CD = AA.DELETE_REASON_CD))
														INNER JOIN ' + @DB2DBName + '.T0011_INDIVIDUAL AS B ON B.PIN_NUM = A.SOURCE_PIN_NUM
														INNER JOIN ' + @DB2DBName + '.T0265_AG_IN_ELIG AS C ON  C.PIN_NUM = A.SOURCE_PIN_NUM AND C.CASE_NUM = A.CASE_NUM
															AND C.PROGRAM_CD = ''''WW'''' AND C.SUBPROGRAM_CD NOT IN (''''X'''', ''''Z'''')	AND C.AG_STS_CD IN (''''O'''', ''''C'''')
															AND C.PART_STS_CD IN (''''EA'''', ''''IA'''') AND C.PAYMENT_BEGIN_DT <= C.PAYMENT_END_DT
															AND C.PAYMENT_BEGIN_DT <= ''''' + @PAYMENT_END_DT + ''''' AND C.PAYMENT_END_DT >= ''''' + @PAYMENT_BEGIN_DT + '''''
															AND C.CURRENT_ELIG_IND IN (1, 9)
															AND C.CAG_ELIG_SEQ_NUM  = (SELECT MAX(CC.CAG_ELIG_SEQ_NUM)
																					   FROM ' + @DB2DBName + '.T0265_AG_IN_ELIG AS CC
																					   WHERE CC.CASE_NUM = C.CASE_NUM AND CC.PROGRAM_CD = C.PROGRAM_CD
																					   AND CC.SUBPROGRAM_CD = C.SUBPROGRAM_CD AND CC.AG_SEQ_NUM = C.AG_SEQ_NUM
																					   AND CC.CURRENT_ELIG_IND = C.CURRENT_ELIG_IND	AND CC.PAYMENT_BEGIN_DT <= CC.PAYMENT_END_DT
																					   AND CC.PAYMENT_BEGIN_DT = C.PAYMENT_BEGIN_DT AND CC.PAYMENT_END_DT = C.PAYMENT_END_DT)
													   WHERE M.PIN_NUM = ' + @PinNumber + '
													   AND M.DELETE_REASON_CD = '''' '''' AND M.HISTORY_CD = 0
													   WITH UR;'')'


	INSERT INTO @Temp (OTHER_PARTICIPANT, PARTICIPANT, FIRST_NAME, LAST_NAME, MIDDLE_INITIAL_NAME, BIRTH_DATE, DEATH_DATE, GENDER, RELATIONSHIP, AGE, ELIGIBILITY_PART_STATUS_CODE,
					   PAYMENT_BEGIN_DATE, PAYMENT_END_DATE, ISINPLACEMENTPLACED, ID)
	EXEC (@Statement1) 

	DECLARE @LoopCounter INT = 1, @MaxEmployeeId INT = 10, @EmployeeName NVARCHAR(100)
 
	WHILE(@LoopCounter <= @MaxEmployeeId)
	BEGIN
	    SELECT @OTHER_PARTICIPANT1 = OTHER_PARTICIPANT
		FROM @Temp
		WHERE Id = @LoopCounter
 
		SET @Statement2 = 'SELECT PIN_NUM, WI_WORKS_BEGIN_DT, WI_WORKS_END_DT, WW_SLOT_BEGIN_DT, WW_SLOT_END_DT, WI_WORKS_SLOT_CD
						   FROM OPENQUERY(' + @LSDBName + ', ''SELECT  PIN_NUM, WI_WORKS_BEGIN_DT, WI_WORKS_END_DT, WW_SLOT_BEGIN_DT, WW_SLOT_END_DT, WI_WORKS_SLOT_CD 		 
															   FROM  ' + @DB2DBName + '.T0478_CS_WI_WORKS AS D
															   WHERE  D.PIN_NUM = ' + @OTHER_PARTICIPANT1 + ' AND D.DELETE_REASON_CD = '''' '''' AND D.HISTORY_CD = 0
															   AND D.WI_WORKS_BEGIN_DT <> ''''9999-12-31'''' AND D.WI_WORKS_BEGIN_DT    <= D.WI_WORKS_END_DT
															   AND D.WI_WORKS_END_DT >= CURRENT_DATE AND D.WW_SLOT_BEGIN_DT <= D.WW_SLOT_END_DT
															   AND D.WW_SLOT_END_DT >= CURRENT_DATE AND D.WI_WORKS_SLOT_CD <> '''' ''''
															   AND D.WI_WORKS_SEQ_NUM = (SELECT MAX(DD.WI_WORKS_SEQ_NUM) 
																						 FROM ' + @DB2DBName + '.T0478_CS_WI_WORKS AS DD
																						 WHERE DD.CASE_NUM = D.CASE_NUM AND DD.HISTORY_CD = D.HISTORY_CD
																						 AND DD.DELETE_REASON_CD = D.DELETE_REASON_CD)
															   WITH UR;'')'



		INSERT INTO @Temp2
		EXEC (@Statement2) 


		SELECT @WI_WORKS_BEGIN_DT = WI_WORKS_BEGIN_DT, @WI_WORKS_END_DT = WI_WORKS_END_DT, @WI_SLOT_BEGIN_DT = WW_SLOT_BEGIN_DT, @WW_SLOT_END_DT = WW_SLOT_END_DT,
			   @WI_WORKS_SLOT_CD = WI_WORKS_SLOT_CD, @WI_PIN_NUM = PIN_NUM
		FROM  @Temp2

		IF @WI_WORKS_SLOT_CD IS NULL
		BEGIN
			SET @ISPLACED = 'NO'
		END
		IF @WI_WORKS_END_DT = '9999-12-31' AND @WW_SLOT_END_DT = '9999-12-31' AND @WI_WORKS_SLOT_CD IS NOT NULL 
		BEGIN
			SET @ISPLACED = 'YES'
		END
		IF  @WI_WORKS_END_DT = (select CAST(GETDATE() AS date))  AND @WW_SLOT_END_DT = (select CAST(GETDATE() AS date)) AND @WI_WORKS_SLOT_CD IS NOT NULL 
		BEGIN
			SET @ISPLACED = 'YES' 
		END
		IF @WI_WORKS_END_DT <> '9999-12-31' AND @WW_SLOT_END_DT <> '9999-12-31' AND @WI_WORKS_BEGIN_DT < @WI_WORKS_END_DT 
		BEGIN  	
			SET @ISPLACED = 'NO' ;	
		END

		UPDATE @Temp 
		SET ISINPLACEMENTPLACED = @ISPLACED
		WHERE OTHER_PARTICIPANT = @WI_PIN_NUM;

	   SET @LoopCounter  = @LoopCounter  + 1
	END

	;WITH CTE AS
	(
		SELECT *, ROW_NUMBER() OVER (PARTITION BY OTHER_PARTICIPANT, PARTICIPANT, FIRST_NAME, LAST_NAME, MIDDLE_INITIAL_NAME, BIRTH_DATE, DEATH_DATE, GENDER, RELATIONSHIP
								  ORDER BY PAYMENT_BEGIN_DATE DESC) AS Rnk
		FROM @Temp
	)
	UPDATE CTE
	SET Rn = Rnk

	SELECT OTHER_PARTICIPANT, PARTICIPANT, FIRST_NAME, LAST_NAME, MIDDLE_INITIAL_NAME, BIRTH_DATE, DEATH_DATE, GENDER, RELATIONSHIP, AGE, ELIGIBILITY_PART_STATUS_CODE,
		   PAYMENT_BEGIN_DATE, PAYMENT_END_DATE, ISINPLACEMENTPLACED
	FROM @Temp
	WHERE Rn = 1
END
	



GO
/****** Object:  StoredProcedure [wwp].[SP_ParticpantsChildrenFromCARES]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-12-12 |                   | Selecting only the distinct records			                                                    |==
-- ========================================================================================================================================

CREATE PROCEDURE [wwp].[SP_ParticpantsChildrenFromCARES] 
	-- Add the parameters for the stored procedure here
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)

)
  
AS 

BEGIN

DECLARE @Statement1 AS VARCHAR(MAX);
DECLARE @DB2DBName AS VARCHAR(100) ;
DECLARE @LSDBName AS VARCHAR(100) ;
 
 
---
    SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')   THEN 'NETWINFO_D00S_DB2'
                                         WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                                         WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                                         WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                              END
---

   SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS')      THEN 'PWS639TC'
                                          WHEN @SchemaName = 'WWPACC'  THEN 'PWA639TC'
                                          WHEN @SchemaName = 'WWPTRN'  THEN 'PWE639TC'
                                          WHEN @SchemaName = 'WWP'     THEN 'PWP639TC'
                               END

----
           

SET @Statement1 = 'SELECT *, ROW_NUMBER () OVER(ORDER BY SOURCE_PIN_NUM)  AS ID
				   FROM OPENQUERY(' + @LSDBName + ', ''SELECT DISTINCT A.SOURCE_PIN_NUM, B.FIRST_NAM,B.LAST_NAM, B.MIDDLE_INITIAL_NAM, B.DOB_DT, B.DEATH_DT, B.SEX_IND AS GENDER,
													   CASE A.REL_CD WHEN ''''SON'''' THEN ''''SON''''
													   WHEN ''''DAU'''' THEN ''''DAUGHTER''''
													   WHEN ''''STD'''' THEN ''''STEP-DAUGHTER''''
													   WHEN ''''STS'''' THEN ''''STEP-SON''''
													   END AS RELATIONSHIP, 
													   YEAR(DATE(CURRENT DATE) - DATE(B.DOB_DT)) AS AGE
													   FROM ' + @DB2DBName + '.T0116_CS_IN_HH_REL A,
													   ' + @DB2DBName + '.T0011_INDIVIDUAL B
													   WHERE A.REFERENCE_PIN_NUM = ' + @PinNumber + '
													   AND A.REL_CD IN (''''SON'''',''''DAU'''',''''STD'''',''''STS'''') AND  A.HISTORY_CD = 0
													   AND  A.DELETE_REASON_CD  = '''' '''' AND YEAR(DATE(CURRENT DATE) - DATE(B.DOB_DT)) <= 18
													   AND  B.PIN_NUM = A.SOURCE_PIN_NUM'')'

PRINT @Statement1

EXEC (@Statement1)  

END


GO
/****** Object:  StoredProcedure [wwp].[SP_Placement]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_Placement]
(
@PinNumber VARCHAR(10),
@CaseNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @statement2 as varchar(max);
declare @statement3 as varchar(max);
declare @SqlCurrentDate as varchar(10) ;
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;


 	 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end


create table #Precheck
    (
    [PinNumber] [Decimal](10, 0) NULL,
    [ActivityOpen] [Bit] NULL,
    [PlacementOpen]	[Bit] NULL,
	[TransactionExist] [Bit] NULL
    )

 SET @SqlCurrentDate =	 CAST(GETDATE() AS DATE)

 print @SqlCurrentDate 

Insert #Precheck (PinNumber,ActivityOpen,PlacementOpen,TransactionExist) values (@PinNumber,0,0,0)
 
select * from #Precheck




	
set @statement1 = 'IF EXISTS (select  *
FROM OPENQUERY('+@LSDBName+', ''
 SELECT 1                                 
   FROM  '+@DB2DBName+'.T0478_CS_WI_WORKS AS B              
  WHERE B.CASE_NUM  = '+@CaseNumber+'
    AND B.PIN_NUM = '+@PinNumber+ '               
    AND B.DELETE_REASON_CD = '''' ''''     
	AND B.HISTORY_CD  = 0                 
    AND B.WI_WORKS_BEGIN_DT <> ''''9999-12-31''''                                
    AND B.WI_WORKS_END_DT = ''''9999-12-31''''           
    AND B.WI_WORKS_BEGIN_DT <= B.WI_WORKS_END_DT     
    AND B.WW_SLOT_BEGIN_DT <= B.WW_SLOT_END_DT        
    AND B.WI_WORKS_SLOT_CD <> ''''CMF''''                                                                                                    
   WITH UR ; '') )
   BEGIN 
     
        update #PreCheck
		  set PlacementOpen  = 1
		  where PinNumber  = '+@PinNumber+'
	

   END
   ELSE
   BEGIN
        update #PreCheck
		  set PlacementOpen  = 0
		   where PinNumber  = '+@PinNumber+'
   END
                    
  '



exec (@statement1) ;


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----- OPEN  TRANSACTION
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                     

set @statement2 =  'IF EXISTS (select  *
FROM OPENQUERY('+@LSDBName+', ''SELECT 1                                    
  FROM  '+@DB2DBName+'.T0121_WP_IN_SRV_HI                  
 WHERE  PIN_NUM               = ' +@PinNumber+ '  
  AND TRANSACTION_CD          =  ''''931''''   
  AND TRANSACTION_NUM         = 1
  AND TRANSACTION_DT          = '''''+@SqlCurrentDate+'''''
 WITH UR ; '') )
  BEGIN 
     
        update #PreCheck
		  set TransactionExist  = 1
		  where PinNumber  = '+@PinNumber+'
	

   END
   ELSE
   BEGIN
        update #PreCheck
		  set TransactionExist  = 0
		   where PinNumber  = '+@PinNumber+'
   END
  
  
  
  '


exec (@statement2) 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------- OPEN ACTIVITY
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


set @statement3 =  'IF EXISTS (select  *
FROM OPENQUERY('+@LSDBName+', ''SELECT 1                                      
  FROM  '+@DB2DBName+'.T0066_WP_IN_COMP                 
 WHERE PIN_NUM                 = ' +@PinNumber+ '  
  AND  COMPONENT_END_DT =  ''''9999-12-31'''' 
  AND DELETE_COMP_SW =  '''' ''''                 
  AND  HISTORY_CD = 0                         
  WITH UR ; '') )
  BEGIN 
     
        update #PreCheck
		  set ActivityOpen  = 1
		  where PinNumber  = '+@PinNumber+'
	

   END
   ELSE
   BEGIN
        update #PreCheck
		  set ActivityOpen  = 0
		   where PinNumber  = '+@PinNumber+'
   END
  
  
  
  '


exec (@statement3) 




select * from #Precheck


end
	


	                                               
  

GO
/****** Object:  StoredProcedure [wwp].[SP_PreCheckDisenrollment]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- procedure 
CREATE PROCEDURE [wwp].[SP_PreCheckDisenrollment] (
	 @PinNumber  DECIMAL(10,0)
	,@CaseNumber DECIMAL(10,0)
	,@SchemaName VARCHAR(20)
	,@PEPId INT = NULL
	)
AS
BEGIN
	DECLARE @statement1 AS VARCHAR(max);
	DECLARE @statement2 AS VARCHAR(max);
	DECLARE @statement3 AS VARCHAR(max);
	DECLARE @statement4 AS VARCHAR(max);
	DECLARE @SqlCurrentDate AS VARCHAR(10);
	DECLARE @DB2DBName AS VARCHAR(100);
	DECLARE @LSDBName AS VARCHAR(100);
	DECLARE @EnrolledProgramId INT;
	DECLARE @TransactionCd VARCHAR(3);
	DECLARE @HasEP BIT = 0;

	SELECT @EnrolledProgramId = EnrolledProgramId
	FROM wwp.ParticipantEnrolledProgram
	WHERE Id = @PEPId

	---
	IF @SchemaName = 'WWPDEV'
	BEGIN
		SET @LSDBName = 'NETWINFO_D00S_DB2'
		SET @DB2DBName = 'PWS639TC'
	END

	-----
	IF @SchemaName = 'WWPSYS'
	BEGIN
		SET @LSDBName = 'NETWINFO_D00S_DB2'
		SET @DB2DBName = 'PWS639TC'
	END

	----	
	IF @SchemaName = 'WWPACC'
	BEGIN
		SET @LSDBName = 'NETWINFO_D00A_DB2'
		SET @DB2DBName = 'PWA639TC'
	END

	---
	IF @SchemaName = 'WWPTRN'
	BEGIN
		SET @LSDBName = 'NETWINFO_D00E_DB2'
		SET @DB2DBName = 'PWE639TC'
	END

	---
	IF @SchemaName = 'WWP'
	BEGIN
		SET @LSDBName = 'NETWINFO_D40P_DB2'
		SET @DB2DBName = 'PWP639TC'
	END

	DECLARE @PinNumber_18 VARCHAR(10) = @PinNumber
	DECLARE @CaseNumber_18 VARCHAR(10) = @CaseNumber
   
	PRINT @PinNumber_18
	PRINT @CaseNumber_18

	IF EXISTS(SELECT 1
			  FROM wwp.EmployabilityPlan
			  WHERE EmployabilityPlanStatusTypeId IN (SELECT Id
													  FROM wwp.EmployabilityPlanStatusType
													  WHERE Name IN ('In Progress', 'Submitted', 'Ended'))
			  AND ParticipantId = (SELECT Id
								   FROM wwp.Participant
								   WHERE PinNumber = @PinNumber))
	BEGIN
		SET @HasEP = 1
	END


	CREATE TABLE #Precheck (
		[PinNumber] [Decimal](10, 0) NULL
		,[ActivityOpen] [Bit] NULL
		,[ActivityEndDate] [Date] NULL
		,[PlacementOpen] [Bit] NULL
		,[TransactionExist] [Bit] NULL
		)

	SET @SqlCurrentDate = CAST(GETDATE() AS DATE)

	PRINT @SqlCurrentDate

	INSERT #Precheck (
		PinNumber
		,ActivityOpen
		,PlacementOpen
		,TransactionExist
		)
	VALUES (
		@PinNumber_18
		,0
		,0
		,0
		)

	IF @CaseNumber <> 0

	BEGIN
		SET @statement1 = 'IF EXISTS (select  *
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT 1                                 
   FROM  ' + @DB2DBName + '.T0478_CS_WI_WORKS AS B              
  WHERE B.CASE_NUM  = ' + @CaseNumber_18 + '
    AND B.PIN_NUM = ' + @PinNumber_18 + '               
    AND B.DELETE_REASON_CD = '''' ''''     
	AND B.HISTORY_CD  = 0                 
    AND B.WI_WORKS_BEGIN_DT <> ''''9999-12-31''''                                
    AND B.WI_WORKS_END_DT = ''''9999-12-31''''           
    AND B.WI_WORKS_BEGIN_DT <= B.WI_WORKS_END_DT     
    AND B.WW_SLOT_BEGIN_DT <= B.WW_SLOT_END_DT        
    AND B.WI_WORKS_SLOT_CD <> ''''CMF''''                                                                                                    
   WITH UR ; '') )
   BEGIN 
     
        update #PreCheck
		  set PlacementOpen  = 1
		  where PinNumber  = ' + @PinNumber_18 + '
	

   END
   ELSE
   BEGIN
        update #PreCheck
		  set PlacementOpen  = 0
		   where PinNumber  = ' + @PinNumber_18 + 
			'
   END
                    
  '

		EXEC (@statement1);
	END

	-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	----- OPEN  TRANSACTION
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	IF (@EnrolledProgramId BETWEEN 1 AND 8 OR @EnrolledProgramId = 11)
		SET @TransactionCd = '931'
	ELSE IF (@EnrolledProgramId = 10)
		SET @TransactionCd = '195'
	ELSE IF (@EnrolledProgramId = 10)
		SET @TransactionCd = '259'
	ELSE
		SET @TransactionCd = '931'
		
	SET @statement2 = 'IF EXISTS (select  *
FROM OPENQUERY(' + @LSDBName + ', ''SELECT 1                                    
  FROM  ' + @DB2DBName + '.T0121_WP_IN_SRV_HI                  
 WHERE  PIN_NUM               = ' + @PinNumber_18 + '  
  AND TRANSACTION_CD          = ' + @TransactionCd + '
  AND TRANSACTION_NUM         = 1
  AND TRANSACTION_DT          = ''''' + @SqlCurrentDate + '''''
 WITH UR ; '') )
  BEGIN 
     
        update #PreCheck
		  set TransactionExist  = 1
		  where PinNumber  = ' + @PinNumber_18 + '
	

   END
   ELSE
   BEGIN
        update #PreCheck
		  set TransactionExist  = 0
		   where PinNumber  = ' + @PinNumber_18 + '
   END
  
  
  
  '

	EXEC (@statement2)

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	------- OPEN ACTIVITY
	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SET @statement3 = 'IF EXISTS (select  *
FROM OPENQUERY(' + @LSDBName + ', ''SELECT 1                                      
  FROM  ' + @DB2DBName + '.T0066_WP_IN_COMP                 
 WHERE PIN_NUM                 = ' + @PinNumber_18 + '  
  AND  COMPONENT_END_DT =  ''''9999-12-31'''' 
  AND DELETE_COMP_SW =  '''' ''''                 
  AND  HISTORY_CD = 0                         
  WITH UR ; '') )
  BEGIN 
     
        update #PreCheck
		  set ActivityOpen  = 1
		  where PinNumber  = ' + @PinNumber_18 + '
	

   END
   ELSE
   BEGIN
        update #PreCheck
		  set ActivityOpen  = 0
		   where PinNumber  = ' + @PinNumber_18 + '
   END
  
  
  
  '

	IF (@HasEP = 0)
		EXEC (@statement3)

	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	------- OPEN ACTIVITY
	----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempInfo TABLE (
		PinNumber [decimal](10, 0)
		,ActivityEndDate DATE NULL
		)

	SET @statement4 = 'select  PinNumber ,ActivityEndDate 
FROM OPENQUERY(' + @LSDBName + ', ''SELECT  A.PIN_NUM as PinNumber,
                                        A.COMPONENT_END_DT  as  ActivityEndDate                                             
  FROM  ' + @DB2DBName + '.T0066_WP_IN_COMP A                 
 WHERE A.PIN_NUM                 = ' + @PinNumber_18 + '               
  AND  A.HISTORY_CD = 0  
   AND A.DELETE_COMP_SW =  '''' ''''   
   AND A.COMPONENT_END_DT <>  ''''9999-12-31'''' 
   AND A.COMPONENT_END_DT =  (SELECT MAX(B.COMPONENT_END_DT)          
                              FROM ' + @DB2DBName + '.T0066_WP_IN_COMP  B    
                            WHERE  B.PIN_NUM = A.PIN_NUM    
							  AND B.HISTORY_CD = A.HISTORY_CD
                              AND B.DELETE_COMP_SW = A.DELETE_COMP_SW       
                            )                                      
  ORDER BY  COMPONENT_END_DT DESC                      
  WITH UR ; '') '

	IF (@HasEP = 0)
		INSERT @TempInfo (
			PinNumber
			,ActivityEndDate
			)
		EXEC (@statement4)

	-- SELECT * FROM @TempInfo
	IF EXISTS (
			SELECT 1  
			FROM @TempInfo
			WHERE PinNumber = @PinNumber 
				AND (
					ActivityEndDate <> '9999-12-31'
					OR ActivityEndDate <> NULL
					)
			 
			)
	BEGIN
		UPDATE #Precheck
		SET ActivityEndDate = (
				SELECT MAX (ActivityEndDate)
				FROM @TempInfo
				)
		WHERE PinNumber = @PinNumber 
	END

	SELECT *
	FROM #Precheck
END
GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCandHistoryData]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCandHistoryData] 
	-- Add the parameters for the stored procedure here
(
@TableName varchar(200),
@IdentityNumber varchar(max)  
)
AS
BEGIN

DECLARE @begin_time DATETIME, 
        @end_time DATETIME, 
		@begin_lsn BINARY(10), 
		@end_lsn BINARY(10),
        @from_lsn binary(10), 
		@to_lsn binary(10),
		@now_lsn varchar(max) , 
		@endend_lsn varchar(max),
		@FunctionName varchar(max),
		@statement varchar(max),
		@FunctionName2 varchar(max),
		@statement2 varchar(max),
		@statement3 varchar(max),
		@ObjectName varchar(max),
		@ObjectSchemaName varchar(max),
		@ObjectName2 varchar(max),
		@ObjectSchemaName2 varchar(max)
  
  
-------------------------- following select stmt will be used later ------------------
--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
--print @begin_time
--print @end_time
--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
--print @begin_lsn
--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
--print @end_lsn


  

--------------------------------------------------------------
--select @from_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
--print @from_lsn 
--Select @to_lsn   = sys.fn_cdc_get_max_lsn()
--print @to_lsn
--select @from_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
--print 'from lsn'
--print   @from_lsn
--------------------------------------------------------------

set @ObjectName = 'wwp_'+@TableName+''
  print @objectName

  set @ObjectSchemaName = '[wwp].['+@TableName+']'

  print @ObjectSchemaName 

  set @ObjectName2 = 'wwp_'+@TableName+'_CT'
   set @ObjectSchemaName2 = '[hst].['+@ObjectName2+']'

     print @ObjectSchemaName2 


set @FunctionName = 'cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn('''+@objectName+'''),sys.fn_cdc_get_max_lsn(),''ALL'')'  
print @FunctionName

set @statement =
'select a.*,b.* ,
        ( SELECT    CC.column_name + '',''
          FROM      [wwpdev].[cdc].[captured_columns] CC
                    INNER JOIN [cdc].[change_tables]  CT ON CC.[object_id] = CT.[object_id]
          WHERE     capture_instance = (select capture_instance from cdc.change_tables where source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
                    AND sys.fn_cdc_is_bit_set(CC.column_ordinal,
                                              a.__$update_mask) = 1
        FOR
          XML PATH('''')
        ) AS changedcolumns ,
		  case a.__$operation when ''1'' then ''RECORD DELETED ''
		                      when ''2'' then ''RECORD INSERTED ''
							  WHEN ''3'' then ''BEFORE UPDATE ''
							  WHEN ''4'' then ''AFTER UPDATE ''
			END AS ACTION

     FROM ' +@FunctionName+ ' a ,
		  cdc.lsn_time_mapping  b	 
	 where b.start_lsn = a.__$start_lsn
	   and a.id = '+@IdentityNumber+'
 order by a.__$seqval desc '
--'
print @statement ;

exec (@statement);

set @FunctionName2 = 'cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn('''+@objectName+'''),sys.fn_cdc_get_max_lsn(),''ALL'')'  
print @FunctionName2

set @statement2 =
'select a.*,b.* ,
        --( SELECT    CC.column_name + '',''
        --  FROM [WWPDEV].[hst].[captured_columns] CC
        --            INNER JOIN [hst].[change_tables]  CT ON CC.[object_id] = CT.[object_id]
        --  WHERE     capture_instance = (select capture_instance from cdc.change_tables where source_object_id = OBJECT_ID('''+@ObjectSchemaName2+'''))
        --            AND sys.fn_cdc_is_bit_set(CC.column_ordinal,
        --                                      a.__$update_mask) = 1
        --FOR
        --  XML PATH('''')
        --) AS changedcolumns ,
		  case a.__$operation when ''1'' then ''RECORD DELETED ''
		                      when ''2'' then ''RECORD INSERTED ''
							  WHEN ''3'' then ''BEFORE UPDATE ''
							  WHEN ''4'' then ''AFTER UPDATE ''
			END AS ACTION

     FROM '+@ObjectSchemaName2+' a,

		  cdc.lsn_time_mapping  b	 
	 where b.start_lsn = a.__$start_lsn
	   and a.id = '+@IdentityNumber+'
	   and a.__$operation in (1,2,4)
 order by a.__$seqval desc '
--'
--	 ' +@FunctionName2+ ' a ,

exec (@statement2);

print (@statement2);
 declare @cols varchar(max), @query varchar(max)

SELECT  @cols = STUFF
    (
        ( 
            SELECT DISTINCT '], [' + name
            FROM sys.columns
            where object_id = (
                select top 1 object_id from sys.objects
                where name = 'wwp_LanguageSection_CT'
            )
            and name not in ('__$end_lsn', 'Modifieddate')
            FOR XML PATH('')
        ), 1, 2, ''
    ) + '],  1 as changedcolumns ,
		  case __$operation WHEN ''1'' then ''RECORD DELETED ''
		                      WHEN ''2'' then ''RECORD INSERTED ''
							  WHEN ''3'' then ''BEFORE UPDATE ''
							  WHEN ''4'' then ''AFTER UPDATE ''
			END AS ACTION ';

SELECT @query = 'select ' + @cols + 
			 'from wwpdev.cdc.wwp_LanguageSection_CT a ,
	  cdc.lsn_time_mapping  b	 
	
	 where b.start_lsn = a.__$start_lsn
	   and a.id = 561
	   and a.__$operation in (1,2,4)
 order by a.__$seqval desc; '
EXEC (@query);

DECLARE @COLUMNS VARCHAR(1000)
DECLARE @Col1 varchar(100), @Col2 varchar(1000)


SELECT @Columns = 
SubString (( SELECT ', ' + QUOTENAME(Column_name )
from INFORMATION_SCHEMA.columns 
WHERE Table_name ='wwp_LanguageSection_CT' 
AND TABLE_SCHEMA = 'hst'
AND column_name != '__$end_lsn'

FOR XML PATH ( '' ) ), 3, 1000) 

EXEC('SELECT '+ @Columns +' FROM hst.wwp_LanguageSection_CT a,
                     cdc.lsn_time_mapping  b	 
	
	 where b.start_lsn = a.__$start_lsn
	   and a.id = 561
	   and a.__$operation in (1,2,4)
 order by a.__$seqval desc;')


----------------- below is how code should look like ----------------------------------------------------------------------------------------------
--set @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@from_lsn,@to_lsn,'ALL UPDATE OLD') a ,
--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory] 
	-- Add the parameters for the stored procedure here
(
@TableName varchar(200),
@IdentityNumber varchar(max)  
)
AS
BEGIN

DECLARE @begin_time DATETIME, 
        @end_time DATETIME, 
		@begin_lsn BINARY(10), 
		@end_lsn BINARY(10),
        @from_lsn binary(10), 
		@to_lsn binary(10),
		@now_lsn varchar(max) , 
		@endend_lsn varchar(max),
		@FunctionName varchar(max),
		@statement varchar(max),
		@ObjectName varchar(max),
		@ObjectSchemaName varchar(max)
  
  
-------------------------- following select stmt will be used later ------------------
--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
--print @begin_time
--print @end_time
--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
--print @begin_lsn
--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
--print @end_lsn


  

--------------------------------------------------------------
--select @from_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
--print @from_lsn 
--Select @to_lsn   = sys.fn_cdc_get_max_lsn()
--print @to_lsn
--select @from_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
--print 'from lsn'
--print   @from_lsn
--------------------------------------------------------------

set @ObjectName = 'wwp_'+@TableName+''
  print @objectName

  set @ObjectSchemaName = '[wwp].['+@TableName+']'

  print @ObjectSchemaName 


set @FunctionName = 'cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn('''+@objectName+'''),sys.fn_cdc_get_max_lsn(),''ALL'')'  
print @FunctionName

set @statement =
'select a.*,b.* ,
        ( SELECT    CC.column_name + '',''
          FROM      [wwpdev].[cdc].[captured_columns] CC
                    INNER JOIN [cdc].[change_tables]  CT ON CC.[object_id] = CT.[object_id]
          WHERE     capture_instance = (select capture_instance from cdc.change_tables where source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
                    AND sys.fn_cdc_is_bit_set(CC.column_ordinal,
                                              a.__$update_mask) = 1
        FOR
          XML PATH('''')
        ) AS changedcolumns ,
		  case a.__$operation when ''1'' then ''RECORD DELETED ''
		                      when ''2'' then ''RECORD INSERTED ''
							  WHEN ''3'' then ''BEFORE UPDATE ''
							  WHEN ''4'' then ''AFTER UPDATE ''
			END AS ACTION

     FROM ' +@FunctionName+ ' a ,
		  cdc.lsn_time_mapping  b	 
	 where b.start_lsn = a.__$start_lsn
	   and a.id = '+@IdentityNumber+'
 order by a.__$seqval desc '
--'

exec (@statement);

print (@statement);


----------------- below is how code should look like ----------------------------------------------------------------------------------------------
--set @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@from_lsn,@to_lsn,'ALL UPDATE OLD') a ,
--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_CYS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_CYS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@CId INT,
	@CCount INT = 1,
	@CMax INT,
	@DeletedChild INT,
	@DeletedTeen INT,
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.ChildYouthSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber
	
	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @C TABLE (Id INT IDENTITY(1,1), CId INT)
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))
	DECLARE @ChildYouthChild TABLE (ChildId INT)

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'Contact'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'Contact'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_CYS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_CYS_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_CYS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_CYS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
			SELECT X.*
			FROM (
			SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + '',''
							FROM [cdc].[captured_columns] CC
							INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
							WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		WHEN ''2'' THEN ''RECORD INSERTED ''
																		WHEN ''3'' THEN ''BEFORE UPDATE ''
																		WHEN ''4'' THEN ''AFTER UPDATE ''
													END AS ACTION
			FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
			UNION
		
			SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + '',''
							FROM [cdc].[captured_columns] CC
							INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
							WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		WHEN ''2'' THEN ''RECORD INSERTED ''
																		WHEN ''3'' THEN ''BEFORE UPDATE ''
																		WHEN ''4'' THEN ''AFTER UPDATE ''
													END AS ACTION
			FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_CYS_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @C
	SELECT DISTINCT ChildId
	FROM ##SP_ReadCDCHistory_CYS_Temp_2

	--SELECT * FROM @C

	SELECT @CMax = COUNT(*)
	FROM @C
	
	PRINT @CMax

	SELECT X.*
	INTO #SP_ReadCDCHistory_CYS_Temp_3
	FROM(
	SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DateOfBirth], a.[DateOfDeath], a.[FirstName], a.[GenderIndicator],
		   a.[GenderTypeId], a.[Id], a.[IsDeleted], a.[LastName], a.[MiddleInitialName], a.[ModifiedBy], a.[ModifiedDate], a.[PinNumber], a.[RowVersion], a.[SuffixName],b.[start_lsn],
		   b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
		   (SELECT CC.column_name + ','
			FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
			WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[Child]'))
			AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	 WHEN '2' THEN 'RECORD INSERTED '
																	 WHEN '3' THEN 'BEFORE UPDATE '
																	 WHEN '4' THEN 'AFTER UPDATE '
												 END AS ACTION
	FROM cdc.wwp_Child_CT a, cdc.lsn_time_mapping  b
	WHERE 1 = 2) X
	
	WHILE @CCount <= @CMax
	BEGIN
		SELECT @CId = CId
		FROM @C
		WHERE Id = @CCount

		INSERT INTO #SP_ReadCDCHistory_CYS_Temp_3
		SELECT X.*
		FROM(
			SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DateOfBirth], a.[DateOfDeath], a.[FirstName],
				   a.[GenderIndicator], a.[GenderTypeId], a.[Id], a.[IsDeleted], a.[LastName], a.[MiddleInitialName], a.[ModifiedBy], a.[ModifiedDate], a.[PinNumber], a.[RowVersion],
				   a.[SuffixName],b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + ','
					FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
					WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[Child]'))
					AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
					FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																			 WHEN '2' THEN 'RECORD INSERTED '
																			 WHEN '3' THEN 'BEFORE UPDATE '
																			 WHEN '4' THEN 'AFTER UPDATE '
														 END AS ACTION
			FROM cdc.wwp_Child_CT a, cdc.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in (@CId) AND [__$operation] in (1,2,4)
		UNION
			SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DateOfBirth], a.[DateOfDeath], a.[FirstName],
				   a.[GenderIndicator], a.[GenderTypeId], a.[Id], a.[IsDeleted], a.[LastName], a.[MiddleInitialName], a.[ModifiedBy], a.[ModifiedDate], a.[PinNumber], a.[RowVersion],
				   a.[SuffixName],b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + ','
					FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
					WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[Child]'))
					AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
					FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																			 WHEN '2' THEN 'RECORD INSERTED '
																			 WHEN '3' THEN 'BEFORE UPDATE '
																			 WHEN '4' THEN 'AFTER UPDATE '
														 END AS ACTION
			FROM hst.wwp_Child_CT a, hst.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in (@CId) AND [__$operation] in (1,2,4)) X

		SET @CCount += 1
	END

	-------------------Update all the referenced tables with the values from previous tran_id if they don't have a record for each tran_id in parent table--------------------------
	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_CYS_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount
		
		IF @TranCount = 1
		BEGIN
			SELECT Id, ChildYouthSectionId, ChildId, CareArrangementId, AgeCategoryId, CAST(IsSpecialNeeds AS INT) IsSpecialNeeds, Details, ModifiedBy, ModifiedDate, RowVersion,
				   DeleteReasonId, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_CYS_Temp_4
			FROM ##SP_ReadCDCHistory_CYS_Temp_2
			WHERE tran_id = @TranId

			SELECT Id, PinNumber, FirstName, MiddleInitialName, LastName, SuffixName, DateOfBirth, DateOfDeath, CAST(GenderIndicator AS INT) GenderIndicator, GenderTypeId, ModifiedBy,
				   ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_CYS_Temp_5
			FROM #SP_ReadCDCHistory_CYS_Temp_3
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_CYS_Temp_4
			SELECT Id, ChildYouthSectionId, ChildId, CareArrangementId, AgeCategoryId, CAST(IsSpecialNeeds AS INT) IsSpecialNeeds, Details, ModifiedBy, ModifiedDate, RowVersion,
					DeleteReasonId, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_CYS_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_CYS_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_CYS_Temp_5
			SELECT Id, PinNumber, FirstName, MiddleInitialName, LastName, SuffixName, DateOfBirth, DateOfDeath, CAST(GenderIndicator AS INT) GenderIndicator, GenderTypeId, ModifiedBy,
				   ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM #SP_ReadCDCHistory_CYS_Temp_3
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM #SP_ReadCDCHistory_CYS_Temp_3
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	DECLARE @CWWChildren TABLE
	(
	 SOURCE_PIN_NUM DECIMAL(10,0),
	 FIRST_NAM CHAR(15),
	 LAST_NAM CHAR(20),
	 MIDDLEINITIAL_NAM CHAR(1),
	 DOB_DT DATE,
	 DEATH_DT DATE,
	 GENDER CHAR(1),
	 RELATIONSHIP VARCHAR(100),
	 AGE INT,
	 ID INT
	)

	DECLARE @DBName VARCHAR(20)
	SELECT @DBName = DB_NAME()
	
	INSERT INTO @CWWChildren
	EXEC wwp.SP_ParticpantsChildrenFromCARES @PinNumber, @DBName

	--SELECT * FROM @CWWChildren

	--SELECT * FROM ##SP_ReadCDCHistory_CYS_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_CYS_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_CYS_Temp_3
	--SELECT * FROM #SP_ReadCDCHistory_CYS_Temp_4
	--SELECT * FROM #SP_ReadCDCHistory_CYS_Temp_5

	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_CYS_Temp_1) > 0
	BEGIN

	SELECT @DeletedChild = COUNT(DISTINCT ChildId)
	FROM #SP_ReadCDCHistory_CYS_Temp_4
	WHERE DeleteReasonId IS NOT NULL AND AgeCategoryId = 1

	SELECT @DeletedTeen = COUNT(DISTINCT ChildId)
	FROM #SP_ReadCDCHistory_CYS_Temp_4
	WHERE DeleteReasonId IS NOT NULL AND AgeCategoryId = 2
	
	SELECT CASE CAST(CYS.HasChildren12OrUnder AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasChildren,
		   (SELECT ISNULL(CAST(CYSC.ChildId AS VARCHAR(4)), 'null') childId, ISNULL(C.FirstName, 'null') firstName, ISNULL(C.LastName, 'null') lastName,
		    ISNULL(CONVERT(VARCHAR(10), C.DateOfBirth, 101), 'null') dateOfBirth, ISNULL(CAST(CYSC.CareArrangementId AS VARCHAR(4)), 'null') careArrangementId,
			ISNULL(CCA.Name, 'null') careArrangementName, ISNULL(CYSC.Details, 'null') details, CASE CAST(CYSC.IsSpecialNeeds AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isSpecialNeeds,
			ISNULL(CAST(CYSC.DeleteReasonId AS VARCHAR(4)), 'null') deleteReasonId,
			ISNULL(CAST((CONVERT(INT, CONVERT(VARCHAR, GETDATE(), 112)) - CONVERT(INT, CONVERT(VARCHAR, C.DateOfBirth, 112))) / 10000 AS VARCHAR(4)), 'null') ageInYears,
			ISNULL(CAST(CYSC.Id AS VARCHAR(5)), 'null') id
		    FROM #SP_ReadCDCHistory_CYS_Temp_4 CYSC
				INNER JOIN #SP_ReadCDCHistory_CYS_Temp_5 C
					ON CYSC.ChildId = C.Id AND CYSC.AgeCategoryId = 1 AND CYSC.tran_id = C.tran_id
				INNER JOIN wwp.ChildCareArrangement CCA
					ON CYSC.CareArrangementId = CCA.Id
			WHERE CYSC.DeleteReasonId IS NULL AND C.IsDeleted = 0 AND CYSC.tran_id = CYS.tran_id
			FOR XML PATH('children'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('children'), TYPE, ELEMENTS
		   ),
		   IIF(@DeletedChild <> 0, CAST(@DeletedChild AS VARCHAR(4)), 'null') deletedChildren,
		   CASE CAST(CYS.HasChildrenOver12WithDisabilityInNeedOfChildCare AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasTeensWithDisabilityInNeedOfChildCare,
		   (SELECT ISNULL(CAST(CYSC1.ChildId AS VARCHAR(4)), 'null') childId, ISNULL(C1.FirstName, 'null') firstName, ISNULL(C1.LastName, 'null') lastName,
		   ISNULL(CONVERT(VARCHAR(10), C1.DateOfBirth, 101), 'null') dateOfBirth, ISNULL(CYSC1.Details, 'null') details, ISNULL(CAST(CYSC1.DeleteReasonId AS VARCHAR(4)), 'null') deleteReasonId,
		   ISNULL(CAST(DATEDIFF(YEAR, C1.DateOfBirth, GETDATE()) AS VARCHAR(4)), 'null') ageInYears, ISNULL(CAST(CYSC1.Id AS VARCHAR(5)), 'null') id
		    FROM #SP_ReadCDCHistory_CYS_Temp_4 CYSC1
				INNER JOIN #SP_ReadCDCHistory_CYS_Temp_5 C1
					ON CYSC1.ChildId = C1.Id AND CYSC1.AgeCategoryId = 2 AND CYSC1.tran_id = C1.tran_id
			WHERE CYSC1.DeleteReasonId IS NULL AND C1.IsDeleted = 0 AND CYSC1.tran_id = CYS.tran_id
			FOR XML PATH('teens'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('teens'), TYPE, ELEMENTS
		   ),
		   IIF(@DeletedTeen <> 0, CAST(@DeletedTeen AS VARCHAR(4)), 'null') deletedTeens, CASE CAST(CYS.HasWicBenefits AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasWicBenefits,
		   CASE CAST(CYS.isInHeadStart AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInHeadStart, CASE CAST(CYS.isInAfterSchoolOrSummerProgram AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInAfterSchoolOrSummerProgram,
		   ISNULL(CYS.AfterSchoolProgramDetails, 'null') afterSchoolOrSummerProgramNotes, CASE CAST(CYS.isInMentoringProgram AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInMentoringProgram,
		   ISNULL(CYS.mentoringProgramDetails, 'null') mentoringProgramNotes, CASE CAST(CYS.hasChildWelfareWorker AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasChildWelfareWorker,
		   ISNULL(CYS.ChildWelfareWorkerPlanOrRequirements, 'null') childWelfareWorkerPlan, ISNULL(CYS.childWelfareWorkerChildren, 'null') childWelfareWorkerChildren,
		   ISNULL(CAST(CYS.childWelfareContactId AS VARCHAR(5)), 'null') childWelfareWorkerContactId,
		   CASE CAST(CYS.didOrWillAgeOutOfFosterCare AS VARCHAR(4)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END didOrWillAgeOutOfFosterCare, ISNULL(CYS.fosterCareDetails, 'null') fosterCareNotes,
		   CASE CAST(CYS.hasFutureChildCareNeed AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasFutureChildCareChanges, ISNULL(CYS.futureChildCareNeedNotes, 'null') futureChildCareChangesNotes,
		   (SELECT TOP 1 AN.id, AN.ActionNeededPageId pageId, ANP.Name pageName, CASE CAST(AN.isNoActionNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoActionNeeded,
		    (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		     FROM wwp.Worker
		     WHERE WAMSId = (SELECT AN1.ModifiedBy
							 FROM wwp.ActionNeeded AN1
							 WHERE AN1.Id = AN.Id)
		    )modifiedBy,
		    AN.modifiedDate, AN.rowVersion,
		    (SELECT ACT.id, ACT.actionNeededId, ACT.ActionAssigneeId assigneeId, AA.Name assigneeName, AN1.ActionNeededPageId pageId, ANP.Name pageName, ACT.actionItemId,
			 AI.Name actionItemName, ISNULL(CAST(ACT.ActionPriorityId AS VARCHAR(10)), 'nul') priorityId, ISNULL(AP.Name, 'null') priorityName, ISNULL(ACT.FollowUpTask, null) followUpTask, ISNULL(CAST(ACT.DueDate AS VARCHAR(10)), 'null') dueDate,
			 CASE CAST(ACT.IsNoDueDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoDueDate, ISNULL(CAST(ACT.CompletionDate AS VARCHAR(10)), 'null') completionDate,
			 CASE CAST(ACT.IsNoCompletionDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoCompletionDate, ISNULL(ACT.Details, 'null') details, ACT.createdDate, ACT.modifiedDate,
			 ACT.modifiedBy, ACT.rowVersion
			 FROM wwp.ActionNeededTask ACT
				LEFT JOIN wwp.ActionNeeded AN1
					ON ACT.ActionNeededId = AN1.Id
				LEFT JOIN wwp.ActionAssignee AA
					ON ACT.ActionAssigneeId = AA.Id
				LEFT JOIN wwp.ActionItem AI
					ON ACT.ActionItemId = AI.Id
				LEFT JOIN wwp.ActionNeededPage ANP
					ON AN1.ActionNeededPageId = ANP.Id
				LEFT JOIN wwp.ActionPriority AP
					ON ACT.ActionPriorityId = AP.Id
			 WHERE ACT.ActionNeededId = AN.Id AND AN.ParticipantId = CYS.ParticipantId AND ACT.IsDeleted = 0-- AND NCP.tran_id = AN.tran_id
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
		    ),
			(SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
			)
		    FROM wwp.ActionNeeded AN
				INNER JOIN wwp.ActionNeededPage ANP
					ON AN.ActionNeededPageId = ANP.Id
		    WHERE CYS.ParticipantId = AN.ParticipantId AND AN.ActionNeededPageId = (SELECT Id
																				   FROM wwp.ActionNeededPage
																				   WHERE Name = 'Child and Youth Supports')
			ORDER BY AN.ModifiedDate DESC																					
		    FOR XML PATH('actionNeeded'), TYPE, ELEMENTS
		   ),
		   ISNULL(CYS.Notes, 'null') notes, 
		   (SELECT FIRST_NAM firstName, MIDDLEINITIAL_NAM middleInitial, LAST_NAM lastName, LTRIM(STR(MONTH(DOB_DT))) + '/' + LTRIM(STR(DAY(DOB_DT))) + '/' +LTRIM(STR(YEAR(DOB_DT)))  dateOfBirth, age, gender, relationship
		    FROM @CWWChildren
			FOR XML PATH('cwwChildren'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('cwwChildren'), TYPE, ELEMENTS
		   ),
		   CASE CYS.IsSpecialNeedsProgramming WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isSpecialNeedsProgramming,
		   ISNULL(CYS.SpecialNeedsProgrammingDetails, 'null') specialNeedsProgrammingDetails, IIF(CYS.HasWicBenefits IS NOT NULL, 'true', 'false') hasChildUnder5,
		   IIF(CYS.HasChildren12OrUnder = 1 OR CYS.HasChildrenOver12WithDisabilityInNeedOfChildCare = 1 OR CYS.HasWicBenefits IS NULL, 'true', 'false') hasChild5OrOver,
		   CYS.rowVersion,
		   IIF(CYS.ModifiedBy = 'WWP Conversion', CYS.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT CYS1.ModifiedBy
							FROM ##SP_ReadCDCHistory_CYS_Temp_1 CYS1
							WHERE CYS1.Id = CYS.Id AND CYS1.tran_id = CYS.tran_id)
		   ))modifiedBy, CYS.modifiedDate
	FROM ##SP_ReadCDCHistory_CYS_Temp_1 CYS
	WHERE CYS.Id = @IdentityNumber2
	ORDER BY CYS.modifiedDate DESC
	FOR XML PATH('ChildYouthSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_CYS_Temp_1 CYS
	ORDER BY CYS.modifiedDate DESC
	FOR XML PATH('ChildYouthSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_CYS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_CYS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_CYS_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_CYS_Temp_3
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_CYS_Temp_4') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_CYS_Temp_4
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_CYS_Temp_5') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_CYS_Temp_5

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_EHS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_EHS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.EducationSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))
	DECLARE @EE TABLE (EEId INT)
	DECLARE @ER TABLE (ERId INT)

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'SchoolGradeLevel') AND (SO_R.name <> 'CertificateIssuingAuthority')
			AND (SO_R.name <> 'SchoolGraduationStatus'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'SchoolGradeLevel') AND (SO_R.name <> 'CertificateIssuingAuthority')
			   AND (SO_R.name <> 'SchoolGraduationStatus'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT DISTINCT ' + @ParentColumnName + ' FROM ' + 'cdc.' + @SchemaName + '_' + @TableName2 + '_CT WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_EH_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_EH_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_EH_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_EH_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_EH_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @EE
	SELECT Id
	FROM wwp.EducationExam
	WHERE ParticipantId IN (SELECT ParticipantId
						   FROM ##SP_ReadCDCHistory_EH_Temp_1)

	INSERT INTO @ER
	SELECT Id
	FROM wwp.ExamResult
	WHERE EducationExamId IN (SELECT DISTINCT EEId
							 FROM @EE)

	--SELECT * FROM @EE
	--SELECT * FROM @ER
	
	SELECT X.*
	INTO #SP_ReadCDCHistory_EH_Temp_3
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DateTaken], a.[Details], a.[ExamTypeId], a.[Id],
			   a.[IsDeleted], a.[ModifiedBy], a.[ModifiedDate], a.[ParticipantId], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time],
			   b.[tran_id],
			  (SELECT CC.column_name + ','
			   FROM [cdc].[captured_columns] CC
			   INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
			   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[EducationExam]'))
			   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			   FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_EducationExam_CT a, cdc.lsn_time_mapping  b
		WHERE 1= 2) X

	SELECT X.*
	INTO #SP_ReadCDCHistory_EH_Temp_4
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DatePassed], a.[EducationExamId], a.[ExamEquivalencyTypeId],
			   a.[ExamLevelType], a.[ExamPassTypeId], a.[ExamSubjectTypeId], a.[GradeEquivalency], a.[Id], a.[IsDeleted], a.[Level], a.[MaxScoreRange], a.[ModifiedBy], a.[ModifiedDate],
			   a.[NRSTypeId], a.[RowVersion], a.[Score], a.[SPLTypeId], a.[Version], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
				INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[ExamResult]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_ExamResult_CT a, cdc.lsn_time_mapping  b
		WHERE 1= 2) X
	
	INSERT INTO #SP_ReadCDCHistory_EH_Temp_3
	SELECT X.*
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DateTaken], a.[Details], a.[ExamTypeId], a.[Id],
			   a.[IsDeleted], a.[ModifiedBy], a.[ModifiedDate], a.[ParticipantId], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time],
			   b.[tran_id],
			  (SELECT CC.column_name + ','
			   FROM [cdc].[captured_columns] CC
			   INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
			   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[EducationExam]'))
			   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			   FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_EducationExam_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT EEId FROM @EE) AND [__$operation] in (1,2,4)
	UNION
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DateTaken], a.[Details], a.[ExamTypeId], a.[Id],
			   a.[IsDeleted], a.[ModifiedBy], a.[ModifiedDate], a.[ParticipantId], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time],
			   b.[tran_id],
			  (SELECT CC.column_name + ','
			   FROM [cdc].[captured_columns] CC
			   INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
			   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[EducationExam]'))
			   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			   FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM hst.wwp_EducationExam_CT a, hst.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT EEId FROM @EE) AND [__$operation] in (1,2,4)) X
		ORDER BY Id

	INSERT INTO #SP_ReadCDCHistory_EH_Temp_4
	SELECT X.*
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DatePassed], a.[EducationExamId], a.[ExamEquivalencyTypeId],
			   a.[ExamLevelType], a.[ExamPassTypeId], a.[ExamSubjectTypeId], a.[GradeEquivalency], a.[Id], a.[IsDeleted], a.[Level], a.[MaxScoreRange], a.[ModifiedBy], a.[ModifiedDate],
			   a.[NRSTypeId], a.[RowVersion], a.[Score], a.[SPLTypeId], a.[Version], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
				INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[ExamResult]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.wwp_ExamResult_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT ERId FROM @ER) AND [__$operation] in (1,2,4)
	UNION
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[DatePassed], a.[EducationExamId], a.[ExamEquivalencyTypeId],
			   a.[ExamLevelType], a.[ExamPassTypeId], a.[ExamSubjectTypeId], a.[GradeEquivalency], a.[Id], a.[IsDeleted], a.[Level], a.[MaxScoreRange], a.[ModifiedBy], a.[ModifiedDate],
			   a.[NRSTypeId], a.[RowVersion], a.[Score], a.[SPLTypeId], a.[Version], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
				INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[ExamResult]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																 WHEN '2' THEN 'RECORD INSERTED '
																 WHEN '3' THEN 'BEFORE UPDATE '
																 WHEN '4' THEN 'AFTER UPDATE '
											 END AS ACTION
		FROM hst.wwp_ExamResult_CT a, hst.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT ERId FROM @ER) AND [__$operation] in (1,2,4)) X
		ORDER BY Id

	--SELECT * FROM ##SP_ReadCDCHistory_EH_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_EH_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_EH_Temp_3
	--SELECT * FROM #SP_ReadCDCHistory_EH_Temp_4
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_EH_Temp_1) > 0
	BEGIN
	SELECT EH.schoolGraduationStatusId diploma, GS.Name diplomaName,
		   (SELECT C.Name + ', ' + S.Code + IIF(CO.Code = '89', '', ', ' + CO.Name) [description], ISNULL(CAST(C.LongitudeNumber AS VARCHAR(25)), 'null') longitude, ISNULL(CAST(C.LatitudeNumber AS VARCHAR(25)), 'null') latitude,
		    C.Name city, S.Code [state], CO.name country, C.googlePlaceId
		    FROM wwp.City C
				LEFT JOIN wwp.State S
					ON C.StateId = S.Id
				LEFT JOIN wwp.Country CO
					ON S.CountryId = CO.Id
			 WHERE SCE.CityId = C.Id
			 FOR XML PATH('location'), TYPE, ELEMENTS
		   ),
		   SCE.Name schoolName, ISNULL(EH.notes, 'null') notes, ISNULL(CAST(EH.certificateYearAwarded AS VARCHAR(10)), 'null') certificateYearAwarded, EH.lastYearAttended,
		   CASE CAST(EH.isCurrentlyEnrolled AS VARCHAR(4)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCurrentlyEnrolled, EH.lastGradeLevelCompletedId lastGradeCompleted,
		   GL.Name lastGradeCompletedName, CASE CAST(EH.IsWorkingOnCertificate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END gedHsedStatus, IIF(ISNULL(CAST(EH.HasEverAttendedSchool AS VARCHAR(10)), 'null') = '1', 'true', 'false') hasEverGoneToSchool,
		   ISNULL(CAST(EH.CertificateIssuingAuthorityId AS VARCHAR(10)), 'null') issuingAuthorityCode, ISNULL(CIA.Name, 'null') issuingAuthorityName,
		   CASE CAST(EH.hasEducationPlan AS VARCHAR(4)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasEducationPlan, ISNULL(EH.educationPlanDetails, 'null') educationPlanDetails,
		   CASE CAST(EH.isWorkingOnCertificate AS VARCHAR(4)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isWorkingOnCertificate,
		   ISNULL(CAST(EE.Id AS VARCHAR(4)), 'null') examSubjectTypeId, EH.rowVersion,
		   IIF(EH.ModifiedBy = 'WWP Conversion', EH.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT EH1.ModifiedBy
							FROM ##SP_ReadCDCHistory_EH_Temp_1 EH1
							WHERE EH1.Id = EH.Id AND EH1.tran_id = EH.tran_id)
		   ))modifiedBy,
		   EH.modifiedDate
	FROM ##SP_ReadCDCHistory_EH_Temp_1 EH
		LEFT JOIN wwp.SchoolGraduationStatus GS
			ON EH.SchoolGraduationStatusId = GS.Id
		LEFT JOIN ##SP_ReadCDCHistory_EH_Temp_2 SCE
			ON EH.SchoolCollegeEstablishmentId = SCE.Id AND EH.tran_id = SCE.tran_id
		LEFT JOIN wwp.SchoolGradeLevel GL
			ON ISNULL(EH.LastGradeLevelCompletedId, 0) = ISNULL(GL.Id, 0)
		LEFT JOIN wwp.CertificateIssuingAuthority CIA
			ON ISNULL(EH.CertificateIssuingAuthorityId, 0) = ISNULL(CIA.Id, 0)
		LEFT JOIN #SP_ReadCDCHistory_EH_Temp_3 EE
			ON ISNULL(EE.ParticipantId, 0) = ISNULL(EH.ParticipantId, 0) AND EE.tran_id = EH.tran_id
	WHERE EH.Id = @IdentityNumber2 AND EH.IsDeleted = 0
	ORDER BY EH.modifiedDate DESC
	FOR XML PATH('EducationSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_EH_Temp_1 EH
	WHERE EH.Id = @IdentityNumber2
	FOR XML PATH('EducationSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_EH_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_WP_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_EH_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_EH_Temp_3
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_EH_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_EH_Temp_3

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_FBS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_FBS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@DeletedFamilyMembers INT,
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.FamilyBarriersSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @C TABLE (Id INT IDENTITY(1,1), CId INT)
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'Contact') AND (SO_R.name <> 'ApplicationStatusType'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'Contact') AND (SO_R.name <> 'ApplicationStatusType'))
	ORDER BY Parent_Table, Parent_Column

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_FBS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_FBS_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_FBS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_FBS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
			SELECT X.*
			FROM (
			SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + '',''
							FROM [cdc].[captured_columns] CC
							INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
							WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		WHEN ''2'' THEN ''RECORD INSERTED ''
																		WHEN ''3'' THEN ''BEFORE UPDATE ''
																		WHEN ''4'' THEN ''AFTER UPDATE ''
													END AS ACTION
			FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
			UNION
		
			SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + '',''
							FROM [cdc].[captured_columns] CC
							INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
							WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		WHEN ''2'' THEN ''RECORD INSERTED ''
																		WHEN ''3'' THEN ''BEFORE UPDATE ''
																		WHEN ''4'' THEN ''AFTER UPDATE ''
													END AS ACTION
			FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_FBS_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_FBS_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_2
			FROM ##SP_ReadCDCHistory_FBS_Temp_2
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_3
			FROM ##SP_ReadCDCHistory_FBS_Temp_3
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_4
			FROM ##SP_ReadCDCHistory_FBS_Temp_4
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_5
			FROM ##SP_ReadCDCHistory_FBS_Temp_5
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_6
			FROM ##SP_ReadCDCHistory_FBS_Temp_6
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_7
			FROM ##SP_ReadCDCHistory_FBS_Temp_7
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_8
			FROM ##SP_ReadCDCHistory_FBS_Temp_8
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_9
			FROM ##SP_ReadCDCHistory_FBS_Temp_9
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_10
			FROM ##SP_ReadCDCHistory_FBS_Temp_10
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_11
			FROM ##SP_ReadCDCHistory_FBS_Temp_11
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_12
			FROM ##SP_ReadCDCHistory_FBS_Temp_12
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_13
			FROM ##SP_ReadCDCHistory_FBS_Temp_13
			WHERE tran_id = @TranId

			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_14
			FROM ##SP_ReadCDCHistory_FBS_Temp_14
			WHERE tran_id = @TranId

			SELECT Id, FamilyBarriersSectionId, RelationShipId, FirstName, LastName, Details, ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_FBS_Temp_15
			FROM ##SP_ReadCDCHistory_FBS_Temp_15
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_2
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_3
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_3
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_3
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_4
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_4
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_4
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_5
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_5
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_5
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_6
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_6
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_6
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_7
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_7
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_7
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_8
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_8
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_8
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_9
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_9
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_9
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_10
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_10
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_10
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_11
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_11
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_11
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_12
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_12
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_12
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_13
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_13
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_13
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_14
			SELECT Id, Details, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_14
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_14
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_FBS_Temp_15
			SELECT Id, FamilyBarriersSectionId, RelationShipId, FirstName, LastName, Details, ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_FBS_Temp_15
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_FBS_Temp_15
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--SELECT * FROM ##SP_ReadCDCHistory_FBS_Temp_1
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_3
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_4
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_5
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_6
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_7
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_8
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_9
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_10
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_11
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_12
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_13
	--SELECT * FROM #SP_ReadCDCHistory_FBS_Temp_14
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_FBS_Temp_1) > 0
	BEGIN
	SELECT @DeletedFamilyMembers = COUNT(DeleteReasonId)
	FROM #SP_ReadCDCHistory_FBS_Temp_15

	SELECT CASE CAST(FBS.hasEverAppliedSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasEverAppliedSsi, CASE CAST(FBS.isCurrentlyApplyingSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCurrentlyApplyingSsi,
		   ISNULL(CAST(FBS.ssiApplicationStatusId AS VARCHAR(10)), 'null') ssiApplicationStatusId, ISNULL(AST.ApplicationStatusName, 'null') ssiApplicationStatusName,
		   ISNULL(FBS14.Details, 'null') ssiApplicationStatusDetails, ISNULL(CAST(FORMAT(FBS.ssiApplicationDate, 'MM') AS VARCHAR(2)) + '/' + CAST(YEAR(FBS.ssiApplicationDate) AS VARCHAR(10)), 'null') ssiApplicationDate,
		   CASE CAST(FBS.ssiApplicationIsAnyoneHelping AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END ssiApplicationIsAnyoneHelping,  ISNULL(FBS13.Details, 'null') ssiApplicationDetails,
		   ISNULL(CAST(FBS.ssiApplicationContactId AS VARCHAR(10)), 'null') ssiApplicationContactId, CASE CAST(FBS.hasReceivedPastSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasReceivedPastSsi,
		   ISNULL(FBS11.Details, 'null') pastSsiDetails,CASE CAST(FBS.hasDeniedSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasDeniedSsi,
		   ISNULL(CAST(FORMAT(FBS.deniedSsiDate, 'MM') AS VARCHAR(2)) + '/' + CAST(YEAR(FBS.deniedSsiDate) AS VARCHAR(10)), 'null') deniedSsiDate,
		   ISNULL(FBS8.Details, 'null') deniedSsiDetails, CASE CAST(FBS.isInterestedInLearningMoreSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInterestedInLearningMoreSsi,
		   ISNULL(FBS10.Details, 'null') interestedInLearningMoreSsiDetails, CASE CAST(FBS.hasAnyoneAppliedForSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasAnyoneAppliedForSsi,
		   CASE CAST(FBS.isAnyoneReceivingSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAnyoneReceivingSsi, ISNULL(FBS4.Details, 'null') anyoneReceivingSsiDetails,
		   CASE CAST(FBS.isAnyoneApplyingForSsi AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAnyoneApplyingForSsi, ISNULL(FBS3.Details, 'null') anyoneApplyingForSsiDetails,
		   CASE CAST(FBS.hasCaretakingResponsibilities AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasCaretakingResponsibilities,
		   CASE CAST(FBS.hasConcernsAboutCaretakingResponsibilities AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasConcernsAboutCaretakingResponsibilities,
		   ISNULL(FBS7.Details, 'null') concernsAboutCaretakingResponsibilitiesDetails,
		   CASE CAST(FBS.doesHouseholdEngageInRiskyActivities AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END doesHouseholdEngageInRiskyActivities, ISNULL(FBS9.Details, 'null') householdEngageInRiskyActivitiesDetails,
		   CASE CAST(FBS.doChildrenHaveBehaviourProblems AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END doChildrenHaveBehaviourProblems, ISNULL(FBS6.Details, 'null') childrenHaveBehaviourProblemsDetails,
		   CASE CAST(FBS.areChildrenAtRiskOfSchoolSuspension AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END areChildrenAtRiskOfSchoolSuspension, ISNULL(FBS5.Details, 'null') childrenAtRiskOfSchoolSuspensionDetails,
		   CASE CAST(FBS.areAnyFamilyIssuesAffectWork AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END areAnyFamilyIssuesAffectWork, ISNULL(FBS2.Details, 'null') anyFamilyIssuesAffectWorkDetails,
		   ISNULL(FBS12.Details, 'null') familyBarriersReasonForPastSsiDetails,
		   (SELECT ISNULL(FM.FirstName, 'null') firstName, ISNULL(FM.LastName, 'null') lastName, ISNULL(CAST(FM.relationshipId AS VARCHAR(10)), 'null') relationshipId,
		    ISNULL(R.RelationName, 'null') relationshipName, ISNULL(FM.Details, 'null') details, ISNULL(CAST(FM.DeleteReasonId AS VARCHAR(10)), 'null') deleteReasonId,
			ISNULL(CAST(FM.Id AS VARCHAR(10)), 'null') id
			FROM #SP_ReadCDCHistory_FBS_Temp_15 FM
				INNER JOIN wwp.Relationship R
					ON FM.RelationshipId = R.Id
			WHERE FM.FamilyBarriersSectionId = FBS.Id AND FM.tran_id = FBS.tran_id
			FOR XML PATH('familyMembers'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('familyMembers'), TYPE, ELEMENTS
		   ),
		   IIF(@DeletedFamilyMembers <> 0, CAST(@DeletedFamilyMembers AS VARCHAR(10)), 'null') deletedFamilyMembers,
		   (SELECT TOP 1 AN.id, AN.ActionNeededPageId pageId, ANP.Name pageName, CASE CAST(AN.isNoActionNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoActionNeeded,
		    (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		     FROM wwp.Worker
		     WHERE WAMSId = (SELECT AN1.ModifiedBy
							 FROM wwp.ActionNeeded AN1
							 WHERE AN1.Id = AN.Id)
		    )modifiedBy,
		    AN.modifiedDate, AN.rowVersion,
		    (SELECT ACT.id, ACT.actionNeededId, ACT.ActionAssigneeId assigneeId, AA.Name assigneeName, AN1.ActionNeededPageId pageId, ANP.Name pageName, ACT.actionItemId,
			 AI.Name actionItemName, ISNULL(CAST(ACT.ActionPriorityId AS VARCHAR(10)), 'nul') priorityId, ISNULL(AP.Name, 'null') priorityName, ISNULL(ACT.FollowUpTask, null) followUpTask, ISNULL(CAST(ACT.DueDate AS VARCHAR(10)), 'null') dueDate,
			 CASE CAST(ACT.IsNoDueDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoDueDate, ISNULL(CAST(ACT.CompletionDate AS VARCHAR(10)), 'null') completionDate,
			 CASE CAST(ACT.IsNoCompletionDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoCompletionDate, ISNULL(ACT.Details, 'null') details, ACT.createdDate, ACT.modifiedDate,
			 ACT.modifiedBy, ACT.rowVersion
			 FROM wwp.ActionNeededTask ACT
				LEFT JOIN wwp.ActionNeeded AN1
					ON ACT.ActionNeededId = AN1.Id
				LEFT JOIN wwp.ActionAssignee AA
					ON ACT.ActionAssigneeId = AA.Id
				LEFT JOIN wwp.ActionItem AI
					ON ACT.ActionItemId = AI.Id
				LEFT JOIN wwp.ActionNeededPage ANP
					ON AN1.ActionNeededPageId = ANP.Id
				LEFT JOIN wwp.ActionPriority AP
					ON ACT.ActionPriorityId = AP.Id
			 WHERE ACT.ActionNeededId = AN.Id AND AN.ParticipantId = FBS.ParticipantId AND ACT.IsDeleted = 0-- AND NCP.tran_id = AN.tran_id
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
		    ),
			(SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
			)
		    FROM wwp.ActionNeeded AN
				INNER JOIN wwp.ActionNeededPage ANP
					ON AN.ActionNeededPageId = ANP.Id
		    WHERE FBS.ParticipantId = AN.ParticipantId AND AN.ActionNeededPageId = (SELECT Id
																				   FROM wwp.ActionNeededPage
																				   WHERE Name = 'Family Barriers')
			ORDER BY AN.ModifiedDate DESC																					
		    FOR XML PATH('actionNeeded'), TYPE, ELEMENTS
		   ),
		   ISNULL(FBS.Notes, 'null') notes, FBS.rowVersion,
		   IIF(FBS.ModifiedBy = 'WWP Conversion', FBS.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT FBS1.ModifiedBy
							FROM ##SP_ReadCDCHistory_FBS_Temp_1 FBS1
							WHERE FBS1.Id = FBS.Id AND FBS1.tran_id = FBS.tran_id)
		   ))modifiedBy, FBS.modifiedDate
	FROM ##SP_ReadCDCHistory_FBS_Temp_1 FBS
		LEFT JOIN wwp.ApplicationStatusType AST
			ON FBS.SSIApplicationStatusId = AST.Id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_8 FBS8
			ON FBS.DeniedSsiDetailsId = FBS8.Id AND FBS.tran_id = FBS8.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_11 FBS11
			ON FBS.PastSsiDetailsId = FBS11.Id AND FBS.tran_id = FBS11.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_2 FBS2
			ON FBS.AnyFamilyIssuesAffectWorkDetailsId = FBS2.Id AND FBS.tran_id = FBS2.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_3 FBS3
			ON FBS.AnyoneApplyingForSsiDetailsId = FBS3.Id AND FBS.tran_id = FBS3.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_4 FBS4
			ON FBS.AnyoneReceivingSsiDetailsId = FBS4.Id AND FBS.tran_id = FBS4.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_6 FBS6
			ON FBS.ChildrenHaveBehaviourProblemsDetailsId = FBS6.Id AND FBS.tran_id = FBS6.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_7 FBS7
			ON FBS.ConcernsAboutCaretakingResponsibilitiesDetailsId = FBS7.Id AND FBS.tran_id = FBS7.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_9 FBS9
			ON FBS.HouseholdEngageInRiskyActivitiesDetailsId = FBS9.Id AND FBS.tran_id = FBS9.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_10 FBS10
			ON FBS.InterestedInLearningMoreSsiDetailsId = FBS10.Id AND FBS.tran_id = FBS10.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_13 FBS13
			ON FBS.SsiApplicationDetailsId = FBS13.Id AND FBS.tran_id = FBS13.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_14 FBS14
			ON FBS.SsiApplicationStatusDetailsId = FBS14.Id AND FBS.tran_id = FBS14.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_5 FBS5
			ON FBS.ChildrenAtRiskOfSchoolSuspensionDetailsId = FBS5.Id AND FBS.tran_id = FBS5.tran_id
		LEFT JOIN #SP_ReadCDCHistory_FBS_Temp_12 FBS12
			ON FBS.ReasonForPastSsiDetailsId = FBS12.Id AND FBS.tran_id = FBS12.tran_id
	WHERE FBS.Id = @IdentityNumber2
	ORDER BY FBS.modifiedDate DESC
	FOR XML PATH('FamilyBarriersSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_FBS_Temp_1 FBS
	WHERE FBS.Id = @IdentityNumber2
	FOR XML PATH('FamilyBarriersSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_FBS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_FBS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	--IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_LIS_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_LIS_Temp_3

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_HS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_HS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.HousingSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'HousingSituation'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'HousingSituation'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_HS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_HS_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_HS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_HS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			    (SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4) AND OriginId IS NOT NULL
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4) AND OriginId IS NOT NULL) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_HS_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_HS_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, HousingSectionId, HousingSituationId, CAST(HasEvicted AS INT) HasEvicted, Details, SortOrder, MonthlyAmount, BeginDate, EndDate,
				   CAST(IsAmountUnknown AS INT) IsAmountUnknown, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, RowVersion, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_HS_Temp_3
			FROM ##SP_ReadCDCHistory_HS_Temp_2
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_HS_Temp_3
			SELECT Id, HousingSectionId, HousingSituationId, CAST(HasEvicted AS INT) HasEvicted, Details, SortOrder, MonthlyAmount, BeginDate, EndDate,
				   CAST(IsAmountUnknown AS INT) IsAmountUnknown, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, RowVersion, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_HS_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_HS_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--SELECT * FROM ##SP_ReadCDCHistory_HS_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_HS_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_HS_Temp_3
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_HS_Temp_1) > 0
	BEGIN
	SELECT HS.housingSituationId, HSN.Name housingSituationName, ISNULL(CAST(FORMAT(HS.currentHousingBeginDate, 'MM') AS VARCHAR(2)) + '/' + CAST(YEAR(HS.currentHousingBeginDate) AS VARCHAR(10)), 'null') currentHousingBeginDate, ISNULL(CAST(FORMAT(HS.currentHousingEndDate, 'MM') AS VARCHAR(2)) + '/' + CAST(YEAR(HS.currentHousingEndDate) AS VARCHAR(10)), 'null') currentHousingEndDate,
		   CASE CAST(HS.hasCurrentEvictionRisk AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasCurrentEvictionRisk, ISNULL(HS.currentHousingDetails, 'null') currentHousingDetails,
		   ISNULL(CAST(HS.currentMonthlyAmount AS VARCHAR(10)), 'null') currentMonthlyAmount, CASE CAST(HS.isCurrentAmountUnknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCurrentAmountUnknown,
		   ISNULL(CAST(HS.HasBeenEvicted AS VARCHAR(4)), 'null') hasBeenEvicted, CASE CAST(HS.isCurrentMovingToHistory AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCurrentMovingToHistory,
		   CASE CAST(HS.hasUtilityDisconnectionRisk AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasUtilityDisconnectionRisk, ISNULL(HS.utilityDisconnectionRiskNotes, 'null') utilityDisconnectionRiskNotes,
		   CASE CAST(HS.hasDifficultyWorking AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasDifficultyWorking, ISNULL(HS.difficultyWorkingNotes, 'null') difficultyWorkingNotes,
		   (SELECT TOP 1 AN.id, AN.ActionNeededPageId pageId, ANP.Name pageName, CASE CAST(AN.isNoActionNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoActionNeeded,
		    (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		     FROM wwp.Worker
		     WHERE WAMSId = (SELECT AN1.ModifiedBy
							 FROM wwp.ActionNeeded AN1
							 WHERE AN1.Id = AN.Id)
		    )modifiedBy,
		    AN.modifiedDate, AN.rowVersion,
		    (SELECT ACT.id, ACT.actionNeededId, ACT.ActionAssigneeId assigneeId, AA.Name assigneeName, AN1.ActionNeededPageId pageId, ANP.Name pageName, ACT.actionItemId,
			 AI.Name actionItemName, ISNULL(CAST(ACT.ActionPriorityId AS VARCHAR(10)), 'nul') priorityId, ISNULL(AP.Name, 'null') priorityName, ISNULL(ACT.FollowUpTask, null) followUpTask, ISNULL(CAST(ACT.DueDate AS VARCHAR(10)), 'null') dueDate,
			 CASE CAST(ACT.IsNoDueDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoDueDate, ISNULL(CAST(ACT.CompletionDate AS VARCHAR(10)), 'null') completionDate,
			 CASE CAST(ACT.IsNoCompletionDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoCompletionDate, ISNULL(ACT.Details, 'null') details, ACT.createdDate, ACT.modifiedDate,
			 ACT.modifiedBy, ACT.rowVersion
			 FROM wwp.ActionNeededTask ACT
				LEFT JOIN wwp.ActionNeeded AN1
					ON ACT.ActionNeededId = AN1.Id
				LEFT JOIN wwp.ActionAssignee AA
					ON ACT.ActionAssigneeId = AA.Id
				LEFT JOIN wwp.ActionItem AI
					ON ACT.ActionItemId = AI.Id
				LEFT JOIN wwp.ActionNeededPage ANP
					ON AN1.ActionNeededPageId = ANP.Id
				LEFT JOIN wwp.ActionPriority AP
					ON ACT.ActionPriorityId = AP.Id
			 WHERE ACT.ActionNeededId = AN.Id AND AN.ParticipantId = HS.ParticipantId AND ACT.IsDeleted = 0-- AND NCP.tran_id = AN.tran_id
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
		    ),
			(SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
			)
		    FROM wwp.ActionNeeded AN
				INNER JOIN wwp.ActionNeededPage ANP
					ON AN.ActionNeededPageId = ANP.Id
		    WHERE HS.ParticipantId = AN.ParticipantId AND AN.ActionNeededPageId = (SELECT Id
																				   FROM wwp.ActionNeededPage
																				   WHERE Name = 'Housing')
			ORDER BY AN.ModifiedDate DESC																					
		    FOR XML PATH('actionNeeded'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(HSH.id AS VARCHAR(4)), 'null') id, ISNULL(CAST(HSH.HousingSituationId AS VARCHAR(4)), 'null') historyType, ISNULL(HSN1.Name, 'null') historyTypeName,
		    ISNULL(CAST(HSH.BeginDate AS VARCHAR(10)), 'null') beginDate, ISNULL(CAST(HSH.EndDate AS VARCHAR(10)), 'null') endDate, CASE CAST(HSH.HasEvicted AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasEvicted,
			CASE CAST(HSH.isAmountUnknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAmountUnknown, ISNULL(CAST(HSH.monthlyAmount AS VARCHAR(10)), 'null') monthlyAmount, ISNULL(HSH.Details, 'null') details
		    FROM #SP_ReadCDCHistory_HS_Temp_3 HSH
				INNER JOIN wwp.HousingSituation HSN1
					ON HSH.HousingSituationId = HSN1.Id
			WHERE HSH.HousingSectionId = HS.Id AND HSH.tran_id = HS.tran_Id AND HSH.IsDeleted = 0
			FOR XML PATH('histories'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('histories'), TYPE, ELEMENTS
		   ),
		   ISNULL(HS.Notes, 'null') housingNotes,
		   HS.rowVersion,
		   IIF(HS.ModifiedBy = 'WWP Conversion', HS.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT HS1.ModifiedBy
							FROM ##SP_ReadCDCHistory_HS_Temp_1 HS1
							WHERE HS1.Id = HS.Id AND HS1.tran_id = HS.tran_id)
		   ))modifiedBy, HS.modifiedDate
	FROM ##SP_ReadCDCHistory_HS_Temp_1 HS
		LEFT JOIN wwp.HousingSituation HSN
			ON HS.HousingSituationId = HSN.Id
	WHERE HS.Id = @IdentityNumber2
	ORDER BY HS.modifiedDate DESC
	FOR XML PATH('HousingSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_HS_Temp_1 HS
	WHERE HS.Id = @IdentityNumber2
	FOR XML PATH('HousingSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_HS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_HS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_HS_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_HS_Temp_3

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_LIS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_LIS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@DeletedConvictions INT,
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.LegalIssuesSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------
	
	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_LIS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_LIS_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_LIS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_LIS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_LIS_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	--SELECT * FROM ##SP_ReadCDCHistory_LIS_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_LIS_Temp_2
	--SELECT * FROM ##SP_ReadCDCHistory_LIS_Temp_3
	--SELECT * FROM ##SP_ReadCDCHistory_LIS_Temp_4
	--SELECT * FROM ##SP_ReadCDCHistory_LIS_Temp_5
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_LIS_Temp_1) > 0
	BEGIN

		SELECT @DeletedConvictions = IIF(COUNT(DeleteReasonId) <> 0, COUNT(DeleteReasonId), NULL)
		FROM ##SP_ReadCDCHistory_LIS_Temp_2

		SELECT CASE CAST(LIS.isConvictedOfCrime AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isConvictedOfCrime,
			   (SELECT ISNULL(CAST(C.ConvictionTypeId AS VARCHAR(4)), 'null') [type], ISNULL(CT.Name, 'null') typeName,
			    RIGHT('0' + RTRIM(MONTH(C.DateConvicted)), 2) + '/' + RTRIM(YEAR(C.DateConvicted)) [date], CASE CAST(C.IsUnknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isDateUnknown,
				ISNULL(C.Details, 'null') details
			    FROM ##SP_ReadCDCHistory_LIS_Temp_2 C
					LEFT JOIN wwp.ConvictionType CT
						ON ISNULL(C.ConvictionTypeId, 0) = ISNULL(CT.Id, 0)
				WHERE ISNULL(C.LegalSectionId, 0) = ISNULL(LIS.Id, 0) AND C.tran_id = LIS.tran_id AND C.DeleteReasonId IS NULL
				ORDER BY C.DateConvicted DESC
				FOR XML PATH('convictions'), TYPE, ELEMENTS
			   ),
			   (SELECT NULL,
			    (SELECT NULL
				 FOR XML PATH('NULL'), TYPE, ELEMENTS
				)
				FOR XML PATH('convictions'), TYPE, ELEMENTS
			   ),
			   ISNULL(CAST(@DeletedConvictions AS VARCHAR(4)), 'null') deletedConvictions, CASE CAST(LIS.isUnderCommunitySupervision AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isUnderCommunitySupervision,
			   ISNULL(LIS.communitySupervisonDetails, 'null') communitySupervisonDetails, ISNULL(CAST(LIS.CommunitySupervisonContactId AS VARCHAR(5)), 'null') supervisionContactId,
			   CASE CAST(LIS.HasPendingCharges AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isPending,
			   (SELECT ISNULL(CAST(PC.id AS VARCHAR(4)), 'null') id, ISNULL(CAST(PC.ConvictionTypeId AS VARCHAR(4)), 'null') [type], ISNULL(CT1.Name, 'null') typeName,
				RIGHT('0' + RTRIM(MONTH(PC.ChargeDate)), 2) + '/' + RTRIM(YEAR(PC.ChargeDate)) [date], CASE CAST(PC.IsUnknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isDateUnknown,
				ISNULL(PC.Details, 'null') details
				FROM ##SP_ReadCDCHistory_LIS_Temp_5 PC
					INNER JOIN wwp.ConvictionType CT1
						ON ISNULL(PC.ConvictionTypeId, 0) = ISNULL(CT1.Id, 0)
				WHERE ISNULL(PC.LegalSectionId, 0) = ISNULL(LIS.Id, 0) AND PC.tran_id = LIS.tran_id AND PC.IsDeleted = 0
				FOR XML PATH('pendings'), TYPE, ELEMENTS
			   ),
			   (SELECT NULL,
			    (SELECT NULL
				 FOR XML PATH('NULL'), TYPE, ELEMENTS
				)
				FOR XML PATH('pendings'), TYPE, ELEMENTS
			   ),
			   CASE CAST(LIS.hasFamilyLegalIssues AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasFamilyLegalIssues, ISNULL(LIS.familyLegalIssueNotes, 'null') familyLegalIssueNotes,
			   CASE CAST(LIS.OrderedToPayChildSupport AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasChildSupport, ISNULL(CAST(LIS.MonthlyAmount AS VARCHAR(10)), 'null') childSupportAmount,
			   CASE CAST(LIS.IsUnknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAmountUnknown, CASE CAST(LIS.OweAnyChildSupportBack AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasBackChildSupport,
			   CASE CAST(LIS.HasRestrainingOrders AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasRestrainingOrders, ISNULL(LIS.RestrainingOrderNotes, 'null') restrainingOrderNotes,
			   CASE CAST(LIS.HasRestrainingOrderToPrevent AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasRestrainingOrderToPrevent, ISNULL(LIS.RestrainingOrderToPreventNotes, 'null') restrainingOrderToPreventNotes,
			   ISNULL(LIS.childSupportDetails, 'null') childSupportDetails, CASE CAST(LIS.HasCourtDates AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasUpcomingCourtDates,
			   (SELECT ISNULL(CAST(CD.id AS VARCHAR(4)), 'null') id, ISNULL(CD.Location, 'null') location, RIGHT('0' + RTRIM(MONTH(CD.Date)), 2) + '/' + RTRIM(YEAR(CD.Date)) [date],
				CASE CAST(CD.IsUnknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isDateUnknown, ISNULL(CD.Details, 'null') details
				FROM ##SP_ReadCDCHistory_LIS_Temp_3 CD
				WHERE ISNULL(CD.LegalSectionId, 0) = ISNULL(LIS.Id, 0) AND CD.tran_id = LIS.tran_id AND CD.IsDeleted = 0
				FOR XML PATH('courtDates'), TYPE, ELEMENTS
			   ),
			   (SELECT NULL,
			    (SELECT NULL
				 FOR XML PATH('NULL'), TYPE, ELEMENTS
				)
				FOR XML PATH('courtDates'), TYPE, ELEMENTS
			   ),
			   (SELECT TOP 1 AN.id, AN.ActionNeededPageId pageId, ANP.Name pageName, CASE CAST(AN.isNoActionNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoActionNeeded,
		    (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		     FROM wwp.Worker
		     WHERE WAMSId = (SELECT AN1.ModifiedBy
							 FROM wwp.ActionNeeded AN1
							 WHERE AN1.Id = AN.Id)
		    )modifiedBy,
		    AN.modifiedDate, AN.rowVersion,
		    (SELECT ACT.id, ACT.actionNeededId, ACT.ActionAssigneeId assigneeId, AA.Name assigneeName, AN1.ActionNeededPageId pageId, ANP.Name pageName, ACT.actionItemId,
			 AI.Name actionItemName, ISNULL(CAST(ACT.ActionPriorityId AS VARCHAR(10)), 'nul') priorityId, ISNULL(AP.Name, 'null') priorityName, ISNULL(ACT.FollowUpTask, null) followUpTask, ISNULL(CAST(ACT.DueDate AS VARCHAR(10)), 'null') dueDate,
			 CASE CAST(ACT.IsNoDueDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoDueDate, ISNULL(CAST(ACT.CompletionDate AS VARCHAR(10)), 'null') completionDate,
			 CASE CAST(ACT.IsNoCompletionDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoCompletionDate, ISNULL(ACT.Details, 'null') details, ACT.createdDate, ACT.modifiedDate,
			 ACT.modifiedBy, ACT.rowVersion
			 FROM wwp.ActionNeededTask ACT
				LEFT JOIN wwp.ActionNeeded AN1
					ON ACT.ActionNeededId = AN1.Id
				LEFT JOIN wwp.ActionAssignee AA
					ON ACT.ActionAssigneeId = AA.Id
				LEFT JOIN wwp.ActionItem AI
					ON ACT.ActionItemId = AI.Id
				LEFT JOIN wwp.ActionNeededPage ANP
					ON AN1.ActionNeededPageId = ANP.Id
				LEFT JOIN wwp.ActionPriority AP
					ON ACT.ActionPriorityId = AP.Id
			 WHERE ACT.ActionNeededId = AN.Id AND AN.ParticipantId = LIS.ParticipantId AND ACT.IsDeleted = 0-- AND NCP.tran_id = AN.tran_id
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
		    ),
			(SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
			)
		    FROM wwp.ActionNeeded AN
				INNER JOIN wwp.ActionNeededPage ANP
					ON AN.ActionNeededPageId = ANP.Id
		    WHERE LIS.ParticipantId = AN.ParticipantId AND AN.ActionNeededPageId = (SELECT Id
																				   FROM wwp.ActionNeededPage
																				   WHERE Name = 'Legal Issues')
			ORDER BY AN.ModifiedDate DESC																					
		    FOR XML PATH('actionNeeded'), TYPE, ELEMENTS
		   ),
			   ISNULL(LIS.Notes, 'null') notes, LIS.rowVersion,
			   IIF(LIS.ModifiedBy = 'WWP Conversion', LIS.ModifiedBy,
			   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
				FROM wwp.Worker
				WHERE WAMSId = (SELECT LIS1.ModifiedBy
								FROM ##SP_ReadCDCHistory_LIS_Temp_1 LIS1
								WHERE LIS1.Id = LIS.Id AND LIS1.tran_id = LIS.tran_id)
			   ))modifiedBy, LIS.modifiedDate
		FROM ##SP_ReadCDCHistory_LIS_Temp_1 LIS
		WHERE LIS.Id = @IdentityNumber2
		ORDER BY LIS.modifiedDate DESC
		FOR XML PATH('LegalIssuesSection'), ROOT('History'), ELEMENTS, BINARY BASE64
		END
		ELSE
		BEGIN
		SELECT Id
		FROM ##SP_ReadCDCHistory_LIS_Temp_1 LIS
		WHERE LIS.Id = @IdentityNumber2
		FOR XML PATH('LegalIssuesSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_LIS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_LIS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	--IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_LIS_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_LIS_Temp_3

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_LS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_LS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@Max INT,
	@Columns nVARCHAR(MAX),
	@IdentityNumber VARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10)

	SELECT @IdentityNumber = Id
							 FROM wwp.LanguageSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber
	
	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant')) OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_LS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_LS_Temp_' + CAST(@Count AS VARCHAR(5))
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_LS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_LS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)
		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_LS_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1
	
	PRINT @Count

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_LS_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, SortOrder, LanguageSectionId, LanguageId, IsPrimary, IsAbleToRead, IsAbleToWrite, IsAbleToSpeak, PinNumber, IsDeleted, ModifiedBy, ModifiedDate, RowVersion,
				   @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_LS_Temp_3
			FROM ##SP_ReadCDCHistory_LS_Temp_2
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_LS_Temp_3
			SELECT Id, SortOrder, LanguageSectionId, LanguageId, IsPrimary, IsAbleToRead, IsAbleToWrite, IsAbleToSpeak, PinNumber, IsDeleted, ModifiedBy, ModifiedDate, RowVersion,
				   @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_LS_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_LS_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--SELECT * FROM ##SP_ReadCDCHistory_LS_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_LS_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_LS_Temp_3
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_LS_Temp_1) > 0
	BEGIN
	SELECT KL.Id homeLanguageId, KL.LanguageId homeLanguageTypeId, L.Name homeLanguageName,
		   CASE CAST(KL.IsAbleToRead AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAbleToReadHomeLanguage,
		   CASE CAST(KL.IsAbleToWrite AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAbleToWriteHomeLanguage,
		   CASE CAST(KL.IsAbleToSpeak AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAbleToSpeakHomeLanguage,
		   CASE CAST(LS.IsAbleToReadEnglish AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAbleToReadEnglish,
		   CASE CAST(LS.IsAbleToWriteEnglish AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAbleToWriteEnglish,
		   CASE CAST(LS.IsAbleToSpeakEnglish AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAbleToSpeakEnglish,
		   (SELECT KL.IsPrimary isPrimary, KL.Id id, KL.LanguageId languageId, LA.Name languageName,
				   CASE CAST(IsAbleToRead AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END canRead,
				   CASE CAST(IsAbleToWrite AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END canWrite,
				   CASE CAST(IsAbleToSpeak AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END canSpeak
			FROM ##SP_ReadCDCHistory_LS_Temp_2 KL
				INNER JOIN wwp.Language LA
					ON KL.LanguageId = LA.Id
			WHERE KL.LanguageSectionId = LS.Id AND LS.tran_id = KL.tran_id AND IsPrimary = 0 AND KL.IsDeleted = 0
			FOR XML PATH('knownLanguages'), TYPE, ELEMENTS
		   ),
		   IIF((SELECT COUNT(*) FROM ##SP_ReadCDCHistory_LS_Temp_2 KL WHERE KL.LanguageSectionId = LS.Id AND LS.tran_id = KL.tran_id AND IsPrimary = 0 AND KL.IsDeleted = 0) = 0, 
		   (SELECT NULL isPrimary, NULL id, NULL languageId, NULL languageName,
				   NULL canRead, NULL canWrite, NULL canSpeak
				   FROM ##SP_ReadCDCHistory_LS_Temp_2 KL
				INNER JOIN wwp.Language LA
					ON KL.LanguageId = LA.Id
			WHERE KL.LanguageSectionId = LS.Id AND LS.tran_id = KL.tran_id AND IsPrimary = 0 AND KL.IsDeleted = 0
			FOR XML PATH('knownLanguages'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL isPrimary, NULL id, NULL languageId, NULL name,
				   NULL isAbleToReadHomeLanguage, NULL isAbleToWriteHomeLanguage, NULL isAbleToSpeakHomeLanguage,
				   (SELECT NULL
				    FOR XML PATH('NULL'), TYPE, ELEMENTS
				   )
			FOR XML PATH('knownLanguages'), TYPE, ELEMENTS
		   )),
		   CASE CAST(LS.IsNeedingInterpreter AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNeedingInterpreter,
		   ISNULL(LS.InterpreterDetails, 'null') interpreterDetails, ISNULL(LS.Notes, 'null') notes, LS.RowVersion rowVersion,
		   IIF(LS.ModifiedBy = 'WWP Conversion', LS.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT LS1.ModifiedBy
							FROM ##SP_ReadCDCHistory_LS_Temp_1 LS1
							WHERE LS1.Id = LS.Id AND LS1.tran_id = LS.tran_id)
		   ))modifiedBy,
		   LS.ModifiedDate modifiedDate
	FROM ##SP_ReadCDCHistory_LS_Temp_1 LS
		LEFT JOIN #SP_ReadCDCHistory_LS_Temp_3 KL
			ON LS.Id = KL.LanguageSectionId AND LS.tran_id = KL.tran_id AND KL.IsPrimary = 1
		LEFT JOIN wwp.Language L
			ON KL.LanguageId = L.Id
	ORDER BY LS.ModifiedDate DESC
	FOR XML RAW('LanguageSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_LS_Temp_1 LS
	FOR XML RAW('LanguageSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_LS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_LS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_MSS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC wwp.SP_ReadCDCHistory_MSS @TableName = 'MilitaryTrainingSection',  -- varchar(200)
--                               @PinNumber = 7009298858 -- decimal(10, 0)


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_MSS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.MilitaryTrainingSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))
	DECLARE @SCE TABLE (SCEId INT)

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'PolarLookup') AND (SO_R.name <> 'MilitaryRank')
			AND (SO_R.name <> 'MilitaryBranch') AND (SO_R.name <> 'MilitaryDischargeType'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'PolarLookup') AND (SO_R.name <> 'MilitaryRank')
			   AND (SO_R.name <> 'MilitaryBranch') AND (SO_R.name <> 'MilitaryDischargeType'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_MS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_MS_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_MS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_MS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	--SELECT * FROM ##SP_ReadCDCHistory_MS_Temp_1
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_MS_Temp_1) > 0
	BEGIN
	SELECT CASE CAST(MS.DoesHaveTraining AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasTraining, ISNULL(CAST(MS.MilitaryBranchId AS VARCHAR(10)), 'null') branchId, ISNULL(MB.Name, 'null') branchName,
		   ISNULL(MS.MilitaryRankId, null) rankId, ISNULL(MR.Name, 'null') rankName, ISNULL(CAST(MS.Rate AS VARCHAR(10)), 'null') rate,
		   CASE CAST(MS.isCurrentlyEnlisted AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCurrentlyEnlisted, RIGHT('0' + RTRIM(MONTH(MS.enlistmentDate)), 2) + '/' + RTRIM(YEAR(MS.enlistmentDate)) enlistmentDate,
		   RIGHT('0' + RTRIM(MONTH(MS.dischargeDate)), 2) + '/' + RTRIM(YEAR(MS.dischargeDate)) dischargeDate, ISNULL(CAST(MS.MilitaryDischargeTypeId AS VARCHAR(4)), 'null') dischargeTypeId,
		   ISNULL(MDT.Name, 'null') dischargeTypeName, ISNULL(MS.skillsAndTraining, 'null') skillsAndTraining, Ms.PolarLookupId isEligibleForBenefitsYesNoUnknown,
		   PL.Name isEligibleForBenefitsYesNoUnknownName, ISNULL(MS.benefitsDetails, 'null') benefitsDetails, ISNULL(MS.notes, 'null') notes, MS.rowVersion,
		   IIF(MS.ModifiedBy = 'WWP Conversion', MS.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT MS1.ModifiedBy
							FROM ##SP_ReadCDCHistory_MS_Temp_1 MS1
							WHERE MS1.Id = MS.Id AND MS1.tran_id = MS.tran_id)
		   ))modifiedBy, MS.modifiedDate
	FROM ##SP_ReadCDCHistory_MS_Temp_1 MS
		LEFT JOIN wwp.MilitaryBranch MB
			ON ISNULL(MS.MilitaryBranchId, 0) = ISNULL(MB.Id, 0)
		LEFT JOIN wwp.MilitaryRank MR
			ON ISNULL(MS.MilitaryRankId, 0) = ISNULL(MR.Id, 0)
		LEFT JOIN wwp.MilitaryDischargeType MDT
			ON ISNULL(MS.MilitaryDischargeTypeId, 0) = ISNULL(MDT.Id, 0)
		LEFT JOIN wwp.PolarLookup PL
			ON MS.PolarLookupId = PL.Id
	WHERE MS.Id = @IdentityNumber2
	ORDER BY MS.modifiedDate DESC
	FOR XML PATH('MilitaryTrainingSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_MS_Temp_1 MS
	WHERE MS.Id = @IdentityNumber2
	FOR XML PATH('MilitaryTrainingSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_MS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_MS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_NCPRS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_NCPRS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@NCRCId INT,
	@NCRCCount INT = 1,
	@NCRCMax INT,
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.NonCustodialParentsReferralSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @NCRC TABLE (Id INT IDENTITY(1,1), NCRCId INT)
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'YesNoSkipLookup')) OR ((SO_R.name = @tableName) AND (SO_R.type = 'U')
		   AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'YesNoSkipLookup'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_NCPR_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_NCPR_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_NCPR_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_NCPR_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_NCPR_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @NCRC
	SELECT Id
	FROM wwp.NonCustodialReferralChild
	WHERE NonCustodialReferralParentId IN (SELECT Id
										   FROM ##SP_ReadCDCHistory_NCPR_Temp_2)

	--SELECT * FROM @NCRC

	SELECT @NCRCMax = COUNT(*)
	FROM @NCRC
	
	PRINT @NCRCMax

	SELECT X.*
	INTO #SP_ReadCDCHistory_NCPR_Temp_3
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[ChildSupportOrderDetails], a.[ContactIntervalDetails],
			   a.[DeleteReasonId], a.[FirstName], a.[HasChildSupportOrder], a.[Id], a.[LastName], a.[ModifiedBy], a.[ModifiedDate], a.[NonCustodialReferralParentId],
			   a.[ReferralContactIntervalId], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[NonCustodialReferralChild]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_NonCustodialReferralChild_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2) X

	WHILE @NCRCCount <= @NCRCMax
	BEGIN
		SELECT @NCRCId = NCRCId
		FROM @NCRC
		WHERE Id = @NCRCCount

		INSERT INTO #SP_ReadCDCHistory_NCPR_Temp_3
		SELECT X.*
		FROM(
			SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[ChildSupportOrderDetails], a.[ContactIntervalDetails],
				   a.[DeleteReasonId], a.[FirstName], a.[HasChildSupportOrder], a.[Id], a.[LastName], a.[ModifiedBy], a.[ModifiedDate], a.[NonCustodialReferralParentId],
				   a.[ReferralContactIntervalId], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + ','
					FROM [cdc].[captured_columns] CC
						INNER JOIN [cdc].[change_tables] CT
							ON CC.[object_id] = CT.[object_id]
					WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[NonCustodialReferralChild]'))
					AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
					FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																			 WHEN '2' THEN 'RECORD INSERTED '
																			 WHEN '3' THEN 'BEFORE UPDATE '
																			 WHEN '4' THEN 'AFTER UPDATE '
														 END AS ACTION
			FROM cdc.wwp_NonCustodialReferralChild_CT a, cdc.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in (@NCRCId) AND [__$operation] in (1,2,4)
		UNION
			SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[ChildSupportOrderDetails], a.[ContactIntervalDetails],
				   a.[DeleteReasonId], a.[FirstName], a.[HasChildSupportOrder], a.[Id], a.[LastName], a.[ModifiedBy], a.[ModifiedDate], a.[NonCustodialReferralParentId],
				   a.[ReferralContactIntervalId], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + ','
					FROM [cdc].[captured_columns] CC
						INNER JOIN [cdc].[change_tables] CT
							ON CC.[object_id] = CT.[object_id]
					WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[NonCustodialReferralChild]'))
					AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
					FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																			 WHEN '2' THEN 'RECORD INSERTED '
																			 WHEN '3' THEN 'BEFORE UPDATE '
																			 WHEN '4' THEN 'AFTER UPDATE '
														 END AS ACTION
			FROM hst.wwp_NonCustodialReferralChild_CT a, hst.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in (@NCRCId) AND [__$operation] in (1,2,4)) X
	
		SET @NCRCCount += 1
	END

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_NCPR_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, NonCustodialReferralParentId, FirstName, LastName, ReferralContactIntervalId, ContactIntervalDetails, CAST(HasChildSupportOrder AS INT) HasChildSupportOrder,
				   ChildSupportOrderDetails, ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_NCPR_Temp_4
			FROM #SP_ReadCDCHistory_NCPR_Temp_3
			WHERE tran_id = @TranId

			SELECT Id, NonCustodialReferralParentsSectionId, FirstName, LastName, CAST(IsAvailableOrWorking AS INT) IsAvailableOrWorking, AvailableOrWorkingDetails,
				   CAST(IsInterestedInWorkProgram AS INT) IsInterestedInWorkProgram,InterestedInWorkProgramDetails, CAST(IsContactKnownWithParent AS INT) IsContactKnownWithParent, ContactId,
				   ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_NCPR_Temp_5
			FROM ##SP_ReadCDCHistory_NCPR_Temp_2
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_NCPR_Temp_4
			SELECT Id, NonCustodialReferralParentId, FirstName, LastName, ReferralContactIntervalId, ContactIntervalDetails, CAST(HasChildSupportOrder AS INT) HasChildSupportOrder,
				   ChildSupportOrderDetails, ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			FROM #SP_ReadCDCHistory_NCPR_Temp_3
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM #SP_ReadCDCHistory_NCPR_Temp_3
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_NCPR_Temp_5
			SELECT Id, NonCustodialReferralParentsSectionId, FirstName, LastName, CAST(IsAvailableOrWorking AS INT) IsAvailableOrWorking, AvailableOrWorkingDetails,
				   CAST(IsInterestedInWorkProgram AS INT) IsInterestedInWorkProgram,InterestedInWorkProgramDetails, CAST(IsContactKnownWithParent AS INT) IsContactKnownWithParent, ContactId,
				   ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_NCPR_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_NCPR_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	/*INSERT INTO @MaxTranId
	SELECT TranCount, MAX(tran_id) MaxTranId
	FROM #SP_ReadCDCHistory_NCP_Temp_4
	GROUP BY TranCount

	UPDATE #SP_ReadCDCHistory_NCP_Temp_4
	SET #SP_ReadCDCHistory_NCP_Temp_4.tran_id = T2.MaxTranId
	FROM #SP_ReadCDCHistory_NCP_Temp_4 T1
		INNER JOIN @MaxTranId T2
			ON T1.TranCount = T2.TranCount*/

	--SELECT * FROM ##SP_ReadCDCHistory_NCPR_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_NCPR_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_NCPR_Temp_3
	--SELECT * FROM #SP_ReadCDCHistory_NCPR_Temp_4 ORDER BY TranCount, Id
	--SELECT * FROM #SP_ReadCDCHistory_NCPR_Temp_5 ORDER BY TranCount, Id
	--PRINT @Count

	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_NCPR_Temp_1) > 0
	BEGIN
	SELECT NCPR.hasChildrenId, PL.Name hasChildrenName,
		(SELECT NCRP.firstName, NCRP.lastName, CASE CAST(NCRP.IsAvailableOrWorking AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAvailableOrWorking, NCRP.availableOrWorkingDetails,
				CASE CAST(NCRP.isInterestedInWorkProgram AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInterestedInWorkProgram, NCRP.interestedInWorkProgramDetails,
				CASE CAST(NCRP.isContactKnownWithParent AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isContactKnownWithParent, NCRP.contactId, ISNULL(CAST(NCRP.deleteReasonId AS VARCHAR(10)), 'null') deleteReasonId,
				(SELECT NCRC.firstName, NCRC.lastName, CASE CAST(NCRC.hasChildSupportOrder AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasChildSupportOrder, NCRC.childSupportOrderDetails,
						NCRC.ReferralContactIntervalId contactIntervalId, CI.Name contactIntervalName, NCRC.contactIntervalDetails,
						ISNULL(CAST(NCRC.deleteReasonId AS VARCHAR(10)), 'null') deleteReasonId, NCRC.rowVersion, NCRC.id
				 FROM #SP_ReadCDCHistory_NCPR_Temp_4 NCRC
					LEFT JOIN wwp.ReferralContactInterval CI
						ON NCRC.ReferralContactIntervalId = CI.Id
				 WHERE NCRC.NonCustodialReferralParentId = NCRP.Id AND NCRC.tran_id = NCPR.tran_id AND NCRC.DeleteReasonId IS NULL
				 FOR XML PATH('children'), TYPE, ELEMENTS
				),
				(SELECT NULL,
				 (SELECT NULL
				  FOR XML PATH('NULL'), TYPE, ELEMENTS
				 )
				 FOR XML PATH('children'), TYPE, ELEMENTS
				),
				'null' deletedChildren, NCRP.rowVersion, NCRP.id
		 FROM #SP_ReadCDCHistory_NCPR_Temp_5 NCRP
			/*INNER JOIN #SP_ReadCDCHistory_NCP_Temp_3 NCC
				ON NCRP.Id = NCRC.NonCustodialCaretakerId*/
		 WHERE NCRP.NonCustodialReferralParentsSectionId = NCPR.Id AND NCRP.tran_id = NCPR.tran_id AND NCRP.DeleteReasonId IS NULL
		 FOR XML PATH('parents'), TYPE, ELEMENTS
		),
		(SELECT NULL,
		 (SELECT NULL
		  FOR XML PATH('NULL'), TYPE, ELEMENTS
		 )
		 FOR XML PATH('parents'), TYPE, ELEMENTS
		),
		'null' deletedParents, NCPR.notes, NCPR.rowVersion,
		IIF(NCPR.ModifiedBy = 'WWP Conversion', NCPR.ModifiedBy,
		(SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT NCPR1.ModifiedBy
							FROM ##SP_ReadCDCHistory_NCPR_Temp_1 NCPR1
							WHERE NCPR1.Id = NCPR.Id AND NCPR1.tran_id = NCPR.tran_id)
		))modifiedBy, NCPR.modifiedDate
	FROM ##SP_ReadCDCHistory_NCPR_Temp_1 NCPR
		LEFT JOIN wwp.YesNoSkipLookup PL
			ON NCPR.HasChildrenId = PL.Id
	WHERE NCPR.Id = @IdentityNumber2
	ORDER BY NCPR.modifiedDate DESC
	FOR XML PATH('NonCustodialParentsReferralSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_NCPR_Temp_1 NCPR
	WHERE NCPR.Id = @IdentityNumber2
	FOR XML PATH('NonCustodialParentsReferralSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END


	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_NCPR_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_LS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_NCPR_Temp3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_NCPR_Temp3
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_NCPR_Temp4') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_NCPR_Temp4
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_NCPR_Temp5') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_NCPR_Temp5

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_NCPS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_NCPS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@NCCId INT,
	@NCCCount INT = 1,
	@NCCMax INT,
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.NonCustodialParentsSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @NCC TABLE (Id INT IDENTITY(1,1), NCCId INT)
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant')) OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_NCP_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_NCP_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_NCP_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_NCP_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_NCP_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @NCC
	SELECT Id
	FROM wwp.NonCustodialChild
	WHERE NonCustodialCaretakerId IN (SELECT Id
									 FROM ##SP_ReadCDCHistory_NCP_Temp_2)

	--SELECT * FROM @NCC

	SELECT @NCCMax = COUNT(*)
	FROM @NCC
	
	PRINT @NCCMax

	SELECT X.*
	INTO #SP_ReadCDCHistory_NCP_Temp_3
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[ChildSupportOrderDetails], a.[ContactIntervalDetails],
			   a.[ContactIntervalId], a.[DateOfBirth], a.[DeleteReasonId], a.[FirstName], a.[HasChildSupportOrder], a.[HasNameOnChildBirthRecord], a.[HasOtherAdultsYesNoUnknownLookupId],
			   a.[Id], a.[IsNeedOfServicesYesNoUnknownLookupId], a.[IsRelationshipChangeRequested], a.[LastName], a.[ModifiedBy], a.[ModifiedDate], a.[NeedOfServicesDetails],
			   a.[NonCustodialCaretakerId], a.[OtherAdultsDetails], a.[RelationshipChangeRequestedDetails], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time],
			   b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
			    FROM [cdc].[captured_columns] CC
				INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[NonCustodialChild]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_NonCustodialChild_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2) X
	
	WHILE @NCCCount <= @NCCMax
	BEGIN
		SELECT @NCCId = NCCId
		FROM @NCC
		WHERE Id = @NCCCount

		INSERT INTO #SP_ReadCDCHistory_NCP_Temp_3
		SELECT X.*
		FROM(
			SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[ChildSupportOrderDetails], a.[ContactIntervalDetails],
				   a.[ContactIntervalId], a.[DateOfBirth], a.[DeleteReasonId], a.[FirstName], a.[HasChildSupportOrder], a.[HasNameOnChildBirthRecord], a.[HasOtherAdultsYesNoUnknownLookupId],
				   a.[Id], a.[IsNeedOfServicesYesNoUnknownLookupId], a.[IsRelationshipChangeRequested], a.[LastName], a.[ModifiedBy], a.[ModifiedDate], a.[NeedOfServicesDetails],
				   a.[NonCustodialCaretakerId], a.[OtherAdultsDetails], a.[RelationshipChangeRequestedDetails], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time],
				   b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + ','
					FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
					WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[NonCustodialChild]'))
					AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
					FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																			 WHEN '2' THEN 'RECORD INSERTED '
																			 WHEN '3' THEN 'BEFORE UPDATE '
																			 WHEN '4' THEN 'AFTER UPDATE '
														 END AS ACTION
			FROM cdc.wwp_NonCustodialChild_CT a, cdc.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in (@NCCId) AND [__$operation] in (1,2,4)
		UNION
			SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[ChildSupportOrderDetails], a.[ContactIntervalDetails],
				   a.[ContactIntervalId], a.[DateOfBirth], a.[DeleteReasonId], a.[FirstName], a.[HasChildSupportOrder], a.[HasNameOnChildBirthRecord], a.[HasOtherAdultsYesNoUnknownLookupId],
				   a.[Id], a.[IsNeedOfServicesYesNoUnknownLookupId], a.[IsRelationshipChangeRequested], a.[LastName], a.[ModifiedBy], a.[ModifiedDate], a.[NeedOfServicesDetails],
				   a.[NonCustodialCaretakerId], a.[OtherAdultsDetails], a.[RelationshipChangeRequestedDetails], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time],
				   b.[tran_end_time], b.[tran_id],
				   (SELECT CC.column_name + ','
					FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
					WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[NonCustodialChild]'))
					AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
					FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																			 WHEN '2' THEN 'RECORD INSERTED '
																			 WHEN '3' THEN 'BEFORE UPDATE '
																			 WHEN '4' THEN 'AFTER UPDATE '
														 END AS ACTION
			FROM hst.wwp_NonCustodialChild_CT a, hst.lsn_time_mapping  b
			WHERE b.start_lsn = a.__$start_lsn AND a.id in (@NCCId) AND [__$operation] in (1,2,4)) X

		SET @NCCCount += 1
	END

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_NCP_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, NonCustodialCaretakerId, FirstName, LastName, DateOfBirth, CAST(HasChildSupportOrder AS INT) HasChildSupportOrder, ChildSupportOrderDetails, ContactIntervalId,
				   ContactIntervalDetails, HasOtherAdultsYesNoUnknownLookupId, OtherAdultsDetails, CAST(IsRelationshipChangeRequested AS INT) IsRelationshipChangeRequested,
				   RelationshipChangeRequestedDetails, IsNeedOfServicesYesNoUnknownLookupId, NeedOfServicesDetails, HasNameOnChildBirthRecord, ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id,
				   @TranCount TranCount
			INTO #SP_ReadCDCHistory_NCP_Temp_4
			FROM #SP_ReadCDCHistory_NCP_Temp_3
			WHERE tran_id = @TranId

			SELECT Id, NonCustodialParentsSectionId, FirstName, CAST(IsFirstNameUnknown AS INT) IsFirstNameUnknown, LastName, CAST(IsLastNameUnknown AS INT) IsLastNameUnknown,
				   NonCustodialParentRelationshipId, RelationshipDetails, ContactIntervalId, ContactIntervalDetails, CAST(IsRelationshipChangeRequested AS INT) IsRelationshipChangeRequested,
				   RelationshipChangeRequestedDetails, CAST(IsInterestedInRelationshipReferral AS INT) IsInterestedInRelationshipReferral, InterestedInRelationshipReferralDetails, ModifiedBy,
				   ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_NCP_Temp_5
			FROM ##SP_ReadCDCHistory_NCP_Temp_2
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_NCP_Temp_4
			SELECT Id, NonCustodialCaretakerId, FirstName, LastName, DateOfBirth, CAST(HasChildSupportOrder AS INT) HasChildSupportOrder, ChildSupportOrderDetails, ContactIntervalId,
				   ContactIntervalDetails, HasOtherAdultsYesNoUnknownLookupId, OtherAdultsDetails, CAST(IsRelationshipChangeRequested AS INT) IsRelationshipChangeRequested,
				   RelationshipChangeRequestedDetails, IsNeedOfServicesYesNoUnknownLookupId, NeedOfServicesDetails, HasNameOnChildBirthRecord, ModifiedBy, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id,
				   @TranCount TranCount
			FROM #SP_ReadCDCHistory_NCP_Temp_3
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM #SP_ReadCDCHistory_NCP_Temp_3
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_NCP_Temp_5
			SELECT Id, NonCustodialParentsSectionId, FirstName, CAST(IsFirstNameUnknown AS INT) IsFirstNameUnknown, LastName, CAST(IsLastNameUnknown AS INT) IsLastNameUnknown,
				   NonCustodialParentRelationshipId, RelationshipDetails, ContactIntervalId, ContactIntervalDetails, CAST(IsRelationshipChangeRequested AS INT) IsRelationshipChangeRequested,
				   RelationshipChangeRequestedDetails, CAST(IsInterestedInRelationshipReferral AS INT) IsInterestedInRelationshipReferral, InterestedInRelationshipReferralDetails, ModifiedBy,
				   ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_NCP_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_NCP_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	/*INSERT INTO @MaxTranId
	SELECT TranCount, MAX(tran_id) MaxTranId
	FROM #SP_ReadCDCHistory_NCP_Temp_4
	GROUP BY TranCount

	UPDATE #SP_ReadCDCHistory_NCP_Temp_4
	SET #SP_ReadCDCHistory_NCP_Temp_4.tran_id = T2.MaxTranId
	FROM #SP_ReadCDCHistory_NCP_Temp_4 T1
		INNER JOIN @MaxTranId T2
			ON T1.TranCount = T2.TranCount*/

	--SELECT * FROM ##SP_ReadCDCHistory_NCP_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_NCP_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_NCP_Temp_3
	--SELECT * FROM #SP_ReadCDCHistory_NCP_Temp_4 ORDER BY TranCount, Id
	--SELECT * FROM #SP_ReadCDCHistory_NCP_Temp_5 ORDER BY TranCount, Id
	--PRINT @Count

	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_NCP_Temp_1) > 0
	BEGIN
	SELECT CASE CAST(NCP.hasChildren AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasChildren,
		(SELECT NCCT.firstName,
				CASE CAST(NCCT.isFirstnameUnknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isFirstnameUnknown,
				IIF(NCCT.isLastNameunknown = 1, 'Unknown', NCCT.LastName) lastName,
				CASE CAST(NCCT.isLastNameunknown AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isLastNameunknown,
				NCCT.nonCustodialParentRelationshipId, NCPR.Name nonCustodialParentRelationshipName, NCCT.relationshipDetails, NCCT.contactIntervalId, CI.Name contactIntervalName,
				NCCT.contactIntervalDetails,
				CASE CAST(NCCT.isRelationshipChangeRequested AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isRelationshipChangeRequested,
				NCCT.relationshipChangeRequestedDetails,
				CASE CAST(NCCT.isInterestedInRelationshipReferral AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInterestedInRelationshipReferral,
				NCCT.interestedInRelationshipReferralDetails, ISNULL(CAST(NCCT.deleteReasonId AS VARCHAR(10)), 'null') deleteReasonId,
				(SELECT NCC.firstName, NCC.lastName, CONVERT(VARCHAR(10), NCC.dateOfBirth, 101) dateOfBirth,
						CASE CAST(NCC.hasChildSupportOrder AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasChildSupportOrder,
						CASE CAST(NCC.HasNameOnChildBirthRecord AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasNameOnChildBirthRecord,
						NCC.childSupportOrderDetails, NCC.contactIntervalId, CI.Name contactIntervalName,
						NCC.contactIntervalDetails, NCC.HasOtherAdultsYesNoUnknownLookupId hasOtherAdultsPolarLookupId, PL.Name hasOtherAdultsPolarLookupName, NCC.otherAdultsDetails,
						CASE CAST(NCC.isRelationshipChangeRequested AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isRelationshipChangeRequested, NCC.relationshipChangeRequestedDetails,
						NCC.IsNeedOfServicesYesNoUnknownLookupId, PL1.Name isNeedOfServicesPolarLookupName,
						NCC.needOfServicesDetails, ISNULL(CAST(NCC.deleteReasonId AS VARCHAR(10)), 'null') deleteReasonId, NCC.rowVersion, NCC.id
				 FROM #SP_ReadCDCHistory_NCP_Temp_4 NCC
					INNER JOIN wwp.ContactInterval CI
						ON NCC.ContactIntervalId = CI.Id
					LEFT JOIN wwp.YesNoUnknownLookup PL
						ON NCC.HasOtherAdultsYesNoUnknownLookupId = PL.Id
					LEFT JOIN wwp.YesNoUnknownLookup PL1
						ON NCC.IsNeedOfServicesYesNoUnknownLookupId = PL1.Id
				 WHERE NCC.NonCustodialCaretakerId = NCCT.Id AND NCC.tran_id = NCP.tran_id AND NCC.DeleteReasonId IS NULL
				 FOR XML PATH('nonCustodialChilds'), TYPE, ELEMENTS
				),
				(SELECT NULL,
				 (SELECT NULL
				  FOR XML PATH('NULL'), TYPE, ELEMENTS
				 )
				 FOR XML PATH('nonCustodialChilds'), TYPE, ELEMENTS
				),
				'null' deletedNonCustodialChilds, NCCT.rowVersion, NCCT.id
		 FROM #SP_ReadCDCHistory_NCP_Temp_5 NCCT
			INNER JOIN wwp.ContactInterval CI
				ON NCCT.ContactIntervalId = CI.Id
			INNER JOIN wwp.NonCustodialParentRelationship NCPR
				ON NCCT.NonCustodialParentRelationshipId = NCPR.Id
			/*INNER JOIN #SP_ReadCDCHistory_NCP_Temp_3 NCC
				ON NCCT.Id = NCC.NonCustodialCaretakerId*/
		 WHERE NCCT.NonCustodialParentsSectionId = NCP.Id AND NCCT.tran_id = NCP.tran_id AND NCCT.DeleteReasonId IS NULL
		 FOR XML PATH('nonCustodialCaretakers'), TYPE, ELEMENTS
		),
		(SELECT NULL,
		 (SELECT NULL
		  FOR XML PATH('NULL'), TYPE, ELEMENTS
		 )
		 FOR XML PATH('nonCustodialCaretakers'), TYPE, ELEMENTS
		),
		'null' deletedNonCustodialCaretakers, NCP.childSupportPayment, CASE CAST(NCP.hasOwedChildSupport AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasOwedChildSupport,
		CASE CAST(NCP.hasInterestInChildServices AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasInterestInChildServices, CASE CAST(NCP.isInterestedInReferralServices AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInterestedInReferralServices,
		NCP.interestedInReferralServicesDetails,
		(SELECT TOP 1 AN.id, AN.ActionNeededPageId pageId, ANP.Name pageName, CASE CAST(AN.isNoActionNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoActionNeeded,
		    (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		     FROM wwp.Worker
		     WHERE WAMSId = (SELECT AN1.ModifiedBy
							 FROM wwp.ActionNeeded AN1
							 WHERE AN1.Id = AN.Id)
		    )modifiedBy,
		    AN.modifiedDate, AN.rowVersion,
		    (SELECT ACT.id, ACT.actionNeededId, ACT.ActionAssigneeId assigneeId, AA.Name assigneeName, AN1.ActionNeededPageId pageId, ANP.Name pageName, ACT.actionItemId,
			 AI.Name actionItemName, ISNULL(CAST(ACT.ActionPriorityId AS VARCHAR(10)), 'nul') priorityId, ISNULL(AP.Name, 'null') priorityName, ISNULL(ACT.FollowUpTask, null) followUpTask, ISNULL(CAST(ACT.DueDate AS VARCHAR(10)), 'null') dueDate,
			 CASE CAST(ACT.IsNoDueDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoDueDate, ISNULL(CAST(ACT.CompletionDate AS VARCHAR(10)), 'null') completionDate,
			 CASE CAST(ACT.IsNoCompletionDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoCompletionDate, ISNULL(ACT.Details, 'null') details, ACT.createdDate, ACT.modifiedDate,
			 ACT.modifiedBy, ACT.rowVersion
			 FROM wwp.ActionNeededTask ACT
				LEFT JOIN wwp.ActionNeeded AN1
					ON ACT.ActionNeededId = AN1.Id
				LEFT JOIN wwp.ActionAssignee AA
					ON ACT.ActionAssigneeId = AA.Id
				LEFT JOIN wwp.ActionItem AI
					ON ACT.ActionItemId = AI.Id
				LEFT JOIN wwp.ActionNeededPage ANP
					ON AN1.ActionNeededPageId = ANP.Id
				LEFT JOIN wwp.ActionPriority AP
					ON ACT.ActionPriorityId = AP.Id
			 WHERE ACT.ActionNeededId = AN.Id AND AN.ParticipantId = NCP.ParticipantId AND ACT.IsDeleted = 0-- AND NCP.tran_id = AN.tran_id
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
		    ),
			(SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
			)
		    FROM wwp.ActionNeeded AN
				INNER JOIN wwp.ActionNeededPage ANP
					ON AN.ActionNeededPageId = ANP.Id
		    WHERE NCP.ParticipantId = AN.ParticipantId AND AN.ActionNeededPageId = (SELECT Id
																				   FROM wwp.ActionNeededPage
																				   WHERE Name = 'Non-Custodial Parents')
			ORDER BY AN.ModifiedDate DESC																					
		    FOR XML PATH('actionNeeded'), TYPE, ELEMENTS
		   ),
		NCP.notes, NCP.rowVersion,
		IIF(NCP.ModifiedBy = 'WWP Conversion', NCP.ModifiedBy,
		(SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		 FROM wwp.Worker
		 WHERE WAMSId = (SELECT NCP1.ModifiedBy
						 FROM ##SP_ReadCDCHistory_NCP_Temp_1 NCP1
						 WHERE NCP1.Id = NCP.Id AND NCP1.tran_id = NCP.tran_id)
		))modifiedBy, NCP.modifiedDate
	FROM ##SP_ReadCDCHistory_NCP_Temp_1 NCP
	WHERE NCP.Id = @IdentityNumber2
	ORDER BY NCP.modifiedDate DESC
	FOR XML PATH('NonCustodialParentsSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_NCP_Temp_1 NCP
	WHERE NCP.Id = @IdentityNumber2
	FOR XML PATH('NonCustodialParentsSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END


	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_NCP_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_LS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_NCP_Temp3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_NCP_Temp3
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_NCP_Temp4') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_NCP_Temp4
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_NCP_Temp5') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_NCP_Temp5

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_PBA]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_PBA]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@IdentityNumber VARCHAR(MAX)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	AND name NOT LIKE 'tbd'
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'BarrierType') AND (SO_R.name <> 'BarrierSection'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'BarrierType') AND (SO_R.name <> 'BarrierSection'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_PBA_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_PBA_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_PBA_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_PBA_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_PBA_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_PBA_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, BarrierDetailsId, AccommodationId, BeginDate, EndDate, Details, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_PBA_Temp_6
			FROM ##SP_ReadCDCHistory_PBA_Temp_2
			WHERE tran_id = @TranId

			SELECT Id, BarrierDetailsId, ReferralDate, CAST(ReferralDeclined AS INT) ReferralDeclined, ReferralDetails, AssessmentDate,
				   CAST(AssessmentNotCompleted AS INT) AssessmentNotCompleted, AssessmentDetails, SymptomId, ReassessmentRecommendedDate,
				   CAST(IsRecommendedDateNotNeeded AS INT) IsRecommendedDateNotNeeded, SymptomDetails, AssessmentProviderContactId, HoursParticipantCanParticipate,
				   HoursParticipantCanParticipateDetails, HoursParticipantCanParticipateIntervalId, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_PBA_Temp_7
			FROM ##SP_ReadCDCHistory_PBA_Temp_5
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_PBA_Temp_6
			SELECT Id, BarrierDetailsId, AccommodationId, BeginDate, EndDate, Details, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_PBA_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_PBA_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_PBA_Temp_7
			SELECT Id, BarrierDetailsId, ReferralDate, CAST(ReferralDeclined AS INT) ReferralDeclined, ReferralDetails, AssessmentDate,
				   CAST(AssessmentNotCompleted AS INT) AssessmentNotCompleted, AssessmentDetails, SymptomId, ReassessmentRecommendedDate,
				   CAST(IsRecommendedDateNotNeeded AS INT) IsRecommendedDateNotNeeded, SymptomDetails, AssessmentProviderContactId, HoursParticipantCanParticipate,
				   HoursParticipantCanParticipateDetails, HoursParticipantCanParticipateIntervalId, ModifiedDate, RowVersion, DeleteReasonId, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_PBA_Temp_5
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_PBA_Temp_5
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--/*INSERT INTO @MaxTranId
	--SELECT TranCount, MAX(tran_id) MaxTranId
	--FROM #SP_ReadCDCHistory_NCP_Temp_4
	--GROUP BY TranCount

	--UPDATE #SP_ReadCDCHistory_NCP_Temp_4
	--SET #SP_ReadCDCHistory_NCP_Temp_4.tran_id = T2.MaxTranId
	--FROM #SP_ReadCDCHistory_NCP_Temp_4 T1
	--	INNER JOIN @MaxTranId T2
	--		ON T1.TranCount = T2.TranCount*/

	--SELECT * FROM ##SP_ReadCDCHistory_PBA_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_PBA_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_PBA_Temp_6
	--SELECT * FROM ##SP_ReadCDCHistory_PBA_Temp_3
	--SELECT * FROM ##SP_ReadCDCHistory_PBA_Temp_4
	--SELECT * FROM ##SP_ReadCDCHistory_PBA_Temp_5
	--SELECT * FROM #SP_ReadCDCHistory_PBA_Temp_7
	--PRINT @Count

	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_PBA_Temp_1) > 0
	BEGIN
	SELECT BD.id, BD.rowVersion, bd.barrierTypeId, BT.Name barrierTypeName,
		   (SELECT (SELECT CAST(BST.BarrierSubTypeId AS INT)
			FROM ##SP_ReadCDCHistory_PBA_Temp_4 BST
				INNER JOIN wwp.BarrierSubType BSTN
					ON BST.BarrierSubTypeId = BSTN.Id
			WHERE BST.BarrierDetailId = BD.Id AND BST.tran_id = BD.tran_id AND BST.IsDeleted = 0
			FOR XML PATH('barrierSubTypes'), TYPE, ELEMENTS),
			(SELECT NULL,
			 (SELECT NULL
				FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			FOR XML PATH('barrierSubTypes'), TYPE, ELEMENTS),
			(SELECT CAST(BSTN.Name AS VARCHAR(100))
			FROM ##SP_ReadCDCHistory_PBA_Temp_4 BST
				INNER JOIN wwp.BarrierSubType BSTN
					ON BST.BarrierSubTypeId = BSTN.Id
			WHERE BST.BarrierDetailId = BD.Id AND BST.tran_id = BD.tran_id AND BST.IsDeleted = 0
			FOR XML PATH('barrierSubTypeNames'), TYPE, ELEMENTS),
			(SELECT NULL,
			 (SELECT NULL
				FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			FOR XML PATH('barrierSubTypeNames'), TYPE, ELEMENTS)
		   FOR XML PATH('barrierSubType'), TYPE, ELEMENTS),
		   CAST(FORMAT(BD.OnsetDate, 'MM') AS VARCHAR(2)) + '/' + CAST(YEAR(BD.OnsetDate) AS VARCHAR(4)) onsetDate,
		   ISNULL(CAST(MONTH(BD.EndDate) AS VARCHAR(2)) + '/' + CAST(YEAR(BD.EndDate) AS VARCHAR(4)), 'null') endDate,
		   CASE CAST(BD.WasClosedAtDisenrollment AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END wasClosedAtDisenrollment, CASE CAST(BD.IsAccommodationNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isAccommodationNeeded,
		   ISNULL(BD.Details, 'null') details,
		   (SELECT contactId
			FROM ##SP_ReadCDCHistory_PBA_Temp_3 BDCB
			WHERE BDCB.BarrierDetailId = BD.Id AND BDCB.tran_id = BD.tran_id AND BDCB.IsDeleted = 0
			FOR XML PATH('contacts'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('contacts'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(MONTH(FA.ReferralDate) AS VARCHAR(2)) + '/' + CAST(DAY(FA.ReferralDate) AS VARCHAR(2)) + '/' + CAST(YEAR(FA.ReferralDate) AS VARCHAR(4)), 'null') referralDate,
				   CASE CAST(FA.ReferralDeclined AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END referralDeclined, ISNULL(FA.ReferralDetails, 'null') referralDetails,
				   ISNULL(CAST(MONTH(FA.AssessmentDate) AS VARCHAR(2)) + '/' + CAST(DAY(FA.AssessmentDate) AS VARCHAR(2)) + '/' + CAST(YEAR(FA.AssessmentDate) AS VARCHAR(4)), 'null') assessmentDate,
				   CASE CAST(FA.AssessmentNotCompleted AS VARCHAR(5)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END assessmentNotCompleted,
				   ISNULL(FA.AssessmentDetails, 'null') assessmentDetails, FA.symptomId, CASE CAST(FA.isRecommendedDateNotNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isRecommendedDateNotNeeded, S.Name symptomName,
				   ISNULL(CAST(MONTH(FA.ReassessmentRecommendedDate) AS VARCHAR(2)) + '/' + CAST(DAY(FA.ReassessmentRecommendedDate) AS VARCHAR(2)) + '/' + CAST(YEAR(FA.ReassessmentRecommendedDate) AS VARCHAR(4)), 'null') reassessmentRecommendedDate,
				   ISNULL(FA.SymptomDetails, 'null') symptomDetails, ISNULL(CAST(FA.HoursParticipantCanParticipate AS VARCHAR(4)), 'null') hoursParticipantCanParticipate,
				   ISNULL(FA.HoursParticipantCanParticipateDetails, 'null') hoursParticipantCanParticipateDetails,
				   ISNULL(CAST(FA.HoursParticipantCanParticipateIntervalId AS VARCHAR(4)), 'null') hoursParticipantCanParticipateIntervalId,
				   ISNULL(IT.Name, 'null') hoursParticipantCanParticipateIntervalDesc,
				   ISNULL(CAST(FA.AssessmentProviderContactId AS VARCHAR(4)), 'null') assessmentProviderContactId, ISNULL(CAST(FA.DeleteReasonId AS VARCHAR(4)), 'null') deleteReasonId, FA.id
		    FROM #SP_ReadCDCHistory_PBA_Temp_7 FA
				LEFT JOIN wwp.Symptom S
					ON FA.SymptomId = S.Id
				LEFT JOIN wwp.IntervalType IT
					ON FA.HoursParticipantCanParticipateIntervalId = IT.Id
			WHERE FA.BarrierDetailsId = BD.Id AND FA.tran_id = BD.tran_id AND FA.DeleteReasonId IS NULL
			FOR XML PATH('formalAssessments'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('formalAssessments'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(COUNT(FA1.DeleteReasonId) AS VARCHAR(4)), 'null')
		   FROM #SP_ReadCDCHistory_PBA_Temp_7 FA1
		   WHERE FA1.BarrierDetailsId = BD.Id AND FA1.tran_id = BD.tran_id) deletedFormalAssessments,
		   (SELECT BA.accommodationId, A.Name accommodationName, 
				   ISNULL(CAST(MONTH(BA.BeginDate) AS VARCHAR(2)) + '/' + CAST(DAY(BA.BeginDate) AS VARCHAR(2)) + '/' + CAST(YEAR(BA.BeginDate) AS VARCHAR(4)), 'null') beginDate,
				   ISNULL(CAST(MONTH(BA.EndDate) AS VARCHAR(2)) + '/' + CAST(DAY(BA.EndDate) AS VARCHAR(2)) + '/' + CAST(YEAR(BA.EndDate) AS VARCHAR(4)), 'null') endDate,
				   ISNULL(BA.Details, 'null') details, ISNULL(CAST(BA.DeleteReasonId AS VARCHAR(4)), 'null') deleteReasonId, BA.id
		    FROM #SP_ReadCDCHistory_PBA_Temp_6 BA
				INNER JOIN wwp.Accommodation A
					ON BA.AccommodationId = A.Id
			WHERE BA.BarrierDetailsId = BD.Id AND BA.tran_id = BD.tran_id AND BA.DeleteReasonId IS NULL
			FOR XML PATH('barrierAccommodations'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('barrierAccommodations'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(COUNT(BA1.DeleteReasonId) AS VARCHAR(4)), 'null')
		   FROM #SP_ReadCDCHistory_PBA_Temp_6 BA1
		   WHERE BA1.BarrierDetailsId = BD.Id AND BA1.tran_id = BD.tran_id) deletedBarrierAccommodations, CASE CAST(BD.IsDeleted AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isDeleted,
		   IIF(BD.ModifiedBy IN ('WWP Conversion', 'WWP Batch'), BD.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT BD1.ModifiedBy
							FROM ##SP_ReadCDCHistory_PBA_Temp_1 BD1
							WHERE BD1.Id = BD.Id AND BD1.tran_id = BD.tran_id)
		   ))modifiedBy, BD.modifiedDate
	FROM ##SP_ReadCDCHistory_PBA_Temp_1 BD
		INNER JOIN wwp.BarrierType BT
			ON BD.BarrierTypeId = BT.Id
	WHERE BD.Id = @IdentityNumber2-- AND BD.IsDeleted = 0
	ORDER BY BD.modifiedDate DESC
	FOR XML PATH('BarrierDetail'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_PBA_Temp_1 BD
	WHERE BD.Id = @IdentityNumber2
	FOR XML PATH('BarrierDetail'), ROOT('History'), ELEMENTS, BINARY BASE64
	END


	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_PBA_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_PBA_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_PBS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC wwp.[SP_ReadCDCHistory_PBS] @TableName = 'BarrierSection',  -- varchar(200)
--                               @PinNumber = 7009298858 -- decimal(10, 0)


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_PBS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@ParticipantId INT,
	@BarrierDetailId INT = 0,
	@BarrierAssessmentId INT = 0,
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.BarrierSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	SELECT @ParticipantId = ParticipantId
	FROM wwp.BarrierSection
	WHERE Id = @IdentityNumber2

	SELECT @BarrierDetailId = Id
	FROM wwp.BarrierDetail
	WHERE ParticipantId = @ParticipantId

	SELECT @BarrierAssessmentId = BarriersAssessmentSectionId
	FROM wwp.InformalAssessment
	WHERE ParticipantId = @ParticipantId

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'YesNoRefused'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'YesNoRefused'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_PBS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_PBS_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_PBS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		IF @TableName = 'BarrierDetail'
		BEGIN
			SET @Statement =
			'INSERT INTO ##SP_ReadCDCHistory_PBS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
			 SELECT X.*
			 FROM (
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+CAST(@BarrierDetailId AS VARCHAR(5))+') AND [__$operation] in (1,2,4)
		
			 UNION
		
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+CAST(@BarrierDetailId AS VARCHAR(5))+') AND [__$operation] in (1,2,4)) X'

			PRINT @Statement
			EXEC (@Statement)
		END
		ELSE
		BEGIN
			SET @Statement =
			'INSERT INTO ##SP_ReadCDCHistory_PBS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
			 SELECT X.*
			 FROM (
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
			 UNION
		
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

			PRINT @Statement
			EXEC (@Statement)
		END

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_PBS_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	SELECT X.*
	INTO #SP_ReadCDCHistory_PBS_Temp_3
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[Id], a.[IsDeleted], a.[ModifiedBy], a.[ModifiedDate],
			   a.[ReviewCompleted], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
				INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[BarrierAssessmentSection]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_BarrierAssessmentSection_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2) X
	
	INSERT INTO #SP_ReadCDCHistory_PBS_Temp_3
	SELECT X.*
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[Id], a.[IsDeleted], a.[ModifiedBy], a.[ModifiedDate],
			   a.[ReviewCompleted], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
				INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[BarrierAssessmentSection]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_BarrierAssessmentSection_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id in (@BarrierAssessmentId) AND [__$operation] in (1,2,4)
	UNION
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[Id], a.[IsDeleted], a.[ModifiedBy], a.[ModifiedDate],
			   a.[ReviewCompleted], a.[RowVersion], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
				INNER JOIN [cdc].[change_tables] CT
					ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[BarrierAssessmentSection]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM hst.wwp_BarrierAssessmentSection_CT a, hst.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id in (@BarrierAssessmentId) AND [__$operation] in (1,2,4)) X

	--SELECT * FROM ##SP_ReadCDCHistory_PBS_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_PBS_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_PBS_Temp_3
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_PBS_Temp_1) > 0
	BEGIN
	SELECT 
		   (SELECT PBS.IsPhysicalHealthHardToManageId [status], PL.Name statusName, ISNULL(PBS.IsPhysicalHealthHardToManageDetails, 'null') details
			FOR XML PATH('isPhysicalHealthHardToManage'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsPhysicalHealthHardToParticipateId [status], PL1.Name statusName, ISNULL(PBS.IsPhysicalHealthHardToParticipateDetails, 'null') details
			FOR XML PATH('isPhysicalHealthHardToParticipate'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsPhysicalHealthTakeMedicationId AS VARCHAR(5)), 'null') [status], PL2.Name statusName, ISNULL(PBS.IsPhysicalHealthTakeMedicationDetails, 'null') details
			FOR XML PATH('isPhysicalHealthTakeMedication'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsMentalHealthHardDiagnosedId [status], PL3.Name statusName, ISNULL(PBS.IsMentalHealthHardDiagnosedDetails, 'null') details
			FOR XML PATH('isMentalHealthDiagnosed'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsMentalHealthHardToManageId [status], PL4.Name statusName, ISNULL(PBS.IsMentalHealthHardToManageDetails, 'null') details
			FOR XML PATH('isMentalHealthHardToManage'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsMentalHealthHardToParticipateId [status], PL5.Name statusName, ISNULL(PBS.IsMentalHealthHardToParticipateDetails, 'null') details
			FOR XML PATH('isMentalHealthHardToParticipate'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsMentalHealthTakeMedicationId AS VARCHAR(5)), 'null') [status], PL6.Name statusName, ISNULL(PBS.IsMentalHealthTakeMedicationDetails, 'null') details
			FOR XML PATH('isMentalHealthTakeMedication'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsAodaHardToManageId [status], PL7.Name statusName, ISNULL(PBS.IsAodaHardToManageDetails, 'null') details
			FOR XML PATH('isAodaHardToManage'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsAodaHardToParticipateId [status], PL8.Name statusName, ISNULL(PBS.IsAodaHardToParticipateDetails, 'null') details
			FOR XML PATH('isAodaHardToParticipate'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsAodaTakeTreatmentId [status], PL9.Name statusName, ISNULL(PBS.IsAodaTakeTreatmentDetails, 'null') details
			FOR XML PATH('isAodaTakeTreatment'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceHurtingYouOrOthersId AS VARCHAR(5)), 'null') [status], PL10.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceHurtingYouOrOthersDetails, 'null') details
			FOR XML PATH('isDomesticViolenceHurtingYouOrOthers'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId AS VARCHAR(5)), 'null') [status], PL11.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceEverHarmedPhysicallyOrSexuallyDetails, 'null') details
			FOR XML PATH('isDomesticViolenceEverHarmedPhysicallyOrSexually'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolencePartnerControlledMoneyId AS VARCHAR(5)), 'null') [status], PL12.Name statusName,
		    ISNULL(PBS.IsDomesticViolencePartnerControlledMoneyDetails, 'null') details
			FOR XML PATH('isDomesticViolencePartnerControlledMoney'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceReceivedServicesOrLivedInShelterId AS VARCHAR(5)), 'null') [status], PL13.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceReceivedServicesOrLivedInShelterDetails, 'null') details
			FOR XML PATH('isDomesticViolenceReceivedServicesOrLivedInShelter'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceEmotionallyOrVerballyAbusingId AS VARCHAR(5)), 'null') [status], PL14.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceEmotionallyOrVerballyAbusingDetails, 'null') details
			FOR XML PATH('isDomesticViolenceEmotionallyOrVerballyAbusing'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceCallingHarassingStalkingAtWorkId AS VARCHAR(5)), 'null') [status], PL15.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceCallingHarassingStalkingAtWorkDetails, 'null') details
			FOR XML PATH('isDomesticViolenceCallingHarassingStalkingAtWork'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceMakingItDifficultToWorkId AS VARCHAR(5)), 'null') [status], PL16.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceMakingItDifficultToWorkDetails, 'null') details
			FOR XML PATH('isDomesticViolenceMakingItDifficultToWork'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId AS VARCHAR(5)), 'null') [status], PL17.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultDetails, 'null') details
			FOR XML PATH('isDomesticViolenceOverwhelmedByRapeOrSexualAssault'), TYPE, ELEMENTS
		   ),
		   (SELECT ISNULL(CAST(PBS.IsDomesticViolenceInvolvedInCourtsId AS VARCHAR(5)), 'null') [status], PL18.Name statusName,
		    ISNULL(PBS.IsDomesticViolenceInvolvedInCourtsDetails, 'null') details
			FOR XML PATH('isDomesticViolenceInvolvedInCourts'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsLearningDisabilityDiagnosedId [status], PL19.Name statusName, ISNULL(PBS.IsLearningDisabilityDiagnosedDetails, 'null') details
			FOR XML PATH('isLearningDisabilityDiagnosed'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsLearningDisabilityHardToManageId [status], PL20.Name statusName, ISNULL(PBS.IsLearningDisabilityHardToManageDetails, 'null') details
			FOR XML PATH('isLearningDisabilityHardToManage'), TYPE, ELEMENTS
		   ),
		   (SELECT PBS.IsLearningDisabilityHardToParticipateId [status], PL21.Name statusName, ISNULL(PBS.IsLearningDisabilityHardToParticipateDetails, 'null') details
			FOR XML PATH('isLearningDisabilityHardToParticipate'), TYPE, ELEMENTS
		   ),
		   ISNULL(PBS.Notes, 'null') notes,
		   (SELECT ISNULL(CAST(BD.id AS VARCHAR(5)), 'null') id, ISNULL(CAST(BD.BarrierTypeId AS VARCHAR(4)), 'null') barrierTypeId, ISNULL(BT.Name, 'null') barrierTypeName,
		    IIF(BD.OnsetDate IS NOT NULL, BD.OnsetDate, 'null') onsetMonth, CASE CAST(BD.IsAccommodationNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'fasle' ELSE 'null' END isAccommodationNeeded
		    FROM ##SP_ReadCDCHistory_PBS_Temp_2 BD
				INNER JOIN wwp.BarrierType BT
					ON BD.BarrierTypeId = BT.Id
			WHERE BD.ParticipantId = PBS.ParticipantId AND BD.tran_id <= PBS.tran_id AND BD.IsDeleted = 0
			FOR XML PATH('barriers'), TYPE, ELEMENTS
		   ),
		   PBS.rowVersion,
		   IIF(PBS.ModifiedBy IN ('WWP Conversion', 'WWP Batch'), PBS.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT PBS1.ModifiedBy
							FROM ##SP_ReadCDCHistory_PBS_Temp_1 PBS1
							WHERE PBS1.Id = PBS.Id AND PBS1.tran_id = PBS.tran_id)
		   ))modifiedBy, PBS.modifiedDate
	FROM ##SP_ReadCDCHistory_PBS_Temp_1 PBS
		LEFT JOIN wwp.YesNoRefused PL
			ON PBS.IsPhysicalHealthHardToManageId = PL.Id
		LEFT JOIN wwp.YesNoRefused PL1
			ON PBS.IsPhysicalHealthHardToParticipateId = PL1.Id
		LEFT JOIN wwp.YesNoRefused PL2
			ON ISNULL(PBS.IsPhysicalHealthTakeMedicationId, 0) = ISNULL(PL2.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL3
			ON PBS.IsMentalHealthHardDiagnosedId = PL3.Id
		LEFT JOIN wwp.YesNoRefused PL4
			ON PBS.IsMentalHealthHardToManageId = PL4.Id
		LEFT JOIN wwp.YesNoRefused PL5
			ON PBS.IsMentalHealthHardToParticipateId = PL5.Id
		LEFT JOIN wwp.YesNoRefused PL6
			ON ISNULL(PBS.IsMentalHealthTakeMedicationId, 0) = ISNULL(PL6.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL7
			ON PBS.IsAodaHardToManageId = PL7.Id
		LEFT JOIN wwp.YesNoRefused PL8
			ON PBS.IsAodaHardToParticipateId = PL8.Id
		LEFT JOIN wwp.YesNoRefused PL9
			ON PBS.IsAodaTakeTreatmentId = PL9.Id
		LEFT JOIN wwp.YesNoRefused PL10
			ON ISNULL(PBS.IsDomesticViolenceHurtingYouOrOthersId, 0) = ISNULL(PL10.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL11
			ON ISNULL(PBS.IsDomesticViolenceEverHarmedPhysicallyOrSexuallyId, 0) = ISNULL(PL11.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL12
			ON ISNULL(PBS.IsDomesticViolencePartnerControlledMoneyId, 0) = ISNULL(PL12.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL13
			ON ISNULL(PBS.IsDomesticViolenceReceivedServicesOrLivedInShelterId, 0) = ISNULL(PL13.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL14
			ON ISNULL(PBS.IsDomesticViolenceEmotionallyOrVerballyAbusingId, 0) = ISNULL(PL14.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL15
			ON ISNULL(PBS.IsDomesticViolenceCallingHarassingStalkingAtWorkId, 0) = ISNULL(PL15.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL16
			ON ISNULL(PBS.IsDomesticViolenceMakingItDifficultToWorkId, 0) = ISNULL(PL16.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL17
			ON ISNULL(PBS.IsDomesticViolenceOverwhelmedByRapeOrSexualAssaultId, 0) = ISNULL(PL17.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL18
			ON ISNULL(PBS.IsDomesticViolenceInvolvedInCourtsId, 0) = ISNULL(PL18.Id, 0)
		LEFT JOIN wwp.YesNoRefused PL19
			ON PBS.IsLearningDisabilityDiagnosedId = PL19.Id
		LEFT JOIN wwp.YesNoRefused PL20
			ON PBS.IsLearningDisabilityHardToManageId = PL20.Id
		LEFT JOIN wwp.YesNoRefused PL21
			ON PBS.IsLearningDisabilityHardToParticipateId = PL21.Id
		LEFT JOIN wwp.InformalAssessment IA
			ON ISNULL(PBS.ParticipantId, 0) = ISNULL(IA.ParticipantId, 0)
		LEFT JOIN #SP_ReadCDCHistory_PBS_Temp_3 BAS
			ON ISNULL(IA.BarriersAssessmentSectionId, 0) = ISNULL(BAS.Id, 0) AND PBS.tran_id = BAS.tran_id
	WHERE PBS.Id = @IdentityNumber2
	ORDER BY PBS.modifiedDate DESC
	FOR XML PATH('BarrierSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_PBS_Temp_1 PBS
	WHERE PBS.Id = @IdentityNumber2
	ORDER BY PBS.modifiedDate DESC
	FOR XML PATH('BarrierSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_PBS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_PBS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	--IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_LIS_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_LIS_Temp_3

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_PSES]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_PSES]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.PostSecondaryEducationSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))
	DECLARE @SCE TABLE (SCEId INT)

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		IF @Count = 1
		BEGIN
			SET @Statement =
			'INSERT INTO ##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count AS VARCHAR(5)) + '
			 SELECT X.*
			 FROM (
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
			 UNION
		
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

			PRINT @Statement
			EXEC (@Statement)
		END
		ELSE
		BEGIN
			SET @Statement =
			'INSERT INTO ##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count AS VARCHAR(5)) + '
			 SELECT X.*
			 FROM (
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4) AND OriginId IS NOT NULL
		
			 UNION
		
			 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
					(SELECT CC.column_name + '',''
							   FROM [cdc].[captured_columns] CC
							   INNER JOIN [cdc].[change_tables] CT
									ON CC.[object_id] = CT.[object_id]
							   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
							   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
			 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																		   WHEN ''2'' THEN ''RECORD INSERTED ''
																		   WHEN ''3'' THEN ''BEFORE UPDATE ''
																		   WHEN ''4'' THEN ''AFTER UPDATE ''
													   END AS ACTION
			 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
			 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4) AND OriginId IS NOT NULL) X'

			PRINT @Statement
			EXEC (@Statement)
		END
		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @SCE
	SELECT SchoolCollegeEstablishmentId
	FROM ##SP_ReadCDCHistory_PSE_Temp_2
	ORDER BY tran_id

	--SELECT * FROM @SCE
	
	SELECT X.*
	INTO #SP_ReadCDCHistory_PSE_Temp_8
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[CityId], a.[Id], a.[IsDeleted], a.[ModifiedBy],
			   a.[ModifiedDate], a.[Name], a.[RowVersion], a.[Street], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[SchoolCollegeEstablishment]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_SchoolCollegeEstablishment_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2) X
	
	INSERT INTO #SP_ReadCDCHistory_PSE_Temp_8
	SELECT X.*
	FROM(
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[CityId], a.[Id], a.[IsDeleted], a.[ModifiedBy],
			   a.[ModifiedDate], a.[Name], a.[RowVersion], a.[Street], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[SchoolCollegeEstablishment]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM cdc.wwp_SchoolCollegeEstablishment_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT SCEId FROM @SCE) AND [__$operation] in (1,2,4)
	UNION
		SELECT a.[__$end_lsn], a.[__$operation], a.[__$seqval], a.[__$start_lsn], a.[__$update_mask], a.[CityId], a.[Id], a.[IsDeleted], a.[ModifiedBy],
			   a.[ModifiedDate], a.[Name], a.[RowVersion], a.[Street], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
			   (SELECT CC.column_name + ','
				FROM [cdc].[captured_columns] CC
					INNER JOIN [cdc].[change_tables] CT
						ON CC.[object_id] = CT.[object_id]
				WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[SchoolCollegeEstablishment]'))
				AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
				FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																		 WHEN '2' THEN 'RECORD INSERTED '
																		 WHEN '3' THEN 'BEFORE UPDATE '
																		 WHEN '4' THEN 'AFTER UPDATE '
													 END AS ACTION
		FROM hst.wwp_SchoolCollegeEstablishment_CT a, hst.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT SCEId FROM @SCE) AND [__$operation] in (1,2,4)) X
		ORDER BY Id

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_PSE_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, PostSecondaryEducationSectionId, SchoolCollegeEstablishmentId, CAST(HasGraduated AS INT) HasGraduated, LastYearAttended, Semesters, Credits, Details, SortOrder,
				   CAST(CurrentlyAttending AS INT) CurrentlyAttending, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_PSE_Temp_5
			FROM ##SP_ReadCDCHistory_PSE_Temp_2
			WHERE tran_id = @TranId

			SELECT Id, Name, Issuer, AttainedDate, ExpiredDate, CAST(IsInProgress AS INT) IsInProgress, CAST(DoesNotExpire AS INT) DoesNotExpire, ValidInWIPolarLookupId,
				   PostSecondaryEducationSectionId, LicenseTypeId, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_PSE_Temp_6
			FROM ##SP_ReadCDCHistory_PSE_Temp_4
			WHERE tran_id = @TranId

			SELECT Id, PostSecondaryEducationSectionId, Name, College, DegreeTypeId, YearAttained, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id,
				   @TranCount TranCount
			INTO #SP_ReadCDCHistory_PSE_Temp_7
			FROM ##SP_ReadCDCHistory_PSE_Temp_3
			WHERE tran_id = @TranId

			SELECT Id, Name, Street, CityId, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_PSE_Temp_9
			FROM #SP_ReadCDCHistory_PSE_Temp_8
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_PSE_Temp_5
			SELECT Id, PostSecondaryEducationSectionId, SchoolCollegeEstablishmentId, CAST(HasGraduated AS INT) HasGraduated, LastYearAttended, Semesters, Credits, Details, SortOrder,
				   CAST(CurrentlyAttending AS INT) CurrentlyAttending, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_PSE_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_PSE_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_PSE_Temp_6
			SELECT Id, Name, Issuer, AttainedDate, ExpiredDate, CAST(IsInProgress AS INT) IsInProgress, CAST(DoesNotExpire AS INT) DoesNotExpire, ValidInWIPolarLookupId,
				   PostSecondaryEducationSectionId, LicenseTypeId, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_PSE_Temp_4
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_PSE_Temp_4
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_PSE_Temp_7
			SELECT Id, PostSecondaryEducationSectionId, Name, College, DegreeTypeId, YearAttained, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id,
				   @TranCount TranCount
			FROM ##SP_ReadCDCHistory_PSE_Temp_3
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_PSE_Temp_3
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_PSE_Temp_9
			SELECT Id, Name, Street, CityId, ModifiedBy, ModifiedDate, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM #SP_ReadCDCHistory_PSE_Temp_8
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM #SP_ReadCDCHistory_PSE_Temp_8
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--SELECT * FROM ##SP_ReadCDCHistory_PSE_Temp_1
	--SELECT * FROM #SP_ReadCDCHistory_PSE_Temp_5
	--SELECT * FROM #SP_ReadCDCHistory_PSE_Temp_6
	--SELECT * FROM #SP_ReadCDCHistory_PSE_Temp_7
	--SELECT * FROM #SP_ReadCDCHistory_PSE_Temp_9
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_PSE_Temp_1) > 0
	BEGIN
	SELECT CASE CAST(PSE.DidAttendCollege AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasAttendedCollege,
		   (SELECT ISNULL(SCE.name, 'null') name,
		    (SELECT C.Name + ', ' + S.Code + IIF(CO.Code = '89', '', ', ' + CO.Name) [description], ISNULL(CAST(C.LongitudeNumber AS VARCHAR(25)), 'null') longitute, ISNULL(CAST(C.LatitudeNumber AS VARCHAR(25)), 'null') latitude,
		     C.Name city, S.Code [state], CO.name country, C.googlePlaceId
		     FROM wwp.City C
				INNER JOIN wwp.State S
					ON C.StateId = S.Id
				INNER JOIN wwp.Country CO
					ON C.CountryId = CO.Id
			 WHERE SCE.CityId = C.Id AND SCE.tran_id = PSE.tran_id
			 FOR XML PATH('location'), TYPE, ELEMENTS
		    ),
		    CASE CAST(PSC.hasGraduated AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasGraduated, ISNULL(CAST(PSC.lastYearAttended AS VARCHAR(4)), 'null') lastYearAttended,
		    CASE CAST(PSC.CurrentlyAttending AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCurrentlyAttending, ISNULL(CAST(PSC.semesters AS VARCHAR(4)), 'null') semesters,
		    ISNULL(CAST(CAST(PSC.credits AS INT) AS VARCHAR(4)), 'null') credits, ISNULL(PSC.details, 'null') details, PSC.id
		    FROM #SP_ReadCDCHistory_PSE_Temp_5 PSC
				LEFT JOIN #SP_ReadCDCHistory_PSE_Temp_9 SCE
					ON ISNULL(PSC.SchoolCollegeEstablishmentId, 0) = ISNULL(SCE.Id, 0) AND PSC.tran_id = SCE.tran_id
		    WHERE PSC.PostSecondaryEducationSectionId = PSE.Id AND PSC.tran_id = PSE.tran_id AND PSC.IsDeleted = 0
		    FOR XML PATH('postSecondaryColleges'), TYPE, ELEMENTS
		   ),
		    (SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			 FOR XML PATH('postSecondaryColleges'), TYPE, ELEMENTS
		    ),
		   CASE CAST(PSE.DoeshaveDegrees AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasDegree,
		   (SELECT ISNULL(PSD.Name, 'null') name, ISNULL(CAST(PSD.DegreeTypeId AS VARCHAR(4)), 'null') [type], ISNULL(DT.Name, 'null') typeName, ISNULL(PSD.college, 'null') college,
		    ISNULL(CAST(PSD.YearAttained AS VARCHAR(4)), 'null') yearAttained, PSD.id
		    FROM #SP_ReadCDCHistory_PSE_Temp_7 PSD
				INNER JOIN wwp.DegreeType DT
					ON PSD.DegreeTypeId = DT.Id
			WHERE PSD.PostSecondaryEducationSectionId = PSE.Id AND PSD.tran_id = PSE.tran_id AND PSD.IsDeleted = 0
			FOR XML PATH('postSecondaryDegrees'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
			(SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('postSecondaryDegrees'), TYPE, ELEMENTS
		   ),
		   CASE CAST(PSE.isWorkingOnLicensesOrCertificates AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isWorkingOnLicensesOrCertificates,
		   (SELECT ISNULL(CAST(PSL.LicenseTypeId AS VARCHAR(4)), 'null') licenseType, ISNULL(LT.Name, 'null') licenseTypeName, ISNULL(PSL.name, 'null') name,
		    ISNULL(CAST(PSL.ValidInWIPolarLookupId AS VARCHAR(4)), 'null') polarLookupId, ISNULL(PL.Name, 'null') validInWI, ISNULL(PSL.Issuer, 'null') issuer,
			ISNULL(CAST(PSL.ExpiredDate AS VARCHAR(10)), 'null') expiredDate,
			ISNULL((RIGHT('0' + RTRIM(CAST(MONTH(PSL.attainedDate) AS VARCHAR(2))), 2) + '/' + CAST(YEAR(PSL.attainedDate) AS VARCHAR(4))), 'null') attainedDate,
			CASE CAST(PSL.doesNotExpire AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END doesNotExpire, CASE CAST(PSL.isInProgress AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInProgress, PSL.id
		    FROM #SP_ReadCDCHistory_PSE_Temp_6 PSL
				INNER JOIN wwp.LicenseType LT
					ON PSL.LicenseTypeId = LT.Id
				INNER JOIN wwp.PolarLookup PL
					ON PSL.ValidInWIPolarLookupId = PL.Id
			WHERE PSL.PostSecondaryEducationSectionId = PSE.Id AND PSL.tran_id = PSE.tran_id AND PSL.IsDeleted = 0
			FOR XML PATH('postSecondaryLicenses'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
			(SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('postSecondaryLicenses'), TYPE, ELEMENTS
		   ),
		   ISNULL(PSE.notes, 'null') postSecondaryNotes, PSE.rowVersion,
		   IIF(PSE.ModifiedBy = 'WWP Conversion', PSE.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT PSE1.ModifiedBy
							FROM ##SP_ReadCDCHistory_PSE_Temp_1 PSE1
							WHERE PSE1.Id = PSE.Id AND PSE1.tran_id = PSE.tran_id)
		   ))modifiedBy, PSE.modifiedDate
	FROM ##SP_ReadCDCHistory_PSE_Temp_1 PSE
	WHERE PSE.Id = @IdentityNumber2
	ORDER BY PSE.modifiedDate DESC
	FOR XML PATH('PostSecondaryEducationSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_PSE_Temp_1 PSE
	WHERE PSE.Id = @IdentityNumber2
	FOR XML PATH('PostSecondaryEducationSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_PSE_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_WP_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_PSE_Temp_5') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_PSE_Temp_5
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_PSE_Temp_6') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_PSE_Temp_7
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_PSE_Temp_7') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_PSE_Temp_6
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_PSE_Temp_8') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_PSE_Temp_8

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_TS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_TS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.TransportationSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'State') AND (SO_R.name <> 'DriversLicenseInvalidReasonType')
			AND (SO_R.name <> 'YesNoUnknownLookup'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'State') AND (SO_R.name <> 'DriversLicenseInvalidReasonType')
			   AND (SO_R.name <> 'YesNoUnknownLookup'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_TS_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_TS_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_TS_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_TS_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_TS_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_TS_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, TransportationSectionId, TransporationTypeId TransportationTypeId, CAST(IsDeleted AS INT) IsDeleted, ModifiedBy, ModifiedDate, RowVersion, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_TS_Temp_3
			FROM ##SP_ReadCDCHistory_TS_Temp_2
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_TS_Temp_3
			SELECT Id, TransportationSectionId, TransporationTypeId TransportationTypeId, CAST(IsDeleted AS INT) IsDeleted, ModifiedBy, ModifiedDate, RowVersion, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_TS_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_TS_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--SELECT * FROM ##SP_ReadCDCHistory_TS_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_TS_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_TS_Temp_3
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_TS_Temp_1) > 0
	BEGIN
	SELECT 
		   (SELECT CAST(TSMB.transportationTypeId AS INT)
		    FROM #SP_ReadCDCHistory_TS_Temp_3 TSMB
			WHERE TSMB.TransportationSectionId = TS.Id AND TSMB.tran_id = TS.tran_id AND TSMB.IsDeleted = 0
			FOR XML PATH('methods'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('methods'), TYPE, ELEMENTS
		   ),
		   (SELECT CAST(TT.Name AS VARCHAR(100))
		    FROM #SP_ReadCDCHistory_TS_Temp_3 TSMB1
				INNER JOIN wwp.TransportationType TT
					ON TSMB1.TransportationTypeId = TT.Id
			WHERE TSMB1.TransportationSectionId = TS.Id AND TSMB1.tran_id = TS.tran_id AND TSMB1.IsDeleted = 0
			FOR XML PATH('transportationMethods'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
		    FOR XML PATH ('transportationMethods'), TYPE, ELEMENTS
		   ),
		   ISNULL(TS.TransporationDetails, 'null') methodDetails, ISNULL(CAST(TS.isVehicleInsuredId AS VARCHAR(4)), 'null') isVehicleInsuredId, ISNULL(PL.Name, 'null') isVehicleInsuredName,
		   ISNULL(TS.VehicleInsuredDetails, 'null') vehicleInsuredDetails, ISNULL(CAST(TS.isVehicleRegistrationCurrentId AS VARCHAR(4)), 'null') isVehicleRegistrationCurrentId,
		   ISNULL(PL1.Name, 'null') isVehicleRegistrationCurrentName, ISNULL(TS.vehicleRegistrationCurrentDetails, 'null') vehicleRegistrationCurrentDetails,
		   CASE CAST(TS.hasValidDrivingLicense AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasValidDriversLicense, ISNULL(CAST(TS.driversLicenseStateId AS VARCHAR(4)), 'null') driversLicenseStateId,
		   ISNULL(S.Name, 'null') driversLicenseStateName, ISNULL(CAST(TS.driversLicenseExpirationDate AS VARCHAR(10)), 'null') driversLicenseExpirationDate,
		   ISNULL(TS.driversLicenseDetails, 'null') driversLicenseDetails, ISNULL(CAST(TS.driversLicenseInvalidReasonId AS VARCHAR(4)), 'null') driversLicenseInvalidReasonId,
		   ISNULL(DLIRT.Name, 'null') driversLicenseInvalidReasonName, ISNULL(TS.driversLicenseInvalidDetails, 'null') driversLicenseInvalidDetails,
		   CASE CAST(TS.hadCommercialDriversLicense AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hadCommercialDriversLicense,
		   CASE CAST(TS.isCommercialDriversLicenseActive AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCommercialDriversLicenseActive,
		   ISNULL(TS.commercialDriversLicenseDetails, 'null') commercialDriversLicenseDetails, ISNULL(TS.Notes, 'null') notes,
		   (SELECT TOP 1 AN.id, AN.ActionNeededPageId pageId, ANP.Name pageName, CASE CAST(AN.isNoActionNeeded AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoActionNeeded,
		    (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		     FROM wwp.Worker
		     WHERE WAMSId = (SELECT AN1.ModifiedBy
							 FROM wwp.ActionNeeded AN1
							 WHERE AN1.Id = AN.Id)
		    )modifiedBy,
		    AN.modifiedDate, AN.rowVersion,
		    (SELECT ACT.id, ACT.actionNeededId, ACT.ActionAssigneeId assigneeId, AA.Name assigneeName, AN1.ActionNeededPageId pageId, ANP.Name pageName, ACT.actionItemId,
			 AI.Name actionItemName, ISNULL(CAST(ACT.ActionPriorityId AS VARCHAR(10)), 'nul') priorityId, ISNULL(AP.Name, 'null') priorityName, ISNULL(ACT.FollowUpTask, null) followUpTask, ISNULL(CAST(ACT.DueDate AS VARCHAR(10)), 'null') dueDate,
			 CASE CAST(ACT.IsNoDueDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoDueDate, ISNULL(CAST(ACT.CompletionDate AS VARCHAR(10)), 'null') completionDate,
			 CASE CAST(ACT.IsNoCompletionDate AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isNoCompletionDate, ISNULL(ACT.Details, 'null') details, ACT.createdDate, ACT.modifiedDate,
			 ACT.modifiedBy, ACT.rowVersion
			 FROM wwp.ActionNeededTask ACT
				LEFT JOIN wwp.ActionNeeded AN1
					ON ACT.ActionNeededId = AN1.Id
				LEFT JOIN wwp.ActionAssignee AA
					ON ACT.ActionAssigneeId = AA.Id
				LEFT JOIN wwp.ActionItem AI
					ON ACT.ActionItemId = AI.Id
				LEFT JOIN wwp.ActionNeededPage ANP
					ON AN1.ActionNeededPageId = ANP.Id
				LEFT JOIN wwp.ActionPriority AP
					ON ACT.ActionPriorityId = AP.Id
			 WHERE ACT.ActionNeededId = AN.Id AND AN.ParticipantId = TS.ParticipantId AND ACT.IsDeleted = 0-- AND NCP.tran_id = AN.tran_id
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
		    ),
			(SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			 FOR XML PATH('tasks'), TYPE, ELEMENTS
			)
		    FROM wwp.ActionNeeded AN
				INNER JOIN wwp.ActionNeededPage ANP
					ON AN.ActionNeededPageId = ANP.Id
		    WHERE TS.ParticipantId = AN.ParticipantId AND AN.ActionNeededPageId = (SELECT Id
																				   FROM wwp.ActionNeededPage
																				   WHERE Name = 'Transportation')
			ORDER BY AN.ModifiedDate DESC																					
		    FOR XML PATH('actionNeeded'), TYPE, ELEMENTS
		   ),
		   TS.rowVersion,
		   IIF(TS.ModifiedBy = 'WWP Conversion', TS.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT TS1.ModifiedBy
							FROM ##SP_ReadCDCHistory_TS_Temp_1 TS1
							WHERE TS1.Id = TS.Id AND TS1.tran_id = TS.tran_id)
		   ))modifiedBy, TS.modifiedDate
	FROM ##SP_ReadCDCHistory_TS_Temp_1 TS
		LEFT JOIN wwp.YesNoUnknownLookup PL
			ON ISNULL(TS.IsVehicleInsuredId, 0) = ISNULL(PL.Id, 0)
		LEFT JOIN wwp.YesNoUnknownLookup PL1
			ON ISNULL(TS.IsVehicleRegistrationCurrentId, 0) = ISNULL(PL1.Id, 0)
		LEFT JOIN wwp.State S
			ON ISNULL(TS.DriversLicenseStateId, 0) = ISNULL(S.Id, 0)
		LEFT JOIN wwp.DriversLicenseInvalidReasonType DLIRT
			ON ISNULL(TS.driversLicenseInvalidReasonId, 0) = ISNULL(DLIRT.Id, 0)
	WHERE TS.Id = @IdentityNumber2
	ORDER BY TS.modifiedDate DESC
	FOR XML PATH('TransportationSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_TS_Temp_1 TS
	WHERE TS.Id = @IdentityNumber2
	FOR XML PATH('TransportationSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_TS_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_TS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_TS_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_TS_Temp_3

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_WHA]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_WHA]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@IdentityNumber VARCHAR(MAX)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName) AND name <> 'tbd'
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @JDD TABLE (JDDId INT)
	DECLARE @WHWT TABLE (WHWTId INT)
	DECLARE @WHH TABLE (WHHId INT)
	DECLARE @WHHWT TABLE (WHHWTId INT)
	DECLARE @EIBOT TABLE (EIBOTId INT)
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'LeavingReason') AND (SO_R.name <> 'City') AND (SO_R.name <> 'Contact')
		   AND (SO_R.name <> 'JobType') AND (SO_R.name <> 'DeleteReason') AND (SO_R.name <> 'WorkHistorySection') AND (SO_R.name <> 'EmploymentProgramType')
		   AND (SO_R.name <> 'EmployerOfRecordType'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <> 'LeavingReason') AND (SO_R.name <> 'City') AND (SO_R.name <> 'Contact')
			  AND (SO_R.name <> 'JobType') AND (SO_R.name <> 'DeleteReason') AND (SO_R.name <> 'WorkHistorySection') AND (SO_R.name <> 'EmploymentProgramType')
			  AND (SO_R.name <> 'EmployerOfRecordType'))
	ORDER BY Parent_Table, Referenced_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_WHA_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_WHA_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_WHA_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_WHA_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @JDD
	SELECT JobDutiesId
	FROM ##SP_ReadCDCHistory_WHA_Temp_7

	INSERT INTO @WHWT
	SELECT Id
	FROM wwp.WageHourWageTypeBridge
	WHERE WageHourId IN (SELECT Id
						 FROM ##SP_ReadCDCHistory_WHA_Temp_5)

	INSERT INTO @WHH
	SELECT Id
	FROM wwp.WageHourHistory
	WHERE WageHourId IN (SELECT Id
						 FROM ##SP_ReadCDCHistory_WHA_Temp_5)

	INSERT INTO @WHHWT
	SELECT Id
	FROM wwp.WageHourHistoryWageTypeBridge
	WHERE WageHourHistoryId IN (SELECT DISTINCT WHHId
								FROM @WHH)
	
	INSERT INTO @EIBOT
	SELECT Id
	FROM wwp.EmploymentInformationBenefitsOfferedTypeBridge
	WHERE EmploymentInformationId IN (SELECT Id
									  FROM ##SP_ReadCDCHistory_WHA_Temp_1)

	--SELECT * FROM @JDD
	--SELECT * FROM @WHWT
	--SELECT * FROM @WHH
	--SELECT * FROM @WHHWT

	SELECT X.*
	INTO #SP_ReadCDCHistory_WHA_Temp_7
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[JobDutiesDetails]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.wwp_JobDutiesDetails_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2) X

	SELECT X.*
	INTO #SP_ReadCDCHistory_WHA_Temp_8
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourWageTypeBridge]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.wwp_WageHourWageTypeBridge_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2) X

	SELECT X.*
	INTO #SP_ReadCDCHistory_WHA_Temp_11
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourHistory]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.WWP_WageHourHistory_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2) X

	SELECT X.*
	INTO #SP_ReadCDCHistory_WHA_Temp_12
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourHistotyWageTypeBridge]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.WWP_WageHourHistoryWageTypeBridge_CT a, cdc.lsn_time_mapping  b
		WHERE 1= 2) X

	SELECT X.*
	INTO #SP_ReadCDCHistory_WHA_Temp_15
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourHistotyWageTypeBridge]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.WWP_EmploymentInformationBenefitsOfferedTypeBridge_CT a, cdc.lsn_time_mapping  b
		WHERE 1 = 2)  X
	
	INSERT INTO #SP_ReadCDCHistory_WHA_Temp_7
	SELECT X.*
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[JobDutiesDetails]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.wwp_JobDutiesDetails_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT JDDId FROM @JDD) AND [__$operation] in (1,2,4)
	UNION
	SELECT a.*,b.* , (SELECT CC.column_name + ','
	FROM [cdc].[captured_columns] CC
		INNER JOIN [cdc].[change_tables] CT
			ON CC.[object_id] = CT.[object_id]
	WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[JobDutiesDetails]'))
	AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
	FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																WHEN '2' THEN 'RECORD INSERTED '
																WHEN '3' THEN 'BEFORE UPDATE '
																WHEN '4' THEN 'AFTER UPDATE '
											END AS ACTION
	FROM hst.wwp_JobDutiesDetails_CT a, hst.lsn_time_mapping  b
	WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT JDDId FROM @JDD) AND [__$operation] in (1,2,4)) X
	ORDER BY Id

	INSERT INTO #SP_ReadCDCHistory_WHA_Temp_8
	SELECT X.*
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourWageTypeBridge]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.wwp_WageHourWageTypeBridge_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT WHWTId FROM @WHWT) AND [__$operation] in (1,2,4)
	UNION
	SELECT a.*,b.* , (SELECT CC.column_name + ','
	FROM [cdc].[captured_columns] CC
		INNER JOIN [cdc].[change_tables] CT
			ON CC.[object_id] = CT.[object_id]
	WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourWageTypeBridge]'))
	AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
	FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																WHEN '2' THEN 'RECORD INSERTED '
																WHEN '3' THEN 'BEFORE UPDATE '
																WHEN '4' THEN 'AFTER UPDATE '
											END AS ACTION
	FROM hst.wwp_WageHourWageTypeBridge_CT a, hst.lsn_time_mapping  b
	WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT WHWTId FROM @WHWT) AND [__$operation] in (1,2,4)) X
	ORDER BY Id

	INSERT INTO #SP_ReadCDCHistory_WHA_Temp_11
	SELECT X.*
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourHistory]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.WWP_WageHourHistory_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT WHHId FROM @WHH) AND [__$operation] in (1,2,4)
	UNION
	SELECT a.*,b.* , (SELECT CC.column_name + ','
	FROM [cdc].[captured_columns] CC
		INNER JOIN [cdc].[change_tables] CT
			ON CC.[object_id] = CT.[object_id]
	WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourHistory]'))
	AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
	FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																WHEN '2' THEN 'RECORD INSERTED '
																WHEN '3' THEN 'BEFORE UPDATE '
																WHEN '4' THEN 'AFTER UPDATE '
											END AS ACTION
	FROM hst.WWP_WageHourHistory_CT a, hst.lsn_time_mapping  b
	WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT WHHId FROM @WHH) AND [__$operation] in (1,2,4)) X
	ORDER BY Id

	INSERT INTO #SP_ReadCDCHistory_WHA_Temp_12
	SELECT X.*
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourHistotyWageTypeBridge]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.WWP_WageHourHistoryWageTypeBridge_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT WHHWTId FROM @WHHWT) AND [__$operation] in (1,2,4)
	UNION
	SELECT a.*,b.* , (SELECT CC.column_name + ','
	FROM [cdc].[captured_columns] CC
		INNER JOIN [cdc].[change_tables] CT
			ON CC.[object_id] = CT.[object_id]
	WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[WageHourHistotyWageTypeBridge]'))
	AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
	FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																WHEN '2' THEN 'RECORD INSERTED '
																WHEN '3' THEN 'BEFORE UPDATE '
																WHEN '4' THEN 'AFTER UPDATE '
											END AS ACTION
	FROM hst.WWP_WageHourHistoryWageTypeBridge_CT a, hst.lsn_time_mapping  b
	WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT WHHWTId FROM @WHHWT) AND [__$operation] in (1,2,4)) X
	ORDER BY Id

	INSERT INTO #SP_ReadCDCHistory_WHA_Temp_15
	SELECT X.*
	FROM(
		SELECT a.*,b.* , (SELECT CC.column_name + ','
		FROM [cdc].[captured_columns] CC
			INNER JOIN [cdc].[change_tables] CT
				ON CC.[object_id] = CT.[object_id]
		WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[EmploymentInformationBenefitsOfferedTypeBridge]'))
		AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																	WHEN '2' THEN 'RECORD INSERTED '
																	WHEN '3' THEN 'BEFORE UPDATE '
																	WHEN '4' THEN 'AFTER UPDATE '
												END AS ACTION
		FROM cdc.WWP_EmploymentInformationBenefitsOfferedTypeBridge_CT a, cdc.lsn_time_mapping  b
		WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT EIBOTId FROM @EIBOT) AND [__$operation] in (1,2,4)
	UNION
	SELECT a.*,b.* , (SELECT CC.column_name + ','
	FROM [cdc].[captured_columns] CC
		INNER JOIN [cdc].[change_tables] CT
			ON CC.[object_id] = CT.[object_id]
	WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('[wwp].[EmploymentInformationBenefitsOfferedTypeBridge]'))
	AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
	FOR	XML PATH('')) AS changedcolumns, CASE a.__$operation WHEN '1' THEN 'RECORD DELETED '
																WHEN '2' THEN 'RECORD INSERTED '
																WHEN '3' THEN 'BEFORE UPDATE '
																WHEN '4' THEN 'AFTER UPDATE '
											END AS ACTION
	FROM hst.WWP_EmploymentInformationBenefitsOfferedTypeBridge_CT a, hst.lsn_time_mapping  b
	WHERE b.start_lsn = a.__$start_lsn AND a.id IN (SELECT EIBOTId FROM @EIBOT) AND [__$operation] in (1,2,4)) X
	ORDER BY Id

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_WHA_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran
	
	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, Details, SortOrder, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WHA_Temp_9
			FROM #SP_ReadCDCHistory_WHA_Temp_7
			WHERE tran_id = @TranId

			SELECT Id, ExpectedScheduleDetails, JobSectorId, JobFoundMethodId, WorkerId, JobFoundMethodDetails, SortOrder, ModifiedDate,
				   RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WHA_Temp_10
			FROM ##SP_ReadCDCHistory_WHA_Temp_4
			WHERE tran_id = @TranId

			SELECT Id, WagehourId, HourlySubsidyRate, EffectiveDate, PayTypeDetails, AverageWeeklyHours, PayRate, SortOrder, ComputedWageRateUnit, PayRateIntervalId, ComputedWageRateValue,
				   ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WHA_Temp_13
			FROM #SP_ReadCDCHistory_WHA_Temp_11
			WHERE tran_id = @TranId

			SELECT Id, WageHourHistoryId, WageTypeId, SortOrder, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WHA_Temp_14
			FROM #SP_ReadCDCHistory_WHA_Temp_12
			WHERE tran_id = @TranId

			SELECT Id, EmploymentInformationId, CompanyName, Fein, StreetAddress, ZipAddress, CityId, JobSectorId, ContactId, ModifiedDate, RowVersion,
				   CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WHA_Temp_16
			FROM ##SP_ReadCDCHistory_WHA_Temp_3
			WHERE tran_id = @TranId

			SELECT Id, EmploymentInformationId, JobDutiesId, SortOrder, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WHA_Temp_17
			FROM ##SP_ReadCDCHistory_WHA_Temp_7
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_WHA_Temp_9
			SELECT Id, Details, SortOrder, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM #SP_ReadCDCHistory_WHA_Temp_7
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM #SP_ReadCDCHistory_WHA_Temp_7
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_WHA_Temp_10
			SELECT Id, ExpectedScheduleDetails, JobSectorId, JobFoundMethodId, WorkerId, JobFoundMethodDetails, SortOrder, ModifiedDate,
				   RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_WHA_Temp_4
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_WHA_Temp_4
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_WHA_Temp_13
			SELECT Id, WagehourId, HourlySubsidyRate, EffectiveDate, PayTypeDetails, AverageWeeklyHours, PayRate, SortOrder, ComputedWageRateUnit, PayRateIntervalId, ComputedWageRateValue,
				   ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM #SP_ReadCDCHistory_WHA_Temp_11
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM #SP_ReadCDCHistory_WHA_Temp_11
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_WHA_Temp_14
			SELECT Id, WageHourHistoryId, WageTypeId, SortOrder, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM #SP_ReadCDCHistory_WHA_Temp_12
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM #SP_ReadCDCHistory_WHA_Temp_12
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_WHA_Temp_16
			SELECT Id, EmploymentInformationId, CompanyName, Fein, StreetAddress, ZipAddress, CityId, JobSectorId, ContactId, ModifiedDate, RowVersion,
				   CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_WHA_Temp_3
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_WHA_Temp_3
								   WHERE tran_id <= @TranId
								   GROUP BY Id)

			INSERT INTO #SP_ReadCDCHistory_WHA_Temp_17
			SELECT Id, EmploymentInformationId, JobDutiesId, SortOrder, ModifiedDate, RowVersion, CAST(IsDeleted AS INT) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_WHA_Temp_7
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_WHA_Temp_7
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--INSERT INTO @MaxTranId
	--SELECT TranCount, MAX(tran_id) MaxTranId
	--FROM #SP_ReadCDCHistory_NCP_Temp_4
	--GROUP BY TranCount

	--UPDATE #SP_ReadCDCHistory_NCP_Temp_4
	--SET #SP_ReadCDCHistory_NCP_Temp_4.tran_id = T2.MaxTranId
	--FROM #SP_ReadCDCHistory_NCP_Temp_4 T1
	--	INNER JOIN @MaxTranId T2
	--		ON T1.TranCount = T2.TranCount

	--SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_2
	--SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_3
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_16
	--SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_4
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_10
	--SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_5
	--SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_6
	--SELECT * FROM ##SP_ReadCDCHistory_WHA_Temp_7
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_7
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_9
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_8
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_11
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_13
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_12
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_14
	--SELECT * FROM #SP_ReadCDCHistory_WHA_Temp_15
	--PRINT @Count
	
	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_WHA_Temp_1) > 0
	BEGIN
	SELECT EI.id, EI.jobTypeId, JT.Name jobTypeName, CONVERT(VARCHAR(10), EI.JobBeginDate, 101) jobBeginDate, ISNULL(CONVERT(VARCHAR(10), EI.JobEndDate, 101), 'null') jobEndDate, EI.CityId cityId,
		   CASE CAST(EI.IsCurrentlyEmployed AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isCurrentlyEmployed, EI.jobPosition, EI.companyName, ISNULL(EI.Fein, 'null') fein,
		   (SELECT ISNULL(C.Name + ', ' + S.Code + IIF(CO.Code = '89', '', ', ' + CO.Name), 'null') [description], ISNULL(CAST(C.LongitudeNumber AS VARCHAR(25)), 'null') longitude, ISNULL(CAST(C.LatitudeNumber AS VARCHAR(25)), 'null') latitude,
		    C.Name city, S.Code [state], CO.name country, EI.StreetAddress fullAddress, EI.zipAddress, C.googlePlaceId, 'null' aptUnit
		    FROM wwp.City C
				LEFT JOIN wwp.State S
					ON C.StateId = S.Id
				LEFT JOIN wwp.Country CO
					ON C.CountryId = CO.Id
			WHERE EI.CityId = C.Id
			FOR XML PATH('location'), TYPE, ELEMENTS
		   ),
		   ISNULL(CAST(EI.contactId AS VARCHAR(10)), 'null') contactId,
		   (SELECT JDD.id, JDD.details
		    FROM #SP_ReadCDCHistory_WHA_Temp_9 JDD
				INNER JOIN #SP_ReadCDCHistory_WHA_Temp_17 EIJDD
					ON EIJDD.JobDutiesId = JDD.Id
			WHERE EIJDD.EmploymentInformationId = EI.Id AND EIJDD.tran_id = EI.tran_id AND JDD.tran_id = EI.tran_id
			AND EIJDD.IsDeleted = 0
			FOR XML PATH('jobDuties'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
			(SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
			)
			FOR XML PATH('jobDuties'), TYPE, ELEMENTS
		   ),
		   EI.rowVersion, EI.modifiedDate, CASE CAST(EI.IsConverted AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isConverted, ISNULL(CAST(EI.DeleteReasonId AS VARCHAR(10)), 'null') deleteReasonId,
		   ISNULL(DR.Name, 'null') deleteReasonName, ISNULL(CAST(OJI.JobSectorId AS VARCHAR(10)), 'null') jobSectorId, ISNULL(JS.Name, 'null') jobSectorName,
		   ISNULL(CAST(EI.EmployerOfRecordTypeId AS VARCHAR(10)), 'null') employerOfRecordId, ISNULL(CAST(OJI.WorkerId AS VARCHAR(10)), 'null') workerId,
		   ISNULL(OJI.ExpectedScheduleDetails, 'null') expectedScheduleDetails,
		   (SELECT (SELECT ISNULL(CAST(EIBO.benefitsOfferedTypeId AS VARCHAR(10)), 'null')
		    FROM #SP_ReadCDCHistory_WHA_Temp_15 EIBO
			WHERE EIBO.EmploymentInformationId = EI.Id AND EIBO.tran_id = EI.tran_id AND EIBO.IsDeleted = 0
			AND EIBO.ModifiedDate = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN (SELECT MAX(EIBO.ModifiedDate) FROM #SP_ReadCDCHistory_WHA_Temp_15 EIBO)
										 ELSE EIBO.ModifiedDate
									END
		    FOR XML PATH('jobActionTypes'), TYPE, ELEMENTS),
			(SELECT NULL,
			 (SELECT NULL
				FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			FOR XML PATH('jobActionTypes'), TYPE, ELEMENTS),
			(SELECT ISNULL(BO.Name, 'null')
			 FROM #SP_ReadCDCHistory_WHA_Temp_15 EIBO
				LEFT JOIN wwp.BenefitsOfferedType BO
			 ON EIBO.BenefitsOfferedTypeId = BO.Id
			 WHERE EIBO.EmploymentInformationId = EI.Id AND EIBO.tran_id = EI.tran_id AND EIBO.IsDeleted = 0
			AND EIBO.ModifiedDate = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN (SELECT MAX(EIBO.ModifiedDate) FROM #SP_ReadCDCHistory_WHA_Temp_15 EIBO)
										 ELSE EIBO.ModifiedDate
									END
			FOR XML PATH('jobActionNames'), TYPE, ELEMENTS),
			(SELECT NULL,
			 (SELECT NULL
				FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			FOR XML PATH('jobActionNames'), TYPE, ELEMENTS)
		   FOR XML PATH('jobAction'), TYPE, ELEMENTS),
		   ISNULL(CAST(OJI.JobFoundMethodId AS VARCHAR(10)), 'null') jobFoundMethodId, ISNULL(JFM.Name, 'null') jobFoundMethodName,
		   ISNULL(OJI.JobFoundMethodDetails, 'null') jobFoundMethodDetails, IIF(EI.IsCurrentlyEmployed = 0 OR EI.IsCurrentlyEmployed IS NULL,
		   CAST(EI.LeavingReasonId AS VARCHAR(4)), 'null') leavingReasonId, IIF(EI.IsCurrentlyEmployed = 0 OR EI.IsCurrentlyEmployed IS NULL, LR.Name, 'null') leavingReasonName,
		   IIF(EI.IsCurrentlyEmployed = 0 OR EI.IsCurrentlyEmployed IS NULL, EI.LeavingReasonDetails, 'null') leavingReasonDetails,
		   EI.employmentProgramTypeId, EPT.Name employmentProgramTypeName,
		   IIF((SELECT COUNT(*) FROM ##SP_ReadCDCHistory_WHA_Temp_5 WH
									LEFT JOIN wwp.IntervalType IT
										ON ISNULL(WH.CurrentPayRateIntervalId, 0) = ISNULL(IT.Id, 0)
									LEFT JOIN wwp.IntervalType IT1
										ON ISNULL(WH.pastBeginPayRateIntervalId, 0) = ISNULL(IT1.Id, 0)
									LEFT JOIN wwp.IntervalType IT2
										ON ISNULL(WH.pastBeginPayRateIntervalId, 0) = ISNULL(IT2.Id, 0)
								 WHERE EI.WageHoursId = WH.Id AND EI.tran_id = WH.tran_id) > 0,
			(SELECT ISNULL(CONVERT(VARCHAR(10), WH.currentEffectiveDate, 101), 'null') currentEffectiveDate,
		    (SELECT (SELECT CAST(WHWT.wageTypeId AS INT)
			 FROM #SP_ReadCDCHistory_WHA_Temp_8 WHWT
				INNER JOIN wwp.WageType WT
					ON WHWT.WageTypeId = WT.Id
			 WHERE WHWT.WageHourId = WH.Id AND WHWT.tran_id = EI.tran_id
			 AND WHWT.IsDeleted = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN 1 ELSE 0 END
			 AND WHWT.ModifiedDate = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN (SELECT MAX(WHWT.ModifiedDate) FROM #SP_ReadCDCHistory_WHA_Temp_8 WHWT)
										  ELSE WHWT.ModifiedDate
									 END
			 FOR XML PATH('jobActionTypes'), TYPE, ELEMENTS),
			(SELECT NULL,
			 (SELECT NULL
				FOR XML PATH('NULL'), TYPE, ELEMENTS
			 )
			FOR XML PATH('jobActionTypes'), TYPE, ELEMENTS),
			(SELECT ISNULL(WT.Name, 'null')
			 FROM #SP_ReadCDCHistory_WHA_Temp_8 WHWT
				LEFT JOIN wwp.WageType WT
					ON WHWT.WageTypeId = WT.Id
			 WHERE WHWT.WageHourId = WH.Id AND WHWT.tran_id = EI.tran_id
			 AND WHWT.IsDeleted = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN 1 ELSE 0 END
			 AND WHWT.ModifiedDate = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN (SELECT MAX(WHWT.ModifiedDate) FROM #SP_ReadCDCHistory_WHA_Temp_8 WHWT)
										  ELSE WHWT.ModifiedDate
									 END
			 FOR XML PATH('jobActionNames'), TYPE, ELEMENTS),
			 (SELECT NULL,
			  (SELECT NULL
			   FOR XML PATH('NULL'), TYPE, ELEMENTS
			  )
			 FOR XML PATH('jobActionNames'), TYPE, ELEMENTS)
			 FOR XML PATH('currentPayType'), TYPE, ELEMENTS
			),
			ISNULL(WH.currentPayTypeDetails, 'null') currentPayTypeDetails, WH.currentAverageWeeklyHours, ISNULL(CAST(WH.currentPayRate AS VARCHAR(10)), 'null') currentPayRate,
			ISNULL(CAST(WH.currentPayRateIntervalId AS VARCHAR(4)), 'null') currentPayRateIntervalId, ISNULL(IT.Name, 'null') currentPayRateIntervalName,
			ISNULL(CAST(WH.pastBeginPayRate AS VARCHAR(10)), 'null') pastBeginPayRate, ISNULL(CAST(WH.pastBeginPayRateIntervalId AS VARCHAR(4)), 'null') pastBeginPayRateIntervalId,
			ISNULL(IT1.Name, 'null') pastBeginPayRateIntervalName, ISNULL(CAST(WH.pastEndPayRate AS VARCHAR(10)), 'null') pastEndPayRate,
			ISNULL(CAST(WH.pastEndPayRateIntervalId AS VARCHAR(4)), 'null') pastEndPayRateIntervalId, ISNULL(IT2.Name, 'null') pastEndPayRateIntervalName,
			ISNULL(CAST(WH.currentHourlySubsidyRate AS VARCHAR(10)), 'null') currentHourlySubsidyRate,
			CASE CAST(WH.IsUnchangedPastPayRateIndicator AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END unchangedPastPayRateIndicator,
			(SELECT whh.id, whh.hourlySubsidyRate, ISNULL(CONVERT(VARCHAR(10), WHH.EffectiveDate, 101), 'null') effectiveDate, ISNULL(whh.payTypeDetails, 'null') payTypeDetails, whh.averageWeeklyHours,
			 ISNULL(CAST(WHH.PayRate AS VARCHAR(10)), 'null') payRate, whh.payRateIntervalId,
			 (SELECT (SELECT ISNULL(CAST(WHHWT.wageTypeId AS VARCHAR(10)), 'null')
			  FROM #SP_ReadCDCHistory_WHA_Temp_14 WHHWT
				INNER JOIN wwp.WageType WT
					ON WHHWT.WageTypeId = WT.Id
			  WHERE WHHWT.WageHourHistoryId = WHH.Id AND WHHWT.tran_id = EI.tran_id
			  AND WHHWT.IsDeleted = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN 1 ELSE 0 END
			  AND WHHWT.ModifiedDate = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN (SELECT MAX(WHHWT.ModifiedDate) FROM #SP_ReadCDCHistory_WHA_Temp_14 WHHWT)
											ELSE WHHWT.ModifiedDate
									   END
		      ORDER BY WHHWT.wageTypeId
			  FOR XML PATH('jobActionTypes'), TYPE, ELEMENTS),
			  (SELECT NULL,
			   (SELECT NULL
				FOR XML PATH('NULL'), TYPE, ELEMENTS)
			   FOR XML PATH('jobActionTypes'), TYPE, ELEMENTS),
			   (SELECT ISNULL(WT.Name, 'null')
			    FROM #SP_ReadCDCHistory_WHA_Temp_14 WHHWT
					LEFT JOIN wwp.WageType WT
						ON WHHWT.WageTypeId = WT.Id
				WHERE WHHWT.WageHourHistoryId = WHH.Id AND WHHWT.tran_id = EI.tran_id
				AND WHHWT.IsDeleted = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN 1 ELSE 0 END
				AND WHHWT.ModifiedDate = CASE WHEN EI.DeleteReasonId IS NOT NULL THEN (SELECT MAX(WHHWT.ModifiedDate) FROM #SP_ReadCDCHistory_WHA_Temp_14 WHHWT)
											  ELSE WHHWT.ModifiedDate
										 END
			    FOR XML PATH('jobActionNames'), TYPE, ELEMENTS),
			   (SELECT NULL,
			    (SELECT NULL
				 FOR XML PATH('NULL'), TYPE, ELEMENTS
			   )
			   FOR XML PATH('jobActionNames'), TYPE, ELEMENTS)
			  FOR XML PATH('historyPayType'), TYPE, ELEMENTS),
			 ISNULL(CAST(WHH.ComputedWageRateUnit AS VARCHAR(10)), 'null') computedWageRateUnit, ISNULL(CAST(WHH.ComputedWageRateValue AS VARCHAR(10)), 'null') computedWageRateValue,
			 ISNULL(CAST(WHH.SortOrder AS VARCHAR(5)), 'null') sortOrder, ISNULL(ITH.Name, 'null') payRateIntervalName, WHH.modifiedBy, WHH.modifiedDate
			 FROM #SP_ReadCDCHistory_WHA_Temp_13 WHH
				LEFT JOIN wwp.IntervalType ITH
					ON ISNULL(WHH.PayRateIntervalId, 0) = ISNULL(ITH.Id, 0)
			 WHERE WHH.WageHourId = WH.Id AND EI.tran_id = WHH.tran_id-- AND WHH.IsDeleted = 0
			 FOR XML PATH('wageHourHistories'), TYPE, ELEMENTS
			),
			(SELECT NULL,
			 (SELECT NULL
			  FOR XML PATH('NULL'), TYPE, ELEMENTS)
			 FOR XML PATH('wageHourHistories'), TYPE, ELEMENTS
			),
			ISNULL(CAST(WH.computedCurrentWageRateUnit AS VARCHAR(10)), 'null') computedCurrentWageRateUnit,
			ISNULL(CAST(WH.computedCurrentWageRateValue AS VARCHAR(10)), 'null') computedCurrentWageRateValue,
			ISNULL(CAST(WH.computedPastEndWageRateUnit AS VARCHAR(10)), 'null') computedPastEndWageRateUnit,
			ISNULL(CAST(WH.computedPastEndWageRateValue AS VARCHAR(10)), 'null') computedPastEndWageRateValue
		    FROM ##SP_ReadCDCHistory_WHA_Temp_5 WH
				LEFT JOIN wwp.IntervalType IT
					ON ISNULL(WH.CurrentPayRateIntervalId, 0) = ISNULL(IT.Id, 0)
				LEFT JOIN wwp.IntervalType IT1
					ON ISNULL(WH.pastBeginPayRateIntervalId, 0) = ISNULL(IT1.Id, 0)
				LEFT JOIN wwp.IntervalType IT2
					ON ISNULL(WH.pastBeginPayRateIntervalId, 0) = ISNULL(IT2.Id, 0)
			WHERE EI.WageHoursId = WH.Id AND EI.tran_id = WH.tran_id
			FOR XML PATH('wageHour'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
		    (SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS)
			FOR XML PATH('wageHour'), TYPE, ELEMENTS
			)),
		   (SELECT A.id, CONVERT(VARCHAR(10), A.beginDate, 101) beginDate, CONVERT(VARCHAR(10), A.endDate, 101) endDate, A.absenceReasonId,
		    ISNULL(A.details, 'null') details, ISNULL(A.sortOrder, 0) sortOrder, A.modifiedDate, A.modifiedBy
		    FROM ##SP_ReadCDCHistory_WHA_Temp_2 A
				INNER JOIN wwp.AbsenceReason AR
					ON A.AbsenceReasonId = AR.Id
			WHERE A.EmploymentInformationId = EI.Id AND A.tran_id = EI.tran_id
			FOR XML PATH('absences'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
			(SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS)
			FOR XML PATH('absences'), TYPE, ELEMENTS
		   ),
		   (SELECT 
		    (SELECT ISNULL(C.Name + ', ' + S.Code, 'null') [description], ISNULL(CAST(C.LongitudeNumber AS VARCHAR(25)), 'null') longitude, ISNULL(CAST(C.LatitudeNumber AS VARCHAR(25)), 'null') latitude,
		     C.Name city, S.Code [state], CO.name country, EORI.StreetAddress fullAddress, EORI.zipAddress, C.googlePlaceId, 'null' aptUnit
		     FROM wwp.City C
				LEFT JOIN wwp.State S
					ON C.StateId = S.Id
				LEFT JOIN wwp.Country CO
					ON C.CountryId = CO.Id
			 WHERE EORI.CityId = C.Id
			 FOR XML PATH('location'), TYPE, ELEMENTS
		    ),
		    ISNULL(EORI.companyName, 'null') companyName, ISNULL(EORI.Fein, 'null') fein, ISNULL(CAST(EORI.JobSectorId AS VARCHAR(10)), 'null') jobSectorId,
		    ISNULL(JS1.Name, 'null') jobSectorName, ISNULL(CAST(EORI.ContactId AS VARCHAR(10)), 'null') contactId, ISNULL(CAST(EORI.Id AS VARCHAR(10)), 'null') id
			FOR XML PATH('employerOfRecordDetails'), TYPE, ELEMENTS
		   ),
		   ISNULL(EI.notes, 'null') notes,
		   IIF(EI.ModifiedBy = 'WWP Conversion', EI.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT EI1.ModifiedBy
							FROM ##SP_ReadCDCHistory_WHA_Temp_1 EI1
							WHERE EI1.Id = EI.Id AND EI1.tran_id = EI.tran_id)
		   ))modifiedBy,
		   IIF(EI.ModifiedBy = 'WWP Conversion', EI.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT EI1.ModifiedBy
							FROM ##SP_ReadCDCHistory_WHA_Temp_1 EI1
							WHERE EI1.Id = EI.Id AND EI1.tran_id = EI.tran_id)
		   ))modifiedByName
	FROM ##SP_ReadCDCHistory_WHA_Temp_1 EI
		LEFT JOIN  wwp.JobType JT
			ON EI.JobTypeId = JT.Id
		LEFT JOIN #SP_ReadCDCHistory_WHA_Temp_10 OJI
			ON EI.OtherJobInformationId = OJI.Id AND EI.tran_id = OJI.tran_id
		LEFT JOIN wwp.EmploymentProgramType EPT
			ON EI.EmploymentProgramTypeId = EPT.Id
		LEFT JOIN wwp.JobSector JS
			ON ISNULL(OJI.JobSectorId, 0) = ISNULL(JS.Id, 0)
		LEFT JOIN wwp.JobFoundMethod JFM
			ON ISNULL(OJI.JobFoundMethodId, 0) = ISNULL(JFM.Id, 0)
		LEFT JOIN wwp.LeavingReason LR
			ON ISNULL(EI.LeavingReasonId, 0) = ISNULL(LR.Id, 0)
		LEFT JOIN wwp.DeleteReason DR
			ON ISNULL(EI.DeleteReasonId, 0) = ISNULL(DR.Id, 0)
		LEFT JOIN #SP_ReadCDCHistory_WHA_Temp_16 EORI
			ON ISNULL(EI.Id, 0) = ISNULL(EORI.EmploymentInformationId, 0) AND EI.tran_id = EORI.tran_id
		LEFT JOIN wwp.JobSector JS1
			ON ISNULL(EORI.JobSectorId, 0) = ISNULL(JS1.Id, 0)
	WHERE EI.Id = @IdentityNumber2
	ORDER BY EI.modifiedDate DESC
	FOR XML PATH('EmploymentInformation'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_WHA_Temp_1 EI
	WHERE EI.Id = @IdentityNumber2
	FOR XML PATH('EmploymentInformation'), ROOT('History'), ELEMENTS, BINARY BASE64
	END


	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_WHA_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_LS_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_7') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_7
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_8') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_8
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_9') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_9
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_10') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_10
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_11') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_11
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_12') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_12
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_13') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_13
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_14') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_14
	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WHA_Temp_15') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WHA_Temp_15

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_WHS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_WHS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@ParticipantId INT,
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.WorkHistorySection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	SELECT @ParticipantId = ParticipantId
	FROM wwp.WorkHistorySection
	WHERE Id = @IdentityNumber2

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <>  'EmploymentStatusType') AND (SO_R.name <>  'YesNoUnknownLookup'))
	OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant') AND (SO_R.name <>  'EmploymentStatusType') AND (SO_R.name <>  'YesNoUnknownLookup'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' +
							  CASE WHEN @TableName = 'EmploymentInformation' THEN 'ParticipantId' 
							       ELSE @ParentColumnName 
							  END + ' = ' +
							  CASE WHEN @TableName = 'EmploymentInformation' THEN CAST(@ParticipantId AS NVARCHAR(10))
								   ELSE CAST(@IdentityNumber2 AS NVARCHAR(100))
							  END

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_WH_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_WH_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_WH_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_WH_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_WH_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_WH_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, WorkHistorySectionId, EmploymentPreventionTypeId, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS VARCHAR(1)) IsDeleted, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WH_Temp_2
			FROM ##SP_ReadCDCHistory_WH_Temp_3
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_WH_Temp_2
			SELECT Id, WorkHistorySectionId, EmploymentPreventionTypeId, ModifiedBy, ModifiedDate, RowVersion, CAST(IsDeleted AS VARCHAR(1)) IsDeleted, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_WH_Temp_3
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_WH_Temp_3
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--SELECT * FROM ##SP_ReadCDCHistory_WH_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_WH_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_WH_Temp_2
	--SELECT * FROM ##SP_ReadCDCHistory_WH_Temp_3
	PRINT @Count

	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_WH_Temp_1) > 0
	BEGIN
		SELECT WH.employmentStatusTypeId, EST.Name employmentStatusTypeName, ISNULL(YS.Name, 'null') hasCareerAssessmentName, ISNULL(WH.HasCareerAssessmentNotes, 'null') hasCareerAssessmentNotes,
			(SELECT CAST(WHEPT.EmploymentPreventionTypeId AS INT)
			 FROM #SP_ReadCDCHistory_WH_Temp_2 WHEPT
				INNER JOIN wwp.EmploymentPreventionType EPT
					ON WHEPT.EmploymentPreventionTypeId = EPT.Id
			 WHERE WHEPT.WorkHistorySectionId = WH.Id AND WHEPT.tran_id = WH.tran_id AND WHEPT.IsDeleted = 0
			 FOR XML PATH('preventionFactorIds'), TYPE, ELEMENTS
			), (SELECT CAST(NULL AS INT) FOR XML PATH('preventionFactorIds'), TYPE, ELEMENTS),
			(SELECT CAST(EPT.Name AS VARCHAR(MAX))
			 FROM #SP_ReadCDCHistory_WH_Temp_2 WHEPT
				INNER JOIN wwp.EmploymentPreventionType EPT
					ON WHEPT.EmploymentPreventionTypeId = EPT.Id
			 WHERE WHEPT.WorkHistorySectionId = WH.Id AND WHEPT.tran_id = WH.tran_id AND WHEPT.IsDeleted = 0
			 FOR XML PATH('preventionFactorNames'), TYPE, ELEMENTS
			), (SELECT CAST(NULL AS VARCHAR(1)) FOR XML PATH('preventionFactorNames'), TYPE, ELEMENTS),
			CASE CAST(WH.HasVolunteered AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END hasVolunteered, WH.nonFullTimeDetails, ISNULL(WH.Notes, 'null') notes, WH.rowVersion,
			IIF(WH.ModifiedBy = 'WWP Conversion', WH.ModifiedBy,
			(SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
				FROM wwp.Worker
				WHERE WAMSId = (SELECT WH1.ModifiedBy
								FROM ##SP_ReadCDCHistory_WH_Temp_1 WH1
								WHERE WH1.Id = WH.Id AND WH1.tran_id = WH.tran_id)
			))modifiedBy, WH.modifiedDate
		FROM ##SP_ReadCDCHistory_WH_Temp_1 WH
			LEFT JOIN wwp.EmploymentStatusType EST
				ON WH.EmploymentStatusTypeId = EST.Id
			LEFT JOIN wwp.YesNoUnknownLookUp YS
				ON WH.HasCareerAssessment = YS.Id
		WHERE WH.Id = @IdentityNumber2
		ORDER BY WH.modifiedDate DESC
		FOR XML PATH('WorkHistorySection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
		SELECT Id
		FROM ##SP_ReadCDCHistory_WH_Temp_1 WH
		WHERE WH.Id = @IdentityNumber2
		FOR XML PATH('WorkHistorySection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_WH_Temp_' + CAST(@Count1 AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_WH_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_WH_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_ReadCDCHistory_WPS]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [wwp].[SP_ReadCDCHistory_WPS]
-- Add the parameters for the stored procedure here
(
@TableName VARCHAR(200),
@PinNumber DECIMAL(10,0)
)
AS
BEGIN
	DECLARE @Statement NVARCHAR(MAX),
	@ObjectName VARCHAR(MAX),
	@ObjectSchemaName VARCHAR(MAX),
	@ColumnNames VARCHAR(MAX),
	@SchemaName VARCHAR(10),
	@TableName2 VARCHAR(200),
	@TableName3 VARCHAR(200) = @TableName,
	@ParentColumnName VARCHAR(200),
	@ReferencedColumnName VARCHAR(200),
	@DependentId VARCHAR(100),
	@IdSQL NVARCHAR(MAX),
	@SQL NVARCHAR(MAX),
	@DelSQL NVARCHAR(MAX),
	@Count INT = 1,
	@Count1 INT = 1,
	@InitialCount INT = 1,
	@Max INT,
	@Columns NVARCHAR(MAX),
	@TranCount INT = 1,
    @MaxTran INT,
	@TranId VARBINARY(10),
	@IdentityNumber VARCHAR(MAX)

	SELECT @IdentityNumber = Id
							 FROM wwp.WorkProgramSection
							 WHERE ParticipantId = (SELECT Id
													FROM wwp.Participant
													WHERE PinNumber = @PinNumber)

	DECLARE @IdentityNumber2 VARCHAR(MAX) = @IdentityNumber

	SELECT @SchemaName = name
	FROM sys.schemas
	WHERE schema_id IN (SELECT schema_id
	FROM sys.objects
	WHERE name = @TableName)
	--PRINT @SchemaName

	DECLARE @Temp TABLE (Id INT IDENTITY(1,1), Parent_Table VARCHAR(200), Parent_Column VARCHAR(200), Referenced_Table VARCHAR(200), Referenced_Column VARCHAR(200))
	DECLARE @Id TABLE (Id INT IDENTITY(1,1), TableId VARCHAR(100))
	DECLARE @Tran TABLE (Id INT IDENTITY(1,1), tran_id VARBINARY(10))
	DECLARE @MaxTranId TABLE (TranCount INT, MaxTranId VARBINARY(10))

	INSERT INTO @Temp (Parent_Table, Parent_Column) VALUES (@TableName, 'Id')

	INSERT INTO @Id VALUES (@IdentityNumber2)

	INSERT INTO @Temp
	SELECT SO_P.name Parent_Table, SC_P.name Parent_Column, SO_R.name Referenced_Table, SC_R.name Referenced_Column
	FROM sys.foreign_key_columns FKC
		INNER JOIN sys.objects SO_P
			ON SO_P.object_id = FKC.parent_object_id
		INNER JOIN sys.columns SC_P
			ON (SC_P.object_id = FKC.parent_object_id) AND (SC_P.column_id = FKC.parent_column_id)
		INNER JOIN sys.objects SO_R
			ON SO_R.object_id = FKC.referenced_object_id
		INNER JOIN sys.columns SC_R
			ON (SC_R.object_id = FKC.referenced_object_id) AND (SC_R.column_id = FKC.referenced_column_id)
	WHERE ((SO_P.name = @tableName) AND (SO_P.type = 'U') AND (SO_R.name <> 'Participant'))
		  OR ((SO_R.name = @tableName) AND (SO_R.type = 'U') AND (SO_R.name <> 'Participant'))
	ORDER BY Parent_Table

	SELECT @Max = COUNT(Id)
	FROM @Temp

	--SELECT * FROM @Temp

	-------------------------- following SELECT stmt will be used later ------------------
	--SELECT @begin_time = GETDATE()-1, @end_time = GETDATE(); 
	--PRINT @begin_time
	--PRINT @end_time
	--SELECT @begin_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('smallest greater than', @begin_time); 
	--PRINT @begin_lsn
	--SELECT @end_lsn = wwpdev.sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time); 
	--PRINT @end_lsn

	--------------------------------------------------------------
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn('wwp_HIST_T_1');
	--PRINT @FROM_lsn 
	--SELECT @to_lsn   = sys.fn_cdc_get_max_lsn()
	--PRINT @to_lsn
	--SELECT @FROM_lsn = sys.fn_cdc_get_min_lsn(+@objectName)
	--PRINT 'FROM lsn'
	--PRINT   @FROM_lsn
	--------------------------------------------------------------

	WHILE @Count <= @Max
	BEGIN
		IF @Count <> 1
		BEGIN
			SELECT @TableName = CASE WHEN @TableName3 = [Parent_Table]
										THEN [Referenced_Table]
									 ELSE [Parent_Table]
								END
			FROM @Temp
			WHERE Id = @Count

			PRINT @TableName

			SELECT @TableName2 = [Parent_Table]
			FROM @Temp
			WHERE Id = @Count

			SELECT @ParentColumnName = [Parent_Column]
			FROM @Temp
			WHERE Id = @Count
		
			SELECT @ReferencedColumnName = [Referenced_Column]
			FROM @Temp
			WHERE Id = @Count

			IF @TableName2 = @TableName3
				SET @IdSQL = 'SELECT ' + @ParentColumnName + ' FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE Id = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))
			ELSE
				SET @IdSQL = 'SELECT Id FROM ' + @SchemaName + '.' + @TableName2 + ' WHERE ' + @ParentColumnName + ' = ' + CAST(@IdentityNumber2 AS NVARCHAR(100))

			PRINT @IdSQL

			INSERT INTO @Id
			EXEC (@IdSQL)

			--SELECT * FROM @Id

			SET @IdentityNumber = (SELECT DISTINCT STUFF((SELECT ',' + a.TableId FROM @Id a WHERE a.TableId = TableId ORDER BY a.TableId FOR XML PATH('')),1,1,'') FROM @Id GROUP BY TableId)
			PRINT @IdentityNumber
		END
	
		SET @ObjectName = 'wwp_'+@TableName+''
		PRINT @objectName

		SET @ObjectSchemaName = '[wwp].['+@TableName+']'
		PRINT @ObjectSchemaName

		SET @ColumnNames = NULL
		SELECT @ColumnNames = COALESCE(@ColumnNames + '], a.[', '') + name
							  FROM sys.columns
							  WHERE object_id = (SELECT object_id
												 FROM sys.objects
												 WHERE name = 'wwp_' + @TableName + '_CT'
												 AND schema_id = (SELECT schema_id
																  FROM sys.schemas
																  WHERE name = 'hst'))
		ORDER BY name
		PRINT @ColumnNames

		SET @DelSQL = 'IF OBJECT_ID(''tempdb..##SP_ReadCDCHistory_WP_Temp_' + CAST(@Count AS VARCHAR(5)) + ''') IS NOT NULL DROP TABLE ##SP_ReadCDCHistory_WP_Temp_' + CAST(@Count AS VARCHAR(5))
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Statement =
		'SELECT X.*
		 INTO ##SP_ReadCDCHistory_WP_Temp_' + CAST(@Count AS VARCHAR(5)) +
		' FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE 1 = 2) X'

		 PRINT @Statement
		 EXEC (@Statement)
		
		SET @Statement =
		'INSERT INTO ##SP_ReadCDCHistory_WP_Temp_' + CAST(@Count AS VARCHAR(5)) + '
		 SELECT X.*
		 FROM (
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM cdc.' +@ObjectName+ '_ct a, cdc.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)
		
		 UNION
		
		 SELECT a.[' + @ColumnNames + '], b.[start_lsn], b.[tran_begin_lsn], b.[tran_begin_time], b.[tran_end_time], b.[tran_id],
				(SELECT CC.column_name + '',''
						   FROM [cdc].[captured_columns] CC
						   INNER JOIN [cdc].[change_tables] CT
								ON CC.[object_id] = CT.[object_id]
						   WHERE capture_instance = (SELECT capture_instance FROM cdc.change_tables WHERE source_object_id = OBJECT_ID('''+@ObjectSchemaName+'''))
						   AND sys.fn_cdc_is_bit_set(CC.column_ordinal, a.__$update_mask) = 1
		 FOR	XML PATH('''')) AS changedcolumns, CASE a.__$operation WHEN ''1'' THEN ''RECORD DELETED ''
																	   WHEN ''2'' THEN ''RECORD INSERTED ''
																	   WHEN ''3'' THEN ''BEFORE UPDATE ''
																	   WHEN ''4'' THEN ''AFTER UPDATE ''
												   END AS ACTION
		 FROM hst.' +@ObjectName+ '_ct a, hst.lsn_time_mapping  b
		 WHERE b.start_lsn = a.__$start_lsn AND a.id in ('+@IdentityNumber+') AND [__$operation] in (1,2,4)) X'

		PRINT @Statement
		EXEC (@Statement)

		--EXEC sp_executesql @Statement, N'@ModifiedDate DATETIME', @ModifiedDate = @ModifiedDate;

		--SET @SQL = 'SELECT * FROM ##SP_ReadCDCHistory_WP_Temp_' + CAST(@Count AS VARCHAR(5))

		--PRINT @SQL
		--EXEC (@SQL)
		
		DELETE FROM @Id

		SET @Count += 1
	END

	SET @Count -= 1

	INSERT INTO @Tran
	SELECT tran_id
	FROM ##SP_ReadCDCHistory_WP_Temp_1
	ORDER BY tran_id

	SELECT @MaxTran = COUNT(*)
	FROM @Tran

	WHILE @TranCount <= @MaxTran
	BEGIN
		SELECT @TranId = tran_id
		FROM @Tran
		WHERE Id = @TranCount

		IF @TranCount = 1
		BEGIN
			SELECT Id, WorkProgramSectionId, WorkProgramStatusId, WorkProgramId, CityId, StartMonth, EndMonth, ContactId, ContactInfo, Details, SortOrder, CAST(IsDeleted AS INT) IsDeleted,
				   ModifiedBy, ModifiedDate, RowVersion, @TranId tran_id, @TranCount TranCount
			INTO #SP_ReadCDCHistory_WP_Temp_3
			FROM ##SP_ReadCDCHistory_WP_Temp_2
			WHERE tran_id = @TranId
		END
		ELSE
		BEGIN
			INSERT INTO #SP_ReadCDCHistory_WP_Temp_3
			SELECT Id, WorkProgramSectionId, WorkProgramStatusId, WorkProgramId, CityId, StartMonth, EndMonth, ContactId, ContactInfo, Details, SortOrder, CAST(IsDeleted AS INT) IsDeleted,
				   ModifiedBy, ModifiedDate, RowVersion, @TranId tran_id, @TranCount TranCount
			FROM ##SP_ReadCDCHistory_WP_Temp_2
			WHERE id + tran_id IN (SELECT Id + MAX(tran_id) tran_id
								   FROM ##SP_ReadCDCHistory_WP_Temp_2
								   WHERE tran_id <= @TranId
								   GROUP BY Id)
		END

		SET @TranCount += 1
	END

	--SELECT * FROM ##SP_ReadCDCHistory_WP_Temp_1
	--SELECT * FROM ##SP_ReadCDCHistory_WP_Temp_2
	--SELECT * FROM #SP_ReadCDCHistory_WP_Temp_3
	--PRINT @Count

	IF (SELECT COUNT(*) FROM ##SP_ReadCDCHistory_WP_Temp_1) > 0
	BEGIN
	SELECT CASE CAST(WP.isInOtherPrograms AS VARCHAR(10)) WHEN 1 THEN 'true' WHEN 0 THEN 'false' ELSE 'null' END isInOtherPrograms, WP.notes,
		   (SELECT IWP.WorkProgramStatusId workStatus, WPS.Name workStatusName, IWP.WorkProgramId workProgram, WPN.Name workProgramName, 
		    RIGHT('0' + RTRIM(MONTH(IWP.StartMonth)), 2) + '/' + RTRIM(YEAR(IWP.StartMonth)) startDate, RIGHT('0' + RTRIM(MONTH(IWP.EndMonth)), 2) + '/' + RTRIM(YEAR(IWP.EndMonth)) endDate, IWP.contactId,
			(SELECT C.Name + ', ' + S.Code + IIF(CO.Code = '89', '', ', ' + CO.Name) [description], ISNULL(CAST(C.LongitudeNumber AS VARCHAR(25)), 'null') longitute, ISNULL(CAST(C.LatitudeNumber AS VARCHAR(25)), 'null') latitude,
		     C.Name city, S.Code [state], CO.name country, C.googlePlaceId
		     FROM wwp.City C
				INNER JOIN wwp.State S
					ON C.StateId = S.Id
				INNER JOIN wwp.Country CO
					ON C.CountryId = CO.Id
			 WHERE IWP.CityId = C.Id AND IWP.IsDeleted = 0
			 FOR XML PATH('location'), TYPE, ELEMENTS
		    ),
			IWP.details, IWP.rowVersion, IWP.id
		    FROM #SP_ReadCDCHistory_WP_Temp_3 IWP
				INNER JOIN wwp.WorkProgramStatus WPS
					ON IWP.WorkProgramStatusId = WPS.Id
				INNER JOIN wwp.WorkProgram WPN
					ON IWP.WorkProgramId = WPN.Id
			WHERE IWP.WorkProgramSectionId = WP.Id AND IWP.tran_id = WP.tran_id AND IWP.IsDeleted = 0
			FOR XML PATH('workPrograms'), TYPE, ELEMENTS
		   ),
		   (SELECT NULL,
			(SELECT NULL
			 FOR XML PATH('NULL'), TYPE, ELEMENTS
		    )
			FOR XML PATH('workPrograms'), TYPE, ELEMENTS
		   ),
		   WP.rowVersion,
		   IIF(WP.ModifiedBy = 'WWP Conversion', WP.ModifiedBy,
		   (SELECT IIF(FirstName IS NULL, '', Firstname) + IIF(NULLIF(MiddleInitial, '') IS NULL, '', ' ' + MiddleInitial + '.') + IIF(LastName IS NULL, '', ' ' + LastName)
		    FROM wwp.Worker
			WHERE WAMSId = (SELECT WP1.ModifiedBy
							FROM ##SP_ReadCDCHistory_WP_Temp_1 WP1
							WHERE WP1.Id = WP.Id AND WP1.tran_id = WP.tran_id)
		   ))modifiedBy, WP.modifiedDate
	FROM ##SP_ReadCDCHistory_WP_Temp_1 WP
	WHERE WP.Id = @IdentityNumber2 AND WP.IsDeleted = 0
	ORDER BY WP.modifiedDate DESC
	FOR XML PATH('WorkProgramSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END
	ELSE
	BEGIN
	SELECT Id
	FROM ##SP_ReadCDCHistory_WP_Temp_1 WP
	WHERE WP.Id = @IdentityNumber2
	FOR XML PATH('WorkProgramSection'), ROOT('History'), ELEMENTS, BINARY BASE64
	END

	WHILE @Count1 <= @Count
	BEGIN
		SET @DelSQL = 'DROP TABLE ##SP_ReadCDCHistory_WP_Temp_' + CAST(@Count1 AS VARCHAR(5))
		--DROP TABLE ##SP_ReadCDCHistory_WP_Temp_1
		
		PRINT @DelSQL
		EXEC (@DelSQL)

		SET @Count1 += 1
	END

	IF OBJECT_ID('tempdb..#SP_ReadCDCHistory_WP_Temp_3') IS NOT NULL DROP TABLE #SP_ReadCDCHistory_WP_Temp_3

	----------------- below is how code should look like ----------------------------------------------------------------------------------------------
	--SET @FunctionName = 'WWPDEV.cdc.fn_cdc_get_all_changes_wwp_'+@TableName+'(sys.fn_cdc_get_min_lsn(''wwp_HIST_T_1''),sys.fn_cdc_get_max_lsn(),''ALL UPDATE OLD'')'

	-- FROM wwpdev.cdc.fn_cdc_get_all_changes_wwp_hist_t_1(@FROM_lsn,@to_lsn,'ALL UPDATE OLD') a ,
	--------------------------------------------------------------------------------------------------------------

END

GO
/****** Object:  StoredProcedure [wwp].[SP_RefreshParticipant]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- Author:		Palani/Christopher
-- Create date: 08-06-2017
-- Description: Refresh participants info from CWW.
------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [wwp].[SP_RefreshParticipant]
    (
        @PinNumber VARCHAR(10) ,
        @SchemaName VARCHAR(20)
    )
AS
       BEGIN


        DECLARE @strsQL VARCHAR(MAX);
        DECLARE @statement1 VARCHAR(MAX);
        DECLARE @statement2 VARCHAR(MAX);
        DECLARE @CaseNum DECIMAL(10, 0);
		DECLARE @NewCaseNum VARCHAR(10) ;

        --
        DECLARE @DB2DBName AS VARCHAR(100);
        DECLARE @LSDBName AS VARCHAR(100);
        DECLARE @SQLDBName AS VARCHAR
        DECLARE @MaxHistorySeqNum AS SMALLINT;
		DECLARE @PartCountyNum SMALLINT;
	    DECLARE @PartAgencyCode VARCHAR(05) ;
		DECLARE @AgencyCode VARCHAR(05) ;
        DECLARE @OfficeNumber SMALLINT;
		DECLARE @CountyNumber SMALLINT;
        ---
   	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
						END
	---



--        DECLARE @Temp1 TABLE
--            (
--                [CASENumber] VARCHAR(10) NULL ,
--                [PinNumber] [DECIMAL](10, 0) NULL ,
--                [OfficeNumber] [SMALLINT] NULL ,
--                [CountyNumber] [SMALLINT] NULL,
--				[AgencyCode] [VARCHAR](05) NULL
--            );


--        SET @statement1 = 'Select  CASENumber,
--		                           PinNumber ,
--								   OfficeNumber,
--								   CountyNumber
--		                    FROM OPENQUERY(' + @LSDBName + ', ''SELECT  CASE_NUM as CASENumber, 
--		                                                                         PIN_NUM  as PinNumber ,  
--																				 OFFICE_NUM as OfficeNumber , 
--																			     COUNTY_NUM as CountyNumber                                        
--																		FROM  ' + @DB2DBName + '.T0018_WP_INDV                       
--																		WHERE  PIN_NUM  = ' + @PinNumber + '
--																		'')'

--        INSERT @Temp1 (CASENumber,
--		               PinNumber,
--					   OfficeNumber,
--					   CountyNumber)
--        EXEC ( @statement1 )

-----		select * from @Temp1
---------  SET THE TEMP CASENUM

--        SET @CaseNum = ( SELECT CASENumber FROM   @temp1  )        


--        PRINT @CaseNum

-----IF CASE NUM IS NULL GET THE CASE INFO, 
--        IF @CaseNum IS NULL OR @CaseNum = 0
--            BEGIN
--			PRINT 'Case Null Logic'
--      DECLARE @Temp2 TABLE
--            (
--                [CASENumber] VARCHAR(10) NULL ,
--                [PinNumber] [DECIMAL](10, 0) NULL ,
--                [OfficeNumber] [SMALLINT] NULL ,
--                [CountyNumber] [SMALLINT] NULL,
--				[AgencyCode] [VARCHAR](05) NULL,
--				[ID] INT NULL
--            );

--                SET @statement2 = 'select  CASENumber,
--		                                   PinNumber ,
--								           OfficeNumber,
--								           CountyNumber,
--										   ID
--                                    FROM OPENQUERY(' + @LSDBName + ', ''SELECT B.CASE_NUM as CASENumber, 
--									                                           A.PIN_NUM  as PinNumber ,  
--																			   C.OFFICE_NUM as OfficeNumber , 
--																			   B.COUNTY_NUM as CountyNumber,
--																			   ROW_NUMBER () OVER(ORDER BY B.CASE_NUM)  AS ID  
--																		   FROM ' +     @DB2DBName + '.T0015_CS_INDV A ,
--																				' +     @DB2DBName + '.T0001_CASE  B  ,
--																				' +     @DB2DBName + '.T0003_OFFICE  C                                                  
--																		 WHERE  A.PIN_NUM  = ' + @PinNumber + '
--																			AND A.DELETE_REASON_CD = '''' ''''
--																			 AND A.HISTORY_CD  = 0
--																			 AND A.UPDATED_DT = (SELECT MAX(AA.UPDATED_DT) 
--																								  FROM  ' + @DB2DBName
--																										  + '.T0015_CS_INDV AA
--																								  WHERE AA.PIN_NUM = A.PIN_NUM
--																									AND AA.DELETE_REASON_CD = A.DELETE_REASON_CD
--																									AND AA.HISTORY_CD = A.HISTORY_CD
--																								   )
--																			 AND A.CASE_NUM = B.CASE_NUM
--																			 AND C.COUNTY_NUM = B.COUNTY_NUM
--																			 AND C.OFFICE_TYPE_CD = ''''JO''''
--																			AND C.OFFICE_ACTIVE_SW = ''''Y'''' 
--																			AND C.OFFICE_NUM NOT IN (1570,1571,1572,1573,1574,1575,1576,1577,1578,1579)

--																								   WITH UR
--																								 ;  
--																		  '')'


       

--                INSERT @Temp2 (CASENumber,
--		                       PinNumber,
--					           OfficeNumber,
--					           CountyNumber,
--							   ID)
--                EXEC ( @statement2 )


--				UPDATE @Temp1 
--				  set CASENumber    = (select CASENumber from @Temp2 where ID = 1) 
--                  Where PinNumber =  @PinNumber
				 

--------- FOR MILWAUKEE COUNTY THE OFFICENUMBER AND COUNTY NUMBER UPDATE MIGHT BE IMPROPRER, LIMITING THE UPDATE AND RETAINING THE T0018 WILL SOLVE THE ISSUE.
--               if ((SELECT OfficeNumber  FROM   @temp1) = 0 )
--			   Begin
--			   	UPDATE @Temp1 
--				  set  
--				      OfficeNumber  = (select OfficeNumber from @Temp2 where ID = 1) 
--                  Where PinNumber =  @PinNumber

--				 print 'update the officeNumber'

--				 end

--               if ((SELECT CountyNumber  FROM  @temp1) = 0 )
--			   Begin
--			   	UPDATE @Temp1 
--				  set  

--					  CountyNumber  = (select CountyNumber from @Temp2 where ID = 1) 
--                  Where PinNumber =  @PinNumber

--				  print 'update CountyNumber'
--				 end


                                         
------ SELECT STMT, COMMENT LATER
----				SELECT * FROM @Temp2

--                PRINT 'CASE FROM T0001'
--            END



-------- END OF T1

--		        SET @OfficeNumber = (   SELECT OfficeNumber
--                                          FROM   @temp1
--                                    )
--print @OfficeNumber
--			    SET @CountyNumber = (   SELECT CountyNumber
--                                          FROM   @temp1
--                                    )

--print @CountyNumber


--  SET @AgencyCode = (SELECT AgencyCode FROM wwp.WPGeoArea ga WHERE ga.WPOfficeNumber = @OfficeNumber )

--print @AgencyCode

-- UPDATE @Temp1 
--   SET AgencyCode = @AgencyCode
--  WHERE OfficeNumber = @OfficeNumber

 
------ SELECT STMT, COMMENT LATER
----			SELECT * FROM @Temp1

--               PRINT 'CASE FROM T1' + @AgencyCode
------------------------- CONFIDENTIAL CASE LOGICE

--SET @NewCaseNum = CONVERT(varchar(10), @CaseNum)

--        DELETE wwp.ConfidentialCaseInformation
--        WHERE CaseNumber =@NewCaseNum

--        SET @statement1 = '
--			select CaseNumber,
--				   ConfidentialSwitch,
--				   WorkerId ,
--				   CaseloadNumber,
--				   WorkerFirstName,
--				   WorkerLastName,
--				   WorkerMiddleInitial,
--				   WorkerSuffixName 
--			  FROM OPENQUERY('+@LSDBName+',''SELECT A.RFA_CASE_NUM as CaseNumber,
--													A.CASE_CNFD_SW as ConfidentialSwitch,   
--													B.USER_ID as WorkerId  ,    
--													A.CASELOAD_NUM   as CaseloadNumber  ,                                      
--													C.WORKER_FIRST_NAM  as WorkerFirstName   ,                             
--													C.WORKER_LAST_NAM   as WorkerLastName  , 
--													C.WORKER_MIDDLE_NAM as WorkerMiddleInitial ,
--													C.WORKER_SUFFIX_NAM as WorkerSuffixName	                          
--												FROM ' + @DB2DBName + '.T0212_CS_CASELOAD A ,                     
--													' + @DB2DBName + '.T0002_CASELOAD_WKR B,                     
--													' + @DB2DBName + '.T0007_WORKER C                            
--												WHERE A.RFA_CASE_NUM  = '+@NewCaseNum+'                       
--												AND A.RFA_CASE_TYPE_IND  = ''''C''''                         
--												AND B.CASELOAD_NUM = A.CASELOAD_NUM  
--												AND B.WORKER_TYPE_IND  = ''''P''''                  
--												AND C.USER_ID    =   B.USER_ID                         
--												WITH UR ;                                              
--											'') '


--     PRINT @statement1;


--        INSERT INTO [wwp].[ConfidentialCaseInformation] (   [CaseNumber] ,
--                                                            [ConfidentialSwitch] ,
--                                                            [WorkerId] ,
--                                                            [CaseloadNumber] ,
--                                                            [WorkerFirstName] ,
--                                                            [WorkerLastName] ,
--                                                            [WorkerMiddleInitial] ,
--                                                            [WorkerSuffixName]
--                                                        )
--        EXEC ( @statement1 );



        DECLARE @temp TABLE
            (
                [PinNumber] [DECIMAL](10, 0) NULL ,
                [FirstName] [VARCHAR](50) NULL ,
                [MiddleInitialName] [CHAR](1) NULL ,
                [LastName] [VARCHAR](50) NULL ,
                [SuffixName] [CHAR](3) NULL ,
                [DateOfBirth] [DATE] NULL ,
                [DateOfDeath] [DATE] NULL ,
                [GenderIndicator] [CHAR](1) NULL ,
				[AliasResponse] [CHAR](1) NULL ,
                [LanguageCode] [CHAR](1) NULL ,
                [MaxHistorySequenceNumber] [SMALLINT] NULL ,
                [RaceCode] [CHAR](1) NULL ,
                [USCitizenSwitch] [CHAR](1) NULL ,
                [AmericanIndianIndicator] [CHAR](1) NULL ,
                [AsianIndicator] [CHAR](1) NULL ,
                [BlackIndicator] [CHAR](1) NULL ,
                [HispanicIndicator] [CHAR](1) NULL ,
                [PacificIslanderIndicator] [CHAR](1) NULL ,
                [WhiteIndicator] [CHAR](1) NULL ,
                [MCI_ID] [DECIMAL](10, 0) NULL ,
                [TribalMemberIndicator] [CHAR](1) NULL
            )



        SET @strsQL = '
		select  *
		FROM OPENQUERY (' + @LSDBName + ', '' Select  
				PIN_NUM             	as	PinNumber	,
				FIRST_NAM           	as	FirstName	,
				MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
				LAST_NAM            	as	LastName	,
				SUFFIX_NAM          	as	SuffixName	,
				DOB_DT              	as	DateOfBirth	,
				DEATH_DT            	as	DateOfDeath	,
				SEX_IND             	as	GenderIndicator	,
				ALIAS_RSP           	as	AliasResponse	,
				LANGUAGE_CD         	as	LanguageCode	,
				MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
				RACE_CD             	as	RaceCode	,
				US_CITIZEN_SW       	as	USCitizenSwitch	,
				AMR_INDN_IND        	as	AmericanIndianIndicator	,
				ASN_IND             	as	AsianIndicator	,
				BLK_IND             	as	BlackIndicator	,
				HISP_IND         		as	HispanicIndicator	,
				PCF_ILD_IND			 	as	PacificIslanderIndicator	,
				WHT_IND          		as	WhiteIndicator	,
				MCI_ID					as	MCI_ID	,
				TRB_MBR_IND				as	TribalMemberIndicator
													 FROM  ' + @DB2DBName + '.T0011_INDIVIDUAL  A                                                                                          
													WHERE A.PIN_NUM    = ' + @PinNumber + ' ''  )           

		'


        INSERT @temp
        EXEC ( @strsQL );



        SET @MaxHistorySeqNum = (   SELECT MaxHistorySequenceNumber
                                    FROM   wwp.Participant
                                    WHERE  PinNumber = @PinNumber
                                )

        IF @MaxHistorySeqNum = (   SELECT MaxHistorySequenceNumber
                                   FROM   @temp
                               )
            PRINT 'max is same'
        ELSE
            BEGIN
                PRINT 'max is not same'

                IF @MaxHistorySeqNum IS NULL
                    BEGIN

                        INSERT wwp.Participant (   [PinNumber] ,
                                                   [FirstName] ,
                                                   [MiddleInitialName] ,
                                                   [LastName] ,
                                                   [SuffixName] ,
                                                   [DateOfBirth] ,
                                                   [DateOfDeath] ,
                                                   [GenderIndicator] ,
                                                   [AliasResponse] ,
                                                   [LanguageCode] ,
                                                   [MaxHistorySequenceNumber] ,
                                                   [RaceCode] ,
                                                   [USCitizenSwitch] ,
                                                   [AmericanIndianIndicator] ,
                                                   [AsianIndicator] ,
                                                   [BlackIndicator] ,
                                                   [HispanicIndicator] ,
                                                   [PacificIslanderIndicator] ,
                                                   [WhiteIndicator] ,
                                                   [MCI_ID] ,
                                                   [TribalMemberIndicator] ,
                                                   [ConversionProjectDetails] ,
                                                   [ConversionDate] ,
                                                   [IsDeleted]
                                               )
                               SELECT [@temp].PinNumber ,
                                      FirstName ,
                                      MiddleInitialName ,
                                      LastName ,
                                      SuffixName ,
                                      DateOfBirth ,
                                      DateOfDeath ,
                                      GenderIndicator ,
                                      AliasResponse ,
                                      LanguageCode ,
                                      MaxHistorySequenceNumber ,
                                      RaceCode ,
                                      USCitizenSwitch ,
                                      AmericanIndianIndicator ,
                                      AsianIndicator ,
                                      BlackIndicator ,
                                      HispanicIndicator ,
                                      PacificIslanderIndicator ,
                                      WhiteIndicator ,
                                      MCI_ID ,
                                      TribalMemberIndicator,
                                      'NEW PARTICIPANT' ,
                                      CURRENT_TIMESTAMP ,
                                      0
                               FROM   @temp
                    END
                ELSE
                    BEGIN

                        UPDATE wwp.Participant
                        SET    FirstName				= a.FirstName ,
                               MiddleInitialName		= a.MiddleInitialName ,
                               LastName					= a.LastName ,
                               SuffixName				= a.SuffixName ,
                               DateOfBirth				= a.DateOfBirth ,
                               DateOfDeath				= a.DateOfDeath ,
                               GenderIndicator			= a.GenderIndicator ,
                               AliasResponse			= a.AliasResponse ,
                               LanguageCode				= a.LanguageCode ,
                               MaxHistorySequenceNumber = a.MaxHistorySequenceNumber ,
                               RaceCode					= a.RaceCode ,
                               USCitizenSwitch			= a.USCitizenSwitch ,
                               AmericanIndianIndicator	= a.AmericanIndianIndicator ,
                               AsianIndicator			= a.AsianIndicator ,
                               BlackIndicator			= a.BlackIndicator ,
                               HispanicIndicator		= a.HispanicIndicator ,
                               PacificIslanderIndicator = a.PacificIslanderIndicator ,
                               WhiteIndicator			= a.WhiteIndicator ,
                               MCI_ID					= a.MCI_ID ,
                               TribalMemberIndicator	= a.TribalMemberIndicator,
							   ConversionProjectDetails = 'Update to Exisiting Participant'
                        FROM   wwp.Participant b
                               INNER JOIN @temp a ON b.PinNumber = a.PinNumber
                        WHERE  b.PinNumber = @PinNumber
                    END

            END


-----------------FINAL SELECTION ---------------------

        SELECT *
        FROM   wwp.Participant
        WHERE  PinNumber = @PinNumber


    END;





GO
/****** Object:  StoredProcedure [wwp].[SP_RefreshParticipantDetails]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================================================================================================================================
-- | DATE       | SR/GIT HUB TICKET | DESCRIPTION                                                                                       |==
-- ========================================================================================================================================
-- | 2019-12-19 | GH3636            | Convert High Refugee Entry Date to NULL		                                                    |==
-- ========================================================================================================================================

-- procedure 
CREATE PROCEDURE [wwp].[SP_RefreshParticipantDetails] (
	@PinNumber VARCHAR(10)
	,@SchemaName VARCHAR(20)
	)
AS
BEGIN
	DECLARE @DB2DBName AS VARCHAR(100);
	DECLARE @LSDBName AS VARCHAR(100);
	DECLARE @Statement0 AS VARCHAR(max);
	DECLARE @Statement1 AS VARCHAR(max);
	DECLARE @Statement2a AS VARCHAR(max);
	DECLARE @Statement2b AS VARCHAR(max);
	DECLARE @Statement2z AS VARCHAR(max);
	DECLARE @Statement2 AS VARCHAR(max);
	DECLARE @Statement3 AS VARCHAR(max);
	DECLARE @Statement4 AS VARCHAR(max);
	DECLARE @Statement5 AS VARCHAR(max);
	DECLARE @Statement5e AS VARCHAR(max);
	DECLARE @Statement6 AS VARCHAR(max);
	DECLARE @Statement7 AS VARCHAR(max);
	DECLARE @Statement8 AS VARCHAR(max);
	DECLARE @Statement9 AS VARCHAR(max);
	DECLARE @statement10 AS VARCHAR(max);
	DECLARE @statement11 AS VARCHAR(max);
	DECLARE @statement12 AS VARCHAR(max);
	DECLARE @statement13 AS VARCHAR(max); 
	DECLARE @statement14 AS VARCHAR(max);
	DECLARE @StatementA AS VARCHAR(max);

	PRINT 'debug 0'

	DECLARE @TempPinNumber DECIMAL(10, 0) = @PinNumber
	DECLARE @TempCaseNumber VARCHAR(10)
	DECLARE @TempCaseNumberNew VARCHAR(10)

	PRINT @TempPinNumber

	DECLARE @MaxHistorySeqNum AS SMALLINT;
	DECLARE @ParticipantId AS INT;

	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
						END
	---

	DECLARE @NewDate VARCHAR(10);
	DECLARE @EndDate VARCHAR(10);

	--First date of the Current Month
	SET @NewDate = (
			SELECT CONVERT(VARCHAR(10), DATEADD(MONTH, DATEDIFF(MONTH, 0, getdate()), 0), 120)
			)
	-- Last date of the Current Month
	SET @EndDate = (
			SELECT CONVERT(VARCHAR(10), DATEADD(MONTH, DATEDIFF(MONTH, - 1, getdate()), - 1), 120)
			)

	PRINT @NewDate
	PRINT @EndDate


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------- PARTICIPANT REFRESH BETWEEN DB2 AND SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--	DECLARE @Temp TABLE (
--	   	 [PinNumber] [decimal](10, 0) NULL
--		,[AliasResponse] [char](1) NULL
--		,[BirthVerificationCode] [char](2) NULL
--		,[BirthPlaceCode] [char](2) NULL
--		,[CitizenshipVerificationCode] [char](2) NULL
--		,[DCLCitizenshipSwitch] [char](1) NULL
--		,[DateOfDeath] [date] NULL
--		,[DeathVerificationCode] [char](2) NULL
--		,[DateOfBirth] [date] NULL
--		,[FirstName] [varchar](15) NULL
--		,[LanguageCode] [char](1) NULL
--		,[LastName] [varchar](20) NULL
--		,[MaxHistorySequenceNumber] [smallint] NULL
--		,[MiddleInitialName] [char](1) NULL
--		,[PrimarySSNNumber] [decimal](9, 0) NULL
--		,[PseudoSSNNumber] [decimal](9, 0) NULL
--		,[RaceCode] [char](1) NULL
--		,[GenderIndicator] [char](1) NULL
--		,[SSNAppointmentDate] [date] NULL
--		,[SSNAppointmentVerificationCode] [char](2) NULL
--		,[SSNValidatedCode] [char](2) NULL
--		,[SuffixName] [char](3) NULL
--		,[CaresUpdatedDate] [date] NULL
--		,[USCitizenSwitch] [char](1) NULL
--		,[WorkerAlert1Code] [char](2) NULL
--		,[WorkerAlert2Code] [char](2) NULL
--		,[MaidNumber] [decimal](10, 0) NULL
--		,[ChildElsewhereSwitch] [char](1) NULL
--		,[ChildVerificationCode] [char](2) NULL
--		,[AmericanIndianIndicator] [char](1) NULL
--		,[AsianIndicator] [char](1) NULL
--		,[BlackIndicator] [char](1) NULL
--		,[HispanicIndicator] [char](1) NULL
--		,[PacificIslanderIndicator] [char](1) NULL
--		,[WhiteIndicator] [char](1) NULL
--		,[MCI_ID] [decimal](10, 0) NULL
--		,[MACitizenVerificationCode] [char](2) NULL
--		,[TribeChildMemberIndicator] [char](1) NULL
--		,[TribeChildVerificationCode] [char](2) NULL
--		,[TribalMemberIndicator] [char](1) NULL
--		,[TribalMemberVerificationCode] [char](2) NULL
--		,[DeathDateSourceCode] [char](2) NULL
--		,[WorkerOverideVerificationCode] [char](2) NULL
--		)

--	SET @Statement1 = '
--select  *
--FROM OPENQUERY (' + @LSDBName + 
--		', '' Select  
--		PIN_NUM             	as	PinNumber	                ,
--		ALIAS_RSP           	as	AliasResponse	            ,
--		BIRTH_VER_CD        	as	BirthVerificationCode	    ,
--		BIRTHPLACE_CD       	as	BirthPlaceCode	            , 
--		CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
--		DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	    ,
--		DEATH_DT            	as	DateOfDeath	                ,
--		DEATH_VER_CD        	as	DeathVerificationCode	    ,
--		DOB_DT              	as	DateOfBirth                	,
--		FIRST_NAM           	as	FirstName	                ,
--		LANGUAGE_CD         	as	LanguageCode	            ,
--		LAST_NAM            	as	LastName	                ,
--		MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
--		MIDDLE_INITIAL_NAM  	as	MiddleInitialName	        ,
--		PRIMARY_SSN_NUM     	as	PrimarySSNNumber	        ,
--		PSEUDO_SSN_NUM      	as	PseudoSSNNumber	            ,
--		RACE_CD             	as	RaceCode	                ,
--		SEX_IND             	as	GenderIndicator	            ,
--		SSN_APP_DT          	as	SSNAppointmentDate	           ,
--		SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
--		SSN_VALIDATED_CD    	as	SSNValidatedCode	        ,
--		SUFFIX_NAM          	as	SuffixName	                ,
--		UPDATED_DT          	as	CaresUpdatedDate	        ,
--		US_CITIZEN_SW       	as	USCitizenSwitch          	,
--		WORKER_ALERT_1_CD   	as	WorkerAlert1Code	        ,
--		WORKER_ALERT_2_CD   	as	WorkerAlert2Code	        ,
--		MAID_NUM            	as	MaidNumber	                ,
--		CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	    ,
--		CHILD_VER_CD        	as	ChildVerificationCode	    ,
--		AMR_INDN_IND        	as	AmericanIndianIndicator	    ,
--		ASN_IND             	as	AsianIndicator	            ,
--		BLK_IND             	as	BlackIndicator	            ,
--		HISP_IND         		as	HispanicIndicator	        ,
--		PCF_ILD_IND			 	as	PacificIslanderIndicator	,
--		WHT_IND          		as	WhiteIndicator	            ,
--		MCI_ID					as	MCI_ID	                    ,
--		MA_CTZN_VFCN_CD			as	MACitizenVerificationCode	,
--		TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
--		TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
--		TRB_MBR_IND				as	TribalMemberIndicator	    ,
--		TRB_MBR_VFCN_CD			as	TribalMemberVerificationCode,
--		DTH_DT_SRC_CD			as	DeathDateSourceCode	        ,
--		WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode	
--         FROM  ' 
--		+ @DB2DBName + '.T0011_INDIVIDUAL  A                                                                                          
--        WHERE A.PIN_NUM    = ' + @PinNumber + ' ''  )           

--'

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------- VALIDATE / COMPARE / UPDATE PARTICIPANT DEMOGRAPHIC INFO 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--INSERT @temp
	--EXEC (@Statement1);

	--PRINT 'debug1'

	--SET @MaxHistorySeqNum = (
	--		SELECT MAXHistorySequenceNumber
	--		FROM WWP.Participant
	--		WHERE PinNumber = @PinNumber
	--		)


	--IF @MaxHistorySeqNum = (
	--		SELECT MaxHistorySequenceNumber
	--		FROM @temp
	--		)
	--BEGIN
	--	PRINT 'max is same'
	--END
	--ELSE
	--BEGIN
	--	PRINT 'max is not same'

	--	IF @MaxHistorySeqNum IS NULL
	--	BEGIN
	--		INSERT wwp.Participant (
	--			[PinNumber]
	--			,[FirstName]
	--			,[MiddleInitialName]
	--			,[LastName]
	--			,[SuffixName]
	--			,[DateOfBirth]
	--			,[DateOfDeath]
	--			,[GenderIndicator]
	--			,[AliasResponse]
	--			,[BirthVerificationCode]
	--			,[BirthPlaceCode]
	--			,[CitizenshipVerificationCode]
	--			,[DCLCitizenshipSwitch]
	--			,[DeathVerificationCode]
	--			,[LanguageCode]
	--			,[MaxHistorySequenceNumber]
	--			,[PrimarySSNNumber]
	--			,[PseudoSSNNumber]
	--			,[RaceCode]
	--			,[SSNAppointmentDate]
	--			,[SSNAppointmentVerificationCode]
	--			,[SSNValidatedCode]
	--			,[CaresUpdatedDate]
	--			,[USCitizenSwitch]
	--			,[WorkerAlert1Code]
	--			,[WorkerAlert2Code]
	--			,[MaidNumber]
	--			,[ChildElsewhereSwitch]
	--			,[ChildVerificationCode]
	--			,[AmericanIndianIndicator]
	--			,[AsianIndicator]
	--			,[BlackIndicator]
	--			,[HispanicIndicator]
	--			,[PacificIslanderIndicator]
	--			,[WhiteIndicator]
	--			,[MCI_ID]
	--			,[MACitizenVerificationCode]
	--			,[TribeChildMemberIndicator]
	--			,[TribeChildVerificationCode]
	--			,[TribalMemberIndicator]
	--			,[TribalMemberVerificationCode]
	--			,[DeathDateSourceCode]
	--			,[WorkerOverideVerificationCode]
	--			,[ConversionProjectDetails]
	--			,[ConversionDate]
	--			,[IsDeleted]
	--			)
	--		SELECT PinNumber
	--			,FirstName
	--			,MiddleInitialName
	--			,LastName
	--			,SuffixName
	--			,DateOfBirth
	--			,DateOfDeath
	--			,GenderIndicator
	--			,AliasResponse
	--			,BirthVerificationCode
	--			,BirthPlaceCode
	--			,CitizenshipVerificationCode
	--			,DCLCitizenshipSwitch
	--			,DeathVerificationCode
	--			,LanguageCode
	--			,MaxHistorySequenceNumber
	--			,PrimarySSNNumber
	--			,PseudoSSNNumber
	--			,RaceCode
	--			,SSNAppointmentDate
	--			,SSNAppointmentVerificationCode
	--			,SSNValidatedCode
	--			,CaresUpdatedDate
	--			,USCitizenSwitch
	--			,WorkerAlert1Code
	--			,WorkerAlert2Code
	--			,MaidNumber
	--			,ChildElsewhereSwitch
	--			,ChildVerificationCode
	--			,AmericanIndianIndicator
	--			,AsianIndicator
	--			,BlackIndicator
	--			,HispanicIndicator
	--			,PacificIslanderIndicator
	--			,WhiteIndicator
	--			,MCI_ID
	--			,MACitizenVerificationCode
	--			,TribeChildMemberIndicator
	--			,TribeChildVerificationCode
	--			,TribalMemberIndicator
	--			,TribalMemberVerificationCode
	--			,DeathDateSourceCode
	--			,WorkerOverideVerificationCode
	--			,'NEW PARTICIPANT'
	--			,CURRENT_TIMESTAMP
	--			,0
	--		FROM @Temp
	--	END
	--	ELSE
	--	BEGIN
	--		UPDATE wwp.Participant
	--		SET FirstName = a.FirstName
	--			,MiddleInitialName = a.MiddleInitialName
	--			,LastName = a.LastName
	--			,SuffixName = a.SuffixName
	--			,DateOfBirth = a.DateOfBirth
	--			,DateOfDeath = a.DateOfDeath
	--			,GenderIndicator = a.GenderIndicator
	--			,AliasResponse = a.AliasResponse
	--			,BirthVerificationCode = a.BirthVerificationCode
	--			,BirthPlaceCode = a.BirthPlaceCode
	--			,CitizenshipVerificationCode = a.CitizenshipVerificationCode
	--			,DCLCitizenshipSwitch = a.DCLCitizenshipSwitch
	--			,DeathVerificationCode = a.DeathVerificationCode
	--			,LanguageCode = a.LanguageCode
	--			,MaxHistorySequenceNumber = a.MaxHistorySequenceNumber
	--			,PrimarySSNNumber = a.PrimarySSNNumber
	--			,PseudoSSNNumber = a.PseudoSSNNumber
	--			,RaceCode = a.RaceCode
	--			,SSNAppointmentDate = a.SSNAppointmentDate
	--			,SSNAppointmentVerificationCode = a.SSNAppointmentVerificationCode
	--			,SSNValidatedCode = a.SSNValidatedCode
	--			,CaresUpdatedDate = a.CaresUpdatedDate
	--			,USCitizenSwitch = a.USCitizenSwitch
	--			,WorkerAlert1Code = a.WorkerAlert1Code
	--			,WorkerAlert2Code = a.WorkerAlert2Code
	--			,MaidNumber = a.MaidNumber
	--			,ChildElsewhereSwitch = a.ChildElsewhereSwitch
	--			,ChildVerificationCode = a.ChildVerificationCode
	--			,AmericanIndianIndicator = a.AmericanIndianIndicator
	--			,AsianIndicator = a.AsianIndicator
	--			,BlackIndicator = a.BlackIndicator
	--			,HispanicIndicator = a.HispanicIndicator
	--			,PacificIslanderIndicator = a.PacificIslanderIndicator
	--			,WhiteIndicator = a.WhiteIndicator
	--			,MCI_ID = a.MCI_ID
	--			,MACitizenVerificationCode = a.MACitizenVerificationCode
	--			,TribeChildMemberIndicator = a.TribeChildMemberIndicator
	--			,TribeChildVerificationCode = a.TribeChildVerificationCode
	--			,TribalMemberIndicator = a.TribalMemberIndicator
	--			,TribalMemberVerificationCode = a.TribalMemberVerificationCode
	--			,DeathDateSourceCode = a.DeathDateSourceCode
	--			,WorkerOverideVerificationCode = a.WorkerOverideVerificationCode
	--		FROM wwp.Participant b
	--		INNER JOIN @temp a ON b.PinNumber = a.PinNumber
	--	END
	--END

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	SET @ParticipantId = (
		SELECT Id
		FROM WWP.Participant
		WHERE PinNumber = @PinNumber
		)

	PRINT @ParticipantId

	IF (@ParticipantId is Null OR @ParticipantId = 0)
	BEGIN
		SET @Statement1 = '	 select  PinNumber
					,FirstName
					,MiddleInitialName
					,LastName
					,SuffixName
					,DateOfBirth
					,DateOfDeath
					,GenderIndicator
					,AliasResponse
					,LanguageCode
					,MaxHistorySequenceNumber
					,RaceCode
					,USCitizenSwitch
					,AmericanIndianIndicator
					,AsianIndicator
					,BlackIndicator
					,HispanicIndicator
					,PacificIslanderIndicator
					,WhiteIndicator
					,MCI_ID
					,TribalMemberIndicator
					,ConversionProjectDetails
					,0 AS IsDeleted
							   FROM OPENQUERY (' + @LSDBName + ', '' Select  
		PIN_NUM             	as	PinNumber	                ,
		FIRST_NAM           	as	FirstName	                ,
		MIDDLE_INITIAL_NAM  	as	MiddleInitialName	        ,
		LAST_NAM            	as	LastName	                ,
		SUFFIX_NAM          	as	SuffixName	                ,
		DOB_DT              	as	DateOfBirth                	,
		DEATH_DT            	as	DateOfDeath	                ,
		SEX_IND             	as	GenderIndicator	            ,
		ALIAS_RSP           	as	AliasResponse	            ,
		LANGUAGE_CD         	as	LanguageCode	            ,
		MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		RACE_CD             	as	RaceCode	                ,
		US_CITIZEN_SW       	as	USCitizenSwitch          	,
		AMR_INDN_IND        	as	AmericanIndianIndicator	    ,
		ASN_IND             	as	AsianIndicator	            ,
		BLK_IND             	as	BlackIndicator	            ,
		HISP_IND         		as	HispanicIndicator	        ,
		PCF_ILD_IND			 	as	PacificIslanderIndicator	,
		WHT_IND          		as	WhiteIndicator	            ,
		MCI_ID					as	MCI_ID	                    ,
		TRB_MBR_IND				as	TribalMemberIndicator	    ,
		''''WPASS''''           as  ConversionProjectDetails
		FROM  ' 
		+ @DB2DBName + '.T0011_INDIVIDUAL  A                                                                                          
		WHERE A.PIN_NUM    = ' + @PinNumber + ' ''  )           
		'
		BEGIN TRY
			INSERT wwp.Participant (
					[PinNumber]
					,[FirstName]
					,[MiddleInitialName]
					,[LastName]
					,[SuffixName]
					,[DateOfBirth]
					,[DateOfDeath]
					,[GenderIndicator]
					,[AliasResponse]
					,[LanguageCode]
					,[MaxHistorySequenceNumber]
					,[RaceCode]
					,[USCitizenSwitch]
					,[AmericanIndianIndicator]
					,[AsianIndicator]
					,[BlackIndicator]
					,[HispanicIndicator]
					,[PacificIslanderIndicator]
					,[WhiteIndicator]
					,[MCI_ID]
					,[TribalMemberIndicator]
					,[ConversionProjectDetails]
					,[IsDeleted]
					)
			EXEC (@Statement1);
		END TRY
		BEGIN CATCH   
		--	SELECT ERROR_NUMBER() AS ErrorNumber;

			if ERROR_NUMBER() <> 0 
			Begin 
				print 'by the time pin_number has already be assigned by the first SP or ther process'

			  	SET @ParticipantId = (
					SELECT Id
					FROM WWP.Participant
					WHERE PinNumber = @PinNumber
					)
			End
		END CATCH

		SET @ParticipantId = (
			SELECT Id
			FROM WWP.Participant
			WHERE PinNumber = @PinNumber
			)
	 END
     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

   	DECLARE @TempT0018Info TABLE (
	              AGSequenceNumber smallint
		        , AuditIndicator  [char](01)
				, CaseManagerId  [char](06)
				, CASENumber     [decimal](10,0)
				, CountyNumber   smallint             
				, CurrentRegCode  [char](01)
				, LastContactDate     date
				, LastDisenrollmentDate date
				, OfficeNumber           smallint
				, OfficeId               Int
				, ReferralRegistrationCode [char](1)
				, ReferralDate date
				, EnrolledProgramStatusCodeId  int     
				, EnrolledProgramId           int
				, WorkProgramGeoArea     smallint
				, PinNumber      [decimal](10,0)
				, IsDeleted  bit
				, ID int
				, ParticipantId int
				, MFFepId [char](06)     
				, WorkerId int 
		)



	SET @Statement2a = 'SELECT  AGSequenceNumber
	            , AuditIndicator
				, CaseManagerId
				, CASENumber
				, CountyNumber                
				, CurrentRegCode 
				, LastContactDate
				, LastDisenrollmentDate
				, OfficeNumber 
				, ReferralRegistrationCode
				, ReferralDate
				, EnrolledProgramStatusCodeId       
				, EnrolledProgramId
				, WorkProgramGeoArea     
				, PinNumber
				, MFFepId
				, 0 as IsDeleted	
				, 1 as ID			
	    FROM OPENQUERY(' + @LSDBName + ', ''SELECT B.AG_SEQ_NUM AS AGSequenceNumber
				, B.AUDIT_IND       AS AuditIndicator
				, B.CASE_MANAGER_ID AS CaseManagerId
				, B.CASE_NUM        AS CASENumber
				, B.COUNTY_NUM      AS CountyNumber                
				, B.CURRENT_REG_CD  AS CurrentRegCode
				, B.LAST_CONTACT_DT AS LastContactDate
				, B.LAST_DISENROLL_DT AS LastDisenrollmentDate
				, B.OFFICE_NUM        AS OfficeNumber 
				, B.REFERRAL_REG_CD   AS ReferralRegistrationCode
				, B.WP_REFERRAL_DT    AS ReferralDate 
				, CASE B.WP_SYSTEM_STS_CD WHEN ''''R'''' THEN 1
				                        WHEN ''''E'''' THEN 2
										WHEN ''''D'''' THEN 3
										WHEN ''''P'''' THEN 4
										WHEN ''''S'''' THEN 5
										END	 AS EnrolledProgramStatusCodeId       
				,  CASE B.PROGRAM_CD||B.SUBPROGRAM_CD WHEN ''''WW C''''  THEN  1    
				                                  WHEN ''''WW J''''  THEN  2 
												  WHEN ''''WW L''''  THEN  3 
												  WHEN ''''WW M''''  THEN  4
												  WHEN ''''WW N''''  THEN  5 
												  WHEN ''''WW P''''  THEN  6
												  WHEN ''''WW X''''  THEN  7
												  WHEN ''''WW Z''''  THEN  8
												  WHEN ''''WW  ''''  THEN  11 
										        END AS  EnrolledProgramId
				, B.WP_GEO_AREA  as WorkProgramGeoArea
				, B.PIN_NUM  as PinNumber
				, D.ASGN_FEP_ID as MFFepId
			FROM '+@DB2DBName+'.T0018_WP_INDV B
				LEFT OUTER JOIN '+@DB2DBName+'.T2536_WP_FEP_WRKR D ON B.CASE_NUM = D.CASE_NUM AND D.HISTORY_CD = 0
		   WHERE PIN_NUM = '+ @PinNumber +' AND B.PROGRAM_CD NOT IN (''''FS'''',''''  '''',''''ADC'''',''''ZZ'''')
		  WITH UR ; '')  '   
										 
				                       
	print @statement2a  ;

	  
	INSERT @TempT0018Info ( AGSequenceNumber
	            , AuditIndicator
				, CaseManagerId
				, CASENumber
				, CountyNumber                
				, CurrentRegCode
				, LastContactDate
				, LastDisenrollmentDate
				, OfficeNumber 
				, ReferralRegistrationCode
				, ReferralDate
				, EnrolledProgramStatusCodeId       
				, EnrolledProgramId
				, WorkProgramGeoArea     
				, PinNumber
				, MFFepId
				, IsDeleted
				, ID )
	EXEC (@Statement2a)
  
	print 'a'

	UPDATE @TempT0018Info
	  SET  EnrolledProgramId = 13
	 WHERE CurrentRegCode = 'L' OR ReferralRegistrationCode = 'L'


 
	DECLARE @TempOfficeNumber SMALLINT = (SELECT OfficeNumber FROM @TempT0018Info)
	DECLARE @TempCountyNumber SMALLINT = (SELECT CountyNumber FROM @TempT0018Info)
	DECLARE @TempEnrolledProgramId INT = (SELECT EnrolledProgramId FROM @TempT0018Info)
--- 
    DECLARE @TransferMFUserId VARCHAR (06) = (SELECT  MFFepId FROM @TempT0018Info)  
---
 
	UPDATE @TempT0018Info
    SET OfficeId = (SELECT A.Id
					FROM wwp.WWPOffice A
						 INNER JOIN wwp.ContractArea B
							ON A.ContractAreaId = B.Id
					WHERE A.OfficeNumber = @TempOfficeNumber AND A.CountyandTribeId = (SELECT Id
																					   FROM wwp.CountyAndTribe
																					   WHERE CountyNumber = @TempCountyNumber)
					AND B.EnrolledProgramId = 11)
	WHERE EnrolledProgramId in (1,2,3,4,5,6,7,8,11)
	              
		UPDATE @TempT0018Info
    SET OfficeId = (SELECT A.Id
					FROM wwp.WWPOffice A
						 INNER JOIN wwp.ContractArea B
							ON A.ContractAreaId = B.Id
					WHERE A.OfficeNumber = @TempOfficeNumber AND A.CountyandTribeId = (SELECT Id
																					   FROM wwp.CountyAndTribe
																					   WHERE CountyNumber = @TempCountyNumber)
					AND B.EnrolledProgramId = 13)
	      	WHERE EnrolledProgramId in (13)

	DECLARE @T0018EnrolledProgramId INT
	DECLARE @T0018EnrolledProgramStatusCodeId INT
	DECLARE @T0018ReferralDate Date
	DECLARE @LFFEPId INT
	DECLARE @PEPWorkerId INT
	DECLARE @WorkerEntSecCode varchar (5) 
	DECLARE @ParticipantEntSecCode Varchar(5)
	DECLARE @TransferEntSecCode Varchar(5)

	SELECT @T0018EnrolledProgramId = ISNULL(EnrolledProgramId, 0), @T0018EnrolledProgramStatusCodeId = ISNULL(EnrolledProgramStatusCodeId, 0) , @T0018ReferralDate = ReferralDate
	FROM @TempT0018Info
	WHERE Id = 1

	--Revisit to change the table for finding worker when Deloitte creates a new one--
	SELECT @LFFEPId = Id
	FROM wwp.Worker
	WHERE MFUserId = (SELECT MFFepId
					  FROM @TempT0018Info
					  WHERE Id = 1 AND EnrolledProgramId = 13)

 set @ParticipantEntSecCode =  ( select a.EntsecAgencyCode from wwp.Organization a,
                                wwp.contractarea b,
								wwp.WWPOffice C,
								wwp.CountyAndTribe D
			where d.CountyNumber = @TempCountyNumber
			  and c.OfficeNumber = @TempOfficeNumber
			  and c.CountyandTribeId = d.id
			  and b.id = c.ContractAreaId
			  and a.id = b.OrganizationId
			  and b.EnrolledProgramId = 11
			  )


PRINT '@ParticipantEntSecCode: ' + ISNULL(CAST(@ParticipantEntSecCode AS VARCHAR(5)), 'null')
			  
		set @WorkerEntSecCode = (	select EntsecAgencyCode from  wwp.Organization a,
					   wwp.Worker c
	 where c.MFUserId  =  (SELECT MFFepId
					  FROM @TempT0018Info
					  WHERE Id = 1)
       and c.OrganizationId =  a.id )


	
	PRINT '@WorkerEntSecCode: ' + ISNULL(CAST(@WorkerEntSecCode AS VARCHAR(5)), 'null')



if @ParticipantEntSecCode = @WorkerEntSecCode
Begin 
  
   print 'update the pep worker id from worker table' 

--- update the PEP worker id from Worker table
    SELECT @PEPWorkerId = Id
	FROM wwp.Worker
	WHERE MFUserId = (SELECT MFFepId
					  FROM @TempT0018Info
					  WHERE Id = 1
					 )

End
else 
begin
     print 'update the pep worker id as null ' 

  SET @PEPWorkerId = NULL

end

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------- LOGIC TO CALL USP AND DETERMINE INSERT INTO PEP
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	PRINT '@T0018EnrolledProgramId: ' + ISNULL(CAST(@T0018EnrolledProgramId AS VARCHAR(4)), 'null')
	PRINT '@T0018EnrolledProgramStatusCodeId: ' + ISNULL(CAST(@T0018EnrolledProgramStatusCodeID AS VARCHAR(4)), 'null')
	PRINT '@LFFEPId: ' + ISNULL(CAST(@LFFEPId AS VARCHAR(4)), 'null')
	PRINT '@PEPWorkerId: ' + ISNULL(CAST(@PEPWorkerId AS VARCHAR(4)), 'null')
	


	--		
	-- CHECK IF THERE IS AN REFERRAL IN T0018 
	IF EXISTS (SELECT 1
                 FROM @TempT0018Info
			   WHERE ID = 1 AND EnrolledProgramStatusCodeId = 1 )
	---
	BEGIN
		UPDATE @TempT0018Info
		SET ParticipantId = (SELECT b.Id
							 FROM wwp.Participant b
							 WHERE b.PinNumber = @TempPinNumber)
		WHERE Id = 1
	                                                      

		
		DECLARE @FirstTimeEntry BIT,
		        @PEPRefAlreadyExist BIT = 0,
				@RecentStatus VARCHAR(20),
				@ReferralDate DATE,
				@EnrollmentDate DATE,
				@DisEnrollmemtDate DATE,
				@EnrolledProgramId INT,
				@CheckResult INT

	  DECLARE  @PEP TABLE
	  (ParticipantId Int ,
	   EnrolledprogramId INT,
	   EnrolledprogramStatusCode INT )

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------- CALL THE USP_ProgramStatus , passing the Enrolled program of current value in T0018
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
       
	   	  IF EXISTS(SELECT 1
				  FROM wwp.ParticipantEnrolledProgram
				  WHERE ParticipantId = (SELECT ParticipantId
										 FROM @TempT0018Info
										 WHERE PinNumber = @TempPinNumber))
		--   AND @EnrolledProgramId IS NOT NULL
		   BEGIN
			SET @FirstTimeEntry = 1

			PRINT 'EntryforthePinExists 1'

		--	
			  IF EXISTS(SELECT 1
                 FROM WWP.ParticipantEnrolledProgram C
			   WHERE C.ParticipantId =  (SELECT ParticipantId
										 FROM @TempT0018Info
										 WHERE PinNumber = @TempPinNumber)
			    AND C.EnrolledProgramId in (1,2,3,4,5,6,7,8,11,13) AND C.EnrolledProgramStatusCodeId = 1 
			    AND C.ID  = ( SELECT MAX(ID) 
				                FROM WWP.ParticipantEnrolledProgram CC 
							   WHERE CC.ParticipantId = C.ParticipantId 
							     AND CC.EnrolledProgramId = C.EnrolledProgramId 
								 AND CC.EnrolledProgramStatusCodeId = C.EnrolledProgramStatusCodeId) )
			     BEGIN
				 	SET @PEPRefAlreadyExist = 1
			         PRINT '@PEPRefAlreadyExist 1'
				 END

		   END
		ELSE
		   BEGIN
			SET @FirstTimeEntry = 0
			PRINT 'EntryforthePinDoesNotExists 0'
		  END    

----
			  PRINT 'INPUT FOR USP'
			  PRINT @TempPinNumber
			  PRINT @SCHEMANAME
			  PRINT @T0018EnrolledProgramId

----
				EXEC wwp.USP_ProgramStatus @TempPinNumber, @SchemaName, 1, @T0018EnrolledProgramId, @RecentStatus OUTPUT, @ReferralDate OUTPUT, @EnrollmentDate OUTPUT, @DisEnrollmemtDate OUTPUT,
								   @EnrolledProgramId OUTPUT

		--Check if an Entry for the PinNumber Exist
				print 'output from usp first occurance'
				print @RecentStatus
				print @ReferralDate
				print @EnrollmentDate
				print @DisEnrollmemtDate

----- IF RESULT FROM ABOVE CALL IS NULL AND ENROLLED PROGRAM IS W2	

			IF @RecentStatus IS NULL and @T0018EnrolledProgramId  IN (1,2,3,4,5,6,7,8,11,13)
			BEGIN 

			print 'inside second occurance of USP' 

			EXEC wwp.USP_ProgramStatus @TempPinNumber, @SchemaName, 1, 11 , @RecentStatus OUTPUT, @ReferralDate OUTPUT, @EnrollmentDate OUTPUT, @DisEnrollmemtDate OUTPUT,
										@EnrolledProgramId OUTPUT
    
				print 'output from usp second occurance'
				print @RecentStatus
				print @ReferralDate
				print @EnrollmentDate
				print @DisEnrollmemtDate

	
------ IF SECOND USP CALL RETURNS @RECENTSTATUS IS REFERRED, THEN UPDATE UPDATE PEP TABLE IF PROGRAM CODE IS DIFFERENT

				IF @RecentStatus = 'Referred'

					BEGIN


					 IF @EnrolledProgramId <> @T0018EnrolledProgramId
					  BEGIN
		   
						 print 'update referral with proper prgragm code from T0018' 
	
					   UPDATE  wwp.ParticipantEnrolledProgram
						 SET EnrolledProgramId = @T0018EnrolledProgramId
						 where ParticipantId = @ParticipantId
						   and EnrolledprogramId = @EnrolledProgramId

					  END

					END

------------------- 
				    Declare 	@PEPId int  = (select id from wwp.ParticipantEnrolledProgram where EnrolledProgramStatusCodeId = 1
																						and ParticipantId = @Participantid
																						and EnrolledProgramId in (1,2,3,4,5,6,7,8,11,13) 
																						)


------ IF SECOND USP CALL RETURNS @RECENTSTATUS IS NULL, THEN UPDATE PEP TABLE IF PROGRAM CODE IS DIFFERENT

		             IF @RecentStatus = NULL OR @RecentStatus = ' ' OR @RecentStatus is Null

							BEGIN

							 print 'inside referral NULL'

												 IF @EnrolledProgramId is null and  @T0018EnrolledProgramId in (1,2,3,4,5,6,7,8,11,13)
												  BEGIN
		   
 
  												 print 'inside referral NULL ....'

		 
												  IF ( @T0018EnrolledProgramStatusCodeId = 1 and @FirstTimeEntry = 0 AND @TempEnrolledProgramId IS NOT NULL )
												     or ( @T0018EnrolledProgramStatusCodeId = 1 and @FirstTimeEntry = 1 AND @TempEnrolledProgramId IS NOT NULL )
												   Begin
												    
													 print 't0018enrlpgmstscod =1'
													 IF @PEPRefAlreadyExist = 0
													 BEGIN

													INSERT INTO [wwp].[ParticipantEnrolledProgram]
														  (ParticipantId, AGSequenceNumber, CaseManagerId, CASENumber, CurrentRegCode, OfficeId, ReferralRegistrationCode, ReferralDate, EnrolledProgramStatusCodeId,
														   EnrolledProgramId, IsDeleted,WorkerId, LFFEPId)
		  											 SELECT ParticipantId, AGSequenceNumber, CaseManagerId, CASENumber, CurrentRegCode, OfficeId, ReferralRegistrationCode, ReferralDate, EnrolledProgramStatusCodeId,
														   EnrolledProgramId, IsDeleted,@PepWorkerId, @LFFEPId
													 FROM @TempT0018Info

													END
													ELSE
													BEGIN


													 UPDATE  wwp.ParticipantEnrolledProgram
													 SET EnrolledProgramId = @T0018EnrolledProgramId ,
													     ReferralDate     = @T0018ReferralDate
													 where ParticipantId = @ParticipantId
													   and id = @PepId
													print 'update referral with proper prgragm code 1' 


													END

												   End

												   ELSE

													 BEGIN 
												   UPDATE  wwp.ParticipantEnrolledProgram
													 SET EnrolledProgramId = @T0018EnrolledProgramId ,
													     ReferralDate     = @T0018ReferralDate
													 where ParticipantId = @ParticipantId
													   and id = @PepId
													print 'update referral with proper prgragm code 2' 
													END

												  END
		 
						 END
         
 END


	
		
		--Checke if an Open Episode Exists
		IF (@RecentStatus IN ('Referred')
			AND @ReferralDate = (SELECT ReferralDate
								 FROM @TempT0018Info
								 WHERE PinNumber = @TempPinNumber)
			AND (CASE WHEN @EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13) THEN 1 ELSE @EnrolledProgramId END 
			     = CASE WHEN @T0018EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13) THEN 1 ELSE @T0018EnrolledProgramId END))
		BEGIN
			SET @CheckResult = 1
			PRINT 'OpenEpisodeExists 1'
	-- update the fep id if changed after intial referral
	Print 'update of update'


	
			Update wwp.ParticipantEnrolledProgram
			   set WorkerId = @PEPWorkerId,
			       EnrolledProgramId =  @T0018EnrolledProgramId
			   where participantid  = @ParticipantId
			     and EnrolledProgramId in  (1,2,3,4,5,6,7,8,11)
			     and EnrolledProgramStatusCodeId = 1
				 and ( WorkerId <> @PEPWorkerId OR WorkerId IS NULL )

           Update wwp.ParticipantEnrolledProgram
			   set WorkerId = @PEPWorkerId,
			       LFFEPId = @PEPWorkerId,
			       EnrolledProgramId =  @T0018EnrolledProgramId	       
			   where participantid  = @ParticipantId
			     and EnrolledProgramId in  (13)
			     and EnrolledProgramStatusCodeId = 1
				 and ( WorkerId <> @PEPWorkerId OR WorkerId IS NULL )

		END

--		 
		IF (@RecentStatus IN ( 'Enrolled')
			AND @ReferralDate = (SELECT ReferralDate
								 FROM @TempT0018Info
								 WHERE PinNumber = @TempPinNumber)
			AND (CASE WHEN @EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13) THEN 1 ELSE @EnrolledProgramId END 
			     = CASE WHEN @T0018EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13) THEN 1 ELSE @T0018EnrolledProgramId END))
		BEGIN
			SET @CheckResult = 1
			PRINT 'OpenEpisodeExists 2'
	-- update the fep id if changed after intial referral
	Print 'update of update2'


	
			Update wwp.ParticipantEnrolledProgram
			   set WorkerId = @PEPWorkerId
			   where participantid  = @ParticipantId
			     and EnrolledProgramId in  (1,2,3,4,5,6,7,8,11)
			     and EnrolledProgramStatusCodeId = 1
				 and ( WorkerId <> @PEPWorkerId OR WorkerId IS NULL )

           Update wwp.ParticipantEnrolledProgram
			   set WorkerId = @PEPWorkerId,
			       LFFEPId = @PEPWorkerId		       
			   where participantid  = @ParticipantId
			     and EnrolledProgramId in  (13)
			     and EnrolledProgramStatusCodeId = 1
				 and ( WorkerId <> @PEPWorkerId OR WorkerId IS NULL )

		END


 ---
			IF (@RecentStatus = 'DisEnrolled'
			AND @DisEnrollmemtDate <= (SELECT ReferralDate
									   FROM @TempT0018Info
									   WHERE PinNumber = @TempPinNumber)
			AND (CASE WHEN @EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13) THEN 1 ELSE @EnrolledProgramId END 
			     = CASE WHEN @T0018EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13) THEN 1 ELSE @T0018EnrolledProgramId END))
			BEGIN
				SET @CheckResult = 0
				PRINT 'OpenEpisodeDontExists 0'
			END
 

		--IF @FirstTimeEntry = 0 AND @TempEnrolledProgramId IS NOT NULL
		--BEGIN
		--	PRINT 'Insert STEP1'

		--	INSERT INTO [wwp].[ParticipantEnrolledProgram]
		--		  (ParticipantId, AGSequenceNumber, CaseManagerId, CASENumber, CurrentRegCode, OfficeId, ReferralRegistrationCode, ReferralDate, EnrolledProgramStatusCodeId,
		--		   EnrolledProgramId, IsDeleted,WorkerId, LFFEPId)
		--	SELECT ParticipantId, AGSequenceNumber, CaseManagerId, CASENumber, CurrentRegCode, OfficeId, ReferralRegistrationCode, ReferralDate, EnrolledProgramStatusCodeId,
		--		   EnrolledProgramId, IsDeleted,@PepWorkerId, @LFFEPId
		--	FROM @TempT0018Info
		--END
		--ELSE
		--BEGIN
			IF @CheckResult = 0  AND @TempEnrolledProgramId IS NOT NULL
			BEGIN
				PRINT 'Insert STEP2'

				INSERT INTO [wwp].[ParticipantEnrolledProgram]
					  (ParticipantId, AGSequenceNumber, CaseManagerId, CASENumber, CurrentRegCode, OfficeId, ReferralRegistrationCode, ReferralDate,
					   EnrolledProgramStatusCodeId, EnrolledProgramId, IsDeleted, WorkerId,LFFEPId)
				SELECT ParticipantId, AGSequenceNumber, CaseManagerId, CASENumber, CurrentRegCode, OfficeId, ReferralRegistrationCode, ReferralDate,
					   EnrolledProgramStatusCodeId, EnrolledProgramId, IsDeleted,@PepWorkerId, @LFFEPId
				FROM @TempT0018Info
			END
			ELSE
				PRINT 'Don''t Insert'
		

		END
	--END
	
-- if ( @FirstTimeEntry = 0)

-- Begin


--  INSERT into [wwp].[ParticipantEnrolledProgram]
--               (  ParticipantId
--			    , AGSequenceNumber
--	            , AuditIndicator
--				, CaseManagerId
--				, CASENumber              
--				, CurrentRegCode			 
--				, OfficeId
--				, ReferralRegistrationCode
--				, ReferralDate
--				, EnrolledProgramStatusCodeId       
--				, EnrolledProgramId				 
--				, IsDeleted) 
--  select         ParticipantId
--                , AGSequenceNumber
--	            , AuditIndicator
--				, CaseManagerId
--				, CASENumber				        
--				, CurrentRegCode				 
--				, OfficeId
--				, ReferralRegistrationCode
--				, ReferralDate
--				, EnrolledProgramStatusCodeId       
--				, EnrolledProgramId   
--				, IsDeleted from @TempT0018Info


--end
	
 
-- if ( @ReferralEpisodeAlreadyExists = 0 and @EnrollmentEpisodeExists = 0 and @DisenrollmentEpisodeExists = 0)

-- Begin

--   if not exists ( select 1 from wwp.ParticipantEnrolledProgram 
--              where ParticipantId = (select ParticipantId from @TempT0018Info  where PinNumber = @TempPinNumber )
--                and CaseNumber    = (select CaseNumber from @TempT0018Info  where PinNumber = @TempPinNumber )
--            --    and CountyNumber  = (select CountyNumber from @TempT0018Info  where PinNumber = @TempPinNumber )              				                                          				
--				 and OfficeID =  (select OfficeId from @TempT0018Info  where PinNumber = @TempPinNumber )
--				and ReferralDate  = (select ReferralDate from @TempT0018Info  where PinNumber = @TempPinNumber )
--				and EnrollmentDate is Null
--				and DisenrollmentDate is Null
--				and EnrolledProgramStatusCodeId = 1      
--				and EnrolledProgramId = (select EnrolledProgramId from @TempT0018Info  where PinNumber = @TempPinNumber )
--			--	and WorkProgramGeoArea   = (select WorkProgramGeoArea from @TempT0018Info  where PinNumber = @TempPinNumber )  
--)			

--begin


--  INSERT into [wwp].[ParticipantEnrolledProgram]
--               (  ParticipantId
--			    , AGSequenceNumber
--	            , AuditIndicator
--				, CaseManagerId
--				, CASENumber          
--				, CurrentRegCode
--				, OfficeId
--				, ReferralRegistrationCode
--				, ReferralDate
--				, EnrolledProgramStatusCodeId       
--				, EnrolledProgramId 
--				, IsDeleted) 
--  select         ParticipantId
--                , AGSequenceNumber
--	            , AuditIndicator
--				, CaseManagerId
--				, CASENumber  
--				, CurrentRegCode			
--				, OfficeId 
--				, ReferralRegistrationCode
--				, ReferralDate
--				, EnrolledProgramStatusCodeId       
--				, EnrolledProgramId    
--				, IsDeleted from @TempT0018Info

--end

--end
	
--end
	
	------- SELECT TEMP CASE NUMBER

	SET @TempCaseNumber = ( SELECT CaseNumber FROM @TempT0018Info)

	PRINT '@TempCaseNumber FROM TABLE18' + @TempCaseNumber  


	
---------------------------------
---------------------------------
---------------------------------

 	DECLARE @TempCurrentCaseInfo TABLE (
	              NewCaseNumber [decimal](10,0)
		        , PinNumber  [decimal](10,0)
	               	)


SET @Statement2B = 'SELECT  NewCaseNumber,
                            PinNumber	
	                  FROM  OPENQUERY(' + @LSDBName + ', ''SELECT  M.CASE_NUM        AS NewCaseNumber			                                          
				                                                 , M.PIN_NUM  as PinNumber
		                  	                               FROM  '+@DB2DBName+'.T0015_CS_INDV AS M   
							                               INNER JOIN '+@DB2DBName+'.T0265_AG_IN_ELIG AS C ON  C.PIN_NUM            = M.PIN_NUM
														        AND C.CASE_NUM = M.CASE_NUM
																AND C.PROGRAM_CD         = ''''WW''''
																AND C.SUBPROGRAM_CD NOT  IN (''''X'''', ''''Z'''')
																AND C.AG_STS_CD          IN (''''O'''', ''''C'''',''''P'''', ''''D'''')
																AND C.PART_STS_CD        IN (''''EA'''', ''''IA'''',''''XA'''',''''EC'''')
													            AND C.CURRENT_ELIG_IND   IN ( ''''1'''' ,''''9'''')
																AND C.PAYMENT_BEGIN_DT   <= C.PAYMENT_END_DT
																AND C.PAYMENT_BEGIN_DT  BETWEEN '''''+@NewDate+''''' AND '''''+@EndDate+'''''
																AND ( C.ELIGIBILITY_END_DT  = '''''+@EndDate+''''' OR C.ELIGIBILITY_END_DT  = ''''9999-12-31'''' )
																AND C.CAG_ELIG_SEQ_NUM  = ( 
											                                         SELECT MAX(CC.CAG_ELIG_SEQ_NUM)
																					   FROM '+@DB2DBName+'.T0265_AG_IN_ELIG AS CC
																					  WHERE CC.CASE_NUM         = C.CASE_NUM
																					    AND CC.PROGRAM_CD       = C.PROGRAM_CD
																						AND CC.SUBPROGRAM_CD    = C.SUBPROGRAM_CD
																						AND CC.AG_SEQ_NUM       = C.AG_SEQ_NUM
																						AND CC.CURRENT_ELIG_IND = C.CURRENT_ELIG_IND
																						AND CC.PAYMENT_BEGIN_DT   <= CC.PAYMENT_END_DT
																						AND CC.PAYMENT_BEGIN_DT = C.PAYMENT_BEGIN_DT
																						AND CC.PAYMENT_END_DT = C.PAYMENT_END_DT
																					     )
											WHERE M.PIN_NUM = '+@PinNumber+'
											  AND M.DELETE_REASON_CD = '''' ''''
											  AND M.HISTORY_CD = 0     
												  WITH UR ; '')  '   
										 
				                       
  print @statement2B  ;


    
   INSERT @TempCurrentCaseInfo ( NewCaseNumber
	            , PinNumber )
				 
	EXEC (@Statement2b)

---select * from @TempCurrentCaseInfo

IF NOT EXISTS (
			SELECT 1
			FROM @TempCurrentCaseInfo
			)
	BEGIN
		INSERT @TempCurrentCaseInfo (NewCaseNumber,PinNumber)
		VALUES (0,@TempPinNumber)
	END

---select * from @TempCurrentCaseInfo

SET @TempCaseNumberNew = ( SELECT top 1 NewCaseNumber FROM @TempCurrentCaseInfo)

Print '@TempCaseNumber ' + @TempCaseNumber
Print '@TempCaseNumberNew ' + @TempCaseNumberNew

if (@TempCaseNumberNew !=  CONVERT(varchar(10), 0) ) 
   begin
   Print '@TempCaseNumberNew is not 0'
    if ( @TempCaseNumber != @TempCaseNumberNew)
	 BEgin
	  print  'set up new case number'
	   Set @TempCaseNumber = @TempCaseNumberNew
	 End
   End

   print @TempCaseNumber

------------------------------------------------


			  DECLARE @TempT0429TransferInfo TABLE
            (
                [CASENumber] VARCHAR(10) NULL ,
				[PinNumber] VARCHAR(10) NULL,
		        [SourceCountyNumber] [SMALLINT] NULL,             --- it could be either CWW/WPASS
				[DestinationCountyNumber] [SMALLINT] NULL,        --- it could be either CWW/WPASS
				[SourceOfficeNumber] [SMALLINT] NULL,             --- it could be either CWW/WPASS
				[DestinationOfficeNumber] [SMALLINT] NULL,        --- it could be either CWW/WPASS
				[OfficeOutOfSyncIndicator][Bit] NULL,             --- it could be either CWW/WPASS
                [CWWSourceCountyNumber] [SMALLINT] NULL,          --- ONLY CWW
				[CWWDestinationCountyNumber] [SMALLINT] NULL,     --- ONLY CWW
			    [CWWSourceOfficeNumber] [SMALLINT] NULL,          --- ONLY CWW
				[CWWDestinationOfficeNumber] [SMALLINT] NULL,     --- ONLY CWW
				[CWWSourceWPOfficeNumber] [SMALLINT] NULL,        --- ONLY CWW
				[CWWDestinationWPOfficeNumber] [SMALLINT] NULL,   --- ONLY CWW				
				[OldFepId][VARCHAR](06) NULL,
				[NewFepId][VARCHAR](06) NULL,
				[FepOutOfSync][Bit] NULL,
				[TransferWorker] [VARCHAR](06) NULL,
				[TransferDate] [Date] NULL,
				[OrignationWNWCountyNumber] [SMALLINT] NULL,
				[T1DestinationCountyNumber] [SMALLINT] NULL,
				[T351SourceCountyNumber] [SMALLINT] NULL, 	
								  
				[T1MAxHistorySeqNumber][SMALLINT] NULL,
				[T351HistorySeqNumber] [SMALLINT] NULL,
	            [ID] [Integer] Null
            );



		SET @statement2z = 'Select CASENumber,
								   CWWSourceCountyNumber, 
								   CWWSourceOfficeNumber,
								   CWWDestinationCountyNumber,
								   CWWDestinationOfficeNumber,					   									
								   TransferWorker,
								   TransferDate,							  						  
								   T1MAxHistorySeqNumber,
								   T351HistorySeqNumber ,
								   ID				   
		                    FROM OPENQUERY(' + @LSDBName + ', ''SELECT A.CASE_NUM            as CASENumber  ,
																	   A.SOURCE_COUNTY_NUM   as CWWSourceCountyNumber,
																	   C.OFFICE_NUM          as CWWSourceOfficeNumber ,
																	   A.DEST_COUNTY_NUM     as CWWDestinationCountyNumber ,
																	   B.OFFICE_NUM          as CWWDestinationOfficeNumber, 
																	   A.USER_ID             as TransferWorker     ,
																	   A.TRANSFER_DT         as TransferDate   ,									
 							                                           B.MAX_HIST_SEQ_NUM    as T1MAxHistorySeqNumber,
																	   C.HISTORY_SEQ_NUM     as T351HistorySeqNumber,
																       ROW_NUMBER () OVER(ORDER BY A.CASE_NUM)  AS ID    
 																FROM  ' + @DB2DBName + '.T0429_CS_CTY_TRANS A,
																	  ' + @DB2DBName + '.T0001_CASE B,
																	  ' + @DB2DBName + '.T0351_CS_HISTORY C 
																	  
																WHERE A.CASE_NUM =  ' + @TempCaseNumber + '
																  AND A.HISTORY_CD = 0 
													              AND A.HISTORY_SEQ_NUM  =                           
																	                 (SELECT MAX(AA.HISTORY_SEQ_NUM)                   
																	                   FROM  ' + @DB2DBName + '.T0429_CS_CTY_TRANS  AA                   
																	                  WHERE AA.CASE_NUM     = A.CASE_NUM    
																	                 	AND AA.TRANSFER_DT  = A.TRANSFER_DT)
																  AND B.CASE_NUM =  A.CASE_NUM
																  AND C.CASE_NUM  = B.CASE_NUM
																  AND C.HISTORY_SEQ_NUM = (B.MAX_HIST_SEQ_NUM - 1)
		
         
																	WITH UR                                     

																		'')'

      print 'office transfer'

	  print @statement2z



        INSERT @TempT0429TransferInfo ( CASENumber,
								   CWWSourceCountyNumber, 
								   CWWSourceOfficeNumber,
								   CWWDestinationCountyNumber,
								   CWWDestinationOfficeNumber,					   									
								   TransferWorker,
								   TransferDate,							  						  
								   T1MAxHistorySeqNumber,
								   T351HistorySeqNumber ,
								   ID			)  
        EXEC ( @statement2z )


--select * from @TempT0429TransferInfo

	   IF NOT EXISTS (
			SELECT 1
			FROM @TempT0429TransferInfo
			)
	BEGIN
	     PRINT 'NONE EXISTS IN T0429'
		INSERT @TempT0429TransferInfo (CaseNumber,ID,CWWDestinationWPOfficeNumber, CWWSourceWPOfficeNumber,CWWDestinationCountyNumber,CWWSourceCountyNumber)
		VALUES (@TempCaseNumber,1,0,0,0,0)
	END
    ELSE
	BEGIN
	   PRINT 'UPDATE IN TEMP T0429'
		update @TempT0429TransferInfo
		  set CWWSourceWPOfficeNumber = ( Select a.OfficeNumber from wwp.WWPOffice A,
																	 wwp.CountyAndTribe B
		                                      WHERE B.CountyNumber = (Select  CWWSourceCountyNumber from @TempT0429TransferInfo )
									--		    AND A.OfficeNumber = ( Select T351SourceOfficeNumber  from @TempT0429TransferInfo )
											    AND A.CountyandTribeId = B.Id
												AND A.MFEligibilityOfficeNumber = ( Select CWWSourceOfficeNumber  from @TempT0429TransferInfo )
												AND A.ContractAreaId between 1 and 10
												
								      ) ,
            CWWDestinationWPOfficeNumber = ( Select a.OfficeNumber from wwp.WWPOffice A,
			                                                         wwp.CountyAndTribe B
		                                      where B.CountyNumber = (Select  CWWDestinationCountyNumber from @TempT0429TransferInfo )
											 --  AND A.OfficeNumber = ( Select T1DestinationOfficeNumber  from @TempT0429TransferInfo )
											      AND A.CountyandTribeId = B.Id 
												  AND A.MFEligibilityOfficeNumber = ( Select CWWDestinationOfficeNumber  from @TempT0429TransferInfo )
												  AND A.ContractAreaId between 1 and 10
								      ) 
			Where ID = 1
      END
   
--select * from @TempT0018Info ;
	 
--select * from @TempT0429TransferInfo ;

	 DECLARE @TempOfficeTransferInfo TABLE
            ([PinNumber] [Decimal](10,0) NULL,
		 	 [ParticipantEnrolledProgramId] [int] NULL,
			 [SourceOfficeId] [int] NULL,
			 [WWPSourceWPOfficeNumber] [Smallint] NULL,
			 [SourceAssignedWorkerId] [int] NULL,
			 [DestinationOfficeID] [int] NULL,
			 [WWPDestinationWPOfficeNumber] [Smallint] NULL,
			 [DestinationAssignedWorkerId] [int] NULL,
			 [TransferDate] [datetime] NULL,
			 [ModifiedDate] [datetime] NULL,	 
			 [ParticipantID] [int] NULL,
			 ID int NULL
			)

	 insert into @TempOfficeTransferInfo (ParticipantEnrolledProgramId,
	        t.SourceOfficeId,
			t.SourceAssignedWorkerId,
			t.DestinationOfficeID,
			t.DestinationAssignedWorkerId,
	        t.TransferDate,
			t.ModifiedDate,
			t.ParticipantID ,
			ID)
	 select t.ParticipantEnrolledProgramId,
	        t.SourceOfficeId,
			t.SourceAssignedWorkerId,
			t.DestinationOfficeID,
			t.DestinationAssignedWorkerId,
	        t.TransferDate,
			t.ModifiedDate,
			t.ParticipantID ,
			 ROW_NUMBER () OVER(ORDER BY t.ParticipantID)  AS ID
			 from wwp.OfficeTransfer t where ParticipantID = @ParticipantId
			   and TransferDate = ( select max(tt.TransferDate) from  wwp.OfficeTransfer tt
			                             where   tt.ParticipantID = t.ParticipantId
			                       )        
			 order by t.TransferDate Desc
	--	
			IF NOT EXISTS (
			SELECT 1
			FROM @TempOfficeTransferInfo
			)
			BEGIN
				 PRINT 'NONE EXISTS IN wwp office transfer'
				INSERT @TempOfficeTransferInfo (PinNumber,ID,WWPDestinationWPOfficeNumber, WWPSourceWPOfficeNumber)
				VALUES (@PinNumber,1,0,0)
			END
	ELSE
	BEGIN
	   PRINT 'UPDATE IN TEMP TempOfficeTransferInfo'
		update @TempOfficeTransferInfo
		  set WWPSourceWPOfficeNumber = ( Select a.OfficeNumber from wwp.WWPOffice A 
											    WHERE A.ID = (Select  SourceOfficeId from @TempOfficeTransferInfo )					
								      ) ,
            WWPDestinationWPOfficeNumber = ( Select a.OfficeNumber from wwp.WWPOffice A 
											    WHERE A.ID = (Select  DestinationOfficeID from @TempOfficeTransferInfo )					
								      )
			Where ID = 1

        END

-----------

--	 select * from @TempT0018Info ;
--	 select * from @TempT0429TransferInfo ;	 
--	 select * from @TempOfficeTransferInfo ; 
	   
------------------  
 

		DECLARE @T0018OfficeNumber INT			  = ISNULL((select OfficeNumber from @TempT0018Info),0) ;


		DECLARE @CWWDestinationWPOfficeNumber INT = ISNULL((select CWWDestinationWPOfficeNumber from @TempT0429TransferInfo),0) ;
	
		DECLARE @CWWSourceWPOfficeNumber INT	  = ISNULL((select CWWSourceWPOfficeNumber from @TempT0429TransferInfo ),0) ;

        DECLARE @WWPDestinationWPOfficeNumber INT = ISNULL((select WWPDestinationWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1 ),0)

		DECLARE @WWPSourceWPOfficeNumber INT      = ISNULL((select WWPSourceWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1 ),0)

		DECLARE @T0018CountyNumber INT			  = ISNULL((select CountyNumber from @TempT0018Info),0) ;
		
		DECLARE @CWWDestinationCountyNumber INT   = ISNULL((select CWWDestinationCountyNumber from @TempT0429TransferInfo),0) ;

		DECLARE @CWWSourceCountyNumber INT        = ISNULL((select CWWSourceCountyNumber from @TempT0429TransferInfo),0) ;


		PRINT @T0018OfficeNumber
		PRINT @CWWDestinationWPOfficeNumber
		PRINT @CWWSourceWPOfficeNumber
		PRINT @WWPDestinationWPOfficeNumber
		PRINT @WWPSourceWPOfficeNumber
		--print  'cww destination wp office number' 
		--print  @DestinationWPOfficeNumber
		--		print  'source destination wp office number' 	
		--	print @SourceWPOfficeNumber


	 

		
	--	If ((select countynumber from @TempT0018Info) <>  (select DestinationCountyNumber from @TempT0429TransferInfo ))


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--- 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		

 

IF ( @WWPDestinationWPOfficeNumber <> 0)  OR ( @CWWDestinationWPOfficeNumber <> 0 )

 --- OUT OF SYNC ONLY WHEN THERE IS AN OFFICE TRANSFER.

BEGIN
   ---- TACKLE FROM CWW SIDE
    IF (@CWWSourceCountyNumber = @CWWDestinationCountyNumber )

	BEGIN
	  ---- THIS MEANS NO ACTION TO BE TAKEN UNLESS THERE T0018 COUNTY NUMBER IS DIFFERENT FROM CWW OR COUNTY NUMBER IS 40
	  IF @CWWSourceCountyNumber = 40 AND @CWWDestinationCountyNumber =  40
	     
       BEGIN 
	      PRINT 'MILWAUKEE TO MILWAUKEE'
	   
		  IF ((@T0018OfficeNumber) <> ( @CWWDestinationWPOfficeNumber))	
		    --  
		    BEGIN 
			       PRINT 'SCENARIO 1: T0018 <> CWW DEST ' 
			 IF (@T0018OfficeNumber  = @CWWSourceWPOfficeNumber )
			   BEGIN
			       PRINT 'TRANSFER HAPPEND IN CWW'
					 update @TempT0429TransferInfo
					   set OfficeOutOfSyncIndicator = 1,			       
						   DestinationOfficeNumber  = @CWWDestinationWPOfficeNumber  ,
						   SourceOfficeNumber       = @CWWSourceWPOfficeNumber	   
					 Where ID = 1


					  set @TransferEntSecCode =  ( select a.EntsecAgencyCode from wwp.Organization a,
                                wwp.contractarea b,
								wwp.WWPOffice C,
								wwp.CountyAndTribe D
			where d.CountyNumber = @CWWDestinationCountyNumber
			  and c.OfficeNumber = @CWWDestinationWPOfficeNumber
			  and c.CountyandTribeId = d.id
			  and b.id = c.ContractAreaId
			  and a.id = b.OrganizationId
			  and b.EnrolledProgramId = 11
			  )


PRINT '@TransferEntSecCode: ' + ISNULL(CAST(@TransferEntSecCode AS VARCHAR(5)), 'null')
			  

	PRINT '@WorkerEntSecCode: ' + ISNULL(CAST(@WorkerEntSecCode AS VARCHAR(5)), 'null')



            IF @TransferEntSecCode = @WorkerEntSecCode
               Begin 
			      update @TempT0429TransferInfo
					   set FepOutOfSync  = 1,		
					       NewFepId	  =  (SELECT MFFepId
					  FROM @TempT0018Info
					  WHERE Id = 1)
					where Id = 1
			     END
			ELSE
			  Begin
			  update @TempT0429TransferInfo
					   set FepOutOfSync  = 0,		
					       NewFepId	  =  NULL
						where Id = 1
			  END
			   END
			END  
        END

		--- OTHER THAN MILWAUKEE NO NEED TO TICK OUT OF SYNC.
		 
		  END    

	  --- LOGIC FOR (@CWWSourceCountyNumber <> @CWWDestinationCountyNumber )
	    IF ((@T0018OfficeNumber) <> ( @CWWDestinationWPOfficeNumber))	
		    --  
		    BEGIN 
			       PRINT 'SCENARIO 2: T0018 <> CWW DEST ' 
			 IF (@T0018OfficeNumber  = @CWWSourceWPOfficeNumber )
			   BEGIN
			       PRINT 'TRANSFER HAPPEND IN CWW'
					 update @TempT0429TransferInfo
					   set OfficeOutOfSyncIndicator = 1,			       
						   DestinationOfficeNumber  = @CWWDestinationWPOfficeNumber  ,
						   SourceOfficeNumber       = @CWWSourceWPOfficeNumber	   
					 Where ID = 1
			   END
			  ELSE
			     BEGIN
			
				  IF (@T0018OfficeNumber  <> @CWWDestinationWPOfficeNumber )
				  BEGIN
			       PRINT 'TRANSFER HAPPEND IN CWW 2'
				    IF (@T0018OfficeNumber  = @WWPDestinationWPOfficeNumber )
					BEGIN
					PRINT 'THERE IS TRNASFER HAPPEND SEPERATLY IN WWP AND CWW , BUT WWP IS PICKED'
					update @TempT0429TransferInfo
					   set OfficeOutOfSyncIndicator = 1,			       
						   DestinationOfficeNumber  = @WWPDestinationWPOfficeNumber  ,
						   SourceOfficeNumber       = @WWPSourceWPOfficeNumber	   
					 Where ID = 1
					END
					ELSE
					BEGIN
					 update @TempT0429TransferInfo
					   set OfficeOutOfSyncIndicator = 1,			       
						   DestinationOfficeNumber  = @CWWDestinationWPOfficeNumber  ,
						   SourceOfficeNumber       = @CWWSourceWPOfficeNumber	   
					 Where ID = 1
					 END
			       END
				   ELSE
				   BEGIN

			       PRINT 'TRANSFER HAPPEND IN WWP'
					 update @TempT0429TransferInfo
					   set OfficeOutOfSyncIndicator = 1,			       
						   DestinationOfficeNumber  = @WWPDestinationWPOfficeNumber  ,
						   SourceOfficeNumber       = @WWPSourceWPOfficeNumber	   
					 Where ID = 1
					END
			     END
		 END
 
	END

--		  IF ((@T0018OfficeNumber) <> ( @CWWDestinationWPOfficeNumber))	
--		    --  
--		    BEGIN 
--			       PRINT 'SCENARIO 1: T0018 <> CWW DEST ' 
--			 IF (@T0018OfficeNumber  = @CWWSourceWPOfficeNumber )
--			   BEGIN
--			       PRINT 'TRANSFER HAPPEND IN CWW'
--					 update @TempT0429TransferInfo
--					   set OfficeOutOfSyncIndicator = 1,			       
--						   DestinationOfficeNumber  = @CWWDestinationWPOfficeNumber  ,
--						   SourceOfficeNumber       = @CWWSourceWPOfficeNumber	   
--					 Where ID = 1
--			   END
			    
--			   ELSE
--			   IF (@T0018OfficeNumber  <> @CWWSourceWPOfficeNumber )
--               BEGIN
			   
--			   END     
--		    END

--		  ELSE 
--	        BEGIN
--			 PRINT 'SCENARIO 1:  T0018 = CWW DEST' 
--	           --IF (@CWWDestinationWPOfficeNumber =  @WWPSourceWPOfficeNumber )

			       
--			    END
	
--END		

--------- 
	
		--IF ((select OfficeNumber from @TempT0018Info) =  (select CWWDestinationWPOfficeNumber from @TempT0429TransferInfo ))
		--               ----- This means Office Number between T0018 and T0429 is same. office transfer in CWW occured and check if office transfer in WPASS occured.
		-- Begin	 
		  
		--     print 'Scenario 0'
		  
		--   IF ((select OfficeNumber from @TempT0018Info) = (select WWPDestinationWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1 ))
		--               ----- This means Office Number between T0018 and WWP is same
		--		 Begin
		--			--- NO TRANSFER IN WPASS
		--			    print 'in sync for Scenario 0'
		--			Update @TempT0429TransferInfo
		--			   set OfficeOutOfSyncIndicator = 0,			       
		--				   DestinationOfficeNumber  = 0,
		--				   SourceOfficeNumber       = 0	   
		--			 Where ID = 1
		--	     END
		--    ELSE
		  
		--     Begin
		--             print 'out of sync for SCENARIO 0' 
  --               --- TRANSFER ONLY IN WPASS
		--		  Update @TempT0429TransferInfo
		--		  set OfficeOutOfSyncIndicator = 1,
		--		      DestinationOfficeNumber  = @WWPDestinationWPOfficeNumber  ,
		--			  SourceOfficeNumber       = @WWPSourceWPOfficeNumber	   
		--		  Where ID = 1
		--     END

		--  End
		--  -----  END
		  
		-- ELSE
		   
  --        ----- This means Office Number between T0018 and T0429 is NOT same.  
         

		--  BEGIN
		 
		--  IF((select CWWDestinationWPOfficeNumber from @TempT0429TransferInfo ) = (select CWWSourceWPOfficeNumber from @TempT0429TransferInfo))
		   
		--   ---- SCENARIO 1  ; No records in CWW Transfer 

		--   Begin 

		    
		--	PRINT 'OFFICE TRANSFER IN CWW NOT OCCURED'

		--    IF ((select OfficeNumber from @TempT0018Info) <> (select WWPSourceWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1 ))

		--     Begin

		--	   PRINT ' THAT MEANS OFFICE TRANSFER OCCURED IN WPASS AND NOT IN CWW'
		--	    --- TRANSFER IN WPASS
		--	    update @TempT0429TransferInfo
		--           set OfficeOutOfSyncIndicator = 1,			       
		--		       DestinationOfficeNumber  = @WWPDestinationWPOfficeNumber  ,
		--			   SourceOfficeNumber       = @WWPSourceWPOfficeNumber	   
		--         Where ID = 1
		
		--      END
		--     ELSE
		     
		--     Begin
		--	    IF ((select WWPSourceWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1) = (select WWPDestinationWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1 ))
				 
		--		 Begin
		--             print 'no transfer at all in any place' 
  --               --- TRANSFER ONLY IN WPASS
		--		  update @TempT0429TransferInfo
		--		  set OfficeOutOfSyncIndicator = 0,
		--		      DestinationOfficeNumber  = 0  ,
		--			  SourceOfficeNumber       = 0  
		--		  Where ID = 1
		--		  End
		--     END
		--	END
		-- ELSE
	      
		--  BEGIN
		--    print 'xnxnxnxnxnxnxnnxx'
  --          IF((select CWWDestinationWPOfficeNumber from @TempT0429TransferInfo ) =  (select OfficeNumber from @TempT0018Info))
		--	BEGIN
		--	   IF ((select OfficeNumber from @TempT0018Info) = (select WWPDestinationWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1 ))
		--	   BEGIN
		--	    --- NO TRANSFER IN WPASS.. recheck
		--	    update @TempT0429TransferInfo
		--           set OfficeOutOfSyncIndicator = 0,			       
		--		       DestinationOfficeNumber  = @CWWDestinationWPOfficeNumber  ,
		--			   SourceOfficeNumber       = @CWWSourceWPOfficeNumber	   
		--         Where ID = 1
		        
		--		print 'scenario nx1'
		--	--	select * from @TempT0429TransferInfo

		--      END 
		--      ELSE
		  
		--     Begin
		--             print 'out of sync SCNARIO 1' 
  --               --- TRANSFER ONLY IN WPASS
		--		  update @TempT0429TransferInfo
		--		  set OfficeOutOfSyncIndicator = 1,
		--		      DestinationOfficeNumber  = @WWPDestinationWPOfficeNumber  ,
		--			  SourceOfficeNumber       = @WWPSourceWPOfficeNumber	   
		--		  Where ID = 1

		--		  print 'scenario nx2'
		----		select * from @TempT0429TransferInfo
		--     END
		--	END
		--	ELSE
		--	BEGIN
		--	 IF ((select OfficeNumber from @TempT0018Info) <> (select WWPDestinationWPOfficeNumber  from @TempOfficeTransferInfo where ID = 1 ))
		--	   BEGIN
		--	    --- NO TRANSFER IN WPASS
		--	    update @TempT0429TransferInfo
		--           set OfficeOutOfSyncIndicator = 1,			       
		--		       DestinationOfficeNumber  = @CWWDestinationWPOfficeNumber ,
		--			   SourceOfficeNumber       = @CWWSourceWPOfficeNumber	   
		--         Where ID = 1
		--		 print 'scenario nx3'
		--	--	select * from @TempT0429TransferInfo
		
		--      END
		--     ELSE
		  
		--     Begin
		--             print 'out of sync SCNARIO 1' 
  --               --- TRANSFER ONLY IN WPASS
		--		  update @TempT0429TransferInfo
		--		  set OfficeOutOfSyncIndicator = 1,
		--		      DestinationOfficeNumber  = @WWPDestinationWPOfficeNumber  ,
		--			  SourceOfficeNumber       = @WWPSourceWPOfficeNumber	   
		--		  Where ID = 1

		--		  print 'scenario nx4'
		----		select * from @TempT0429TransferInfo
		--     END
		--	END
			
		--  END
		-- END 
	--	End
	update @TempT0429TransferInfo
				  set PinNumber = @PinNumber
				    Where ID = 1
 	--	select * from @TempT0429TransferInfo

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------- CASE INFO , ADDRESS INFO
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempCaseInfo TABLE (
		CaseNumber [DECIMAL](10, 0)
		,AddressLine1 [VARCHAR](200)
		,AddressLine2 [VARCHAR](100)
		,City [VARCHAR](50)
		,STATE [VARCHAR](50)
		,ZIPCode [VARCHAR](10)
		,PhoneNumber [VARCHAR](10)
		)

	SET @Statement2 = 'select CaseNumber,
						  AddressLine1,
						  AddressLine2,
						  City, 
						  State, 
						  ZIPCode,
						  PhoneNumber		 
		             FROM OPENQUERY(' + @LSDBName + ', ''
						SELECT  B.CASE_NUM      as CaseNumber,
						        RTRIM(ST_NUMBER_ADR) ||'''' '''' ||
								RTRIM(B.UNIT_ADR)||'''' '''' || 
                                CASE B.DIRECTION_ADR WHEN ''''W'''' THEN ''''WEST''''          
													 WHEN ''''S'''' THEN ''''SOUTH''''                          
												   	 WHEN ''''E'''' THEN ''''EAST''''                           
												 	 WHEN ''''N'''' THEN ''''NORTH''''          
													 WHEN '''' '''' THEN '''' '''' END||                             
                               '''' '''' || rtrim(B.ST_RURAL_ADR) ||'''' ''''||
                               LTRIM(RTRIM(B.SUFFIX_ADR)) ||  
							   RTRIM(B.QUADRANT_ADR) ||'''' ''''||
                               RTRIM(B.APARTMENT_ADR) as AddressLine1,
                               B.LINE_2_ADR           as AddressLine2,
                               B.CITY_ADR             as City, 
							   B.STATE_ADR            as State, 
							   SUBSTR(B.ZIP_ADR,1,5)  as ZIPCode ,
							   B.PHONE_NUM   as PhoneNumber  
						FROM 
							 ' + @DB2DBName + '.T0001_CASE AS B     
						WHERE B.CASE_NUM  = ' + @TempCaseNumber + '                      
						                                                                                                                                                   
						WITH UR ; '')                                  

  '

	PRINT @Statement2

	INSERT @TempCaseInfo
	EXEC (@Statement2)


---	select * from @TempCaseInfo 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------- ALTERNATE CASE_INFO
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempAlternateCaseInfo TABLE (
		CaseNumber [DECIMAL](10, 0)
		,AlternateAddressLine1 [VARCHAR](200)
		,AlternateAddressLine2 [VARCHAR](100)
		,AlternateCity [VARCHAR](50)
		,AlternateState [VARCHAR](50)
		,AlternateZIPCode [VARCHAR](10)
		,AlternatePhoneNumber [VARCHAR](10)
		)

IF @TempCaseNumber <> CAST(0 AS DECIMAL)

Begin

	SET @Statement3 = 'select CaseNumber,
						  AlternateAddressLine1,
						  AlternateAddressLine2,
						  AlternateCity, 
						  AlternateState, 
						  AlternateZIPCode,
						  AlternatePhoneNumber	 
					 FROM OPENQUERY(' + @LSDBName + ', ''
					SELECT   E.CASE_NUM as CaseNumber, 
					         RTRIM(ST_NUMBER_ADR) ||'''' '''' ||  
			    			 RTRIM(E.UNIT_ADR)|| 
                             CASE E.DIRECTION_ADR WHEN ''''W'''' THEN ''''WEST ''''          
                                                  WHEN ''''S'''' THEN ''''SOUTH ''''                          
                                                  WHEN ''''E'''' THEN ''''EAST ''''                           
                                                  WHEN ''''N'''' THEN ''''NORTH ''''          
                                                  WHEN '''' '''' THEN '''' '''' END||                             
                                 rtrim(E.ST_RURAL_ADR) ||'''' ''''||
                                 LTRIM(RTRIM(E.SUFFIX_ADR)) ||  
							     RTRIM(E.QUADRANT_ADR) ||'''' ''''||
                                 RTRIM(E.APARTMENT_ADR) AS AlternateAddressLine1,
                             E.LINE_2_ADR as AlternateAddressLine2,
                             E.CITY_ADR as AlternateCity, 
							 E.STATE_ADR as AlternateState, 
							 SUBSTR(E.ZIP_ADR,1,5) AS AlternateZIPCode ,
							 E.PHONE_NUM as AlternatePhoneNumber 
                        FROM ' + @DB2DBName + '.T0103_CS_ADDRESS  E
					   WHERE E.CASE_NUM = ' + @TempCaseNumber + '                               
						 AND E.DELETE_REASON_CD = '''' ''''
						 AND E.HISTORY_CD = 0       
						 AND E.HISTORY_SEQ_NUM = ( SELECT MAX(EE.HISTORY_SEQ_NUM)   
													 FROM  ' + @DB2DBName + '.T0103_CS_ADDRESS EE
													WHERE EE.CASE_NUM = E.CASE_NUM
													  AND EE.HISTORY_CD = E.HISTORY_CD
												 )                                                                                                                                                     
					   WITH UR ; '')                                  

  '

	PRINT @Statement3

	INSERT @TempAlternateCaseInfo
	EXEC (@Statement3)
	
  END

	IF NOT EXISTS (
			SELECT 1
			FROM @TempAlternateCaseInfo
			)
	BEGIN
		INSERT @TempAlternateCaseInfo (CaseNumber)
		VALUES (@TempCaseNumber)
	END
	ELSE
	BEGIN
		PRINT 1
	END

--	  select * from @TempAlternateCaseInfo
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------  Living Arrangment
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempLivingArrangement TABLE (
		PinNumber [DECIMAL](10, 0)
		,LivingArrangement VARCHAR(200)
		)

	SET @Statement4 = 'select PinNumber,
                      LivingArrangement
 FROM OPENQUERY(' + @LSDBName + 
		', ''
 SELECT  E.PIN_NUM as PinNumber,
          CASE E.LIVING_ARR_TYPE_CD WHEN ''''01''''  THEN ''''INDEPENDENT (HOME/APT/TRLR)''''
	WHEN ''''02''''  THEN ''''ADULT FOSTER CARE'''' 
	WHEN ''''03''''  THEN ''''INTERMEDIATE CARE FACILITY ''''
	WHEN ''''04''''  THEN ''''STATE MENTAL HOSPITAL''''
	WHEN ''''05''''  THEN ''''INPATIENT PSYCHIATRIC FAC'''' 
	WHEN ''''06''''  THEN ''''INST FOR MENTAL DISEAS'''' 
	WHEN ''''07''''  THEN ''''ADULT CONGR LIV FAC (ACLF)'''' 
	WHEN ''''08''''  THEN ''''NURSING FACILITY''''
	WHEN ''''09''''  THEN ''''BATTERED WOMEN SHELTER''''
	WHEN ''''10''''  THEN ''''HOMELESS''''
	WHEN ''''11''''  THEN ''''DRUG ALCOHOL TREAT CENTER''''
	WHEN ''''12''''  THEN ''''LIVE IN ATTENDANT'''' 
	WHEN ''''13''''  THEN ''''MILITARY''''
	WHEN ''''14''''  THEN ''''HALF WAY HOUSE'''' 
	WHEN ''''15''''  THEN ''''OUT OF HOME'''' 
	WHEN ''''16''''  THEN ''''HOSPITAL - SHORT TERM'''' 
	WHEN ''''17''''  THEN ''''VACATION, NOT LIV IN WI''''  
	WHEN ''''18''''  THEN ''''SPONSOR NOT IN THE HOME'''' 
	WHEN ''''19''''  THEN ''''202/236 HOUSING''''  
	WHEN ''''20''''  THEN ''''HOSPITAL - LONG TERM'''' 
	WHEN ''''21''''  THEN ''''UNBORN BABY''''  
	WHEN ''''22''''  THEN ''''HOSPICE CARE IN INSTITUTIONS''''  
	WHEN ''''23''''  THEN ''''COMM BASED RES FAC(CBRF)'''' 
	WHEN ''''24''''  THEN ''''ADULT FAMILY HOME''''  
	WHEN ''''25''''  THEN ''''RES CAR APT COM (RCAC)'''' 
	WHEN ''''26''''  THEN ''''INCARCERATED'''' 
	END as LivingArrangement                                                          
    FROM ' + @DB2DBName + '.T0250_IN_LIV_ARR  E
    WHERE E.PIN_NUM = ' + @PinNumber + '                               
      AND E.HISTORY_CD = 0       
	  AND E.HISTORY_SEQ_NUM = ( SELECT MAX(EE.HISTORY_SEQ_NUM)   
	                                 FROM  ' + @DB2DBName + '.T0250_IN_LIV_ARR EE
									  WHERE EE.PIN_NUM = E.PIN_NUM
									    AND EE.HISTORY_CD = E.HISTORY_CD
							 )                                                                                                                                                     
   WITH UR ; '')                                  

  '

	PRINT @Statement4

	INSERT @TempLivingArrangement
	EXEC (@Statement4)

	IF NOT EXISTS (
			SELECT 1
			FROM @TempLivingArrangement
			)
	BEGIN
		PRINT 'inside loop'
		PRINT @TempPinNumber

		INSERT @TempLivingArrangement (PinNumber)
		VALUES (@TempPinNumber)
	END
	ELSE
	BEGIN
		PRINT 'inside loop2'
	END

	---select * from @TempLivingArrangement
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------- W2 ELIGIBILITY
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @TempAgLevelInformation TABLE (
		CaseNumber [DECIMAL](10, 0)
		,ProgramCode [VARCHAR](3)
		,SubProgramCode [VARCHAR](1)
		,AGStatusCode [VARCHAR](1)
		,AGSequenceNumber [SMALLINT]
		,EligibilityBeginDate [DATE]
		,EligibilityEndDate [DATE]
		,ReviewDueDate [DATE]
		,PaymentBeginDate [DATE]
		,PaymentEndDate [DATE]
		,AGFailureReasonCode1 [VARCHAR](65)
		,AGFailureReasonCode2 [VARCHAR](65)
		,AGFailureReasonCode3 [VARCHAR](65)
		,FSAgOpen [Bit]
		,MAAgOpen [Bit]
		,FPWAgOpen [Bit]
		,CCAgOpen [Bit]
		,CTSAgOpen [Bit]
		,WWAgOpen [Bit]
		)

	SET @Statement5e = 'select CaseNumber,
                          ProgramCode ,
					      SubProgramCode,
						  AGStatusCode,
						  AGSequenceNumber,
						  EligibilityBeginDate,
						  EligibilityEndDate,
						  ReviewDueDate,
						  PaymentBeginDate,
						  PaymentEndDate			  				  
 FROM OPENQUERY(' + @LSDBName + ', ''
SELECT  C.CASE_NUM   as CaseNumber,
        C.PROGRAM_CD  as ProgramCode,
        C.SUBPROGRAM_CD as SubProgramCode,
        C.AG_STS_CD  as AGStatusCode,
        C.AG_SEQ_NUM as AGSequenceNumber,
        C.ELIGIBILITY_BEG_DT as EligibilityBeginDate,
        C.ELIGIBILITY_END_DT as EligibilityEndDate,
        C.ESTM_ELIG_END_DT  as ReviewDueDate,
        C.PAYMENT_BEGIN_DT AS PaymentBeginDate,
 	    C.PAYMENT_END_DT AS PaymentEndDate 
	
FROM ' + @DB2DBName + '.T0026_AG_ELIG AS C 
     WHERE C.CASE_NUM = ' + @TempCaseNumber + '
         AND C.PROGRAM_CD IN ( ''''WW'''')   
         AND C.SUBPROGRAM_CD NOT IN (''''X'''',''''Z'''')       
         AND C.CURRENT_ELIG_IND   in  (''''1'''',''''0'''')              
		 AND C.PAYMENT_BEGIN_DT between ''''' + @NewDate + ''''' and ''''' + @EndDate + '''''
		 AND C.PAYMENT_END_DT	>= ''''' + @EndDate + '''''   
		 AND C.AG_STS_CD = ''''P''''       
		 AND C.ELIG_RSLT_CD = ''''P'''' 
  	     AND C.PAYMENT_BEGIN_DT   <= C.PAYMENT_END_DT												
                   
  WITH UR ;   '')      '

	PRINT @Statement5e

	INSERT @TempAgLevelInformation (
		CaseNumber
		,ProgramCode
		,SubProgramCode
		,AGStatusCode
		,AGSequenceNumber
		,EligibilityBeginDate
		,EligibilityEndDate
		,ReviewDueDate
		,PaymentBeginDate
		,PaymentEndDate
		)
	EXEC (@Statement5e)


		IF  EXISTS (
			SELECT 1
			FROM @TempAgLevelInformation
			)
	BEGIN
		PRINT 'inside loop FOR PENDING STATUS. IF PENDING DO NOT READ FURTHER'
	 
	END
	ELSE
	BEGIN
		PRINT 'inside loop 2'
	 
		    
	

	

	SET @Statement5 = 'select CaseNumber,
                          ProgramCode ,
					      SubProgramCode,
						  AGStatusCode,
						  AGSequenceNumber,
						  EligibilityBeginDate,
						  EligibilityEndDate,
						  ReviewDueDate,
						  PaymentBeginDate,
						  PaymentEndDate,
						  AGFailureReasonCode1,
						  AGFailureReasonCode2,
						  AGFailureReasonCode3					  
 FROM OPENQUERY(' + @LSDBName + ', ''
SELECT  C.CASE_NUM   as CaseNumber,
        C.PROGRAM_CD  as ProgramCode,
        C.SUBPROGRAM_CD as SubProgramCode,
        C.AG_STS_CD  as AGStatusCode,
        C.AG_SEQ_NUM as AGSequenceNumber,
        C.ELIGIBILITY_BEG_DT as EligibilityBeginDate,
        C.ELIGIBILITY_END_DT as EligibilityEndDate,
        C.ESTM_ELIG_END_DT  as ReviewDueDate,
        C.PAYMENT_BEGIN_DT AS PaymentBeginDate,
 	    C.PAYMENT_END_DT AS PaymentEndDate,
 	    C.AG_STS_RSN_1_CD||''''-'''' ||( SELECT A.SHORT_DES_TXT  FROM  '+ @DB2DBName +'.T0261_ELIG_RSN_TXT  A                                                                                          
											WHERE A.RSN_CD    = C.AG_STS_RSN_1_CD 
											  AND A.LANG_CD  =  ''''E''''                                                
											  AND A.TXT_EFF_END_DT = ''''9999-12-31'''')   AS AGFailureReasonCode1,
 	    C.AG_STS_RSN_2_CD||''''-''''  ||( SELECT  AA.SHORT_DES_TXT  FROM  '+ @DB2DBName +'.T0261_ELIG_RSN_TXT  AA                                                                                          
											WHERE AA.RSN_CD    = C.AG_STS_RSN_2_CD 
											  AND AA.LANG_CD  =  ''''E''''                                                
											  AND AA.TXT_EFF_END_DT = ''''9999-12-31'''')  AS AGFailureReasonCode2,
 	    C.AG_STS_RSN_3_CD||''''-''''  ||( SELECT  AAA.SHORT_DES_TXT  FROM  '+ @DB2DBName +'.T0261_ELIG_RSN_TXT  AAA                                                                                          
											WHERE AAA.RSN_CD    = C.AG_STS_RSN_3_CD 
											  AND AAA.LANG_CD  =  ''''E''''                                                
											  AND AAA.TXT_EFF_END_DT = ''''9999-12-31'''') AS AGFailureReasonCode3
FROM ' + @DB2DBName + '.T0026_AG_ELIG AS C 
     WHERE C.CASE_NUM = ' + @TempCaseNumber + '
         AND C.PROGRAM_CD IN ( ''''WW'''',''''FS'''',''''MAG'''',''''CTS'''',''''FPW'''',''''CC'''')   
         AND C.SUBPROGRAM_CD NOT IN (''''X'''',''''Z'''')       
         AND C.CURRENT_ELIG_IND   in  (''''1'''',''''9'''')              
		 AND C.PAYMENT_BEGIN_DT between ''''' + @NewDate + ''''' and ''''' + @EndDate + '''''
		 AND C.PAYMENT_END_DT	>= ''''' + @EndDate + '''''            
  	     AND C.PAYMENT_BEGIN_DT   <= C.PAYMENT_END_DT												
	     AND C.CAG_ELIG_SEQ_NUM   = ( 
                            SELECT MAX(CC.CAG_ELIG_SEQ_NUM)
                               FROM ' + @DB2DBName + 
		'.T0026_AG_ELIG AS CC
                              WHERE CC.CASE_NUM         = C.CASE_NUM
                                AND CC.PROGRAM_CD       = C.PROGRAM_CD
                                AND CC.SUBPROGRAM_CD    = C.SUBPROGRAM_CD
                                AND CC.AG_SEQ_NUM       = C.AG_SEQ_NUM
                                AND CC.CURRENT_ELIG_IND = C.CURRENT_ELIG_IND
                                AND CC.PAYMENT_BEGIN_DT   <= CC.PAYMENT_END_DT
                                AND CC.PAYMENT_BEGIN_DT = C.PAYMENT_BEGIN_DT
                                AND CC.PAYMENT_END_DT = C.PAYMENT_END_DT
                                )
             
                         
  WITH UR ;   '')      '

	PRINT @Statement5

	INSERT @TempAgLevelInformation (
		CaseNumber
		,ProgramCode
		,SubProgramCode
		,AGStatusCode
		,AGSequenceNumber
		,EligibilityBeginDate
		,EligibilityEndDate
		,ReviewDueDate
		,PaymentBeginDate
		,PaymentEndDate
		,AGFailureReasonCode1
		,AGFailureReasonCode2
		,AGFailureReasonCode3
		)
	EXEC (@Statement5)

--- AS OF 11/14/2017 - BUSINESS REQUIREMENT SAYS THAT IF NO W2 IS OPEN FOR THAT MONTH, THEN THEY DO NOT WANT TO SEE WHETHER THEY ARE OPEN FOR OTHER AG'S OR NOT.
--- NEED TO REVISIT FOR CO-ENROLLEMENT SITUATION

	IF NOT EXISTS (
			SELECT 1
			FROM @TempAgLevelInformation
			)
	BEGIN
		PRINT 'inside loop 1'
		PRINT @TempCaseNumber

		INSERT @TempAgLevelInformation (
			CaseNumber
			,ProgramCode
			)
		VALUES (
			@TempCaseNumber
			,'WW'
			)
	END
	ELSE
	BEGIN
		PRINT 'inside loop 2'
		--- This may be WW or it could be FS or it could be MA only 
		-- Need to handle if WW may not be open or be the first record.
		--IF EXISTS ( SELECT 1 FROM @TempAgLevelInformation WHERE ProgramCode = 'WW')
		--BEGIN
		--UPDATE @TempAgLevelInformation
		--   SET WWAgOpen = '1'
		--WHERE ProgramCode = 'WW'
		--END
		--IF NOT EXISTS ( SELECT 1 FROM @TempAgLevelInformation WHERE ProgramCode = 'WW' AND WWAgOpen = 1)
		--BEGIN
		--     IF EXISTS ( SELECT 1 FROM @TempAgLevelInformation WHERE ProgramCode = 'FS' )
		--	   BEGIN
		--          UPDATE @TempAgLevelInformation
		--             SET FSAgOpen = '1'
		--           WHERE ProgramCode = 'WW'
	 --           END
		--END

	--END
		    
	END
	END

	IF EXISTS (
			SELECT 1
			FROM @TempAgLevelInformation
			WHERE ProgramCode = 'FS'
			  and AGStatusCode = 'O'
			)
	BEGIN
		UPDATE @TempAgLevelInformation
		SET FSAgOpen = '1'
		WHERE ProgramCode = 'WW'
	END

	IF EXISTS (
			SELECT 1
			FROM @TempAgLevelInformation
			WHERE ProgramCode = 'MAG'
			and AGStatusCode = 'O'
			)
	BEGIN
		UPDATE @TempAgLevelInformation
		SET MAAgOpen = '1'
		WHERE ProgramCode = 'WW'
	END

	IF EXISTS (
			SELECT 1
			FROM @TempAgLevelInformation
			WHERE ProgramCode = 'FPW'
			and AGStatusCode = 'O'
			)
	BEGIN
		UPDATE @TempAgLevelInformation
		SET FPWAgOpen = '1'
		WHERE ProgramCode = 'WW'
	END

	IF EXISTS (
			SELECT 1
			FROM @TempAgLevelInformation
			WHERE ProgramCode = 'CC'
			  and AGStatusCode = 'O'
			)
	BEGIN
		UPDATE @TempAgLevelInformation
		SET CCAgOpen = '1'
		WHERE ProgramCode = 'WW'
	END

	---select * from @TempAgLevelInformation


	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------- OTHER INDVIDUAL INFORMATION
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempIndvLevelInformation TABLE (
		CaseNumber [DECIMAL](10, 0)
		,PinNumber [DECIMAL](10, 0)
		,OtherPersonPinNumber [DECIMAL](10, 0)
		,OtherPersonFirstName [VARCHAR](50)
		,OtherPersonLastName [VARCHAR](50)
		,OtherPersonDOB [DATE]
		,Relationship [VARCHAR](50)
		,OtherPersonAge [Integer]
		,Ids [Integer]
		,OtherPersonPinNumber2 [DECIMAL](10, 0)
		,OtherPersonFirstName2 [VARCHAR](50)
		,OtherPersonLastName2 [VARCHAR](50)
		,OtherPersonDOB2 [DATE]
		,Relationship2 [VARCHAR](50)
		,OtherPersonAge2 [Integer]
		,OtherPersonPinNumber3 [DECIMAL](10, 0)
		,OtherPersonFirstName3 [VARCHAR](50)
		,OtherPersonLastName3 [VARCHAR](50)
		,OtherPersonDOB3 [DATE]
		,Relationship3 [VARCHAR](50)
		,OtherPersonAge3 [Integer]
		,OtherPersonPinNumber4 [DECIMAL](10, 0)
		,OtherPersonFirstName4 [VARCHAR](50)
		,OtherPersonLastName4 [VARCHAR](50)
		,OtherPersonDOB4 [DATE]
		,Relationship4 [VARCHAR](50)
		,OtherPersonAge4 [Integer]
		,OtherPersonPinNumber5 [DECIMAL](10, 0)
		,OtherPersonFirstName5 [VARCHAR](50)
		,OtherPersonLastName5 [VARCHAR](50)
		,OtherPersonDOB5 [DATE]
		,Relationship5 [VARCHAR](50)
		,OtherPersonAge5 [Integer]
		,OtherPersonPinNumber6 [DECIMAL](10, 0)
		,OtherPersonFirstName6 [VARCHAR](50)
		,OtherPersonLastName6 [VARCHAR](50)
		,OtherPersonDOB6 [DATE]
		,Relationship6 [VARCHAR](50)
		,OtherPersonAge6 [Integer]
		,OtherPersonPinNumber7 [DECIMAL](10, 0)
		,OtherPersonFirstName7 [VARCHAR](50)
		,OtherPersonLastName7 [VARCHAR](50)
		,OtherPersonDOB7 [DATE]
		,Relationship7 [VARCHAR](50)
		,OtherPersonAge7 [Integer]
		,MoreThanSixIndv bit
		)

	SET @Statement6 = 'select CaseNumber,
                          PinNumber ,
					      OtherPersonPinNumber,
  						  OtherPersonFirstName,
						  OtherPersonLastName,
						  OtherPersonDOB,
						  Relationship,
						  OtherPersonAge,
						  Ids
 FROM OPENQUERY(' + @LSDBName + ', ''SELECT A.CASE_NUM  as CaseNumber,
                                        A.REFERENCE_PIN_NUM as PinNumber,
                                        A.SOURCE_PIN_NUM as OtherPersonPinNumber, 
                                        B.FIRST_NAM as OtherPersonFirstName, 
										B.LAST_NAM as OtherPersonLastName, 
										B.DOB_DT as OtherPersonDOB, 
										CASE A.REL_CD WHEN ''''SON'''' THEN ''''SON''''                          
                                                      WHEN ''''DAU'''' THEN ''''DAUGHTER''''                     
                                                      WHEN ''''STD'''' THEN ''''STEP-DAUGHTER''''                
                                                      WHEN ''''STS'''' THEN ''''STEP-SON'''' 
													  WHEN ''''FRND'''' THEN ''''FRIEND''''
													  WHEN ''''HUS'''' THEN ''''HUSBAND''''
													  WHEN ''''WIF'''' THEN ''''WIFE''''
													  WHEN ''''MTR'''' THEN ''''MOTHER''''
													  WHEN ''''FTR'''' THEN ''''LEGAL/ADJ FATHER''''
													  WHEN ''''NOT'''' THEN ''''NOT RELATED''''
													  WHEN ''''NQR'''' THEN ''''NON QUALIFIED REL''''
													  WHEN ''''OQR'''' THEN ''''OTHER QUALIFIED REL''''
                                                END AS Relationship                                        
                                 ,YEAR(DATE(CURRENT DATE) - DATE(B.DOB_DT)) as OtherPersonAge    
								 ,ROW_NUMBER () OVER(ORDER BY REFERENCE_PIN_NUM) as Ids
                    FROM 
                        ' + @DB2DBName + '.T0116_CS_IN_HH_REL AS A ,
                        ' + @DB2DBName + '.T0011_INDIVIDUAL B
                 WHERE A.CASE_NUM           = ' + @TempCaseNumber + '
                   AND A.REFERENCE_PIN_NUM     =  ' + @PinNumber + '          
                   AND A.HISTORY_CD         =  0
                   AND A.DELETE_REASON_CD   = '''' ''''
                   AND A.SOURCE_PIN_NUM  IN ( SELECT C.PIN_NUM 
                                                  FROM  ' + @DB2DBName + '.T0265_AG_IN_ELIG AS C
                                                 WHERE C.CASE_NUM  = A.CASE_NUM
                                                   AND C.PROGRAM_CD        = ''''WW''''                     
                                                   AND C.SUBPROGRAM_CD     NOT IN  (''''X'''',''''Z'''')      
                                                   AND C.PART_STS_CD   IN (''''EA'''',''''IA'''',''''EC'''',''''IC'''')               
                                                   AND C.CURRENT_ELIG_IND  in (''''1'''',''''9'''')       
                                                   AND C.PAYMENT_BEGIN_DT <= C.PAYMENT_END_DT
                                                   AND C.PAYMENT_BEGIN_DT between ''''' + @NewDate + ''''' and ''''' + @EndDate + '''''
                                                   AND C.PAYMENT_END_DT >= ''''' + @EndDate + '''''     
                                                ) 
                    AND B.PIN_NUM  = A.SOURCE_PIN_NUM
								  WITH UR ;   '')      '

	PRINT @Statement6

	INSERT @TempIndvLevelInformation (
		CaseNumber
		,PinNumber
		,OtherPersonPinNumber
		,OtherPersonFirstName
		,OtherPersonLastName
		,OtherPersonDOB
		,Relationship
		,OtherPersonAge
		,Ids
		)
	EXEC (@Statement6)


	--select * from @TempIndvLevelInformation

	IF NOT EXISTS (
			SELECT 1
			FROM @TempIndvLevelInformation
			)
	BEGIN
		PRINT 'inside loop 1'
		PRINT @TempCaseNumber

		INSERT @TempIndvLevelInformation (
			CaseNumber
			,PinNumber
			,Ids
			)
		VALUES (
			@TempCaseNumber
			,@PinNumber
			,1
			)
	END
	ELSE
	BEGIN
		IF EXISTS (
				SELECT 1
				FROM @TempIndvLevelInformation
				WHERE Ids = 2
				)
		BEGIN
			UPDATE @TempIndvLevelInformation
			SET OtherPersonPinNumber2 = (select OtherPersonPinNumber from @TempIndvLevelInformation where Ids = 2)
				,OtherPersonFirstName2 = (select OtherPersonFirstName  from @TempIndvLevelInformation where Ids = 2)
				,OtherPersonLastName2 = (select OtherPersonLastName  from @TempIndvLevelInformation where Ids = 2)
				,OtherPersonDOB2 = (select OtherPersonDOB  from @TempIndvLevelInformation where Ids = 2)
				,Relationship2 = (select Relationship  from @TempIndvLevelInformation where Ids = 2)
				,OtherPersonAge2 = (select OtherPersonAge from @TempIndvLevelInformation where Ids = 2)
                ,MoreThanSixIndv = 0
			WHERE Ids = 1
		END

		IF EXISTS (
				SELECT 1
				FROM @TempIndvLevelInformation
				WHERE Ids = 3
				)
		BEGIN
			UPDATE @TempIndvLevelInformation
			SET OtherPersonPinNumber3 = (select OtherPersonPinNumber from @TempIndvLevelInformation where Ids = 3 )
				,OtherPersonFirstName3 = (select OtherPersonFirstName from @TempIndvLevelInformation where Ids = 3 )
				,OtherPersonLastName3 = (select OtherPersonLastName from @TempIndvLevelInformation where Ids = 3 )
				,OtherPersonDOB3 = (select OtherPersonDOB from @TempIndvLevelInformation where Ids = 3 )
				,Relationship3 = (select Relationship from @TempIndvLevelInformation where Ids = 3 )
				,OtherPersonAge3 = (select OtherPersonAge from @TempIndvLevelInformation where Ids = 3 )
	            ,MoreThanSixIndv = 0
			WHERE Ids = 1
		END
		IF EXISTS (
				SELECT 1
				FROM @TempIndvLevelInformation
				WHERE Ids = 4
				)
		BEGIN
			UPDATE @TempIndvLevelInformation
			SET OtherPersonPinNumber4 = (select  OtherPersonPinNumber from @TempIndvLevelInformation where Ids = 4 )
				,OtherPersonFirstName4 = (select  OtherPersonFirstName from @TempIndvLevelInformation where Ids = 4 )
				,OtherPersonLastName4 = (select  OtherPersonLastName from @TempIndvLevelInformation where Ids = 4 )
				,OtherPersonDOB4 = (select  OtherPersonDOB from @TempIndvLevelInformation where Ids = 4 )
				,Relationship4 = (select Relationship from @TempIndvLevelInformation where Ids = 4 )
				,OtherPersonAge4 = (select  OtherPersonAge from @TempIndvLevelInformation where Ids = 4 )
                ,MoreThanSixIndv = 0
			WHERE Ids = 1
		END
		IF EXISTS (
				SELECT 1
				FROM @TempIndvLevelInformation
				WHERE Ids = 5
				)
		BEGIN
			UPDATE @TempIndvLevelInformation
			SET OtherPersonPinNumber5 = (select  OtherPersonPinNumber from @TempIndvLevelInformation where Ids = 5 )
				,OtherPersonFirstName5 = (select OtherPersonFirstName from @TempIndvLevelInformation where Ids = 5 )
				,OtherPersonLastName5 = (select OtherPersonLastName from @TempIndvLevelInformation where Ids = 5 )
				,OtherPersonDOB5 = (select OtherPersonDOB from @TempIndvLevelInformation where Ids = 5 )
				,Relationship5 = (select Relationship from @TempIndvLevelInformation where Ids = 5 )
				,OtherPersonAge5 = (select  OtherPersonAge from @TempIndvLevelInformation where Ids = 5 )
		        ,MoreThanSixIndv = 0
			WHERE Ids = 1
		END
				IF EXISTS (
				SELECT 1
				FROM @TempIndvLevelInformation
				WHERE Ids = 6
				)
		BEGIN
			UPDATE @TempIndvLevelInformation
			SET OtherPersonPinNumber6 = (select OtherPersonPinNumber from @TempIndvLevelInformation where Ids = 6 )
				,OtherPersonFirstName6 = (select  OtherPersonFirstName from @TempIndvLevelInformation where Ids = 6 )
				,OtherPersonLastName6 =  (select OtherPersonLastName from @TempIndvLevelInformation where Ids = 6 )
				,OtherPersonDOB6 = (select OtherPersonDOB from @TempIndvLevelInformation where Ids = 6 )
				,Relationship6 =  (select Relationship from @TempIndvLevelInformation where Ids = 6 )
				,OtherPersonAge6 = (select  OtherPersonAge from @TempIndvLevelInformation where Ids = 6 )
				,MoreThanSixIndv = 0
			WHERE Ids = 1
		END
				IF EXISTS (
				SELECT 1
				FROM @TempIndvLevelInformation
				WHERE Ids = 7
				)
		BEGIN
			UPDATE @TempIndvLevelInformation
			SET OtherPersonPinNumber7 = (select OtherPersonPinNumber from @TempIndvLevelInformation where Ids = 7 )
				,OtherPersonFirstName7 = (select OtherPersonFirstName from @TempIndvLevelInformation where Ids = 7 )
				,OtherPersonLastName7 = (select OtherPersonLastName from @TempIndvLevelInformation where Ids = 7 )
				,OtherPersonDOB7 = (select OtherPersonDOB from @TempIndvLevelInformation where Ids = 7 )
				,Relationship7 = (select Relationship from @TempIndvLevelInformation where Ids = 7 )
				,OtherPersonAge7 = (select OtherPersonAge from @TempIndvLevelInformation where Ids = 7 )
				,MoreThanSixIndv = 1
			WHERE Ids = 1
		END
	END

	-- select * from @TempIndvLevelInformation
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------- PLACEMENT
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempPlacementInformation TABLE (
		CaseNumber [DECIMAL](10, 0)
		,PinNumber [DECIMAL](10, 0)
		,PlacementCode VARCHAR(03)
		,PlacementBeginDate DATE
		,PlacementEndDate DATE
		,EpisodeNumber INT
		,MFWorkerId VARCHAR(06)
		)

	SET @statement7 = 'select  CaseNumber ,
                           PinNumber ,
						   PlacementCode ,
						   PlacementBeginDate ,
						   PlacementEndDate ,
						   EpisodeNumber ,
						   MFWorkerId
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT 
    B.CASE_NUM          as CaseNumber ,
	B.PIN_NUM           as PinNumber,
	B.WI_WORKS_SLOT_CD  as PlacementCode,
	B.WW_SLOT_BEGIN_DT  as PlacementBeginDate,
	B.WW_SLOT_END_DT    as PlacementEndDate ,
	B.WI_WORKS_SEQ_NUM  as EpisodeNumber    ,
	B.FEP_ID            as MFWorkerId                            
   FROM  ' + @DB2DBName + '.T0478_CS_WI_WORKS AS B              
  WHERE B.CASE_NUM = ' + @TempCaseNumber + '
    AND B.PIN_NUM = ' + @PinNumber + '          
    AND B.HISTORY_CD       =  0     
    AND B.DELETE_REASON_CD = '''' ''''                      
    AND B.WI_WORKS_BEGIN_DT <> ''''9999-12-31''''           
    AND B.WI_WORKS_BEGIN_DT <= B.WI_WORKS_END_DT     
    AND B.WW_SLOT_BEGIN_DT <= B.WW_SLOT_END_DT   
	AND B.WW_SLOT_BEGIN_DT <= ''''' 
		+ @EndDate + '''''   
    AND B.WW_SLOT_END_DT >= ''''' + @NewDate + '''''    
    AND B.WI_WORKS_SLOT_CD <> '''' ''''                   
    AND B.WI_WORKS_SEQ_NUM  =                                
      ( SELECT MAX (BB.WI_WORKS_SEQ_NUM)   
	      FROM  ' + @DB2DBName + '.T0478_CS_WI_WORKS  BB    
         WHERE BB.CASE_NUM           =  B.CASE_NUM  
		   AND BB.PIN_NUM            =  B.PIN_NUM      
           AND BB.WI_WORKS_BEGIN_DT  =  B.WI_WORKS_BEGIN_DT
		   AND BB.WW_SLOT_BEGIN_DT   =  B.WW_SLOT_BEGIN_DT
           AND BB.HISTORY_CD         =  B.HISTORY_CD                
           AND BB.DELETE_REASON_CD   = B.DELETE_REASON_CD 
		   AND BB.WW_SLOT_BEGIN_DT   <= BB.WW_SLOT_END_DT    
		   AND BB.HISTORY_SEQ_NUM    = (SELECT MAX (BBB.HISTORY_SEQ_NUM)   
		    FROM  ' + @DB2DBName + 
		'.T0478_CS_WI_WORKS  BBB    
         WHERE BBB.CASE_NUM           =  BB.CASE_NUM        
		   AND BBB.PIN_NUM            =  BB.PIN_NUM  
           AND BBB.WI_WORKS_BEGIN_DT  =  BB.WI_WORKS_BEGIN_DT
		   AND BBB.WW_SLOT_BEGIN_DT   =  BB.WW_SLOT_BEGIN_DT
           AND BBB.HISTORY_CD         =  BB.HISTORY_CD                
           AND BBB.DELETE_REASON_CD   = BB.DELETE_REASON_CD
		   AND BBB.WW_SLOT_BEGIN_DT   <= BBB.WW_SLOT_END_DT    
		   )      
       )                                                 
                                                                                                                                   
   WITH UR ; '')                                  

  '

	INSERT @TempPlacementInformation (
		CaseNumber
		,PinNumber
		,PlacementCode
		,PlacementBeginDate
		,PlacementEndDate
		,EpisodeNumber
		,MFWorkerId
		)
	EXEC (@statement7)

	 
	IF NOT EXISTS (
			SELECT 1
			FROM @TempPlacementInformation
			)
	BEGIN
		PRINT 'inside loop placement'
		PRINT @TempCaseNumber

		INSERT @TempPlacementInformation (
			CaseNumber
			,PinNumber
			)
		VALUES (
			 @TempCaseNumber
			,@PinNumber
			)
	END
	ELSE
	BEGIN
		PRINT '2'
	END
---select * from @TempPlacementInformation
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------- FSET STATUS
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempFSETStatus TABLE (
		PinNumber [DECIMAL](10, 0)
		,FSETStatus [VARCHAR](15)
		)

	SET @statement8 = 'select  *
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT B.PIN_NUM as PARTICIPANT,case B.ENRL_STAT_CD when ''''E'''' then ''''Enrolled''''
                                                     when ''''R'''' then ''''Referred''''
  when ''''D'''' then ''''Disenrolled''''
  when ''''W'''' then ''''Withdrawn''''
  end as FSETStatus                     
  FROM  ' + @DB2DBName + '.T2394_FSET_REF B                                                                
 WHERE  B.PIN_NUM  = ' + @PinNumber + '                                                                 
   AND  B.HISTORY_CD =  0                                                                   
   AND  B.HISTORY_SEQ_NUM = ( SELECT MAX(BB.HISTORY_SEQ_NUM)        
                                FROM ' + @DB2DBName + 
		'.T2394_FSET_REF BB     
                               WHERE BB.PIN_NUM = B.PIN_NUM         
                                 AND BB.HISTORY_CD = B.HISTORY_CD   
					    		 AND BB.ENRL_STAT_CD = B.ENRL_STAT_CD
)                                        
                    WITH UR ; '')                                  

  '

	INSERT @TempFSETStatus (
		PinNumber
		,FSETStatus
		)
	EXEC (@statement8)

	IF NOT EXISTS (
			SELECT 1
			FROM @TempFSETStatus
			)
	BEGIN
		PRINT 'inside loop 1'

		INSERT @TempFSETStatus (PinNumber)
		VALUES (@TempPinNumber)
	END
	ELSE
	BEGIN
		PRINT 'inside loop 2'
	END

---select * from @TempFSETStatus
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- REFUGEE STATUS (PICK ONLY 04 ,05,11,17,19)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempRefugeeStatus TABLE (
		PinNumber [DECIMAL](10, 0)
		,RefugeeStatusCode [VARCHAR](02)
		,RefugeeEntryDate Date
		,CountryofOriginCode [VARCHAR](03)
		,CountryofOrigin [Varchar] (100)
		)

	SET @statement9 = 'select  *
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT B.PIN_NUM as PinNumber,
  B.ALIEN_STS_CD  as RefugeeStatusCode,   
  B.REFUGEE_ENTRY_DT as RefugeeEntryDate , 
  B.ORIGIN_COUNTRY_CD as CountryOfOriginCode                 
  FROM  ' + @DB2DBName + '.T0043_IN_ALIEN_REF B                                                                
 WHERE  B.PIN_NUM  = ' + @PinNumber + '                                                                 
   AND  B.HISTORY_CD =  0    
   AND  B.DELETE_REASON_CD = '''' ''''      
   AND  B.ALIEN_STS_CD IN (''''04'''',''''05'''',''''11'''',''''17'''',''''19'''')                                                                       
   AND  B.HISTORY_SEQ_NUM = ( SELECT MAX(BB.HISTORY_SEQ_NUM)        
                                FROM ' + @DB2DBName + '.T0043_IN_ALIEN_REF BB     
                               WHERE BB.PIN_NUM = B.PIN_NUM         
                                 AND BB.HISTORY_CD = B.HISTORY_CD   
)                                        
                    WITH UR ; '')                                  

  '

	INSERT @TempRefugeeStatus (
		PinNumber
		,RefugeeStatusCode
		,RefugeeEntryDate
		,CountryofOriginCode
		)
	EXEC (@statement9)


	IF NOT EXISTS (
			SELECT 1
			FROM @TempRefugeeStatus
			)
	BEGIN
		PRINT 'inside loop 1'

		INSERT @TempRefugeeStatus (PinNumber)
		VALUES (@TempPinNumber)
	END
	ELSE
	BEGIN
	   UPDATE @TempRefugeeStatus
	      set CountryofOrigin = ( select Name from wwp.Country ,
		                                           @TempRefugeeStatus
		                            where code = CountryofOriginCode
								)	 
		PRINT 'inside loop 2'
	END

	---select * from @TempRefugeeStatus

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- EP REVIEW DUE DATE
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempEPReviewDue TABLE (
		PinNumber [DECIMAL](10, 0)
		,ReviewDate Date
		)

	SET @statement10 = 'select  *
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT B.PIN_NUM as PARTICIPANT,
    B.SRV_PLAN_END_DT  as ReviewDate              
  FROM  ' + @DB2DBName + '.T0088_WP_IN_EM_PLN B                                                                
 WHERE  B.PIN_NUM  = ' + @PinNumber + '                                                                 
   AND  B.HISTORY_CD =  0                                                                 
   AND  B.EP_SEQ_NUM  = ( SELECT MAX(BB.EP_SEQ_NUM )        
                                FROM ' + @DB2DBName + '.T0088_WP_IN_EM_PLN BB     
                               WHERE BB.PIN_NUM = B.PIN_NUM         
                                 AND BB.HISTORY_CD = B.HISTORY_CD   
)                                        
                    WITH UR ; '')                                  

  '

	INSERT @TempEPReviewDue (
		PinNumber
		,ReviewDate
		)
	EXEC (@statement10)

	IF NOT EXISTS (
			SELECT 1
			FROM @TempEPReviewDue
			)
	BEGIN
		PRINT 'inside loop 3'

		INSERT @TempEPReviewDue (PinNumber)
		VALUES (@TempPinNumber)
	END
	ELSE
	BEGIN
		PRINT 'inside loop 3A'
	END

	---SELECT * FROM @TempEPReviewDue
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- TWO PARENT HOUSEHOLD
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempTwoParent TABLE (
		CaseNumber [DECIMAL](10, 0)
		,TwoParentStatus BIT
		)

	SET @statement11 = 'select  *
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT B.CASE_NUM as CaseNumber,
    CASE B.TWO_PARENT_RSLT_SW  WHEN ''''Y'''' THEN ''''1''''
	                      WHEN ''''N'''' THEN ''''0''''
						  END  as TwoParentStatus	              
  FROM  ' + @DB2DBName + '.T0521_TWO_PARENT B                                                                
 WHERE  B.CASE_NUM  = ' + @TempCaseNumber + '                                                                 
   AND  B.HISTORY_CD =  0    
  --- AND  B.TWO_PARENT_RSP = ''''Y''''      
   AND  B.EFFECTIVE_MM <> 999912                                                                  
   AND  B.EFFECTIVE_MM = ( SELECT MAX(BB.EFFECTIVE_MM)        
                                FROM ' + @DB2DBName + '.T0521_TWO_PARENT BB     
                               WHERE BB.CASE_NUM = B.CASE_NUM         
                                 AND BB.HISTORY_CD = B.HISTORY_CD   
)                                        
                    WITH UR ; '')                                  

  '

	INSERT @TempTwoParent (
		CaseNumber
		,TwoParentStatus
		)
	EXEC (@statement11)

	IF NOT EXISTS (
			SELECT 1
			FROM @TempTwoParent
			)
	BEGIN
		PRINT 'inside loop 1'

		INSERT @TempTwoParent (CaseNumber)
		VALUES (@TempCaseNumber)
	END
	ELSE
	BEGIN
		PRINT 'inside loop 2'
	END


	---select * from @TempTwoParent

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- Child Support Information
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempChildSupport TABLE (
		CaseNumber [DECIMAL](10, 0),
		PinNumber  [DECIMAL](10,0)
		,ChildSupportStatus BIT
		)

	SET @statement12 = 'select  CaseNumber,
	                            PinNumber,
								ChildSupportStatus
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT B.CASE_NUM as CaseNumber,
        B.PIN_NUM as PinNumber ,
    CASE B.COOP_SW        WHEN ''''Y'''' THEN ''''1''''
	                      WHEN ''''N'''' THEN ''''0''''
						  WHEN '''' '''' THEN ''''0''''
						  END  as ChildSupportStatus	              
  FROM  ' + @DB2DBName + '.T0349_AP_IN_NON_CO B                                                                
 WHERE  B.CASE_NUM  = ' + @TempCaseNumber + '     
   AND  B.PIN_NUM   = ' + @PinNumber + '                                                           
   AND  B.HISTORY_CD =  0    
   AND  B.DELETE_REASON_CD = '''' ''''                                                   
   AND  B.AP_SEQ_NUM = ( SELECT MAX(BB.AP_SEQ_NUM)        
                                FROM ' + @DB2DBName + '.T0349_AP_IN_NON_CO BB     
                               WHERE BB.CASE_NUM = B.CASE_NUM 
							     AND BB.PIN_NUM  = B.PIN_NUM        
                                 AND BB.HISTORY_CD = B.HISTORY_CD   
								 AND BB.HISTORY_SEQ_NUM = (SELECT MAX(BBB.HISTORY_SEQ_NUM)        
                                FROM ' + @DB2DBName + '.T0349_AP_IN_NON_CO BBB     
                               WHERE BBB.CASE_NUM = BB.CASE_NUM 
							     AND BBB.PIN_NUM  = BB.PIN_NUM        
                                 AND BBB.AP_SEQ_NUM = BB.AP_SEQ_NUM  
								                          ) 
)                                        
                    WITH UR ; '')                                  

  '



	INSERT @TempChildSupport (
		CaseNumber
		,PinNumber
		,ChildSupportStatus
		)
	EXEC (@statement12)

--  SELECT * FROM @TempChildSupport

	IF NOT EXISTS (
			SELECT 1
			FROM @TempChildSupport
			)
	BEGIN
		PRINT 'inside loop 1'

		INSERT @TempChildSupport (CaseNumber,PinNumber)
		   VALUES (@TempCaseNumber,@PinNumber)
	END
	ELSE
	BEGIN
		PRINT 'inside loop 2'
	END


--	SELECT * FROM @TempChildSupport

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- LearnFare Status Information
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempLearnFareStatus TABLE ( 
		PinNumber  [DECIMAL](10,0)
		,LearnFareStatus VARCHAR (100)
		)

	SET @statement13 = 'select  PinNumber,
								LearnFareStatus
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT  C.PIN_NUM as PinNumber ,
    CASE C.INDV_LF_STS_CD WHEN ''''WCA'''' THEN ''''CARING FOR AN INFANT''''
                              WHEN ''''WCC'''' THEN ''''NO CHILD CARE''''
                              WHEN ''''WDR'''' THEN ''''DROPOUT''''
                              WHEN ''''WEX'''' THEN ''''EXCUSED FROM SCHOOL''''
                              WHEN ''''WHT'''' THEN ''''HABITUALLY TRUANT''''
                              WHEN ''''WIL'''' THEN ''''ILLNESS''''
                              WHEN ''''WIN'''' THEN ''''INCARCERATED''''
                              WHEN ''''WMP'''' THEN ''''MINOR PARENT''''
                              WHEN ''''WNE'''' THEN ''''NOT ENROLLED''''
                              WHEN ''''WNV'''' THEN ''''SCHOOL ENROLLMENT NOT VERIFIED''''
                              WHEN ''''WPA'''' THEN ''''PHYSICIAN APPROVAL''''
                              WHEN ''''WPX'''' THEN ''''PENDING EXPULSION''''
                              WHEN ''''WRT'''' THEN ''''RETURNING DROPOUT''''
                              WHEN ''''WST'''' THEN ''''STUDENT IN GOOD STANDING''''
                              WHEN ''''WTR'''' THEN ''''NO TRANSPORTATION TO CHILD CARE''''
                              WHEN ''''WVO'''' THEN ''''VOLUNTARY''''
                              WHEN ''''WWL'''' THEN ''''ON WAITING LIST/CHILD -AT-RISK PROGRAM''''
                              WHEN ''''WXP'''' THEN ''''EXPELLED''''
                              WHEN ''''WZG'''' THEN ''''CHILD NOT IN W-2 GROUP''''
                              END AS LearnFareStatus               
  FROM   '+@DB2DBName+'.T0486_IN_LF_SANC C                                             
 WHERE  C.PIN_NUM = ' + @PinNumber + '      
   AND  C.HISTORY_CD = 0
   AND  C.DELETE_REASON_CD = '''' ''''
   AND  C.EFFECTIVE_MM  = (SELECT MAX (CC.EFFECTIVE_MM)
                                  FROM '+@DB2DBName+'.T0486_IN_LF_SANC CC
                              WHERE CC.CASE_NUM = C.CASE_NUM
                                AND CC.PIN_NUM  = C.PIN_NUM
                                AND CC.HISTORY_CD = C.HISTORY_CD
                                AND CC.DELETE_REASON_CD = C.DELETE_REASON_CD
                           )
   AND C.HISTORY_SEQ_NUM  = (SELECT MAX(CCC.HISTORY_SEQ_NUM) 
                             FROM '+@DB2DBName+'.T0486_IN_LF_SANC CCC
                              WHERE CCC.CASE_NUM = C.CASE_NUM
                               AND CCC.PIN_NUM  = C.PIN_NUM
                                AND CCC.HISTORY_CD = C.HISTORY_CD
                                AND CCC.DELETE_REASON_CD = C.DELETE_REASON_CD       
                             )           
                                     
                    WITH UR ; '')                                  

  '



	INSERT @TempLearnFareStatus (PinNumber
		,LearnFareStatus
		)
	EXEC (@statement13)

  --SELECT * FROM @TempLearnFareStatus

	IF NOT EXISTS (
			SELECT 1
			FROM @TempLearnFareStatus
			)
	BEGIN
		PRINT 'inside loop 1'

		INSERT @TempLearnFareStatus (PinNumber)
		   VALUES (@PinNumber)
	END
	ELSE
	BEGIN
		PRINT 'inside loop 2'
	END


	--SELECT * FROM @TempLearnFareStatus

	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------- LearnFare Status Information
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	DECLARE @TempEmailStatus TABLE ( 
	     PinNumber  [DECIMAL](10,0)
		,EmailAddress VARCHAR (50)
		)

	SET @statement14 = 'select  PinNumber,
								EmailAddress
FROM OPENQUERY(' + @LSDBName + ', ''
 SELECT  C.PIN_NUM as PinNumber ,
         C.EMAIL_ADR      AS EmailAddress               
  FROM   '+@DB2DBName+'.T2573_DGT_CNTC C                                             
 WHERE  C.PIN_NUM = ' + @PinNumber + '      
   AND  C.HISTORY_CD = 0
   AND  C.DELETE_REASON_CD = '''' ''''
   AND  C.HISTORY_SEQ_NUM  = (SELECT MAX(CCC.HISTORY_SEQ_NUM) 
                             FROM '+@DB2DBName+'.T2573_DGT_CNTC CCC
                              WHERE CCC.CASE_NUM = C.CASE_NUM
                               AND CCC.PIN_NUM  = C.PIN_NUM
                             )           
                                     
                    WITH UR ; '')                                  

  '



	INSERT @TempEmailStatus (PinNumber
		,EmailAddress
		)
	EXEC (@statement14)

  --

	IF NOT EXISTS (
			SELECT 1
			FROM @TempEmailStatus
			)
	BEGIN        
		PRINT 'inside loop 1'

		INSERT @TempEmailStatus (PinNumber)
		   VALUES (@PinNumber)
	END
	ELSE
	BEGIN
		PRINT 'inside loop 2'
	END

	--select * from @TempEmailStatus

	
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------- FINAL
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


	--SELECT distinct A.Id           as ParticipantId
	--    , A.PinNumber              as PinNumber
	--    ,A.FirstName               as FirstName
	--	,A.MiddleInitialName       as MiddleInitialName
	--	,A.LastName                as  LastName
	--	,A.SuffixName              as SuffixName
	--	,A.DateOfBirth             as DateOfBirth
	--	,YEAR(DATEADD(DAY, DATEDIFF(DAY, A.DateOfBirth, GETDATE()),CAST('0001-01-01' AS DATETIME2))) - 1  as Age
	--	,A.GenderIndicator as GenderIndicator
	--	, CAST(CASE  WHEN A.AmericanIndianIndicator = 'Y' THEN 1  END AS BIT) AS AmericanIndian
	--	, CAST(CASE  WHEN A.AsianIndicator = 'Y' THEN 1  END AS BIT) AS Asian 
	--	, CAST(CASE  WHEN A.BlackIndicator = 'Y' THEN 1  END AS BIT) AS Black
	--	, CAST(CASE  WHEN A.PacificIslanderIndicator = 'Y' THEN 1 END AS BIT) AS PacificIslander
	--	, CAST(CASE	WHEN A.WhiteIndicator = 'Y' THEN 1 END AS BIT) AS White
	--	, CASE  WHEN A.HispanicIndicator = 'Y' THEN 'Hispanic' End AS Ethnicity
	--	, AA.EnrolledProgramId            as EnrolledProgramId
	--	,AA.EnrolledProgramStatusCodeId   as EnrolledProgramStatusCodeId
	--	,AAA.OfficeNumber                  as OfficeNumber
	--	,CT.CountyNumber                  as CountyNumber
	--	,i.RefugeeStatusCode              as RefugeeStatusCode
	--	,i.RefugeeEntryDate               as RefugeeEntryDate
	--	,i.CountryofOrigin                as CountryofOrigin
	--	,B.CaseNumber                     as CaseNumber
	--	,B.AddressLine1                   as AddressLine1
	--	,B.AddressLine2                   as AddressLine2
	--	,B.City                           as City
	--	,B.STATE                          as State
	--	,B.ZipCode                        as ZipCode
	--	,B.PhoneNumber                    as PhoneNumber
	--	,D.LivingArrangement              as LivingArrangement
	--	,C.AlternateAddressLine1          as AlternateAddressLine1
	-- 	,C.AlternateAddressLine2          as AlternateAddressLine2
	-- 	,C.AlternateCity                  as AlternateCity
	-- 	,C.AlternateState                 as AlternateState
	-- 	,C.AlternateZipCode               as AlternateZipCode
	-- 	,C.AlternatePhoneNumber           as AlternatePhoneNumber
	--	,'NA'                             as EmailAddress 
	--	,G.MFWorkerId                     as MFWorkerId
	--    ,G.PlacementCode                  as PlacementCode
 --       ,12 * (YEAR(getdate()) - YEAR(G.PlacementBeginDate)) +
 --             ((MONTH(getdate()) - MONTH(G.PlacementBeginDate))) +
 --             SIGN(DAY(getdate()) / DAY(G.PlacementBeginDate))  as   DaysInPlacement
	--    ,'NA'                             as StateLifeTimeLimit
	--	,J.ReviewDate                     as EPReviewDueDate
	--	,K.TwoParentStatus                as TwoParentStatus
 --       ,N.LearnFareStatus                as LearnFareStatus 
	--	,E.ProgramCode                    as ProgramCode
	--	,E.SubProgramCode                 as SubProgramCode
	--	,E.AGStatusCode                   as AGStatusCode
	--	,E.AGSequenceNumber               as AGSequenceNumber
	--	,E.EligibilityBeginDate           as EligibilityBeginDate
	--	,E.EligibilityEndDate             as EligibilityEndDate
	--	,E.ReviewDueDate                  as ReviewDueDate
	--	,E.PaymentBeginDate               as PaymentBeginDate
	--	,E.PaymentEndDate                 as PaymentEndDate
	--	,E.AGFailureReasonCode1           as AGFailureReasonCode1
	--	,E.AGFailureReasonCode2           as AGFailureReasonCode2
	--	,E.AGFailureReasonCode3           as AGFailureReasonCode3
	--	,E.FSAgOpen                       as FSAgOpen
	--	,E.MAAgOpen                       as MAAgOpen
	--	,E.FPWAgOpen                      as FPWAgOpen
	--	,E.CCAgOpen                       as CCAgOpen
	--	,F.OtherPersonPinNumber           as OtherPersonPinNumber1
	--	,F.OtherPersonFirstName			  as OtherPersonFirstName1
	--	,F.OtherPersonLastName			  as OtherPersonLastName1
	--	,F.OtherPersonDOB				  as OtherPersonDOB1
	--	,F.Relationship					  as Relationship1
	--	,F.OtherPersonAge				  as OtherPersonAge1 
	--	,F.OtherPersonPinNumber2		  as OtherPersonPinNumber2
	--	,F.OtherPersonFirstName2		  as OtherPersonFirstName2
	--	,F.OtherPersonLastName2			  as OtherPersonLastName2
	--	,F.OtherPersonDOB2			      as OtherPersonDOB2
	--	,F.Relationship2                  as Relationship2
	--	,F.OtherPersonAge2				  as OtherPersonAge2
	--	,F.OtherPersonPinNumber3		  as OtherPersonPinNumber3
	--	,F.OtherPersonFirstName3		  as OtherPersonFirstName3
	--	,F.OtherPersonLastName3           as OtherPersonLastName3
	--	,F.OtherPersonDOB3				  as OtherPersonDOB3
	--	,F.Relationship3				  as Relationship3
	--	,F.OtherPersonAge3				  as OtherPersonAge3
	--	,F.OtherPersonPinNumber4		  as OtherPersonPinNumber4
	--	,F.OtherPersonFirstName4		  as OtherPersonFirstName4
	--	,F.OtherPersonLastName4           as OtherPersonLastName4
	--	,F.OtherPersonDOB4                as OtherPersonDOB4
	--	,F.Relationship4                  as Relationship4
	--	,F.OtherPersonAge4                as OtherPersonAge4
	--	,H.FSETStatus                     as FSETStatus
	--    ,M.ChildSupportStatus             as ChildSupportStatus       
	--	,L.SourceCountyNumber             as SourceCountyNumber  
	--	,L.DestinationCountyNumber        as DestinationCountyNumber 
	--	,L.SourceOfficeNumber			  as SourceWPOfficeNumber
	--	,L.DestinationOfficeNumber        as DestinationWPOfficeNumber
	--	,L.OfficeOutOfSyncIndicator       as OfficeOutOfSyncIndicator
	--	,L.OldFepId                       as OldFepId
	--	,L.NewFepId                       as NewFepId
	--	,L.FepOutOfSync                   as FepOutOfSync
	--	,L.TransferWorker                 as TransferWorker
	--	,L.TransferDate                   as TransferDate
	--	, 1                               as Id
	--	FROM wwp.Participant A
	--     LEFT JOIN wwp.participantEnrolledProgram AA ON AA.ParticipantId =  A.Id
	--	 LEFT JOIN wwp.WWPOffice   AAA                  on AAA.id       = AA.OfficeId
	--	 LEFT JOIN wwp.CountyAndTribe CT             ON CT.Id = AAA.CountyandTribeId
	--	 LEFT JOIN @TempCaseInfo B                   ON B.CaseNumber = @TempCaseNumber
	--	 LEFT JOIN @TempAlternateCaseInfo C          ON C.CaseNumber =  @TempCaseNumber
	--	 LEFT JOIN @TempLivingArrangement D          ON D.PinNumber = A.PinNumber
	--	 LEFT JOIN @TempAgLevelInformation E         ON E.CaseNumber = @TempCaseNumber	AND E.ProgramCode = 'WW'
	--	 LEFT JOIN @TempIndvLevelInformation F       ON F.CaseNumber = @TempCaseNumber	AND F.PinNumber = A.PinNumber AND F.Ids = 1
	--	 LEFT JOIN @TempPlacementInformation G       ON G.PinNumber = A.PinNumber
	--	 LEFT JOIN @TempFSETStatus H                 ON H.PinNumber = A.PinNumber
	--	 LEFT JOIN @TempRefugeeStatus I              ON I.PinNumber = A.PinNumber
	--	 LEFT JOIN @TempEPReviewDue J                ON J.PinNumber = A.PinNumber
	--	 LEFT JOIN @TempTwoParent K                  ON K.CaseNumber = @TempCaseNumber
	--	 LEFT JOIN @TempT0429TransferInfo L          ON L.CaseNumber = @TempCaseNumber
	--	 LEFT JOIN @TempChildSupport M               ON M.PinNumber = A.PinNumber
	--	 LEFT JOIN @TempLearnFareStatus N            ON N.PinNumber = A.PinNumber
 --      WHERE A.PinNumber = @TempPinNumber ; 
	  
	  

	  

Declare @SP_RefreshParticipantReturnType Table
(
[Id] [int]   NULL,
[ParticipantId] [int] NULL,
[PinNumber] [decimal](10, 0) NULL,
[FirstName] [varchar](15) NULL,
[MiddleInitialName] [char](1) NULL,
[LastName] [varchar](20) NULL,
[SuffixName] [char](3) NULL,
[DateOfBirth] [date] NULL,
[Age] [int] Null,
[GenderIndicator] [char](1) NULL,
[Hispanic] [bit] NULL,
[EnrolledProgramId] [int] NULL,
[EnrolledProgramStatusCodeId] [int] NULL,
[OfficeNumber] [smallint] NULL,
[CountyNumber] [smallint] NULL,
[CaseNumber] [decimal](10, 0) NULL,
[RefugeeStatusCode] [varchar](2) NULL,
[RefugeeEntryDate] [date] NULL,
[CountryOfOrigin] [varchar](50) NULL,
[LivingArrangement] [varchar](200) NULL,
[AddressLine1] [varchar](200) NULL,
[AddressLine2] [varchar](100) NULL,
[City] [varchar](50) NULL,
[State] [varchar](50) NULL,
[ZipCode] [varchar](50) NULL,
[PhoneNumber] [varchar](10) NULL,
[AlternateAddressLine1] [varchar](200) NULL,
[AlternateAddressLine2] [varchar](100) NULL,
[AlternateCity] [varchar](50) NULL,
[AlternateState] [varchar](50) NULL,
[AlternateZipCode] [varchar](10) NULL,
[AlternatePhoneNumber] [varchar](10) NULL,
[EmailAddress] [varchar](100) NULL,
[MFWorkerId] [varchar](6) NULL,
[PlacementCode] [varchar](50) NULL,
[DaysInPlacement] [int] NULL,
[StateLifeTimeLimit] [varchar](3) NULL,
[EPReviewDueDate] [date] NULL,
[TwoParentStatus] [bit] NULL,
[LearnFareStatus] [varchar](100) NULL,
[ProgramCode] [varchar](3) NULL,
[SubProgramCode] [varchar](1) NULL,
[AGStatusCode] [varchar](1) NULL,
[AGSequenceNumber] [smallint] NULL,
[EligibilityBeginDate] [date] NULL,
[EligibilityEndDate] [date] NULL,
[ReviewDueDate] [date] NULL,
[PaymentBeginDate] [date] NULL,
[PaymentEndDate] [date] NULL,
[AGFailureReasonCode1] [varchar](65) NULL,
[AGFailureReasonCode2] [varchar](65) NULL,
[AGFailureReasonCode3] [varchar](65) NULL,
[FSAgOpen] [bit] NULL,
[MAAgOpen] [bit] NULL,
[FPWAgOpen] [bit] NULL,
[CCAgOpen] [bit] NULL,
[OtherPersonPinNumber1] [decimal](10, 0) NULL,
[OtherPersonFirstName1] [varchar](50) NULL,
[OtherPersonLastName1] [varchar](50) NULL,
[OtherPersonDOB1] [date] NULL,
[Relationship1] [varchar](50) NULL,
[OtherPersonAge1] [int] NULL,
[OtherPersonPinNumber2] [decimal](10, 0) NULL,
[OtherPersonFirstName2] [varchar](50) NULL,
[OtherPersonLastName2] [varchar](50) NULL,
[OtherPersonDOB2] [date] NULL,
[Relationship2] [varchar](50) NULL,
[OtherPersonAge2] [int] NULL,
[OtherPersonPinNumber3] [decimal](10, 0) NULL,
[OtherPersonFirstName3] [varchar](50) NULL,
[OtherPersonLastName3] [varchar](50) NULL,
[OtherPersonDOB3] [date] NULL,
[Relationship3] [varchar](50) NULL,
[OtherPersonAge3] [int] NULL,
[OtherPersonPinNumber4] [decimal](10, 0) NULL,
[OtherPersonFirstName4] [varchar](50) NULL,
[OtherPersonLastName4] [varchar](50) NULL,
[OtherPersonDOB4] [date] NULL,
[Relationship4] [varchar](50) NULL,
[OtherPersonAge4] [int] NULL,
[OtherPersonPinNumber5] [decimal](10, 0) NULL,
[OtherPersonFirstName5] [varchar](50) NULL,
[OtherPersonLastName5] [varchar](50) NULL,
[OtherPersonDOB5] [date] NULL,
[Relationship5] [varchar](50) NULL,
[OtherPersonAge5] [int] NULL,
[OtherPersonPinNumber6] [decimal](10, 0) NULL,
[OtherPersonFirstName6] [varchar](50) NULL,
[OtherPersonLastName6] [varchar](50) NULL,
[OtherPersonDOB6] [date] NULL,
[Relationship6] [varchar](50) NULL,
[OtherPersonAge6] [int] NULL,
[MoreThanSixIndv] [bit] NULL,
[FSETStatus] [varchar](15) NULL,
[ChildSupportStatus] [bit] NULL,
[SourceWPOfficeNumber] [smallint] NULL,
[DestinationWPOfficeNumber] [smallint] NULL,
[OfficeOutOfSyncIndicator] [bit] NULL,
[AmericanIndian] [bit] NULL,
[Asian] [bit] NULL,
[Black] [bit] NULL,
[PacificIslander] [bit] NULL,
[White] [bit] NULL,
[SourceCountyNumber] [smallint] NULL,
[DestinationCountyNumber] [smallint] NULL,
[OldFepId] [varchar](10) NULL,
[NewFepId] [varchar](10) NULL,
[FepOutOfSync] [bit] NULL,
[TransferWorker] [varchar](10) NULL,
[TransferDate] [datetime] NULL
) 


insert into @SP_RefreshParticipantReturnType  (
  [ParticipantId]  ,
 [PinNumber] ,  
 [FirstName] , 
 [MiddleInitialName] ,
 [LastName] ,
 [SuffixName] ,
 [DateOfBirth] ,
 [Age],
 [GenderIndicator],
 [AmericanIndian] ,
	[Asian]  ,
	[Black]  ,
	[PacificIslander]  ,
	[White]  ,
 [Hispanic] ,
 [EnrolledProgramId] ,
 [EnrolledProgramStatusCodeId],
 [OfficeNumber],
[CountyNumber] ,
[RefugeeStatusCode],
[RefugeeEntryDate] ,
[CountryOfOrigin] ,
[CaseNumber] ,
[AddressLine1] ,
[AddressLine2] ,
[City] ,
[State] ,
[ZipCode] ,
[PhoneNumber]  ,
[LivingArrangement] ,
[AlternateAddressLine1]  ,
[AlternateAddressLine2]  ,
[AlternateCity]  ,
[AlternateState]  ,
[AlternateZipCode]  ,
[AlternatePhoneNumber]  ,
[EmailAddress]  ,
[MFWorkerId]  ,
[PlacementCode] ,
[DaysInPlacement]  ,
[StateLifeTimeLimit]  ,
[EPReviewDueDate]  ,
[TwoParentStatus]  ,
[LearnFareStatus]  ,
[ProgramCode]  ,
[SubProgramCode] ,
[AGStatusCode] ,
[AGSequenceNumber]  ,
[EligibilityBeginDate]  ,
[EligibilityEndDate] ,
[ReviewDueDate]  ,
[PaymentBeginDate]  ,
[PaymentEndDate]  ,
[AGFailureReasonCode1]  ,
[AGFailureReasonCode2]  ,
[AGFailureReasonCode3]  ,
[FSAgOpen]  ,
[MAAgOpen] ,
[FPWAgOpen]  ,
[CCAgOpen]  ,
[OtherPersonPinNumber1]  ,
[OtherPersonFirstName1]  ,
[OtherPersonLastName1] ,
[OtherPersonDOB1]  ,
[Relationship1]  ,
[OtherPersonAge1],
[OtherPersonPinNumber2]  ,
[OtherPersonFirstName2] ,
[OtherPersonLastName2]  ,
[OtherPersonDOB2]  ,
[Relationship2]  ,
[OtherPersonAge2]  ,
[OtherPersonPinNumber3]  ,
[OtherPersonFirstName3]  ,
[OtherPersonLastName3]  ,
[OtherPersonDOB3]  ,
[Relationship3]  ,
[OtherPersonAge3]  ,
[OtherPersonPinNumber4]  ,
[OtherPersonFirstName4]  ,
[OtherPersonLastName4]  ,
[OtherPersonDOB4]  ,
[Relationship4]  ,
[OtherPersonAge4]  ,
[OtherPersonPinNumber5]  ,
[OtherPersonFirstName5]  ,
[OtherPersonLastName5]  ,
[OtherPersonDOB5]  ,
[Relationship5]  ,
[OtherPersonAge5]  ,
[OtherPersonPinNumber6]  ,
[OtherPersonFirstName6]  ,
[OtherPersonLastName6]  ,
[OtherPersonDOB6]  ,
[Relationship6]  ,
[OtherPersonAge6] ,
[MoreThanSixIndv] ,
[FSETStatus]  ,
[ChildSupportStatus]  ,
[SourceCountyNumber] ,
[DestinationCountyNumber]  ,
[SourceWPOfficeNumber]  ,
[DestinationWPOfficeNumber]  ,
[OfficeOutOfSyncIndicator]  ,
[OldFepId] ,
[NewFepId]  ,
[FepOutOfSync]  ,
[TransferWorker]  ,
[TransferDate],
[Id]   ) 
SELECT distinct A.Id           as ParticipantId
    , A.PinNumber              as PinNumber
	    ,A.FirstName               as FirstName
		,A.MiddleInitialName       as MiddleInitialName
		,A.LastName                as  LastName
		,A.SuffixName              as SuffixName
		,A.DateOfBirth             as DateOfBirth
		,YEAR(DATEADD(DAY, DATEDIFF(DAY, A.DateOfBirth, GETDATE()),CAST('0001-01-01' AS DATETIME2))) - 1  as Age
		,A.GenderIndicator as GenderIndicator
		, CAST(CASE  WHEN A.AmericanIndianIndicator = 'Y' THEN 1  END AS BIT) AS AmericanIndian
		, CAST(CASE  WHEN A.AsianIndicator = 'Y' THEN 1  END AS BIT) AS Asian 
		, CAST(CASE  WHEN A.BlackIndicator = 'Y' THEN 1  END AS BIT) AS Black
		, CAST(CASE  WHEN A.PacificIslanderIndicator = 'Y' THEN 1 END AS BIT) AS PacificIslander
		, CAST(CASE	 WHEN A.WhiteIndicator = 'Y' THEN 1 END AS BIT) AS White
		, CAST(CASE  A.HispanicIndicator WHEN 'Y' THEN 1 WHEN 'N' THEN 0 End AS BIT) AS Hispanic
		, AA.EnrolledProgramId            as EnrolledProgramId
		,AA.EnrolledProgramStatusCodeId   as EnrolledProgramStatusCodeId
		,AAA.OfficeNumber                  as OfficeNumber
		,CT.CountyNumber                  as CountyNumber
		,i.RefugeeStatusCode              as RefugeeStatusCode
/*GH3636*/,CASE i.RefugeeEntryDate WHEN '9999-12-31' THEN NULL ELSE i.RefugeeEntryDate END AS RefugeeEntryDate
		,i.CountryofOrigin                as CountryofOrigin
		,B.CaseNumber                     as CaseNumber
		,B.AddressLine1                   as AddressLine1
		,B.AddressLine2                   as AddressLine2
		,B.City                           as City
		,B.STATE                          as State
		,B.ZipCode                        as ZipCode
		,B.PhoneNumber                    as PhoneNumber
		,D.LivingArrangement              as LivingArrangement
		,C.AlternateAddressLine1          as AlternateAddressLine1
	 	,C.AlternateAddressLine2          as AlternateAddressLine2
	 	,C.AlternateCity                  as AlternateCity
	 	,C.AlternateState                 as AlternateState
	 	,C.AlternateZipCode               as AlternateZipCode
	 	,C.AlternatePhoneNumber           as AlternatePhoneNumber
		,P.EmailAddress                   as EmailAddress 
		,G.MFWorkerId                     as MFWorkerId
	    ,G.PlacementCode                  as PlacementCode
        ,12 * (YEAR(getdate()) - YEAR(G.PlacementBeginDate)) +
              ((MONTH(getdate()) - MONTH(G.PlacementBeginDate))) +
              SIGN(DAY(getdate()) / DAY(G.PlacementBeginDate))  as   DaysInPlacement
	    ,'NA'                             as StateLifeTimeLimit
		,J.ReviewDate                     as EPReviewDueDate
		,K.TwoParentStatus                as TwoParentStatus
        ,N.LearnFareStatus                as LearnFareStatus 
		,E.ProgramCode                    as ProgramCode
		,E.SubProgramCode                 as SubProgramCode
		,E.AGStatusCode                   as AGStatusCode
		,E.AGSequenceNumber               as AGSequenceNumber
		,E.EligibilityBeginDate           as EligibilityBeginDate
		,E.EligibilityEndDate             as EligibilityEndDate
		,E.ReviewDueDate                  as ReviewDueDate
		,E.PaymentBeginDate               as PaymentBeginDate
		,E.PaymentEndDate                 as PaymentEndDate
		,E.AGFailureReasonCode1           as AGFailureReasonCode1
		,E.AGFailureReasonCode2           as AGFailureReasonCode2
		,E.AGFailureReasonCode3           as AGFailureReasonCode3
		,E.FSAgOpen                       as FSAgOpen
		,E.MAAgOpen                       as MAAgOpen
		,E.FPWAgOpen                      as FPWAgOpen
		,E.CCAgOpen                       as CCAgOpen
		,F.OtherPersonPinNumber           as OtherPersonPinNumber1
		,F.OtherPersonFirstName			  as OtherPersonFirstName1
		,F.OtherPersonLastName			  as OtherPersonLastName1
		,F.OtherPersonDOB				  as OtherPersonDOB1
		,F.Relationship					  as Relationship1
		,F.OtherPersonAge				  as OtherPersonAge1 
		,F.OtherPersonPinNumber2		  as OtherPersonPinNumber2
		,F.OtherPersonFirstName2		  as OtherPersonFirstName2
		,F.OtherPersonLastName2			  as OtherPersonLastName2
		,F.OtherPersonDOB2			      as OtherPersonDOB2
		,F.Relationship2                  as Relationship2
		,F.OtherPersonAge2				  as OtherPersonAge2
		,F.OtherPersonPinNumber3		  as OtherPersonPinNumber3
		,F.OtherPersonFirstName3		  as OtherPersonFirstName3
		,F.OtherPersonLastName3           as OtherPersonLastName3
		,F.OtherPersonDOB3				  as OtherPersonDOB3
		,F.Relationship3				  as Relationship3
		,F.OtherPersonAge3				  as OtherPersonAge3
		,F.OtherPersonPinNumber4		  as OtherPersonPinNumber4
		,F.OtherPersonFirstName4		  as OtherPersonFirstName4
		,F.OtherPersonLastName4           as OtherPersonLastName4
		,F.OtherPersonDOB4                as OtherPersonDOB4
		,F.Relationship4                  as Relationship4
		,F.OtherPersonAge4                as OtherPersonAge4
		,F.OtherPersonPinNumber5          as OtherPersonPinNumber5
		,F.OtherPersonFirstName5		  as OtherPersonFirstName5
		,F.OtherPersonLastName5			  as OtherPersonLastName5
		,F.OtherPersonDOB5				  as OtherPersonDOB5
		,F.Relationship5				  as Relationship5
		,F.OtherPersonAge5				  as OtherPersonAge5
		,F.OtherPersonPinNumber6		  as OtherPersonPinNumber6
		,F.OtherPersonFirstName6		  as OtherPersonFirstName6
		,F.OtherPersonLastName6			  as OtherPersonLastName6
		,F.OtherPersonDOB6			      as OtherPersonDOB6
		,F.Relationship6                  as Relationship6
		,F.OtherPersonAge6				  as OtherPersonAge6
		,F.MoreThanSixIndv                as MoreThanSixIndv
		,H.FSETStatus                     as FSETStatus
	    ,M.ChildSupportStatus             as ChildSupportStatus       
		,L.SourceCountyNumber             as SourceCountyNumber  
		,L.DestinationCountyNumber        as DestinationCountyNumber 
		,L.SourceOfficeNumber			  as SourceWPOfficeNumber
		,L.DestinationOfficeNumber        as DestinationWPOfficeNumber
		,L.OfficeOutOfSyncIndicator       as OfficeOutOfSyncIndicator
		,L.OldFepId                       as OldFepId
		,L.NewFepId                       as NewFepId
		,L.FepOutOfSync                   as FepOutOfSync
		,L.TransferWorker                 as TransferWorker
		,L.TransferDate                   as TransferDate
 , ROW_NUMBER() OVER(ORDER BY A.Id) AS Id     
                        
		FROM wwp.Participant A
	     LEFT JOIN wwp.participantEnrolledProgram AA ON AA.ParticipantId =  A.Id
		 LEFT JOIN wwp.WWPOffice   AAA                  on AAA.id       = AA.OfficeId
		 LEFT JOIN wwp.CountyAndTribe CT             ON CT.Id = AAA.CountyandTribeId
		 LEFT JOIN @TempCaseInfo B                   ON B.CaseNumber = @TempCaseNumber
		 LEFT JOIN @TempAlternateCaseInfo C          ON C.CaseNumber =  @TempCaseNumber
		 LEFT JOIN @TempLivingArrangement D          ON D.PinNumber = A.PinNumber
		 LEFT JOIN @TempAgLevelInformation E         ON E.CaseNumber = @TempCaseNumber	AND E.ProgramCode = 'WW'
		 LEFT JOIN @TempIndvLevelInformation F       ON F.CaseNumber = @TempCaseNumber	AND F.PinNumber = A.PinNumber AND F.Ids = 1
		 LEFT JOIN @TempPlacementInformation G       ON G.PinNumber = A.PinNumber
		 LEFT JOIN @TempFSETStatus H                 ON H.PinNumber = A.PinNumber
		 LEFT JOIN @TempRefugeeStatus I              ON I.PinNumber = A.PinNumber
		 LEFT JOIN @TempEPReviewDue J                ON J.PinNumber = A.PinNumber
		 LEFT JOIN @TempTwoParent K                  ON K.CaseNumber = @TempCaseNumber
		 LEFT JOIN @TempT0429TransferInfo L          ON L.PinNumber = A.PinNumber
		 LEFT JOIN @TempChildSupport M               ON M.PinNumber = A.PinNumber
		 LEFT JOIN @TempLearnFareStatus N            ON N.PinNumber = A.PinNumber
		 LEFT JOIN @TempEmailStatus P	             ON P.PinNumber = A.PinNumber	
       WHERE A.PinNumber = @TempPinNumber  
	  
	   Update @SP_RefreshParticipantReturnType
	    SET OfficeOutOfSyncIndicator = 0,
			DestinationWPOfficeNumber  = 0,
	    		SourceWPOfficeNumber       = 0  
				WHERE  EnrolledProgramId  in  (0,9,10,12)

	  SELECT * FROM @SP_RefreshParticipantReturnType

		----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		----------------------- END
		----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
END



GO
/****** Object:  StoredProcedure [wwp].[SP_RefreshPtOld]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- Author:		Palani/Christopher
-- Create date: 08-06-2017
-- Description: Refresh participants info from CWW.
------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [wwp].[SP_RefreshPtOld]
    (
        @PinNumber VARCHAR(10) ,
        @SchemaName VARCHAR(20)
    )
AS
    BEGIN


        DECLARE @strsQL VARCHAR(MAX);
        DECLARE @statement1 VARCHAR(MAX);
        DECLARE @statement2 VARCHAR(MAX);
        DECLARE @CaseNum VARCHAR(10);

        --
        DECLARE @DB2DBName AS VARCHAR(100);
        DECLARE @LSDBName AS VARCHAR(100);
        DECLARE @SQLDBName AS VARCHAR
        DECLARE @MaxHistorySeqNum AS SMALLINT;

        DECLARE @PartCaseNum DECIMAL(10, 0);
        DECLARE @PartOfficeNum SMALLINT;
        DECLARE @OfficeNumber SMALLINT;

        ---
        IF @SchemaName = 'WWPDEV'
            BEGIN
                SET @LSDBName = 'NETWINFO_D00S_DB2'

                SET @DB2DBName = 'PWS639TC'

            END
        -----
        IF @SchemaName = 'WWPSYS'
            BEGIN
                SET @LSDBName = 'NETWINFO_D00S_DB2'

                SET @DB2DBName = 'PWS639TC'
            END
        -----	
        IF @SchemaName = 'WWPACC'
            BEGIN
                SET @LSDBName = 'NETWINFO_D00A_DB2'

                SET @DB2DBName = 'PWA639TC'
            END
        -----

        IF @SchemaName = 'WWPTRN'
            BEGIN
                SET @LSDBName = 'NETWINFO_D00E_DB2'

                SET @DB2DBName = 'PWE639TC'
            END
        -----

        IF @SchemaName = 'WWP'
            BEGIN
                SET @LSDBName = 'NETWINFO_D40P_DB2'

                SET @DB2DBName = 'PWP639TC'
            END


        PRINT @LSDBName



        DECLARE @temp1 TABLE
            (
                [CASENumber] [DECIMAL](10, 0) NULL ,
                [PinNumber] [DECIMAL](10, 0) NULL ,
                [OfficeNumber] [SMALLINT] NULL ,
                [CountyNumber] [SMALLINT] NULL
            );


        SET @statement1 = 'select  *
FROM OPENQUERY(' + @LSDBName
                          + ', ''SELECT  CASE_NUM as CASENumber, PIN_NUM  as PinNumber ,  OFFICE_NUM as OfficeNumber , COUNTY_NUM as CountyNumber                                        
  FROM  ' + @DB2DBName + '.T0018_WP_INDV                       
 WHERE  PIN_NUM  = ' + @PinNumber + '
  '')'

        INSERT @temp1
        EXEC ( @statement1 )


        PRINT 3

        SET @CaseNum = (   SELECT CASENumber
                           FROM   @temp1
                       )


        PRINT @CaseNum

        IF @CaseNum IS NULL
            BEGIN

                SET @statement2 = 'select  *
FROM OPENQUERY(' + @LSDBName + ', ''SELECT B.CASE_NUM as CASENumber, A.PIN_NUM  as PinNumber ,  B.OFFICE_NUM as OfficeNumber , COUNTY_NUM as CountyNumber
   FROM ' +     @DB2DBName + '.T0015_CS_INDV A ,
        ' +     @DB2DBName + '.T0001_CASE  B                                                    
 WHERE  A.PIN_NUM  = ' + @PinNumber
                                  + '
    AND A.DELETE_REASON_CD = '''' ''''
     AND A.HISTORY_CD  = 0
     AND A.UPDATED_DT = (SELECT MAX(AA.UPDATED_DT) 
                          FROM  ' + @DB2DBName
                                  + '.T0015_CS_INDV AA
                          WHERE AA.PIN_NUM = A.PIN_NUM
                            AND AA.DELETE_REASON_CD = A.DELETE_REASON_CD
                            AND AA.HISTORY_CD = A.HISTORY_CD
                           )
     AND A.CASE_NUM = B.CASE_NUM
                           WITH UR
                         ;  
  '')'


                PRINT 4

                INSERT @temp1
                EXEC ( @statement2 )


                SET @OfficeNumber = (   SELECT c.WPOfficeNumber
                                        FROM   WPGeoArea c ,
                                               @temp1 d
                                        WHERE  c.W2EligibilityOffice = d.OfficeNumber
                                               AND c.CountyNumber = d.CountyNumber
                                    )

                UPDATE @temp1
                SET    OfficeNumber = @OfficeNumber


                PRINT 'CASE FROM T0001'
            END


        DELETE wwp.ConfidentialCaseInformation
        WHERE CaseNumber = CONVERT(NUMERIC(10, 0), @CaseNum);

        SET @statement1 = '
select CaseNumber,
       ConfidentialSwitch,
	   WorkerId ,
	   CaseloadNumber,
	   WorkerFirstName,
	   WorkerLastName,
	   WorkerMiddleInitial,
	   WorkerSuffixName 
  FROM OPENQUERY(' + @LSDBName
                          + ',''SELECT A.RFA_CASE_NUM as CaseNumber,
	                                      A.CASE_CNFD_SW as ConfidentialSwitch,   
       B.USER_ID as WorkerId  ,    
       A.CASELOAD_NUM   as CaseloadNumber  ,                                      
       C.WORKER_FIRST_NAM  as WorkerFirstName   ,                             
       C.WORKER_LAST_NAM   as WorkerLastName  , 
	   C.WORKER_MIDDLE_NAM as WorkerMiddleInitial ,
	   C.WORKER_SUFFIX_NAM as WorkerSuffixName	                          
  FROM ' + @DB2DBName + '.T0212_CS_CASELOAD A ,                     
       ' + @DB2DBName + '.T0002_CASELOAD_WKR B,                     
       ' + @DB2DBName + '.T0007_WORKER C                            
 WHERE A.RFA_CASE_NUM  = ' + @CaseNum
                          + '                       
   AND A.RFA_CASE_TYPE_IND  = ''''C''''                         
   AND B.CASELOAD_NUM = A.CASELOAD_NUM                    
   AND C.USER_ID    =   B.USER_ID                         
   WITH UR ;                                              
'') '


        PRINT @statement1;


        INSERT INTO [wwp].[ConfidentialCaseInformation] (   [CaseNumber] ,
                                                            [ConfidentialSwitch] ,
                                                            [WorkerId] ,
                                                            [CaseloadNumber] ,
                                                            [WorkerFirstName] ,
                                                            [WorkerLastName] ,
                                                            [WorkerMiddleInitial] ,
                                                            [WorkerSuffixName]
                                                        )
        EXEC ( @statement1 );



        DECLARE @temp TABLE
            (
                [PinNumber] [DECIMAL](10, 0) NULL ,
                [FirstName] [VARCHAR](50) NULL ,
                [MiddleInitialName] [CHAR](1) NULL ,
                [LastName] [VARCHAR](50) NULL ,
                [SuffixName] [CHAR](3) NULL ,
                [DateOfBirth] [DATE] NULL ,
                [DateOfDeath] [DATE] NULL ,
                [GenderIndicator] [CHAR](1) NULL ,
                [AliasResponse] [CHAR](1) NULL ,
                [BirthVerificationCode] [CHAR](2) NULL ,
                [BirthPlaceCode] [CHAR](2) NULL ,
                [CitizenshipVerificationCode] [CHAR](2) NULL ,
                [DCLCitizenshipSwitch] [CHAR](1) NULL ,
                [DeathVerificationCode] [CHAR](2) NULL ,
                [LanguageCode] [CHAR](1) NULL ,
                [MaxHistorySequenceNumber] [SMALLINT] NULL ,
                [PrimarySSNNumber] [DECIMAL](9, 0) NULL ,
                [PseudoSSNNumber] [DECIMAL](9, 0) NULL ,
                [RaceCode] [CHAR](1) NULL ,
                [SSNAppointmentDate] [DATE] NULL ,
                [SSNAppointmentVerificationCode] [CHAR](2) NULL ,
                [SSNValidatedCode] [CHAR](2) NULL ,
                [CaresUpdatedDate] [DATE] NULL ,
                [USCitizenSwitch] [CHAR](1) NULL ,
                [WorkerAlert1Code] [CHAR](2) NULL ,
                [WorkerAlert2Code] [CHAR](2) NULL ,
                [MaidNumber] [DECIMAL](10, 0) NULL ,
                [ChildElsewhereSwitch] [CHAR](1) NULL ,
                [ChildVerificationCode] [CHAR](1) NULL ,
                [AmericanIndianIndicator] [CHAR](1) NULL ,
                [AsianIndicator] [CHAR](1) NULL ,
                [BlackIndicator] [CHAR](1) NULL ,
                [HispanicIndicator] [CHAR](1) NULL ,
                [PacificIslanderIndicator] [CHAR](1) NULL ,
                [WhiteIndicator] [CHAR](1) NULL ,
                [MCI_ID] [DECIMAL](10, 0) NULL ,
                [MACitizenVerificationCode] [CHAR](2) NULL ,
                [TribeChildMemberIndicator] [CHAR](2) NULL ,
                [TribeChildVerificationCode] [CHAR](2) NULL ,
                [TribalMemberIndicator] [CHAR](2) NULL ,
                [TribalMemberVerificationCode] [CHAR](2) NULL ,
                [DeathDateSourceCode] [CHAR](2) NULL ,
                [WorkerOverideVerificationCode] [CHAR](2) NULL
            )



        SET @strsQL = '
select  *
FROM OPENQUERY (' + @LSDBName
                      + ', '' Select  
		PIN_NUM             	as	PinNumber	,
		FIRST_NAM           	as	FirstName	,
		MIDDLE_INITIAL_NAM  	as	MiddleInitialName	,
		LAST_NAM            	as	LastName	,
		SUFFIX_NAM          	as	SuffixName	,
		DOB_DT              	as	DateOfBirth	,
		DEATH_DT            	as	DateOfDeath	,
		SEX_IND             	as	GenderIndicator	,
		ALIAS_RSP           	as	AliasResponse	,
		BIRTH_VER_CD        	as	BirthVerificationCode	,
		BIRTHPLACE_CD       	as	BirthPlaceCode	,
		CITIZENSHIP_VER_CD  	as	CitizenshipVerificationCode	,
		DCL_CITIZENSHIP_SW  	as	DCLCitizenshipSwitch	,
		DEATH_VER_CD        	as	DeathVerificationCode	,
		LANGUAGE_CD         	as	LanguageCode	,
		MAX_HIST_SEQ_NUM    	as	MaxHistorySequenceNumber	,
		PRIMARY_SSN_NUM     	as	PrimarySSNNumber	,
		PSEUDO_SSN_NUM      	as	PseudoSSNNumber	,
		RACE_CD             	as	RaceCode	,
		SSN_APP_DT          		as	SSNAppointmentDate	,
		SSN_APP_VER_CD      	as	SSNAppointmentVerificationCode	,
		SSN_VALIDATED_CD    	as	SSNValidatedCode	,
		UPDATED_DT          	as	CaresUpdatedDate	,
		US_CITIZEN_SW       	as	USCitizenSwitch	,
		WORKER_ALERT_1_CD   	as	WorkerAlert1Code	,
		WORKER_ALERT_2_CD   	as	WorkerAlert2Code	,
		MAID_NUM            	as	MaidNumber	,
		CHILD_ELSEWHERE_SW  	as	ChildElsewhereSwitch	,
		CHILD_VER_CD        	as	ChildVerificationCode	,
		AMR_INDN_IND        	as	AmericanIndianIndicator	,
		ASN_IND             	as	AsianIndicator	,
		BLK_IND             	as	BlackIndicator	,
		HISP_IND         		as	HispanicIndicator	,
		PCF_ILD_IND			 	as	PacificIslanderIndicator	,
		WHT_IND          		as	WhiteIndicator	,
		MCI_ID					as	MCI_ID	,
		MA_CTZN_VFCN_CD			as	MACitizenVerificationCode	,
		TRB_CHLD_MBR_IND		as	TribeChildMemberIndicator	,
		TRB_CHLD_VFCN_CD		as	TribeChildVerificationCode	,
		TRB_MBR_IND				as	TribalMemberIndicator	,
		TRB_MBR_VFCN_CD			as	TribalMemberVerificationCode	,
		DTH_DT_SRC_CD			as	DeathDateSourceCode	,
		WRKR_OVRD_VFCN_CD		as	WorkerOverideVerificationCode	
                                             FROM  ' + @DB2DBName
                      + '.T0011_INDIVIDUAL  A                                                                                          
											WHERE A.PIN_NUM    = '
                      + @PinNumber + ' ''  )           

'


        INSERT @temp
        EXEC ( @strsQL );



        SET @MaxHistorySeqNum = (   SELECT MaxHistorySequenceNumber
                                    FROM   wwp.Participant
                                    WHERE  PinNumber = @PinNumber
                                )

        IF @MaxHistorySeqNum = (   SELECT MaxHistorySequenceNumber
                                   FROM   @temp
                               )
            BEGIN

                PRINT 'max is same'

                SELECT TOP 1 @PartCaseNum = p.CaseNumber ,
                       @PartOfficeNum = p.OfficeNumber
                FROM   wwp.Participant p
                WHERE  p.PinNumber = @PinNumber

                PRINT '@CaseNum = ' + @CaseNum;
                PRINT '@PartCaseNum = ' + CONVERT(VARCHAR(10), @PartCaseNum);
                --IF ( @OfficeNumber IS NULL )
                --    BEGIN
                --        PRINT '@OfficeNumber is null';
                --    END
                PRINT '@OfficeNumber = '
                      + CONVERT(VARCHAR(10), ISNULL(@OfficeNumber, 0));

                IF ( CONVERT(NUMERIC(10, 0), @CaseNum) <> ISNULL(@PartCaseNum, 0) )
                   OR ( ISNULL(@PartOfficeNum, 0) <> ISNULL(@OfficeNumber, 0))
                    BEGIN

                        UPDATE wwp.Participant
                        SET    CaseNumber = c.CASENumber ,
                               IsConfidentialCase = CASE cci.ConfidentialSwitch
                                                         WHEN 'Y' THEN 1
                                                         ELSE 0
                                                    END ,
                               AssignedWorker = cci.WorkerId ,
                               OfficeNumber = @PartOfficeNum ,
                               AgencyCode = ga.AgencyCode ,
                               CountyNumber = c.CountyNumber
                        FROM   wwp.Participant b
                               LEFT OUTER JOIN @temp1 c ON c.PinNumber = b.PinNumber
                               LEFT OUTER JOIN wwp.ConfidentialCaseInformation cci ON cci.CaseNumber = @PartCaseNum
                               LEFT OUTER JOIN wwp.WPGeoArea ga ON ga.WPOfficeNumber = @PartOfficeNum
                        WHERE  b.PinNumber = @PinNumber
                        PRINT ' Participant updated for Case & Office';

                    END


            END
        ELSE
            BEGIN
                PRINT 'max is not same'

                IF @MaxHistorySeqNum IS NULL
                    BEGIN

                        INSERT wwp.Participant (   [PinNumber] ,
                                                   [FirstName] ,
                                                   [MiddleInitialName] ,
                                                   [LastName] ,
                                                   [SuffixName] ,
                                                   [DateOfBirth] ,
                                                   [DateOfDeath] ,
                                                   [GenderIndicator] ,
                                                   [AliasResponse] ,
                                                   [BirthVerificationCode] ,
                                                   [BirthPlaceCode] ,
                                                   [CitizenshipVerificationCode] ,
                                                   [DCLCitizenshipSwitch] ,
                                                   [DeathVerificationCode] ,
                                                   [LanguageCode] ,
                                                   [MaxHistorySequenceNumber] ,
                                                   [PrimarySSNNumber] ,
                                                   [PseudoSSNNumber] ,
                                                   [RaceCode] ,
                                                   [SSNAppointmentDate] ,
                                                   [SSNAppointmentVerificationCode] ,
                                                   [SSNValidatedCode] ,
                                                   [CaresUpdatedDate] ,
                                                   [USCitizenSwitch] ,
                                                   [WorkerAlert1Code] ,
                                                   [WorkerAlert2Code] ,
                                                   [MaidNumber] ,
                                                   [ChildElsewhereSwitch] ,
                                                   [ChildVerificationCode] ,
                                                   [AmericanIndianIndicator] ,
                                                   [AsianIndicator] ,
                                                   [BlackIndicator] ,
                                                   [HispanicIndicator] ,
                                                   [PacificIslanderIndicator] ,
                                                   [WhiteIndicator] ,
                                                   [MCI_ID] ,
                                                   [MACitizenVerificationCode] ,
                                                   [TribeChildMemberIndicator] ,
                                                   [TribeChildVerificationCode] ,
                                                   [TribalMemberIndicator] ,
                                                   [TribalMemberVerificationCode] ,
                                                   [DeathDateSourceCode] ,
                                                   [WorkerOverideVerificationCode] ,
                                                   [CaseNumber] ,
                                                   [IsConfidentialCase] ,
                                                   [AssignedWorker] ,
                                                   [OfficeNumber] ,
                                                   [AgencyCode] ,
                                                   [CountyNumber] ,
                                                   [ConversionProjectDetails] ,
                                                   [ConversionDate] ,
                                                   [IsDeleted]
                                               )
                               SELECT [@temp].PinNumber ,
                                      FirstName ,
                                      MiddleInitialName ,
                                      LastName ,
                                      SuffixName ,
                                      DateOfBirth ,
                                      DateOfDeath ,
                                      GenderIndicator ,
                                      AliasResponse ,
                                      BirthVerificationCode ,
                                      BirthPlaceCode ,
                                      CitizenshipVerificationCode ,
                                      DCLCitizenshipSwitch ,
                                      DeathVerificationCode ,
                                      LanguageCode ,
                                      MaxHistorySequenceNumber ,
                                      PrimarySSNNumber ,
                                      PseudoSSNNumber ,
                                      RaceCode ,
                                      SSNAppointmentDate ,
                                      SSNAppointmentVerificationCode ,
                                      SSNValidatedCode ,
                                      CaresUpdatedDate ,
                                      USCitizenSwitch ,
                                      WorkerAlert1Code ,
                                      WorkerAlert2Code ,
                                      MaidNumber ,
                                      ChildElsewhereSwitch ,
                                      ChildVerificationCode ,
                                      AmericanIndianIndicator ,
                                      AsianIndicator ,
                                      BlackIndicator ,
                                      HispanicIndicator ,
                                      PacificIslanderIndicator ,
                                      WhiteIndicator ,
                                      MCI_ID ,
                                      MACitizenVerificationCode ,
                                      TribeChildMemberIndicator ,
                                      TribeChildVerificationCode ,
                                      TribalMemberIndicator ,
                                      TribalMemberVerificationCode ,
                                      DeathDateSourceCode ,
                                      WorkerOverideVerificationCode ,
                                      t1.CASENumber ,
                                      CASE cci.ConfidentialSwitch
                                           WHEN 'Y' THEN 1
                                           ELSE 0
                                      END ,
                                      '' ,
                                      t1.OfficeNumber ,
                                      ga.AgencyCode ,
                                      t1.CountyNumber ,
                                      'NEW PARTICIPANT' ,
                                      CURRENT_TIMESTAMP ,
                                      0
                               FROM   @temp
                                      LEFT OUTER JOIN @temp1 t1 ON t1.PinNumber = [@temp].PinNumber
                                      LEFT OUTER JOIN wwp.ConfidentialCaseInformation cci ON cci.CaseNumber = CONVERT(
                                                                                                                         NUMERIC(10, 0) ,
                                                                                                                         @CaseNum
                                                                                                                     )
                                      LEFT OUTER JOIN wwp.WPGeoArea ga ON ga.WPOfficeNumber = t1.OfficeNumber
                    END
                ELSE
                    BEGIN

                        UPDATE wwp.Participant
                        SET    FirstName = a.FirstName ,
                               MiddleInitialName = a.MiddleInitialName ,
                               LastName = a.LastName ,
                               SuffixName = a.SuffixName ,
                               DateOfBirth = a.DateOfBirth ,
                               DateOfDeath = a.DateOfDeath ,
                               GenderIndicator = a.GenderIndicator ,
                               AliasResponse = a.AliasResponse ,
                               BirthVerificationCode = a.BirthVerificationCode ,
                               BirthPlaceCode = a.BirthPlaceCode ,
                               CitizenshipVerificationCode = a.CitizenshipVerificationCode ,
                               DCLCitizenshipSwitch = a.DCLCitizenshipSwitch ,
                               DeathVerificationCode = a.DeathVerificationCode ,
                               LanguageCode = a.LanguageCode ,
                               MaxHistorySequenceNumber = a.MaxHistorySequenceNumber ,
                               PrimarySSNNumber = a.PrimarySSNNumber ,
                               PseudoSSNNumber = a.PseudoSSNNumber ,
                               RaceCode = a.RaceCode ,
                               SSNAppointmentDate = a.SSNAppointmentDate ,
                               SSNAppointmentVerificationCode = a.SSNAppointmentVerificationCode ,
                               SSNValidatedCode = a.SSNValidatedCode ,
                               CaresUpdatedDate = a.CaresUpdatedDate ,
                               USCitizenSwitch = a.USCitizenSwitch ,
                               WorkerAlert1Code = a.WorkerAlert1Code ,
                               WorkerAlert2Code = a.WorkerAlert2Code ,
                               MaidNumber = a.MaidNumber ,
                               ChildElsewhereSwitch = a.ChildElsewhereSwitch ,
                               ChildVerificationCode = a.ChildVerificationCode ,
                               AmericanIndianIndicator = a.AmericanIndianIndicator ,
                               AsianIndicator = a.AsianIndicator ,
                               BlackIndicator = a.BlackIndicator ,
                               HispanicIndicator = a.HispanicIndicator ,
                               PacificIslanderIndicator = a.PacificIslanderIndicator ,
                               WhiteIndicator = a.WhiteIndicator ,
                               MCI_ID = a.MCI_ID ,
                               MACitizenVerificationCode = a.MACitizenVerificationCode ,
                               TribeChildMemberIndicator = a.TribeChildMemberIndicator ,
                               TribeChildVerificationCode = a.TribeChildVerificationCode ,
                               TribalMemberIndicator = a.TribalMemberIndicator ,
                               TribalMemberVerificationCode = a.TribalMemberVerificationCode ,
                               DeathDateSourceCode = a.DeathDateSourceCode ,
                               WorkerOverideVerificationCode = a.WorkerOverideVerificationCode ,
                               CaseNumber = c.CASENumber ,
                               IsConfidentialCase = CASE cci.ConfidentialSwitch
                                                         WHEN 'Y' THEN 1
                                                         ELSE 0
                                                    END ,
                               AssignedWorker = cci.WorkerId ,
                               OfficeNumber = c.OfficeNumber ,
                               AgencyCode = ga.AgencyCode ,
                               CountyNumber = c.CountyNumber
                        FROM   wwp.Participant b
                               INNER JOIN @temp a ON b.PinNumber = a.PinNumber
                               LEFT OUTER JOIN @temp1 c ON c.PinNumber = b.PinNumber
                               LEFT OUTER JOIN wwp.ConfidentialCaseInformation cci ON cci.CaseNumber = CONVERT(
                                                                                                                  NUMERIC(10, 0) ,
                                                                                                                  @CaseNum
                                                                                                              )
                               LEFT OUTER JOIN wwp.WPGeoArea ga ON ga.WPOfficeNumber = c.OfficeNumber
                        WHERE  b.PinNumber = @PinNumber
                    END

            END




        SELECT *
        FROM   wwp.Participant
        WHERE  PinNumber = @PinNumber


    END;




GO
/****** Object:  StoredProcedure [wwp].[SP_RentPaid]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_RentPaid]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @statement1 = 'select  *
FROM OPENQUERY('+@LSDBName+', ''
 SELECT B.SHELTER_OBLG_AMT as SHELTER_PAY_AMT, B.SHELTER_TYPE_CD  ,ROW_NUMBER () OVER(ORDER BY B.PIN_NUM)  AS ID                                      
  FROM '+@DB2DBName+'.T0018_WP_INDV A,                                       
       '+@DB2DBName+'.T0063_IN_SHEL_COST B                                   
 WHERE  B.PIN_NUM  = '+@PinNumber+ '
   AND  B.PIN_NUM          = A.PIN_NUM                                 
   AND  B.DELETE_REASON_CD = '''' ''''                                       
   AND  B.HISTORY_CD      = 0                                          
   AND  B.EFF_END_MM      = 0                                          
   AND  B.SEQ_NUM         = ( SELECT MAX(C.SEQ_NUM)                    
                                FROM '+@DB2DBName+'.T0063_IN_SHEL_COST C     
                               WHERE C.PIN_NUM = B.PIN_NUM             
                                 AND  C.DELETE_REASON_CD = '''' ''''         
                                 AND  C.HISTORY_CD      = 0            
								 AND  C.EFF_END_MM      = 0 )      
  AND  B.HISTORY_SEQ_NUM =                                        
                              ( SELECT MAX(D.HISTORY_SEQ_NUM)     
                               FROM '+@DB2DBName+'.T0063_IN_SHEL_COST D 
                              WHERE  D.PIN_NUM = B.PIN_NUM        
                                AND  D.DELETE_REASON_CD = '''' ''''     
                                AND  D.HISTORY_CD      = 0        
                                AND  D.EFF_END_MM      = 0 )      
                    WITH UR ; '')                                  



  '

exec (@statement1) 


print @statement1


end
	
	 
	                                               
  

GO
/****** Object:  StoredProcedure [wwp].[SP_RFA_System_Denial]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
--EXEC [wwp].[SP_RFA_System_Denial]
CREATE PROCEDURE [wwp].[SP_RFA_System_Denial]
@Debug BIT = 0
AS
BEGIN
	DECLARE @Count INT = 1,
			@Max INT

	DECLARE @RFADenial TABLE
	(
	 Id INT IDENTITY(1,1),
	 PinNumber DECIMAL(10,0),
	 RFAId INT,
	 RFANumber DECIMAL(10,0),
	 RFAStatus VARCHAR(50)
	)

	---
	INSERT INTO @RFADenial (PinNumber, RFAId, RFANumber, RFAStatus)
	SELECT P.PinNumber, R.Id, R.RfaNumber, RS.Name
	FROM wwp.Participant P
	INNER JOIN wwp.RequestForAssistance R
		ON P.Id = R.ParticipantId
	LEFT JOIN wwp.RequestForAssistanceStatus RS
		ON R.RequestForAssistanceStatusId = RS.Id
	WHERE R.Id IN (SELECT Id
				   FROM cdc.wwp_RequestForAssistance_CT
				   WHERE Id IN (SELECT Id
								FROM wwp.RequestForAssistance
								WHERE RequestForAssistanceStatusId = 1)
				   AND __$operation = 2
				   AND DATEDIFF(DAY, CAST(ModifiedDate AS DATE), CAST(GETDATE() AS DATE)) >= 30)

	--SELECT * FROM @RFADenial

	---
	DECLARE @PINNUM             VARCHAR(10)
	DECLARE @RFATYPE            VARCHAR (2)
	DECLARE @ACTIONMODE         VARCHAR (1)
	DECLARE @FIRSTNAM           VARCHAR(50)
	DECLARE @LASTNAM            VARCHAR(50)
	DECLARE @MIDDLENAM          VARCHAR (1)
	DECLARE @SUFFIXNAM          VARCHAR (3)
	DECLARE @LANGUAGEIND		VARCHAR (1)
	DECLARE @CNTYNUM            VARCHAR(04)
	DECLARE @COURTORDCTYNUM     VARCHAR(04)
	DECLARE @COURTORDEFFDT      VARCHAR(10)
	DECLARE @RFATS              VARCHAR(26)
	DECLARE @HHSTREETNUM        VARCHAR(09)
	DECLARE @HHSTREETADR		VARCHAR(20)
	DECLARE @HHLINE2ADR         VARCHAR(200)
	DECLARE @CITYADR            VARCHAR(50)
	DECLARE @STATEADR           VARCHAR(50)
	DECLARE @ZIPADR             VARCHAR(10)
	DECLARE @HHPHONENUM         VARCHAR(10)
	DECLARE @APPSTSREASONCD     VARCHAR(03)
	DECLARE @RFASTSCHANGEDT     VARCHAR(10)
	DECLARE @WORKERID           VARCHAR (6)
	DECLARE @INPUTRFANUM        VARCHAR(10)
	DECLARE @RFANUM             VARCHAR(10)
	DECLARE @RETURNSTSCD        VARCHAR (1)
	DECLARE @FATALERRINFO       VARCHAR(250)

	SELECT @Max = COUNT(*)
	FROM @RFADenial

	IF @Debug = 0
	BEGIN
		WHILE @Count <= @Max
		BEGIN
			SELECT @PINNUM		 = PinNumber FROM @RFADenial WHERE Id = @Count
			SET @RFATYPE		 = ' '
			SET @ACTIONMODE		 = 'D'
			SET @FIRSTNAM		 = ' '
			SET @LASTNAM		 = ' '
			SET @MIDDLENAM		 = ' '
			SET @SUFFIXNAM		 = ' '
			SET @LANGUAGEIND	 = ' '
			SET @CNTYNUM		 = 0
			SET @COURTORDCTYNUM  = 0
			SET @COURTORDEFFDT   = '9999-12-31'
			SET @RFATS           = CONVERT(VARCHAR(19), GETDATE(), 120)
			SET @HHSTREETNUM     = ' '
			SET @HHSTREETADR     = ' '
			SET @HHLINE2ADR      = ' '
			SET @CITYADR         = ' '
			SET @STATEADR        = ' '
			SET @ZIPADR          = ' '
			SET @HHPHONENUM      = ' '
			SET @APPSTSREASONCD  = 'P30'
			SET	@RFASTSCHANGEDT  = CONVERT(VARCHAR(19), GETDATE(), 120)
			SET @WORKERID        = 'WWP'
			SELECT @INPUTRFANUM  = RFANumber FROM @RFADenial WHERE Id = @Count

			PRINT @Count
			PRINT @PINNUM
			PRINT @INPUTRFANUM

			EXEC('call PWS639SC.PWCWPD06(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
				 @PINNUM,
				 @RFATYPE,
				 @ACTIONMODE,
				 @FIRSTNAM,
				 @LASTNAM,
				 @MIDDLENAM,
				 @SUFFIXNAM,
				 @LANGUAGEIND,
				 @CNTYNUM,
				 @COURTORDCTYNUM,
				 @COURTORDEFFDT,
				 @RFATS,
				 @HHSTREETNUM,
				 @HHSTREETADR,
				 @HHLINE2ADR,
				 @CITYADR,
				 @STATEADR,
				 @ZIPADR,
				 @HHPHONENUM,
				 @APPSTSREASONCD,
				 @RFASTSCHANGEDT,
				 @WORKERID,
				 @INPUTRFANUM,
				 @RFANUM OUTPUT,
				 @RETURNSTSCD OUTPUT,
				 @FATALERRINFO OUTPUT   
				)
			AT NETWINFO_D00S_DB2
		
			SET @Count += 1
		END

		---
		UPDATE wwp.RequestForAssistance
		SET RequestForAssistanceStatusId = 6, RequestForAssistanceStatusDate = GETDATE(), ModifiedDate = GETDATE(), ModifiedBy = 'WWP Batch'
		WHERE Id IN (SELECT RFAId
					 FROM @RFADenial)

		
		UPDATE @RFADenial
		SET RFAStatus = 'RFA Denied - System'
		---
	END

	SELECT P.PinNumber, R.RFANumber, RS.Name RFAStatus
	FROM wwp.Participant P
		INNER JOIN wwp.RequestForAssistance R
			ON P.Id = R.ParticipantId
		LEFT JOIN wwp.RequestForAssistanceStatus RS
			ON R.RequestForAssistanceStatusId = RS.Id
	WHERE R.RfaNumber IN (SELECT RFANumber
						  FROM @RFADenial)
	ORDER BY P.PinNumber

END
GO
/****** Object:  StoredProcedure [wwp].[SP_SelectCARESEmployment]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>  @LinkedServer = 'MyLinkedServer'
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[SP_SelectCARESEmployment] 
(
@pinnum varchar(10),
@SchemaName varchar(20)
)
as begin


declare @statement1 as varchar(max);


IF EXISTS (SELECT * FROM  wwp.CARESEmployment 
           WHERE PARTICIPANT = @pinnum)


  BEGIN
  print '1a'
     SELECT 
	 PARTICIPANT ,
    EMPLOYMENTSEQUENCENUMBER ,
    EMPLOYERNAME ,
    EMPLOYERADDRESS ,
	CITY ,
	STATE ,
	ZIP,
	PHONENUMBER,
	FAXNUMBER,
	EMPLOYMENTBEGINDATE,
	EMPLOYMENTENDDATE,
	CASE (EMPLOYMENTTYPE) WHEN 'A' THEN 'AUTO UPDATE'
                    WHEN 'C' THEN 'CENSUS ENUMERATOR'
							 WHEN 'F' THEN 'FRAUD'
							 WHEN 'H' THEN 'OTHER'
							 WHEN 'I' THEN 'WORKFORCE INVESTMENT ACT'
							WHEN 'M' THEN 'AMERICORPS'
							WHEN 'O' THEN 'ON THE JOB TRAINING'
							WHEN 'P' THEN 'PUBLIC SERVICE EMPLOYMENT'
							WHEN 'R' THEN 'REGULAR EMPLOYMENT'
							WHEN 'T' THEN 'SUBSIDIZED EMPLOYMENT'
							WHEN 'W' THEN 'WORK SUPPLEMENTATION'
        END AS EMPLOYMENTTYPE,

	 CASE (PAYFREQUENCY) WHEN 'A' THEN 'AUTO UPDATE'
                     WHEN 'B' THEN 'BI-WEEKLY'
 					WHEN 'I' THEN 'IRREGULAR'
 					WHEN 'M' THEN 'MONTHLY'
 					WHEN 'S' THEN 'SEMI-MONTHLY'
 					WHEN 'W' THEN 'WEEKLY'
 					END  AS PAYFREQUENCY,
					 
					


 CASE (WAGETYPE) WHEN 'COM' THEN 'COMMISSIONS AND BONUS PAY'
                 WHEN 'HOL' THEN 'HOLIDAY PAY'
				WHEN 'OSP' THEN 'OTHER SHIFT PAY'
 				WHEN 'OTH' THEN 'OTHER PAY TYPE'
 				WHEN 'OTP' THEN 'OVER TIME PAY'
 				WHEN 'REG' THEN 'REGULAR PAY'
 				WHEN 'SAL' THEN  'SALARY'
 				WHEN 'TIP' THEN 'CASH TIPS'
 				WHEN 'WKD' THEN 'WEEK END PAY'
				END AS WAGETYPE ,
	HOURLYRATEAMOUNT,
	AVERAGEWORKHOURS,
	EMPLOYMENTTYPETOTAL,
	SEQUENCEID AS ID
    
	   FROM  wwp.CARESEmployment 
      WHERE PARTICIPANT = @pinnum
  END
 

ELSE

  BEGIN
  print '2a'
 
   Declare @temp table
    (
    [PARTICIPANT] [decimal](10, 0) NULL,
    [EMPLOYMENTSEQUENCENUMBER] [int] NULL,
    [EMPLOYERNAME] [varchar](50) NULL,
    [EMPLOYERADDRESS]	[varchar](50) NULL,
	[CITY]	[varchar](50)  NULL,
	[STATE]	[varchar](50) NULL,
	[ZIP]	[varchar](9) NULL,
	[PHONENUMBER]	[varchar](20) NULL,
	[FAXNUMBER]	[varchar](20) NULL,
	[EMPLOYMENTBEGINDATE]	[date] NULL,
	[EMPLOYMENTENDDATE]	[date] NULL,
	[EMPLOYMENTTYPE]	[varchar](30) NULL,
	[PAYFREQUENCY]	[varchar](30) NULL,
	[WAGETYPE]	[varchar](30) NULL,
	[HOURLYRATEAMOUNT]	[varchar](50) NULL,
	[AVERAGEWORKHOURS]	[varchar](50) NULL,
	[EMPLOYMENTTYPETOTAL]	[varchar](50) NULL,
	[SEQUENCEID]	[int]  NULL
    )

 
  insert into @temp
  exec [wwp].[SP_CARESEmployment] @pinnumber = @pinnum, @SchemaName = @SchemaName
 
  SELECT 
	 PARTICIPANT ,
    EMPLOYMENTSEQUENCENUMBER ,
    EMPLOYERNAME ,
    EMPLOYERADDRESS ,
	CITY ,
	STATE ,
	ZIP,
	PHONENUMBER,
	FAXNUMBER,
	EMPLOYMENTBEGINDATE,
	EMPLOYMENTENDDATE,
	CASE (EMPLOYMENTTYPE) WHEN 'A' THEN 'AUTO UPDATE'
                    WHEN 'C' THEN 'CENSUS ENUMERATOR'
							 WHEN 'F' THEN 'FRAUD'
							 WHEN 'H' THEN 'OTHER'
							 WHEN 'I' THEN 'WORKFORCE INVESTMENT ACT'
							WHEN 'M' THEN 'AMERICORPS'
							WHEN 'O' THEN 'ON THE JOB TRAINING'
							WHEN 'P' THEN 'PUBLIC SERVICE EMPLOYMENT'
							WHEN 'R' THEN 'REGULAR EMPLOYMENT'
							WHEN 'T' THEN 'SUBSIDIZED EMPLOYMENT'
							WHEN 'W' THEN 'WORK SUPPLEMENTATION'
        END AS EMPLOYMENTTYPE,

	 CASE (PAYFREQUENCY) WHEN 'A' THEN 'AUTO UPDATE'
                     WHEN 'B' THEN 'BI-WEEKLY'
 					WHEN 'I' THEN 'IRREGULAR'
 					WHEN 'M' THEN 'MONTHLY'
 					WHEN 'S' THEN 'SEMI-MONTHLY'
 					WHEN 'W' THEN 'WEEKLY'
 					END  AS PAYFREQUENCY,
					 
					


 CASE (WAGETYPE) WHEN 'COM' THEN 'COMMISSIONS AND BONUS PAY'
                 WHEN 'HOL' THEN 'HOLIDAY PAY'
				WHEN 'OSP' THEN 'OTHER SHIFT PAY'
 				WHEN 'OTH' THEN 'OTHER PAY TYPE'
 				WHEN 'OTP' THEN 'OVER TIME PAY'
 				WHEN 'REG' THEN 'REGULAR PAY'
 				WHEN 'SAL' THEN  'SALARY'
 				WHEN 'TIP' THEN 'CASH TIPS'
 				WHEN 'WKD' THEN 'WEEK END PAY'
				END AS WAGETYPE ,
	HOURLYRATEAMOUNT,
	AVERAGEWORKHOURS,
	EMPLOYMENTTYPETOTAL,
	SEQUENCEID AS ID from @temp
  print '3a'
  insert into wwp.CARESEMPLOYMENT
  select * from @temp 

 end 
 
 end ;

GO
/****** Object:  StoredProcedure [wwp].[SP_SocialSecurityStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/***************************************************************************************************************************************************************************/
CREATE PROCEDURE [wwp].[SP_SocialSecurityStatus]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @statement2 as varchar(max);
declare @statement3 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

-----------------------------------------------    DECLARE TEMP TABLE           ---------------------------------------------------------------------------------


  DECLARE @temp TABLE
            (
              [PARTICIPANT] [DECIMAL](10, 0) NULL ,
              [FIRST_NAM] [VARCHAR](30) NULL ,
			  [MIDDLE_INITIAL_NAM] [VARCHAR](02) NULL ,
              [LAST_NAM] [VARCHAR](30) NULL ,
			  [DOB_DT] [DATE] NULL,
			  [REL_CD] [VARCHAR](3) NULL ,
			  [AGE][VARCHAR](03) NULL,
              [FED_SSI] [VARCHAR](01) NULL ,
              [STATE_SSI] [VARCHAR](01) NULL ,
              [SSA] [VARCHAR](01) NULL,
			  [ID] [VARCHAR] (20) NULL
            );


--------------------STEP1 ----------------------------------- PARTICIPANTS IN BOTH THE SSI AND SSA	  -------------------------------


set @statement1 = 'select *
FROM OPENQUERY('+@LSDBName+', '' SELECT DISTINCT A.SOURCE_PIN_NUM , B.FIRST_NAM,B.MIDDLE_INITIAL_NAM,B.LAST_NAM ,
        B.DOB_DT , A.REL_CD , ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) AS AGE,
		 CASE C.SSI_GROSS_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS FED_SSI , 
		 CASE C.SSI_ST_GROSS_AMT WHEN 0 THEN ''''N'''' ELSE ''''Y'''' END  AS STATE_SSI , 
		 CASE D.SSA_GRS_PAY_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS SSA,
		 ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM)  AS ID   
FROM 	 '+@DB2DBName+'.T0116_CS_IN_HH_REL A,                                
         '+@DB2DBName+'.T0011_INDIVIDUAL B, 
         '+@DB2DBName+'.T0126_DX_SSI_DATA C,
		 '+@DB2DBName+'.T0097_DX_SSA_BEN D
 WHERE  A.REFERENCE_PIN_NUM = '+@PinNumber+ ' 
   AND  A.HISTORY_CD         = 0                                      
   AND  A.DELETE_REASON_CD  = '''' ''''  
   AND  (A.REL_CD = ''''SON'''' OR A.REL_CD =''''DAU'''' OR A.REL_CD =''''STD'''' OR A.REL_CD =''''STS'''' 
         OR A.REL_CD =''''NOT'''' OR A.REL_CD =''''NQR'''' OR A.REL_CD =''''OQR''''
         OR A.REL_CD = ''''HUS'''' OR A.REL_CD = ''''WIF''''  )
   AND  B.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.MATCH_DT = (SELECT  MAX(CC.MATCH_DT) 
                        FROM   '+@DB2DBName+'.T0126_DX_SSI_DATA CC 
				   WHERE CC.PIN_NUM = C.PIN_NUM )
   AND  D.PIN_NUM  = A.SOURCE_PIN_NUM 
   AND  D.SSA_EXG_TYPE_CD = ''''SOLQ''''
   AND  SUBSTR(BENEFICIARY_CD,1,1) IN (''''A'''',''''C'''')           
   AND  D.SSA_DISABILITY_MM >  0 
                    WITH UR ;
   '') '

print @statement1

------------------  INSERT FROM THE EXECUTED STATEMENT -----------------------------------------------------------------------------
  INSERT  INTO @temp
     exec (@statement1) 

--------------------STEP 2----------------------------------- PARTICIPANTS IN SSI AND NOT IN SSA	  -------------------------------


set @statement2 = 'select *
FROM OPENQUERY('+@LSDBName+', '' SELECT DISTINCT A.SOURCE_PIN_NUM , B.FIRST_NAM,B.MIDDLE_INITIAL_NAM,B.LAST_NAM ,
        B.DOB_DT , A.REL_CD , ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) AS AGE,
		 CASE C.SSI_GROSS_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS FED_SSI , 
		 CASE C.SSI_ST_GROSS_AMT WHEN 0 THEN ''''N'''' ELSE ''''Y'''' END  AS STATE_SSI , 
         ''''N'''' AS SSA,
		 ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM)  AS ID   
FROM 	 '+@DB2DBName+'.T0116_CS_IN_HH_REL A,                                
         '+@DB2DBName+'.T0011_INDIVIDUAL B, 
         '+@DB2DBName+'.T0126_DX_SSI_DATA C
	  
 WHERE  A.REFERENCE_PIN_NUM = '+@PinNumber+ ' 
   AND  A.HISTORY_CD         = 0                                      
   AND  A.DELETE_REASON_CD  = '''' ''''  
   AND  (A.REL_CD = ''''SON'''' OR A.REL_CD =''''DAU'''' OR A.REL_CD =''''STD'''' OR A.REL_CD =''''STS'''' OR A.REL_CD =''''NOT'''' OR A.REL_CD =''''NQR'''' OR A.REL_CD =''''OQR''''
         OR A.REL_CD = ''''HUS'''' OR A.REL_CD = ''''WIF''''  )
   AND  B.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.MATCH_DT = (SELECT  MAX(CC.MATCH_DT) 
                        FROM   '+@DB2DBName+'.T0126_DX_SSI_DATA CC 
				   WHERE CC.PIN_NUM = C.PIN_NUM )
   AND C.PIN_NUM NOT IN ( SELECT D.PIN_NUM FROM  '+@DB2DBName+'.T0097_DX_SSA_BEN D 
                    WHERE D.PIN_NUM  = C.PIN_NUM 
					  AND D.SSA_EXG_TYPE_CD = ''''SOLQ''''
                      AND SUBSTR(BENEFICIARY_CD,1,1) IN (''''A'''',''''C'''')           
                      AND D.SSA_DISABILITY_MM >  0 
			     )

                    WITH UR 
   '') '

print @statement2

--exec (@statement2) 

--print @statement2


------------------  INSERT FROM THE EXECUTED STATEMENT -----------------------------------------------------------------------------

  INSERT  INTO @temp
                EXEC (@statement2) 
		

------------------STEP 3------------------------------------- PARTICIPANTS IN SSA AND NOT IN SSI	  -------------------------------
set @statement3 = 'select *
FROM OPENQUERY('+@LSDBName+', '' SELECT DISTINCT A.SOURCE_PIN_NUM , B.FIRST_NAM,B.MIDDLE_INITIAL_NAM,B.LAST_NAM ,
        B.DOB_DT , A.REL_CD , ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) AS AGE,
		  ''''N'''' AS FED_SSI , 
		  ''''N'''' AS STATE_SSI , 
          CASE D.SSA_GRS_PAY_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS SSA,
		 ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM)  AS ID   
FROM 	 '+@DB2DBName+'.T0116_CS_IN_HH_REL A,                                
         '+@DB2DBName+'.T0011_INDIVIDUAL B, 
	     '+@DB2DBName+'.T0097_DX_SSA_BEN D 
 WHERE  A.REFERENCE_PIN_NUM = '+@PinNumber+ ' 
   AND  A.HISTORY_CD         = 0                                      
   AND  A.DELETE_REASON_CD  = '''' ''''  
   AND  (A.REL_CD = ''''SON'''' OR A.REL_CD =''''DAU'''' OR A.REL_CD =''''STD'''' OR A.REL_CD =''''STS'''' OR A.REL_CD =''''NOT'''' OR A.REL_CD =''''NQR'''' OR A.REL_CD =''''OQR''''
         OR A.REL_CD = ''''HUS'''' OR A.REL_CD = ''''WIF''''  )
   AND  B.PIN_NUM = A.SOURCE_PIN_NUM
   AND D.PIN_NUM  = A.SOURCE_PIN_NUM 
   AND D.SSA_EXG_TYPE_CD = ''''SOLQ''''
   AND SUBSTR(BENEFICIARY_CD,1,1) IN (''''A'''',''''C'''')           
   AND D.SSA_DISABILITY_MM >  0 
   AND D.PIN_NUM NOT IN ( SELECT C.PIN_NUM FROM  '+@DB2DBName+'.T0126_DX_SSI_DATA C
                            WHERE  C.PIN_NUM = D.PIN_NUM
                              AND  C.MATCH_DT = (SELECT  MAX(CC.MATCH_DT) 
                                                   FROM   '+@DB2DBName+'.T0126_DX_SSI_DATA CC 
				                                  WHERE CC.PIN_NUM = C.PIN_NUM )
                    
			             )

                    WITH UR 
   '') '

print @statement3

 

------------------  INSERT FROM THE EXECUTED STATEMENT -----------------------------------------------------------------------------

INSERT  INTO @temp
                EXEC (@statement3) 

----------------------------------------------------   SELECT FROM TEMP TABLE     -------------------------------		
		SELECT PARTICIPANT   ,
              FIRST_NAM  ,
			  MIDDLE_INITIAL_NAM  ,
              LAST_NAM ,
			  DOB_DT ,
			  CASE REL_CD  WHEN 'SON' THEN 'SON'
			               WHEN 'DAU' THEN 'DAUGHTER'
						   WHEN 'STD' THEN 'STEP-DAUGHTER'
						   WHEN 'STS' THEN 'STEP-SON'
						   WHEN 'NOT' THEN 'NOT RELATED'
						   WHEN 'NQR' THEN 'NON QUALIFIED REL'
						   WHEN 'OQR' THEN 'OTHER QUALIFIED REL'
						   WHEN 'HUS' THEN 'HUSBAND'
						   WHEN 'WIF' THEN 'WIFE'
              END AS REL_CD,
			  AGE ,
              FED_SSI  ,
              STATE_SSI  ,
              SSA ,
			  ROW_NUMBER() OVER(ORDER BY PARTICIPANT) AS ID
        FROM    @temp;

END
	
	 
GO
/****** Object:  StoredProcedure [wwp].[SP_SSIStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_SSIStatus]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @statement2 as varchar(max);
declare @statement3 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

-----------------------------------------------    DECLARE TEMP TABLE           ---------------------------------------------------------------------------------


  DECLARE @temp TABLE
            (
              [PARTICIPANT] [DECIMAL](10, 0) NULL ,
              [FIRST_NAM] [VARCHAR](30) NULL ,
			  [MIDDLE_INITIAL_NAM] [VARCHAR](02) NULL ,
              [LAST_NAM] [VARCHAR](30) NULL ,
			  [DOB_DT] [DATE] NULL,
			  [REL_CD] [VARCHAR](3) NULL ,
			  [AGE][VARCHAR](03) NULL,
              [FED_SSI] [VARCHAR](01) NULL ,
              [STATE_SSI] [VARCHAR](01) NULL ,
              [SSA] [VARCHAR](01) NULL,
			  [ID] [VARCHAR] (20) NULL
            );


------------------------------------------------------- PARTICIPANTS IN BOTH THE SSI AND SSA	  -------------------------------


set @statement1 = 'select *
FROM OPENQUERY('+@LSDBName+', '' SELECT DISTINCT A.SOURCE_PIN_NUM , B.FIRST_NAM,B.MIDDLE_INITIAL_NAM,B.LAST_NAM ,
        B.DOB_DT , A.REL_CD , ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) AS AGE,
		 CASE C.SSI_GROSS_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS FED_SSI , 
		 CASE C.SSI_ST_GROSS_AMT WHEN 0 THEN ''''N'''' ELSE ''''Y'''' END  AS STATE_SSI , 
		 CASE D.SSA_GRS_PAY_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS SSA,
		 ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM)  AS ID   
FROM 	 '+@DB2DBName+'.T0116_CS_IN_HH_REL A,                                
         '+@DB2DBName+'.T0011_INDIVIDUAL B, 
         '+@DB2DBName+'.T0126_DX_SSI_DATA C,
		 '+@DB2DBName+'.T0097_DX_SSA_BEN D
 WHERE  A.REFERENCE_PIN_NUM = '+@PinNumber+ ' 
   AND  A.HISTORY_CD         = 0                                      
   AND  A.DELETE_REASON_CD  = '''' ''''  
   AND  (A.REL_CD = ''''SON'''' OR A.REL_CD =''''DAU'''' OR A.REL_CD =''''STD'''' OR A.REL_CD =''''STS'''' 
         OR A.REL_CD =''''NOT'''' OR A.REL_CD =''''NQR'''' OR A.REL_CD =''''OQR''''
         OR A.REL_CD = ''''HUS'''' OR A.REL_CD = ''''WIF''''  )
   AND  B.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.MATCH_DT = (SELECT  MAX(CC.MATCH_DT) 
                        FROM   '+@DB2DBName+'.T0126_DX_SSI_DATA CC 
				   WHERE CC.PIN_NUM = C.PIN_NUM )
   AND  D.PIN_NUM  = A.SOURCE_PIN_NUM 
   AND  D.SSA_EXG_TYPE_CD = ''''SOLQ''''
   AND  SUBSTR(BENEFICIARY_CD,1,1) IN (''''A'''',''''C'''')           
   AND  D.SSA_DISABILITY_MM >  0 
                    WITH UR ;
   '') '

print @statement1

  INSERT  INTO @temp
     exec (@statement1) 

------------------------------------------------------- PARTICIPANTS IN SSI AND NOT IN SSA	  -------------------------------


set @statement2 = 'select *
FROM OPENQUERY('+@LSDBName+', '' SELECT DISTINCT A.SOURCE_PIN_NUM , B.FIRST_NAM,B.MIDDLE_INITIAL_NAM,B.LAST_NAM ,
        B.DOB_DT , A.REL_CD , ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) AS AGE,
		 CASE C.SSI_GROSS_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS FED_SSI , 
		 CASE C.SSI_ST_GROSS_AMT WHEN 0 THEN ''''N'''' ELSE ''''Y'''' END  AS STATE_SSI , 
         ''''N'''' AS SSA,
		 ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM)  AS ID   
FROM 	 '+@DB2DBName+'.T0116_CS_IN_HH_REL A,                                
         '+@DB2DBName+'.T0011_INDIVIDUAL B, 
         '+@DB2DBName+'.T0126_DX_SSI_DATA C
	  
 WHERE  A.REFERENCE_PIN_NUM = '+@PinNumber+ ' 
   AND  A.HISTORY_CD         = 0                                      
   AND  A.DELETE_REASON_CD  = '''' ''''  
   AND  (A.REL_CD = ''''SON'''' OR A.REL_CD =''''DAU'''' OR A.REL_CD =''''STD'''' OR A.REL_CD =''''STS'''' OR A.REL_CD =''''NOT'''' OR A.REL_CD =''''NQR'''' OR A.REL_CD =''''OQR''''
         OR A.REL_CD = ''''HUS'''' OR A.REL_CD = ''''WIF''''  )
   AND  B.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.PIN_NUM = A.SOURCE_PIN_NUM
   AND  C.MATCH_DT = (SELECT  MAX(CC.MATCH_DT) 
                        FROM   '+@DB2DBName+'.T0126_DX_SSI_DATA CC 
				   WHERE CC.PIN_NUM = C.PIN_NUM )
   AND C.PIN_NUM NOT IN ( SELECT D.PIN_NUM FROM  '+@DB2DBName+'.T0097_DX_SSA_BEN D 
                    WHERE D.PIN_NUM  = C.PIN_NUM 
					  AND D.SSA_EXG_TYPE_CD = ''''SOLQ''''
                      AND SUBSTR(BENEFICIARY_CD,1,1) IN (''''A'''',''''C'''')           
                      AND D.SSA_DISABILITY_MM >  0 
			     )

                    WITH UR 
   '') '

print @statement2

--exec (@statement2) 

--print @statement2



  INSERT  INTO @temp
                EXEC (@statement2) 
		

------------------------------------------------------- PARTICIPANTS IN SSA AND NOT IN SSI	  -------------------------------
set @statement3 = 'select *
FROM OPENQUERY('+@LSDBName+', '' SELECT DISTINCT A.SOURCE_PIN_NUM , B.FIRST_NAM,B.MIDDLE_INITIAL_NAM,B.LAST_NAM ,
        B.DOB_DT , A.REL_CD , ((DAYS(DATE(CURRENT DATE)) - DAYS(B.DOB_DT))/365) AS AGE,
		  ''''N'''' AS FED_SSI , 
		  ''''N'''' AS STATE_SSI , 
          CASE D.SSA_GRS_PAY_AMT WHEN 0.00 THEN ''''N'''' ELSE ''''Y'''' END AS SSA,
		 ROW_NUMBER () OVER(ORDER BY A.SOURCE_PIN_NUM)  AS ID   
FROM 	 '+@DB2DBName+'.T0116_CS_IN_HH_REL A,                                
         '+@DB2DBName+'.T0011_INDIVIDUAL B, 
	     '+@DB2DBName+'.T0097_DX_SSA_BEN D 
 WHERE  A.REFERENCE_PIN_NUM = '+@PinNumber+ ' 
   AND  A.HISTORY_CD         = 0                                      
   AND  A.DELETE_REASON_CD  = '''' ''''  
   AND  (A.REL_CD = ''''SON'''' OR A.REL_CD =''''DAU'''' OR A.REL_CD =''''STD'''' OR A.REL_CD =''''STS'''' OR A.REL_CD =''''NOT'''' OR A.REL_CD =''''NQR'''' OR A.REL_CD =''''OQR''''
         OR A.REL_CD = ''''HUS'''' OR A.REL_CD = ''''WIF''''  )
   AND  B.PIN_NUM = A.SOURCE_PIN_NUM
   AND D.PIN_NUM  = A.SOURCE_PIN_NUM 
   AND D.SSA_EXG_TYPE_CD = ''''SOLQ''''
   AND SUBSTR(BENEFICIARY_CD,1,1) IN (''''A'''',''''C'''')           
   AND D.SSA_DISABILITY_MM >  0 
   AND D.PIN_NUM NOT IN ( SELECT C.PIN_NUM FROM  '+@DB2DBName+'.T0126_DX_SSI_DATA C
                            WHERE  C.PIN_NUM = D.PIN_NUM
                              AND  C.MATCH_DT = (SELECT  MAX(CC.MATCH_DT) 
                                                   FROM   '+@DB2DBName+'.T0126_DX_SSI_DATA CC 
				                                  WHERE CC.PIN_NUM = C.PIN_NUM )
                    
			             )

                    WITH UR 
   '') '

print @statement3

--exec (@statement3) 


INSERT  INTO @temp
                EXEC (@statement3) 
		
		SELECT PARTICIPANT   ,
              FIRST_NAM  ,
			  MIDDLE_INITIAL_NAM  ,
              LAST_NAM ,
			  DOB_DT ,
			  REL_CD ,
			  AGE ,
              FED_SSI  ,
              STATE_SSI  ,
              SSA ,
			  ROW_NUMBER() OVER(ORDER BY PARTICIPANT) AS ID
        FROM    @temp;

end
	
	 
GO
/****** Object:  StoredProcedure [wwp].[SP_SubsidizedHousing]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_SubsidizedHousing]


(
@PinNumber VARCHAR(10),
@YYYYMM VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
declare @Case as varchar(10) ;
 
 
   	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
						END
	---


		set @statement1 = 'SELECT  *
		                     FROM OPENQUERY('+@LSDBName+', '' SELECT  A.CASE_NUM,
							                                          CASE SUBSD_HSE_CD WHEN 1  THEN ''''PUBLIC HOUSING''''  
																	  WHEN 2 THEN ''''RENT SUBSIDY'''' 
																	  WHEN 3 THEN ''''NO HOUSING SUBSIDY'''' END AS SUBSD_HSE_TEXT,  
																	  CASE SUBSD_HSE_CD WHEN 1  THEN ''''Y''''  
																	  WHEN 2 THEN ''''Y'''' 
																	  WHEN 3 THEN ''''N'''' END AS SUBSD_HSE_CD,                              
				                                                      EFF_BEGIN_MM,
																	  EFF_END_MM ,
																	  ROW_NUMBER () OVER(ORDER BY A.CASE_NUM)  AS ID                                              
																FROM  '+@DB2DBName+'.T0117_SUBSD_HSE   A,     
																	  '+@DB2DBName+'.T0018_WP_INDV    Z                    
															    WHERE  Z.PIN_NUM   = '+@PinNumber+'
																  AND  A.CASE_NUM  = Z.CASE_NUM
																  AND  A.EFF_BEGIN_MM    <= '+@YYYYMM+'      
																  AND  A.EFF_BEGIN_MM     =                         
																	 (                                               
																		  SELECT  MAX(B.EFF_BEGIN_MM)                    
																			FROM '+@DB2DBName+'.T0117_SUBSD_HSE    B                   
																		   WHERE  B.CASE_NUM         = A.CASE_NUM        
																			 AND  B.EFF_BEGIN_MM    <= '+@YYYYMM+'  
																	 ) 
																  AND  A.HISTORY_SEQ_NUM  =                         
																	 (                                               
																	  SELECT  MAX(C.HISTORY_SEQ_NUM)                 
																		  FROM  '+@DB2DBName+'.T0117_SUBSD_HSE   C                     
																		 WHERE  C.CASE_NUM         = A.CASE_NUM         
																		  AND  C.EFF_BEGIN_MM     = A.EFF_BEGIN_MM  )
		  
																		   '')            '
 
		exec (@statement1) 


 

end
	
	 
	                                               
         

GO
/****** Object:  StoredProcedure [wwp].[SP_Test_CARESDELTAEmployment]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[SP_Test_CARESDELTAEmployment] 
(
@pinnum varchar(10)
)
as begin


declare @statement1 as varchar(max);



IF EXISTS (SELECT * FROM  wwp.CARESNEWEmployment 
  WHERE PARTICIPANT = @pinnum)
BEGIN
 print '1'
 SELECT * FROM  wwp.CARESNEWEmployment 
  WHERE PARTICIPANT = @pinnum
END
ELSE
begin
 print '2'
 declare @temp table
(
    [PARTICIPANT] [decimal](10, 0) NULL,
     [EMPLOYMENTSEQUENCENUMBER] [int] NULL,
     [EMPLOYERNAME] [varchar](50) NULL
)

print '2b'

insert into @temp
exec [wwp].[SP_CARESNEWEmployment] @pin1 = @pinnum


print '2c' 

select * from @temp

insert into wwp.CARESNEWEMPLOYMENT
select * from @temp 


print '2d'
end 
 
 
print '2e'
 end ;

GO
/****** Object:  StoredProcedure [wwp].[SP_TestCARESEXTRAEmployment]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>  @LinkedServer = 'MyLinkedServer'
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [wwp].[SP_TestCARESEXTRAEmployment] 
(
@pin1 varchar(10)
)
as begin

---exec [WWPDEV].[wwp].SP_CARESEmployment @pinnumber=@pin1
declare @statement1 as varchar(max);
declare @pinnum decimal(10,0)

 SET @pinnum = CONVERT(decimal(10), @pin1 );
IF EXISTS (SELECT * FROM  wwp.CARESNEWEmployment 
            WHERE PARTICIPANT = @pin1)
  BEGIN
     SELECT * 
	   FROM  wwp.CARESNEWEmployment 
      WHERE PARTICIPANT = @pin1
  END
ELSE

  BEGIN
 print '2'
   Declare @temp table
    (
    [PARTICIPANT] [decimal](10, 0) NULL,
    [EMPLOYMENTSEQUENCENUMBER] [int] NULL,
    [EMPLOYERNAME] [varchar](50) NULL,
    [EMPLOYERADDRESS]	[varchar](50) NULL,
	[CITY]	[varchar](50),
	[STATE]	[varchar](50),
	[ZIP]	[varchar](9),
	[PHONENUMBER]	[varchar](20),
	[FAXNUMBER]	[varchar](20),
	[EMPLOYMENTBEGINDATE]	[date],
	[EMPLOYMENTENDDATE]	[date],
	[EMPLOYMENTTYPE]	[varchar](30),
	[PAYFREQUENCY]	[varchar](30),
	[WAGETYPE]	[varchar](30),
	[HOURLYRATEAMOUNT]	[varchar](50),
	[AVERAGEWORKHOURS]	[varchar](50),
	[EMPLOYMENTTYPETOTAL]	[varchar](50),
	[SEQUENCEID]	[int]
    )

print '2b'

  insert into @temp
  exec [wwp].[SP_CARESNEWEmployment] @pin1 = '+@pin1+'

  select * from @temp

--insert into wwp.CARESNEWEMPLOYMENT
--select * from @temp 

end 
 
 end ;

GO
/****** Object:  StoredProcedure [wwp].[SP_TimeLimit_AlienStatusCodes]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_TimeLimit_AlienStatusCodes]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;


---- 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @statement1 = 'select  *
FROM OPENQUERY('+@LSDBName+', ''
 SELECT B.PIN_NUM       AS ParticipantId,
        B.ALIEN_STS_CD,
        CASE B.ALIEN_STS_CD  
		WHEN ''''01'''' THEN ''''LAWFULLY ADMITTED FOR PERM RESIDENCE''''
		                  WHEN ''''02'''' THEN ''''PERM RES UNDER COLOR OF LAW  (PRUCOL)''''
						  WHEN ''''03'''' THEN ''''LAWFULLY PRESENT UNDER SECTION 203(A)7''''
						  WHEN ''''04'''' THEN ''''LAWFULLY PRESENT UNDER SECTION 207(C)''''
						  WHEN ''''05'''' THEN ''''LAWFULLY PRESENT UNDER SECTION 208''''
						  WHEN ''''06'''' THEN ''''LAWFULLY PRESENT UNDER SECTION 212(D)(5)''''
						  WHEN ''''07'''' THEN ''''IRCA''''
						  WHEN ''''08'''' THEN ''''LAWFULLY ADMITTED; TEMPORARY''''
				   	      WHEN ''''09'''' THEN ''''UNDOCUMENTED ALIEN''''
						  WHEN ''''10'''' THEN ''''ILLEGAL ALIEN''''
						  WHEN ''''11'''' THEN ''''CUBAN/HAITIAN ENTRANT (SECTION 245A)''''
						  WHEN ''''12'''' THEN ''''CONSIDERED A PERMANENT RESIDENT BY INS''''
						  WHEN ''''13'''' THEN ''''SPECIAL AG WORKER UNDER SECTION 210(A)''''
						  WHEN ''''14'''' THEN ''''ADDL SPEC AG WKR (ASAW)-SECTION 210A(A)''''
						  WHEN ''''15'''' THEN ''''AG WITHHELD DEPORTATION-SECTION 243''''
						  WHEN ''''16'''' THEN ''''BATTERED ALIEN''''
						  WHEN ''''17'''' THEN ''''AMERASIANS''''
						  WHEN ''''18'''' THEN ''''FOREIGN BORN AMERICAN INDIANS''''
						  WHEN ''''19'''' THEN ''''VICTIMS OF TRAFFICKING''''
						  WHEN ''''20'''' THEN ''''LAWFULLY RESIDING''''
		END  AS AlienStatusCodeDescriptionText  ,
        B.EFF_BEGIN_MM  AS EffectiveBeginMonth ,    
        B.EFF_END_MM    AS EffectiveEndMonth , 		
		B.ARR_DT        AS ArrivalDate     ,
        B.ORIGIN_COUNTRY_CD AS CountryOfOrign ,
	    ROW_NUMBER () OVER(ORDER BY B.PIN_NUM)  AS ID                                   
   FROM  '+@DB2DBName+'.T0043_IN_ALIEN_REF  B              
  WHERE B.PIN_NUM = '+@PinNumber+ '               
    AND B.DELETE_REASON_CD = '''' ''''                      
    AND B.HISTORY_CD = 0                                                                                                                                     
   WITH UR ; '')                                  

  '


exec (@statement1) 


end
	


	                                               
  

GO
/****** Object:  StoredProcedure [wwp].[SP_TimeLimit_PlacementClosure]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_TimeLimit_PlacementClosure]
(
 @SchemaName                  VARCHAR (20) ,
 @CaseNumber                  VARCHAR (10) ,
 @DatabaseDate                VARCHAR (10) ,
 @InputUserId                 VARCHAR (6)  ,     
 @ExistingEpisodeBeginDate    VARCHAR (10) ,          
 @PinNumber                   VARCHAR (10) , 
 @ExistingFepId               VARCHAR (6)  ,     
 @ExistingEpisodeEndDate      VARCHAR (10) ,          
 @ExistingPlacementCode       VARCHAR (3)  ,   
 @ExistingPlacementBeginDate  VARCHAR (10) ,         
 @NewPinNumber                VARCHAR (10) , 
 @NewFepIdNumber              VARCHAR (6)  ,    
 @NewEpisodeEndDate           VARCHAR (10) ,          
 @NewPlacementCode            VARCHAR (3)  

) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;

declare @CASENUM      VARCHAR (10)
declare @DATABASEDT   VARCHAR (10) 
declare @USERID              VARCHAR (6)      
declare @EPSDELCD            VARCHAR (2)      
declare @WPELGCNFDT          VARCHAR (10)           
declare @EPSBEGDT            VARCHAR (10)           
declare @WRNMSGSPRLST        VARCHAR(40)      
declare @CALLENTITY          VARCHAR (8)      
declare @IPADR               VARCHAR (15)     
declare @PINNUM              VARCHAR (10) 
declare @FEPID               VARCHAR (6)      
declare @EPSENDDT            VARCHAR (10)           
declare @EPSENDRSNCD1        VARCHAR (3)      
declare @EPSENDRSNCD2        VARCHAR (3)      
declare @PLACEMENTCD         VARCHAR (3)      
declare @PLCBEGDT            VARCHAR (10)           
declare @NEWPINNUM           VARCHAR (10) 
declare @NEWFEPID            VARCHAR (6)     
declare @NEWEPSENDDT         VARCHAR (10)          
declare @NEWEPSENDRSNCD1     VARCHAR (3)     
declare @NEWEPSENDRSNCD2     VARCHAR (3)     
declare @NEWPLACEMENTCD      VARCHAR (3)     
declare @NEWPLCBEGDT         VARCHAR (10)          
declare @FTRPINNUM           VARCHAR (10) 
declare @FTRPLACEMENTCD      VARCHAR (3)     
declare @FTRPLCBEGDT         VARCHAR (10)     
declare @REQDPAGE            VARCHAR(100) 
declare @RETURNSTSIND        VARCHAR (1)     
declare @BUSERRINFO          VARCHAR (40)    
declare @ERRDTL              VARCHAR (250)     

set @CASENUM    = @CaseNumber
set @DATABASEDT = @DatabaseDate
set @USERID     = @InputUserId         
set @EPSDELCD   = ''                 
set @WPELGCNFDT = '9999-12-31'             
set @EPSBEGDT   = @ExistingEpisodeBeginDate       
set @WRNMSGSPRLST = ''         
set @CALLENTITY   = 'WWP1'          --Change to WWP1 once COBAL change is made
set @IPADR        = ''      
set @PINNUM       = @PinNumber 
set @FEPID = @ExistingFepId     
set @EPSENDDT = @ExistingEpisodeEndDate              
set @EPSENDRSNCD1 = ''          
set @EPSENDRSNCD2 = ''        
set @PLACEMENTCD = @ExistingPlacementCode 
set @PLCBEGDT = @ExistingPlacementBeginDate           
set @NEWPINNUM = @NewPinNumber           
set @NEWFEPID  = @NewFepIdNumber            
set @NEWEPSENDDT = @NewEpisodeEndDate            
set @NEWEPSENDRSNCD1  = '644'       
set @NEWEPSENDRSNCD2  = ''     
set @NEWPLACEMENTCD  = @NewPlacementCode    
set @NEWPLCBEGDT  = '9999-12-31'        
set @FTRPINNUM    ='0000000000'        
set @FTRPLACEMENTCD =''     
set @FTRPLCBEGDT ='9999-12-31'        
set @REQDPAGE =''
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end


PRINT @SchemaName          
PRINT @CASENUM              
PRINT @DATABASEDT           
PRINT @USERID                
PRINT @EPSDELCD            
PRINT @WPELGCNFDT              
PRINT @EPSBEGDT                      
PRINT @WRNMSGSPRLST         
PRINT @CALLENTITY           
PRINT @IPADR               
PRINT @PINNUM                
PRINT @FEPID                    
PRINT @EPSENDDT                     
PRINT @EPSENDRSNCD1        
PRINT @EPSENDRSNCD2           
PRINT @PLACEMENTCD         
PRINT @PLCBEGDT                 
PRINT @NEWPINNUM            
PRINT @NEWFEPID            
PRINT @NEWEPSENDDT              
PRINT @NEWEPSENDRSNCD1      
PRINT @NEWEPSENDRSNCD2      
PRINT @NEWPLACEMENTCD       
PRINT @NEWPLCBEGDT               
PRINT @FTRPINNUM           
PRINT @FTRPLACEMENTCD      
PRINT @FTRPLCBEGDT              
PRINT @REQDPAGE              
PRINT @RETURNSTSIND          
PRINT @BUSERRINFO           
PRINT @ERRDTL              



exec('call PWS639SC.PWCWPD05(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
	@CASENUM   ,    
 @DATABASEDT ,   
 @USERID   ,             
 @EPSDELCD  ,            
 @WPELGCNFDT  ,              
 @EPSBEGDT     ,            
 @WRNMSGSPRLST ,          
 @CALLENTITY  ,         
 @IPADR     ,           
 @PINNUM     ,          
 @FEPID      ,            
 @EPSENDDT     ,                  
 @EPSENDRSNCD1  ,          
 @EPSENDRSNCD2  ,       
 @PLACEMENTCD  ,         
 @PLCBEGDT    ,                   
 @NEWPINNUM  ,          
 @NEWFEPID   ,             
 @NEWEPSENDDT  ,             
 @NEWEPSENDRSNCD1  ,        
 @NEWEPSENDRSNCD2 ,       
 @NEWPLACEMENTCD ,          
 @NEWPLCBEGDT   ,             
 @FTRPINNUM       ,     
 @FTRPLACEMENTCD ,      
 @FTRPLCBEGDT     ,     
 @REQDPAGE      ,       
 @RETURNSTSIND output  ,      
 @BUSERRINFO  output   , 
 @ERRDTL      output      
) 
AT NETWINFO_D00S_DB2

  PRINT 'IN TRY' 

 PRINT 'AFTER TRY BEFORE EXEC'

 select OUTRETURNCD = @RETURNSTSIND, SQLCODE = @BUSERRINFO , ERROR_DTL=@ERRDTL 

end
	

              
  

GO
/****** Object:  StoredProcedure [wwp].[SP_TimeLimit_PlacementSummary]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_TimeLimit_PlacementSummary]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;


---- DATATYPES
-- CASE_NUMBER DECIMAL(10,0)
-- PLACEMENT_TYPE  CHAR(03),
-- PLACEMENT_BEGIN_DATE DATE(10 BYTES),
-- PLACEMENT_END_MONTH DATE(10 BYTES),
-- EFF_PLACEMENT_BEGIN_MONTH DECIMAL(6,0), 
-- PLACEMENT_SEQUENCE_NUMBER SMALLINT ,
-- HISTORY_SEQUENCE_NUMBER SMALLINT ,
-- HISTORY_CD SMALLINT,
--  EFFECTIVE_BEGIN_MONTH  SMALLINT,
-- W2_EPISODE_BEGIN_DATE DATE(10 BYTES) ,
-- W2_EPISODE_END_DATE DATE(10 BYTES),
--	PARTICIPANT  DECIMAL(10,0),	 
 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @statement1 = 'select  *
FROM OPENQUERY('+@LSDBName+', ''
 SELECT 
    B.CASE_NUM          as CASE_NUMBER ,
	B.WI_WORKS_SLOT_CD  as PLACEMENT_TYPE,
	B.WW_SLOT_BEGIN_DT  as PLACEMENT_BEGIN_DATE,
	B.WW_SLOT_END_DT    as PLACEMENT_END_MONTH,
	SUBSTR(CHAR(B.WW_SLOT_BEGIN_DT),1,4)|| 
    SUBSTR(CHAR(B.WW_SLOT_BEGIN_DT),6,2)  AS EFF_PLACEMENT_BEGIN_MONTH, 
    B.WI_WORKS_SEQ_NUM  as PLACEMENT_SEQUENCE_NUMBER ,
	B.HISTORY_SEQ_NUM   as HISTORY_SEQUENCE_NUMBER ,
	B.HISTORY_CD        as HISTORY_CD,
	B.EFF_BEGIN_MM      as EFFECTIVE_BEGIN_MONTH,
	B.WI_WORKS_BEGIN_DT as W2_EPISODE_BEGIN_DATE ,
	B.WI_WORKS_END_DT   as W2_EPISODE_END_DATE,
	B.PIN_NUM           as PARTICIPANT,	
	B.FEP_ID            as MFWorkerId,
	ROW_NUMBER () OVER(ORDER BY B.CASE_NUM)  AS ID                                   
   FROM  '+@DB2DBName+'.T0478_CS_WI_WORKS AS B              
  WHERE B.PIN_NUM = '+@PinNumber+ '               
    AND B.DELETE_REASON_CD = '''' ''''                      
    AND B.WI_WORKS_BEGIN_DT <> ''''9999-12-31''''           
    AND B.WI_WORKS_BEGIN_DT <= B.WI_WORKS_END_DT     
    AND B.WW_SLOT_BEGIN_DT <= B.WW_SLOT_END_DT        
    AND B.WI_WORKS_SLOT_CD <> '''' ''''                   
    AND   NOT EXISTS                               
      ( SELECT BB.PIN_NUM  FROM  '+@DB2DBName+'.T0478_CS_WI_WORKS  BB    
         WHERE BB.CASE_NUM          =  B.CASE_NUM        
           AND BB.WI_WORKS_SEQ_NUM  =  B.WI_WORKS_SEQ_NUM
           AND BB.HISTORY_CD        =  0                 
           AND BB.DELETE_REASON_CD  <> '''' ''''           
       )                                                 
                                   
  ORDER BY WI_WORKS_SEQ_NUM DESC , HISTORY_CD                                                                                                      
   WITH UR ; '')                                  

  '

  PRINT 'IN TRY' 

 PRINT 'AFTER TRY BEFORE EXEC'

exec (@statement1) 


end
	


	                                               
  

GO
/****** Object:  StoredProcedure [wwp].[SP_TimeLimit_ReadSQLT0459]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_TimeLimit_ReadSQLT0459]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;


---- DATATYPES

 
---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @statement1 = 'select  *
                     FROM '+@SchemaName+'.WWP.T0459_IN_W2_LIMITS AS B              
                    WHERE B.PIN_NUM = '+@PinNumber+ '               
                      AND B.HISTORY_CD = 0         
                      AND B.HISTORY_SEQ_NUM  = ( SELECT MAX(BB.HISTORY_SEQ_NUM) 
	                                               FROM '+@SchemaName+'.WWP.T0459_IN_W2_LIMITS BB
	                                              WHERE BB.PIN_NUM = B.PIN_NUM
	                                                AND BB.HISTORY_CD = B.HISTORY_CD
									                AND BB.BENEFIT_MM = B.BENEFIT_MM
                                                )
	                                                                                     
                     ORDER BY BENEFIT_MM DESC                        
  '
 

exec (@statement1) 


end
	


	                                               
  

GO
/****** Object:  StoredProcedure [wwp].[SP_TimeLimitParticipant]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- Author:		Palani
-- Create date: 08-05-2017
-- Description: Refresh participants info from CWW.
------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE [wwp].[SP_TimeLimitParticipant] 
(
@PinNumber varchar(10),
@SchemaName varchar(20)
)
as begin


EXEC [WWP].[SP_RefreshParticipant] @PinNumber, @SchemaName;

END ;



GO
/****** Object:  StoredProcedure [wwp].[SP_W2PaymentInfo]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- procedure 
CREATE PROCEDURE [wwp].[SP_W2PaymentInfo]
(
@PinNumber VARCHAR(10),
@SchemaName VARCHAR(20)
) as
begin
declare @statement1 as varchar(max);
declare @DB2DBName as varchar(100) ;
declare @LSDBName as varchar(100) ;
 
--CaseNumber             decimal(10,0)              

--EffectivePaymentMonth  decmial 6,0                                                       
--PayPeriodBeginDate     date                      
--PayPeriodEndDate       date                     
--OriginalPaymentAmount  decimal(9,2)                          
--OrignalCheckAmount     decimal(9,2)                            
--VendorPayment          decimal(9,2)     
--AdjustedNetAmount      decimal(9,2) 

---
  if @SchemaName = 'WWPDEV'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
 end
 -----
    if @SchemaName = 'WWPSYS'

    Begin set @LSDBName = 'NETWINFO_D00S_DB2'

	      set @DB2DBName = 'PWS639TC' 
    end 
----	
    if @SchemaName = 'WWPACC'

    Begin set @LSDBName = 'NETWINFO_D00A_DB2'

	      set @DB2DBName = 'PWA639TC' 
    end
---
 	
    if @SchemaName = 'WWPTRN'

    Begin set @LSDBName = 'NETWINFO_D00E_DB2'

	      set @DB2DBName = 'PWE639TC' 
    end
 ---
 	
    if @SchemaName = 'WWP'

    Begin set @LSDBName = 'NETWINFO_D40P_DB2'

	      set @DB2DBName = 'PWP639TC' 
    end

set @statement1 = 'select  *
FROM OPENQUERY('+@LSDBName+', ''
    SELECT A.CASE_NUM as CaseNumber,                               
           A.EFFECTIVE_MM as EffectivePaymentMonth,                                                     
           A.PART_BEGIN_DT as PayPeriodBeginDate,                        
           A.PART_END_DT as PayPeriodEndDate,                      
           A.W2_PAYMENT_AMT as OriginalPaymentAmount,                    
           A.ORIG_CHK_EFT_AMT as OrignalCheckAmount ,                         
           A.VENDOR_PAY_AMT as VendorPayment    ,      
           A.ADJ_NET_AMT as AdjustedNetAmount,          
          CASE WHEN  A.W2_PAYMENT_AMT > 0 AND
            (A.ORIG_CHK_EFT_AMT + A.VENDOR_PAY_AMT) = 0 THEN ''''0''''
              ELSE ''''  ''''
             END      
              AS SanctionDounAmount               
   FROM '+@DB2DBName+'.T0485_W2_PAY_ADJ A,  
        '+@DB2DBName+'.T0018_WP_INDV B                             
  WHERE  B.PIN_NUM               = '+@PinNumber+'   
    AND  A.CASE_NUM               = B.CASE_NUM   
    AND A.HISTORY_CD             = 0                    
  Order by EFFECTIVE_MM
  WITH UR ;
 '')                                  

  '

exec (@statement1) 


print @statement1


end
	
	 
	                                               
  

GO
/****** Object:  StoredProcedure [wwp].[USP_AlterDefaultColumns]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 04/04/2018
-- Description:	Fix the defualt colums with the correct standard
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_AlterDefaultColumns], '[wwp].[AgeCategory]'
*/

CREATE PROCEDURE [wwp].[USP_AlterDefaultColumns]
(
@FullTableName VARCHAR(100)
)
AS
BEGIN
BEGIN TRY
	DECLARE @Schema VARCHAR(100) = SUBSTRING(@FullTableName, CHARINDEX('[', @FullTableName, 1) + 1, CHARINDEX(']', @FullTableName, 1) - 2)
	DECLARE @SchemaID INT = (SELECT schema_id FROM sys.schemas WHERE name = @Schema)
	DECLARE @TableName VARCHAR(100) = SUBSTRING(@FullTableName, CHARINDEX('[', @FullTableName, 2) + 1, LEN(@FullTableName) - CHARINDEX('[', @FullTableName, 2) - 1)
	--SELECT @FullTableName, @Schema, @SchemaID, @TableName, @Constraint
	DECLARE @SQL NVARCHAR(255)

	----------------------------------------------------------------------IsDeleted-------------------------------------------------------------------------------------------
	DECLARE @IsDeletedConstraint VARCHAR(50) = (SELECT name FROM sys.default_constraints WHERE name LIKE '%_IsDeleted' 
																						 AND parent_object_id IN (SELECT object_id FROM sys.objects WHERE name IN (@TableName) 
																							 														AND schema_id = @SchemaID))
	SELECT @IsDeletedConstraint = ISNULL(@IsDeletedConstraint, 'DF_' + @TableName + '_IsDeleted')

	SET @SQL = 'ALTER TABLE ' + @FullTableName + ' ALTER COLUMN [IsDeleted] [bit] NOT NULL'
	PRINT @SQL
	EXEC (@SQL)

	IF EXISTS(SELECT * FROM sys.default_constraints WHERE name LIKE '%_IsDeleted' 
													AND parent_object_id IN (SELECT object_id FROM sys.objects WHERE name IN (@TableName) 
																											   AND schema_id = @SchemaID))
	BEGIN
		SET @SQL = 'ALTER TABLE ' + @FullTableName + ' DROP CONSTRAINT [' + @IsDeletedConstraint + ']'
		PRINT @SQL
		EXEC (@SQL)
	END

	SET @SQL = 'ALTER TABLE ' + @FullTableName + ' ADD CONSTRAINT [' + @IsDeletedConstraint + '] DEFAULT ((0)) FOR [IsDeleted]'
	PRINT @SQL
	EXEC (@SQL)

	----------------------------------------------------------------------ModifiedBy-------------------------------------------------------------------------------------------
	DECLARE @ModifiedByConstraint VARCHAR(50) = (SELECT name FROM sys.default_constraints WHERE name LIKE '%_ModifiedBy' 
																						 AND parent_object_id IN (SELECT object_id FROM sys.objects WHERE name IN (@TableName) 
																							 														AND schema_id = @SchemaID))
	SELECT @ModifiedByConstraint = ISNULL(@ModifiedByConstraint, 'DF_' + @TableName + '_ModifiedBy')

	SET @SQL = 'ALTER TABLE ' + @FullTableName + ' ALTER COLUMN [ModifiedBy] [varchar](50) NOT NULL'
	PRINT @SQL
	EXEC (@SQL)

	IF EXISTS(SELECT * FROM sys.default_constraints WHERE name LIKE '%_ModifiedBy'
														   AND parent_object_id IN (SELECT object_id FROM sys.objects WHERE name IN (@TableName)
																													  AND schema_id = @SchemaID))
	BEGIN
		SET @SQL = 'ALTER TABLE ' + @FullTableName + ' DROP CONSTRAINT [' + @ModifiedByConstraint + ']'
		PRINT @SQL
		EXEC (@SQL)
	END

	SET @SQL = 'ALTER TABLE ' + @FullTableName + ' ADD CONSTRAINT [' + @ModifiedByConstraint + '] DEFAULT (suser_sname()) FOR [ModifiedBy]'
	PRINT @SQL
	EXEC (@SQL)

	----------------------------------------------------------------------ModifiedDate-------------------------------------------------------------------------------------------
	DECLARE @ModifiedDateConstraint VARCHAR(50) = (SELECT name FROM sys.default_constraints WHERE name LIKE '%_ModifiedDate' 
																							AND parent_object_id IN (SELECT object_id FROM sys.objects WHERE name IN (@TableName) 
																							 														   AND schema_id = @SchemaID))
	SELECT @ModifiedDateConstraint = ISNULL(@ModifiedDateConstraint, 'DF_' + @TableName + '_ModifiedDate')

	SET @SQL = 'ALTER TABLE ' + @FullTableName + ' ALTER COLUMN [ModifiedDate] [datetime] NOT NULL'
	PRINT @SQL
	EXEC (@SQL)

	IF EXISTS(SELECT * FROM sys.default_constraints WHERE name LIKE '%_ModifiedDate'
														   AND parent_object_id IN (SELECT object_id FROM sys.objects WHERE name IN (@TableName)
																													  AND schema_id = @SchemaID))
	BEGIN
		SET @SQL = 'ALTER TABLE ' + @FullTableName + ' DROP CONSTRAINT [' + @ModifiedDateConstraint + ']'
		PRINT @SQL
		EXEC (@SQL)
	END

	SET @SQL = 'ALTER TABLE ' + @FullTableName + ' ADD CONSTRAINT [' + @ModifiedDateConstraint + '] DEFAULT (getdate()) FOR [ModifiedDate]'
	PRINT @SQL
	EXEC (@SQL)
	-------------------------------------------------------------------------------------------------
	IF NOT EXISTS(SELECT * FROM sys.columns WHERE name = 'RowVersion' AND object_id IN (SELECT object_id FROM sys.objects WHERE name IN (@TableName) AND schema_id IN (@SchemaID)))
	BEGIN
		SET @SQL = 'ALTER TABLE ' + @FullTableName + ' ADD RowVersion [timestamp] NOT NULL'
	END
	/*
	SET @SQL = 'ALTER TABLE ' + @FullTableName + 'ALTER COLUMN [RowVersion] [timestamp] NOT NULL'
	*/
END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS [Error_Number],
	   ERROR_SEVERITY() AS [Error_Severity],
	   ERROR_STATE() AS [Error_ State],
	   ERROR_LINE() AS [Error_Line],
	   ISNULL(ERROR_PROCEDURE(), '-') AS [Error_Procedure]
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_CheckTables]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 04/03/2018
-- Description:	Check the table to figure out if the default columns are declared right
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_CheckTables] '[wwp].[Child]'
*/

CREATE PROCEDURE [wwp].[USP_CheckTables]
(
@TableName VARCHAR(100),
@CheckVar INT = NULL
)
AS
BEGIN
BEGIN TRY
	DECLARE @SQL NVARCHAR(MAX)
	CREATE TABLE #Temp1 ([Table] VARCHAR(50), [Columns] VARCHAR(100), is_nullable INT, max_length INT, [Default] NVARCHAR(255))
	CREATE TABLE #Final ([Table] VARCHAR(100), [Columns] VARCHAR(20), [Column_Check_Result] VARCHAR(255))

	SET @SQL = 'INSERT INTO #Temp1
				SELECT ''['' + S.name + ''].['' + O.name +'']'' AS [Table], C.name AS [Columns], C.is_nullable, C.max_length, D.text AS [Default]
				FROM 
					sys.objects O 
					INNER JOIN sys.columns C ON O.object_id = C.object_id
					INNER JOIN sys.schemas S ON O.schema_id = S.schema_id
					LEFT JOIN sys.syscomments D ON C.default_object_id = D.id
				WHERE c.name IN (''IsDeleted'', ''ModifiedBy'', ''ModifiedDate'', ''RowVersion'')
				AND ''['' + S.name + ''].['' + O.name +'']'' = ''' + @TableName + ''' ORDER BY [Columns]'

	PRINT @SQL
	EXEC (@SQL)

	IF (SELECT COUNT(*) FROM #Temp1) = 0
	BEGIN
		INSERT INTO #Temp1 VALUES (@TableName, 'No matching columns', 0, 0, NULL)
	END

	/*SELECT * FROM #Temp1 
	ORDER BY Columns*/

	SELECT [Table],
		   [Columns],
		   CASE WHEN is_nullable = 0 
					THEN 1 
				ELSE 0 
		   END AS is_nullable,
		   CASE WHEN [Columns] = 'IsDeleted' AND max_length = 1
					THEN 1
				WHEN [Columns] = 'IsDeleted' AND max_length = 0
					THEN 0
				WHEN [Columns] = 'ModifiedBy' AND max_length = 50
					THEN 1
				WHEN [Columns] = 'ModifiedBy' AND max_length <> 50
					THEN 0
				WHEN [Columns] = 'ModifiedDate' AND max_length = 8
					THEN 1
				WHEN [Columns] = 'ModifiedDate' AND max_length <> 8
					THEN 0
				WHEN [Columns] = 'RowVersion' AND max_length = 8
					THEN 1
				WHEN [Columns] = 'RowVersion' AND max_length <> 8
					THEN 0
		   END max_length,
		   CASE WHEN [Columns] = 'IsDeleted' AND ISNULL([Default], '-') = '((0))'
					THEN 1
				WHEN [Columns] = 'IsDeleted' AND ISNULL([Default], '-') <> '((0))'
					THEN 0
				WHEN [Columns] = 'ModifiedBy' AND ISNULL([Default], '-') = '(suser_sname())'
					THEN 1
				WHEN [Columns] = 'ModifiedBy' AND ISNULL([Default], '-') <> '(suser_sname())'
					THEN 0
				WHEN [Columns] = 'ModifiedDate' AND ISNULL([Default], '-') = '(getdate())'
					THEN 1
				WHEN [Columns] = 'ModifiedDate' AND ISNULL([Default], '-') <> '(getdate())'
					THEN 0
				WHEN [Columns] = 'RowVersion' AND [Default] IS NULL
					THEN 1
				WHEN [Columns] = 'RowVersion' AND [Default] IS NOT NULL
					THEN 0
		   END [Default]
	INTO #Temp2
	FROM #Temp1
	ORDER BY [Columns]

	/*SELECT * FROM #Temp2
	ORDER BY [Columns]*/

	IF (SELECT COUNT(*) FROM #Temp2 WHERE [Columns] = 'ModifiedDate') > 0
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'IsDeleted' AS [Columns],
			   '||' +
			   CASE	WHEN is_nullable <> 1 
						THEN '|is_nullable needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN max_length <> 1 
						THEN '  |max_length needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN [Default] <> 1 
						THEN '  |Default needs a fix|'
					ELSE ''
			   END
		FROM #Temp2
		WHERE [Columns] = 'IsDeleted'
	END
	ELSE
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'IsDeleted' AS [Columns],
			   'IsDeleted Column is missing'
		FROM #Temp2
	END

	IF (SELECT COUNT(*) FROM #Temp2 WHERE [Columns] = 'ModifiedDate') > 0
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'ModifiedBy' AS [Columns],
			   '||' +
			   CASE	WHEN is_nullable <> 1 
						THEN '|is_nullable needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN max_length <> 1 
						THEN '  |max_length needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN [Default] <> 1 
						THEN '  |Default needs a fix|'
					ELSE ''
			   END
		FROM #Temp2
		WHERE [Columns] = 'ModifiedBy'
	END
	ELSE
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'ModifiedBy' AS [Columns],
			   'ModifiedBy Column is missing'
		FROM #Temp2
	END

	IF (SELECT COUNT(*) FROM #Temp2 WHERE [Columns] = 'ModifiedDate') > 0
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'ModifiedDate' AS [Columns],
			   '||' +
			   CASE	WHEN is_nullable <> 1 
						THEN '|is_nullable needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN max_length <> 1 
						THEN '  |max_length needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN [Default] <> 1 
						THEN '  |Default needs a fix|'
					ELSE ''
			   END
		FROM #Temp2
		WHERE [Columns] = 'ModifiedDate'
	END
	ELSE
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'ModifiedDate' AS [Columns],
			   'ModifiedDate Column is missing'
		FROM #Temp2
	END

	IF (SELECT COUNT(*) FROM #Temp2 WHERE [Columns] = 'RowVersion') > 0
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'RowVersion' AS [Columns],
			   '||' +
			   CASE	WHEN is_nullable <> 1 
						THEN '|is_nullable needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN max_length <> 1 
						THEN '  |max_length needs a fix|'
					ELSE ''
			   END + 
			   CASE WHEN [Default] <> 1 
						THEN '  |Default needs a fix|'
					ELSE ''
			   END
		FROM #Temp2
		WHERE [Columns] = 'RowVersion'
	END
	ELSE
	BEGIN
		INSERT INTO #Final
		SELECT [Table],
			   'RowVersion' AS [Columns],
			   'RowVersion Column is missing'
		FROM #Temp2
	END

	IF @CheckVar IS NULL
	BEGIN
		IF (SELECT COUNT(*) FROM #Final WHERE Column_Check_Result LIKE '%missing%') = 4
			SELECT @TableName AS [Table], 'All columns are missing' AS [Column_Check_Result]
		ELSE 
			SELECT [Table], [Columns], REPLACE(REPLACE(REPLACE(Column_Check_Result, '||', 'Column is good'), 'Column is good|', '|'), 'Column is good  |', '|') AS [Column_Check_Result]
			FROM #Final
	END
	ELSE
	BEGIN
		IF (SELECT COUNT(*) FROM #Final WHERE REPLACE(REPLACE(REPLACE(Column_Check_Result, '||', 'Column is good'), 'Column is good|', '|'), 'Column is good  |', '|') LIKE '%good%') = 4
			SELECT @TableName AS [Table], 'Table looks good!!' AS [Column_Check_Result]
		ELSE
			SELECT @TableName AS [Table], 'Table needs a fix' AS [Column_Check_Result]
	END

	IF OBJECT_ID('tempdb..#Temp1') IS NOT NULL DROP TABLE #Temp1
	IF OBJECT_ID('tempdb..#Temp2') IS NOT NULL DROP TABLE #Temp2
	IF OBJECT_ID('tempdb..#Final') IS NOT NULL DROP TABLE #Final
END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS [Error_Number],
	   ERROR_SEVERITY() AS [Error_Severity],
	   ERROR_STATE() AS [Error_ State],
	   ERROR_LINE() AS [Error_Line],
	   ISNULL(ERROR_PROCEDURE(), '-') AS [Error_Procedure]
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_CheckTablesReport]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 04/04/2018
-- Description:	Check the table to figure out if the default columns are declare right and create a final report
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_CheckTablesReport]
*/

CREATE PROCEDURE [wwp].[USP_CheckTablesReport]
AS
BEGIN
BEGIN TRY
	DECLARE @Total INT
	DECLARE @Count INT = 1
	DECLARE @Name VARCHAR(50)
	CREATE TABLE #Final ([Table] VARCHAR(50), [Column_Check_Result] VARCHAR(255))

	SELECT '[' + S.name + '].[' + O.name + ']' AS [Name],
		   (ROW_NUMBER() OVER(ORDER BY '[' + S.name + '].[' + O.name + ']')) AS Rn_No
	INTO #Tables
	FROM sys.objects O
		INNER JOIN sys.schemas S ON S.schema_id = O.schema_id
	WHERE O.type = 'U' AND S.name = 'WWP'
	ORDER BY Rn_No

	SELECT @Total = COUNT(*) FROM #Tables

	WHILE @Count <= @Total 
	BEGIN
		SELECT @Name = Name FROM #Tables
					   WHERE Rn_No = @Count

		INSERT INTO #Final
		EXEC [wwp].[USP_CheckTables] @Name, 1
	
		SET @Count = @Count + 1
	END

	SELECT * FROM #Final

	IF OBJECT_ID('tempdb..#Tables') IS NOT NULL DROP TABLE #Tables
	IF OBJECT_ID('tempdb..#Final') IS NOT NULL DROP TABLE #Final
END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS [Error_Number],
	   ERROR_SEVERITY() AS [Error_Severity],
	   ERROR_STATE() AS [Error_ State],
	   ERROR_LINE() AS [Error_Line],
	   ISNULL(ERROR_PROCEDURE(), '-') AS [Error_Procedure]
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_CompareTables]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 04/03/2018
-- Description:	Compare the tables to find the difference in data
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_CompareTables] '[WWPDEV].[wwp].[Child]', '[WWPSYS].[wwp].[Child]'
*/

CREATE PROCEDURE [wwp].[USP_CompareTables]
(
@OrigTableName VARCHAR(255),
@CheckTableName VARCHAR(255)
)
AS
BEGIN
BEGIN TRY
	DECLARE @ColumnsSQL1 NVARCHAR(MAX)
	DECLARE @ColumnsSQL2 NVARCHAR(MAX)
	DECLARE @ComapreSQL NVARCHAR(MAX)
	DECLARE @OrigDBName NVARCHAR(100) = (SUBSTRING(@OrigTableName, CHARINDEX('[', @OrigTableName, 1), CHARINDEX(']', @OrigTableName, 1)))
	DECLARE @CheckDBName NVARCHAR(100) = (SUBSTRING(@CheckTableName, CHARINDEX('[', @CheckTableName, 1), CHARINDEX(']', @CheckTableName, 1)))
	DECLARE @TableName NVARCHAR(100) = (REPLACE(@OrigTableName, @OrigDBName + '.', ''))

	SELECT @OrigDBName AS DB, O.name AS [Table], C.name AS [Columns], C.is_nullable, C.max_length, D.text AS [Default]
	FROM 
		sys.objects O 
		INNER JOIN sys.columns C ON O.object_id = C.object_id
		INNER JOIN sys.schemas S ON O.schema_id = S.schema_id
		LEFT JOIN sys.syscomments D ON C.default_object_id = D.id
	WHERE c.name IN ('IsDeleted', 'ModifiedBy', 'ModifiedDate', 'RowVersion')
	AND '[' + S.name + '].[' + O.name +']' = @TableName
	ORDER BY [Columns]
	
	SET @ColumnsSQL2 = 'USE ' + @CheckDBName + 
						' SELECT ''' + @CheckDBName + ''' AS DB, O.name AS [Table], C.name AS [Columns], C.is_nullable, C.max_length, D.text AS [Default]
						FROM 
							sys.objects O 
							INNER JOIN sys.columns C ON O.object_id = C.object_id
							INNER JOIN sys.schemas S ON O.schema_id = S.schema_id
							LEFT JOIN sys.syscomments D ON C.default_object_id = D.id
						WHERE c.name IN (''IsDeleted'', ''ModifiedBy'', ''ModifiedDate'', ''RowVersion'')
						AND ''['' + S.name + ''].['' + O.name +'']'' = ''' + @TableName + ''' ORDER BY [Columns]'

	PRINT @ColumnsSQL2
	EXEC(@ColumnsSQL2)	

	SET @ComapreSQL = 
	'SELECT Label=''Found IN ' + SUBSTRING(@OrigTableName, CHARINDEX('[', @OrigTableName, 1), CHARINDEX(']', @OrigTableName, 1)) + 
	', NOT IN '+ SUBSTRING(@CheckTableName, CHARINDEX('[', @CheckTableName, 1), CHARINDEX(']', @CheckTableName, 1)) + ''',* FROM 
	(SELECT * FROM ' + @OrigTableName + 
	' EXCEPT
	SELECT  * FROM ' + @CheckTableName + ') x
	
	UNION ALL
	
	SELECT Label=''Found IN ' + SUBSTRING(@CheckTableName, CHARINDEX('[', @CheckTableName, 1), CHARINDEX(']', @CheckTableName, 1)) + 
	', NOT IN '+ SUBSTRING(@OrigTableName, CHARINDEX('[', @OrigTableName, 1), CHARINDEX(']', @OrigTableName, 1)) + ''',* FROM 
	(SELECT  * FROM ' + @CheckTableName +
	' EXCEPT
	SELECT * FROM ' + @OrigTableName + ') y
	ORDER BY ID'

	PRINT @ComapreSQL
	EXEC (@ComapreSQL)
END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS [Error_Number],
	   ERROR_SEVERITY() AS [Error_Severity],
	   ERROR_STATE() AS [Error_ State],
	   ERROR_LINE() AS [Error_Line],
	   ISNULL(ERROR_PROCEDURE(), '-') AS [Error_Procedure]
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_Create_Participation_Entries]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================
-- Author		: Tholkappian, Silambholi
-- Create date	: 02/04/2020
-- Description	: Create Participation Entries
-- ===============================================================================

/* Sample Execute
EXEC [wwp].[USP_Create_Participation_Entries] 4289, '2018040215164927', '2020-02-05', 1, 1
*/

CREATE PROCEDURE [wwp].[USP_Create_Participation_Entries]
	@EPId INT,
	@ModifiedBy VARCHAR(25),
	@ModifiedDate DATETIME,
	@Consider15th BIT = 1,
	@Debug BIT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @ParticipantId DECIMAL(10, 0),
		@BeginDate DATE,
		@EndDate DATE,
		@Start INT = 1,
		@Max INT,
		@ActivityBeginDate DATE,
		@PlannedEndDate DATE,
		@Frequency VARCHAR(25),
		@MRFrequency INT,
		@IsRecurring BIT,
		@DateFirst INT,
		@DateFrom DATE,
		@DateTo DATE,
		@ReturnValue int
		
		---
		DECLARE @EP TABLE (
						   Id INT,
						   ParticipantId INT,
						   EnrolledProgramId INT,
						   CreatedDate DATE,
						   BeginDate DATE,
						   EndDate DATE,
						   EmployabilityPlanStatusTypeId INT,
						   OrganizationId INT,
						   SubmitDate DATE
						  )

		INSERT INTO @EP
			SELECT Id, ParticipantId, EnrolledProgramId, CreatedDate, BeginDate, EndDate, EmployabilityPlanStatusTypeId, OrganizationId, SubmitDate
			FROM wwp.EmployabilityPlan
			WHERE Id = @EPId

		SELECT @ParticipantId = ParticipantId, @BeginDate = BeginDate
		FROM @EP

		---
		DECLARE @Schedule TABLE (
								 Id  INT IDENTITY(1,1),
								 ActivityId INT,
								 StartDate DATE,
								 IsRecurring BIT,
								 FrequencyType VARCHAR(25),
								 WKFrequency VARCHAR(25),
								 MRFrequency VARCHAR(25),
								 PlannedEndDate DATE,
								 HoursPerDay INT,
								 EmployabilityPlanId INT
								)

		INSERT INTO @Schedule (ActivityId, StartDate, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId)
			SELECT ActivityId, StartDate, IsRecurring, FT.Name FrequencyType, WKF.Name WKFrequency, MRF.Name MRFrequency,
				   CASE WHEN IsRecurring = 1 THEN PlannedEndDate
						ELSE StartDate
				   END,
				   HoursPerDay, EmployabilityPlanId
			FROM wwp.ActivitySchedule A
				LEFT JOIN wwp.ActivityScheduleFrequencyBridge ASFB
					ON A.Id = ASFB.ActivityScheduleId
				LEFT JOIN wwp.FrequencyType FT
					ON A.FrequencyTypeId = FT.Id
				LEFT JOIN wwp.Frequency MRF
					ON ASFB.MRFrequencyId = MRF.Id
				LEFT JOIN wwp.Frequency WKF
					ON ASFB.WKFrequencyId = WKF.Id
			WHERE EmployabilityPlanId IN (SELECT Id
										  FROM @EP)
			AND ActualEndDate IS NULL

		---
		DECLARE @Dates TABLE (
							  Dates DATE
							 )

		SELECT @Max = COUNT(*)
		FROM @Schedule

		WHILE @Start <= @Max
		BEGIN
			SELECT @IsRecurring = IsRecurring, @ActivityBeginDate = StartDate, @PlannedEndDate = PlannedEndDate, @Frequency = FrequencyType,
				   @DateFirst = CASE WKFrequency WHEN 'Monday' THEN 1
												 WHEN 'Tuesday' THEN 2
												 WHEN 'Wednesday' THEN 3
												 WHEN 'Thursday' THEN 4
												 WHEN 'Friday' THEN 5
												 WHEN 'Saturday' THEN 6
												 WHEN 'Sunday' THEN 7
								END,
				    @MRFrequency = CASE MRFrequency WHEN 'First' THEN 1
													WHEN 'Second' THEN 2
													WHEN 'Third' THEN 3
													WHEN 'Fourth' THEN 4
													WHEN 'Last' THEN 5
								   END
			FROM @Schedule
			WHERE Id = @Start

			INSERT INTO @Dates
				SELECT EndDate
				FROM @EP
			UNION ALL
				SELECT @PlannedEndDate
			UNION ALL
				SELECT CASE WHEN DAY(@BeginDate) > 15 THEN DATEADD(MM, DATEDIFF(MM, 0, @BeginDate) + 1, 0) + 14
							ELSE DATEADD(MM, datediff(MM, 0, @BeginDate) + 0, 0) + 14
						END
				WHERE @Consider15th = 1

			SELECT @EndDate = MIN(Dates)
			FROM @Dates

			DELETE FROM @Dates

			IF (@IsRecurring = 1 AND @EndDate > @ActivityBeginDate)
			BEGIN
				IF (@Frequency = 'Weekly' OR @Frequency = 'Biweekly')
				BEGIN
					SET DATEFIRST @DateFirst
					INSERT INTO @Dates
					SELECT *
					FROM wwp.UFN_GetSpecificWeekDaysBetweenDates(@ActivityBeginDate, @EndDate, 0)
					SET DATEFIRST 1
					--SELECT * FROM @Dates

					IF (@Frequency = 'Weekly')
					BEGIN
						INSERT INTO @Schedule (ActivityId, StartDate, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId)
						SELECT ActivityId, Dates, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
						FROM (SELECT ActivityId, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
							  FROM @Schedule
							  WHERE Id = @Start) A,
							 (SELECT Dates
							  FROM @Dates) B
					END
					ELSE IF (@Frequency = 'Biweekly')
					BEGIN
						INSERT INTO @Schedule (ActivityId, StartDate, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId)
						SELECT ActivityId, Dates, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
						FROM (SELECT ActivityId, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
							  FROM @Schedule
							  WHERE Id = @Start) A,
							 (SELECT Dates
							  FROM (SELECT ROW_NUMBER() OVER (ORDER BY Dates) Id, Dates
									FROM @Dates) BB
							  WHERE BB.Id % 2 = 1) B
					END
				END
				ELSE IF (@Frequency = 'Daily – Every Weekday')
				BEGIN
					INSERT INTO @Dates
					SELECT *
					FROM wwp.UFN_GetSpecificWeekDaysBetweenDates(@ActivityBeginDate, @EndDate, 1)

					INSERT INTO @Schedule (ActivityId, StartDate, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId)
					SELECT ActivityId, Dates, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
					FROM (SELECT ActivityId, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
							FROM @Schedule
							WHERE Id = @Start) A,
						 (SELECT Dates
						  FROM @Dates) B
				END
				ELSE IF (@Frequency = 'Monthly')
				BEGIN
					IF (@MRFrequency = 5)
						INSERT INTO @Dates
						SELECT DISTINCT DATEADD(DAY, IIF(@DateFirst = 7, 1, @DateFirst + 1)  - DATEPART(WEEKDAY, EOMONTH(Dt)), EOMONTH(Dt))
						FROM wwp.UFN_GetSpecificWeekDaysBetweenDates(@ActivityBeginDate, @EndDate, 1)
					ELSE
						INSERT INTO @Dates
						SELECT *
						FROM wwp.UFN_GetSpecificWeekDaysBetweenDates(@ActivityBeginDate, @EndDate, 1)
						WHERE (DATEPART(WEEKDAY, Dt) + @@DATEFIRST - 2) % 7 + 1 = @DateFirst AND (DATEPART(DAY, Dt) - 1) / 7 + 1 = @MRFrequency

					INSERT INTO @Schedule (ActivityId, StartDate, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId)
					SELECT ActivityId, Dates, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
					FROM (SELECT ActivityId, IsRecurring, FrequencyType, WKFrequency, MRFrequency, PlannedEndDate, HoursPerDay, EmployabilityPlanId
						  FROM @Schedule
						  WHERE Id = @Start) A,
						  (SELECT Dates
						   FROM @Dates) B
				END

			DELETE FROM @Schedule
			WHERE Id = @Start

			END

			DELETE FROM @Dates
			SET @DateFirst = NULL
			SET @Start += 1
		END

		PRINT @BeginDate
		PRINT @EndDate;
		--SELECT * FROM @EndDates
		--SELECT * FROM @EP

		IF (@Debug = 0)
		BEGIN
			WITH CTE AS
			(
				SELECT EmployabilityPlanId, ActivityId, StartDate, ScheduledHours = SUM(HoursPerDay) OVER (PARTITION BY StartDate, ActivityId),
					   Rn = ROW_NUMBER() OVER (PARTITION BY StartDate, ActivityId ORDER BY StartDate)
				FROM @Schedule
				WHERE StartDate >= @BeginDate AND StartDate <= CASE WHEN DAY(@BeginDate) > 15 THEN DATEADD(MM, DATEDIFF(MM, 0, @BeginDate) + 1, 0) + 14
																	ELSE DATEADD(MM, datediff(MM, 0, @BeginDate) + 0, 0) + 14
															   END
			)

			INSERT INTO wwp.ParticipationEntry (ParticipantId, EPId, ActivityId, ParticipationDate, ScheduledHours, IsDeleted, ModifiedBy, ModifiedDate)
			SELECT @ParticipantId, EmployabilityPlanId, ActivityId, StartDate, ScheduledHours, 0, @ModifiedBy, @ModifiedDate
			FROM CTE
			WHERE Rn = 1
			OPTION (MAXRECURSION 2500)
		END
		ELSE
		BEGIN
			SELECT *, 0 IsDeleted, @ModifiedBy ModifiedBy, @ModifiedDate ModifiedDate
			FROM @Schedule
			ORDER BY StartDate
		END

		SET @ReturnValue = 0
		SELECT @ReturnValue AS Return_Value
		
	END TRY
	BEGIN CATCH
		SET @ReturnValue = @@ERROR
		SELECT @ReturnValue AS Return_Value

		DECLARE @ErrorMessage VARCHAR(MAX)  = ERROR_MESSAGE()
		DECLARE @ErrorSeverity VARCHAR(MAX) = ERROR_SEVERITY()
		DECLARE @ErrorState VARCHAR(MAX)   = ERROR_STATE()
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
	END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_DeleteRFAs]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 04/30/2018
-- Description:	Delete the RFAs based on PIN Number
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_DeleteRFAs] 9009028275
*/

CREATE PROCEDURE [wwp].[USP_DeleteRFAs]
(
@PinNumber VARCHAR(100)
)
AS
BEGIN
BEGIN TRY
	DECLARE @PartId int
	DECLARE @RFAId int
	DECLARE @ChildId int
	DECLARE @TotalRFA int
	DECLARE @Count int = 1

	SELECT @PartId = id
	FROM wwp.Participant
	WHERE PinNumber = @PinNumber
	PRINT @PartId

	SELECT RfaNumber, ROW_NUMBER() OVER(ORDER BY Id) AS Rn_No
	INTO #Temp
	FROM wwp.RequestForAssistance
	WHERE ParticipantId = @PartId
	--SELECT * FROM #Temp

	SELECT @TotalRFA = COUNT(*)
	FROM #Temp
	PRINT @TotalRFA

	WHILE @Count <= @TotalRFA 
	BEGIN
		SELECT @RFAId = Id
		FROM wwp.RequestForAssistance
		WHERE RfaNumber = (SELECT RfaNumber
										FROM #Temp
										WHERE Rn_No = @Count)
		PRINT @Count
		PRINT @RFAId
       
		SELECT @ChildId = ChildId 
		FROM wwp.RequestForAssistanceChild
		WHERE RequestForAssistanceId = @RFAId
		PRINT @ChildId
       
		--SELECT *
		--FROM wwp.Child
		--WHERE Id = @ChildId

		DELETE FROM wwp.ParticipantEnrolledProgram
		WHERE ParticipantId = @PartId

		DELETE FROM wwp.RequestForAssistanceChild
		WHERE RequestForAssistanceId = @RFAId
		
		DELETE FROM wwp.RequestForAssistance
		WHERE ParticipantId = @PartId

		DELETE FROM wwp.Child
		WHERE Id = @ChildId

		SET @Count = @Count + 1
	END

	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_GenerateRFANumber]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 06/10/2019
-- Description:	Generate Unique RFA Number
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_GenerateRFANumber] 990000000001, 999999999999
*/

CREATE PROCEDURE [wwp].[USP_GenerateRFANumber]
(
 @Lower DECIMAL(12,0),
 @Upper DECIMAL(12,0),
 @RfaNumber DECIMAL(12,0) OUTPUT
)
AS
BEGIN
    DECLARE @Random DECIMAL(12,0);
    SELECT @Random = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)

    WHILE  EXISTS (SELECT * FROM wwp.RequestForAssistance WHERE RfaNumber = @Random)
    BEGIN
        SELECT @Random = ROUND(((@Upper - @Lower -1) * RAND() + @Lower), 0)
    END

    SELECT @RfaNumber = @Random
END
GO
/****** Object:  StoredProcedure [wwp].[USP_GetComputedBusniessDays]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 05/02/2018
-- Description:	Calculate the nth business day from the given date
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_GetComputedBusniessDays] '12/21/2018', 10
*/

CREATE PROCEDURE [wwp].[USP_GetComputedBusniessDays]
(
@StartDate date, 
@NoofDays int
)
AS
BEGIN
BEGIN TRY
	SELECT [wwp].[FN_GetComputedBusniessDays](@StartDate, @NoofDays) [NthBusinessDay]
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_GetLastWWOrLFInstance]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 09/27/2018
-- Description:	Get the latest instance for a PIN from the PEP OR T0018 if there is a WW or LF Program
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_GetLastWWOrLFInstance] 1009355775, 'WWPDEV'
*/

CREATE PROCEDURE [wwp].[USP_GetLastWWOrLFInstance]
(
@PinNumber DECIMAL(10,0),
@SchemaName VARCHAR(10)
)
AS
BEGIN
BEGIN TRY
	DECLARE @CheckStatement VARCHAR(MAX)
	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @LSDBName VARCHAR(100)
	--DECLARE @SelectStmt NVARCHAR(MAX)
	DECLARE @ParticipantId INT
	DECLARE @PIN_NUM VARCHAR(10) = CAST(@PinNumber AS VARCHAR(10))
	DECLARE @ParticipantIsConfidential BIT

	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN N'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN N'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP' THEN N'NETWINFO_D40P_DB2'
						END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'PWS639TC'
                             WHEN @SchemaName = 'WWPACC' THEN N'PWA639TC'
                             WHEN @SchemaName = 'WWPTRN' THEN N'PWE639TC'
                             WHEN @SchemaName = 'WWP' THEN N'PWP639TC'
                        END
	---
	
	/*DECLARE @LastInstance TABLE
	(
	 ProgramCode CHAR(3),
	 StatusDate DATE,
	 WorkerId VARCHAR(6),
	 ParticipantIsConfidential BIT
	)

	DECLARE @T0018Info TABLE
	(
	 ProgramCode CHAR(3),
	 StatusDate DATE,
	 WorkerId VARCHAR(6),
	 ParticipantIsConfidential BIT
	)*/

	DECLARE @Stage1 TABLE
	(
	 ProgramCode CHAR(3),
	 StatusDate DATE,
	 WorkerId VARCHAR(6)
	)

	DECLARE @Stage2 TABLE
	(
	ProgramCode VARCHAR(5),
	StatusCode VARCHAR(20),
	StatusDate DATE,
	CurrentRegCode CHAR(1),
	ReferralRegistrationCode CHAR(1),
	WorkerId VARCHAR(6)
	)

	DECLARE @Stage3 Table
	(
	ProgramCode VARCHAR(5),
	StatusDate DATE,
	WorkerId VARCHAR(6)
	)
	---

	SELECT @ParticipantId = Id
	FROM wwp.Participant
	WHERE PinNumber = @PinNumber

	INSERT INTO @Stage1
	SELECT TOP 1 RTRIM(EP.ProgramCode),
		   CASE WHEN EnrolledProgramStatusCodeId = 1 THEN MAX(ReferralDate)
				WHEN EnrolledProgramStatusCodeId = 2 THEN MAX(EnrollmentDate)
				WHEN EnrolledProgramStatusCodeId = 3 THEN MAX(DisenrollmentDate)
		   END StatusDate,
		   CASE EP.ProgramCode WHEN 'WW' THEN W.MFUserId
							   WHEN 'LF' THEN W1.MFUserId
		   END AS 'WorkerId'
	FROM wwp.ParticipantEnrolledProgram PEP
		INNER JOIN wwp.EnrolledProgram EP
			ON PEP.EnrolledProgramId = EP.Id
		INNER JOIN wwp.EnrolledProgramStatusCode EPSC
			ON PEP.EnrolledProgramStatusCodeId = EPSC.Id
		LEFT JOIN wwp.Worker W
			ON PEP.WorkerId = W.Id
		LEFT JOIN wwp.Worker W1
			ON PEP.LFFEPId = W1.Id
	WHERE ParticipantId = @ParticipantId AND EP.ProgramCode IN ('WW', 'LF')
	GROUP BY EP.ProgramCode, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode, PEP.Id, W.MFUserId, W1.MFUserId

	--SELECT * FROM @Stage1
	---

	SET @CheckStatement = 'SELECT ProgramCode,
						   CASE WHEN StatusCode = ''R'' THEN ''Referred''
								WHEN StatusCode = ''E'' THEN ''Enrolled''
								WHEN StatusCode = ''D'' THEN ''Disenrolled''
						   END StatusCode,
						   CASE WHEN StatusCode = ''R'' THEN WPReferralDate
						   ELSE LAST_CONTACT_DT
						   END StatusDate,
						   CurrentRegCode,
						   ReferralRegistrationCode,
						   WorkerId
						   FROM OPENQUERY (' + @LSDBName +', ''SELECT PROGRAM_CD AS ProgramCode, WP_SYSTEM_STS_CD AS StatusCode, WP_REFERRAL_DT AS WPReferralDate,
															   LAST_CONTACT_DT, CURRENT_REG_CD  AS CurrentRegCode, REFERRAL_REG_CD   AS ReferralRegistrationCode, D.ASGN_FEP_ID as WorkerId
															   FROM ' + @DB2DBName + '.T0018_WP_INDV A
																	 LEFT OUTER JOIN '+@DB2DBName+'.T2536_WP_FEP_WRKR D ON A.CASE_NUM = D.CASE_NUM AND D.HISTORY_CD = 0 
															   WHERE PIN_NUM = ' + CAST(@PinNumber AS VARCHAR(10)) + '
															   AND WP_SYSTEM_STS_CD IN (''''R'''')
															   AND PROGRAM_CD NOT IN (''''FS'''',''''  '''',''''ADC'''')'')'

	PRINT @CheckStatement

	INSERT INTO @Stage2
	EXEC (@CheckStatement)

	UPDATE @Stage2
	SET  ProgramCode = 'LF'
	WHERE CurrentRegCode = 'L' OR ReferralRegistrationCode = 'L'

	--SELECT * FROM @Stage2
	---

	IF EXISTS (SELECT * FROM @Stage2) AND NOT EXISTS (SELECT * FROM wwp.ParticipantEnrolledProgram
													  WHERE ParticipantId = @ParticipantId
													  AND EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13)
													  AND EnrolledProgramStatusCodeId = 1
													  AND (ReferralDate = (SELECT StatusDate FROM @Stage2 WHERE ProgramCode = 'WW')
													  OR ReferralDate = (SELECT StatusDate FROM @Stage2 WHERE ProgramCode = 'LF')))
	BEGIN
		INSERT INTO @Stage3
		SELECT ProgramCode, StatusDate, WorkerId
		FROM @Stage2
	END
	ELSE
	BEGIN
		INSERT INTO @Stage3
		SELECT ProgramCode, StatusDate, WorkerId
		FROM @Stage1
	END

	--SELECT * FROM @Stage3
	---

	SELECT TOP 1 @ParticipantIsConfidential = IsConfidential
	FROM wwp.ConfidentialPinInformation
	WHERE ParticipantId = @ParticipantId
	ORDER BY Id DESC

	SELECT S.ProgramCode, S.StatusDate, S.WorkerId, @ParticipantIsConfidential ParticipantIsConfidential
	FROM @Stage3 S


	/*INSERT INTO @LastInstance
	SELECT TOP 1 RTRIM(EP.ProgramCode) AS 'ProgramCode', CASE PEP.EnrolledProgramStatusCodeId WHEN 1 THEN MAX(ReferralDate)
																	  WHEN 2 THEN MAX(EnrollmentDate)
																	  WHEN 3 THEN MAX(DisenrollmentDate)
								 END StatusDate,
								 CASE EP.ProgramCode WHEN 'WW' THEN W.MFUserId
													 WHEN 'LF' THEN W1.MFUserId
								 END AS 'WorkerId',
				 CPI.IsConfidential AS 'ParticipantIsConfidential'
	FROM wwp.ParticipantEnrolledProgram PEP
		INNER JOIN wwp.EnrolledProgram EP
			ON PEP.EnrolledProgramId = EP.Id
		LEFT JOIN wwp.ConfidentialPinInformation CPI
			ON PEP.ParticipantId = CPI.ParticipantId
		LEFT JOIN wwp.Worker W
			ON PEP.WorkerId = W.Id
		LEFT JOIN wwp.Worker W1
			ON PEP.LFFEPId = W1.Id
	WHERE PEP.ParticipantId = (SELECT Id
							   FROM wwp.Participant
							   WHERE PinNumber = @PinNumber)
	AND EP.ProgramCode IN ('WW', 'LF')
	GROUP BY EP.ProgramCode, EnrolledProgramStatusCodeId, CPI.IsConfidential, CaseManagerId, W.MFUserId, W1.MFUserId
	ORDER BY StatusDate DESC

	IF ((SELECT COUNT(*) FROM @LastInstance) = 0)
	BEGIN
		SET @SelectStmt = 'SELECT CASE WHEN LearnFareStatus = N''LEARNFARE'' THEN N''LF''
									   WHEN ProgramCode1 = N''WW'' THEN N''WW''
								  END AS ProgramCode,
								  StatusDate,
								  WorkerId
						   FROM OPENQUERY('+@LSDBName+', ''SELECT A.PROGRAM_CD AS ProgramCode1,
																  CASE A.CURRENT_REG_CD WHEN ''''L'''' THEN ''''LEARNFARE''''
																						ELSE ''''NA''''
																  END AS LearnFareStatus,
																  A.WP_REFERRAL_DT AS StatusDate,
																  B.ASGN_FEP_ID as WorkerId
														   FROM '+@DB2DBName+'.T0018_WP_INDV AS A
														   LEFT OUTER JOIN '+@DB2DBName+'.T2536_WP_FEP_WRKR B ON A.CASE_NUM = B.CASE_NUM AND B.HISTORY_CD = 0
														   WHERE  A.PIN_NUM = ' + @PIN_NUM + '
														   WITH UR;'')'
		
		INSERT INTO @T0018Info (ProgramCode, StatusDate, WorkerId)
		EXEC (@SelectStmt)

		INSERT INTO @LastInstance (ProgramCode, StatusDate, WorkerId)
		SELECT A.ProgramCode, A.StatusDate, A.WorkerId
		FROM @T0018Info A
			LEFT JOIN wwp.Worker W
				ON A.WorkerId = W.MFUserId
		WHERE ProgramCode IN ('WW', 'LF')
	END

	SELECT *
	FROM @LastInstance*/
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_GetOtherDemographics_Info]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================
-- Author		: Tholkappian, Silambholi
-- Create date	: 01/29/2020
-- Description	: Get OtherDemgraphic Info
-- ===============================================================================

/* Sample Execute
EXEC [wwp].[USP_GetOtherDemographics_Info] 9009879691, 13619, '2020-01-31', 10
*/

CREATE PROCEDURE [wwp].[USP_GetOtherDemographics_Info]
	@PinNumber VARCHAR(10),
	@ParticipantId INT,
	@TargetDate VARCHAR(10),
	@EnrolledProgramId INT,
	@CaseNumber VARCHAR(10) = NULL,
	@Debug BIT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @SchemaName AS VARCHAR(10) = DB_NAME(),
		@DB2DBName VARCHAR(25),
		@LSDBName VARCHAR(25),
		@Statement1 NVARCHAR(MAX),
		@Statement2 NVARCHAR(MAX),
		@Statement3 NVARCHAR(MAX),
		@Statement4 NVARCHAR(MAX),
		@LanguageCd VARCHAR(5)

		---
		SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
								WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
								WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
								WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
						   END

		---
		SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
								 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
								 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
								 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
							END

		---
		DECLARE @TempCaseInfo TABLE (
									 AddressType VARCHAR(15),
									 CaseNumber DECIMAL(10, 0),
									 AddressLine1 VARCHAR(200),
									 AddressLine2 VARCHAR(100),
									 City VARCHAR(50),
									 STATE VARCHAR(50),
									 ZIPCode VARCHAR(10),
									 PhoneNumber VARCHAR(10),
									 HomeLanguage VARCHAR(20)
								   )

		IF (@EnrolledProgramId BETWEEN 1 AND 8 OR @EnrolledProgramId = 11  OR @EnrolledProgramId = 13)
		BEGIN
			SET @Statement1 = 'SELECT @CaseNumber = CaseNumber
							   FROM OPENQUERY(' + @LSDBName + ', ''SELECT CASE_NUM AS CaseNumber
																   FROM ' + @DB2DBName + '.T0265_AG_IN_ELIG
																   WHERE PIN_NUM = ' + @PinNumber + ' AND PROGRAM_CD =  ''''WW'''' AND SUBPROGRAM_CD NOT IN (''''X'''', ''''Z'''')
																   AND CURRENT_ELIG_IND IN (''''1'''', ''''9'''') AND AG_STS_CD = ''''O''''
																   AND PART_STS_CD NOT IN (''''XA'''', ''''XC'''') AND PAYMENT_BEGIN_DT <= ''''' + @TargetDate + '''''
																   AND PAYMENT_END_DT >= ''''' + @TargetDate + ''''' AND PAYMENT_END_DT >= PAYMENT_BEGIN_DT
																   WITH UR;'')'
			EXEC sp_executesql @Statement1, N'@CaseNumber NVARCHAR(10) OUTPUT', @CaseNumber = @CaseNumber OUTPUT
			PRINT @CaseNumber
		
			IF OBJECT_ID('tempdb..##CaseInfo_WWP_Temp') IS NOT NULL DROP TABLE ##CaseInfo_WWP_Temp
			CREATE TABLE ##CaseInfo_WWP_Temp (
											  AddressType VARCHAR(15),
											  CaseNumber DECIMAL(10, 0),
											  AddressLine1 VARCHAR(200),
											  AddressLine2 VARCHAR(100),
											  City VARCHAR(50),
											  STATE VARCHAR(50),
											  ZIPCode VARCHAR(10),
											  PhoneNumber VARCHAR(10),
											  HomeLanguage VARCHAR(20)
											 )

			SET @Statement2 = 'INSERT INTO ##CaseInfo_WWP_Temp 
							   SELECT ''Primary'', CaseNumber, AddressLine1, AddressLine2, City, State, ZIPCode, PhoneNumber, NULL HomeLanguage
							   FROM OPENQUERY(' + @LSDBName + ', ''SELECT CASE_NUM AS CaseNumber, RTRIM(ST_NUMBER_ADR) ||
																		  CASE WHEN LTRIM(RTRIM(UNIT_ADR)) IS NULL THEN '''''''' ELSE CONCAT('''' '''', LTRIM(RTRIM(UNIT_ADR))) END ||
																		  CASE DIRECTION_ADR WHEN ''''W'''' THEN ''''WEST''''
																							 WHEN ''''S'''' THEN ''''SOUTH''''
																							 WHEN ''''E'''' THEN ''''EAST''''
												 											 WHEN ''''N'''' THEN ''''NORTH''''
																							 WHEN '''' '''' THEN ''''''''
																		  END ||
																		  CASE WHEN LTRIM(RTRIM(ST_RURAL_ADR)) IS NULL THEN ''''''''
																													   ELSE CONCAT('''' '''', LTRIM(RTRIM(ST_RURAL_ADR)))
																		  END ||
																		  CASE WHEN LTRIM(RTRIM(SUFFIX_ADR)) IS NULL THEN '''''''' ELSE CONCAT('''' '''', LTRIM(RTRIM(SUFFIX_ADR))) END ||
																		  CASE WHEN LTRIM(RTRIM(QUADRANT_ADR)) IS NULL THEN ''''''''
																													   ELSE CONCAT('''' '''', LTRIM(RTRIM(QUADRANT_ADR)))
																		  END ||
																		  CASE WHEN LTRIM(RTRIM(APARTMENT_ADR)) IS NULL THEN ''''''''
																														ELSE CONCAT('''' '''', LTRIM(RTRIM(APARTMENT_ADR)))
																		  END AS AddressLine1,
																		  LINE_2_ADR AS AddressLine2, CITY_ADR AS City, STATE_ADR AS State, SUBSTR(ZIP_ADR,1,5) AS ZIPCode,
																		  PHONE_NUM AS PhoneNumber
																   FROM ' + @DB2DBName + '.T0001_CASE
																   WHERE CASE_NUM = ' + @CaseNumber + '
							   WITH UR;'')'

			PRINT @Statement2

			EXEC (@Statement2)

			INSERT @TempCaseInfo
			SELECT *
			FROM ##CaseInfo_WWP_Temp

			TRUNCATE TABLE ##CaseInfo_WWP_Temp

			IF @CaseNumber <> CAST(0 AS DECIMAL)
			BEGIN
				SET @Statement3 = 'INSERT INTO ##CaseInfo_WWP_Temp 
								   SELECT ''Alternate'', CaseNumber, AddressLine1, AddressLine2, City, State, ZIPCode, PhoneNumber, NULL HomeLanguage
								   FROM OPENQUERY(' + @LSDBName + ', ''SELECT CASE_NUM as CaseNumber, RTRIM(ST_NUMBER_ADR) ||
																			  CASE WHEN LTRIM(RTRIM(UNIT_ADR)) IS NULL THEN '''''''' ELSE CONCAT('''' '''', LTRIM(RTRIM(UNIT_ADR))) END ||
																			  CASE DIRECTION_ADR WHEN ''''W'''' THEN ''''WEST''''
																								 WHEN ''''S'''' THEN ''''SOUTH''''
																								 WHEN ''''E'''' THEN ''''EAST''''
												 												 WHEN ''''N'''' THEN ''''NORTH''''
																								 WHEN '''' '''' THEN ''''''''
																			  END ||
																			  CASE WHEN LTRIM(RTRIM(ST_RURAL_ADR)) IS NULL THEN ''''''''
																														   ELSE CONCAT('''' '''', LTRIM(RTRIM(ST_RURAL_ADR)))
																			  END ||
																			  CASE WHEN LTRIM(RTRIM(SUFFIX_ADR)) IS NULL THEN ''''''''
																														 ELSE CONCAT('''' '''', LTRIM(RTRIM(SUFFIX_ADR)))
																			  END ||
																			  CASE WHEN LTRIM(RTRIM(QUADRANT_ADR)) IS NULL THEN ''''''''
																														   ELSE CONCAT('''' '''', LTRIM(RTRIM(QUADRANT_ADR)))
																			  END ||
																			  CASE WHEN LTRIM(RTRIM(APARTMENT_ADR)) IS NULL THEN ''''''''
																															ELSE CONCAT('''' '''', LTRIM(RTRIM(APARTMENT_ADR)))
																			  END AS AddressLine1,
																			  LINE_2_ADR AS AddressLine2, CITY_ADR AS City, STATE_ADR AS State, SUBSTR(ZIP_ADR,1,5) AS ZIPCode,
																			  PHONE_NUM AS PhoneNumber
																	   FROM ' + @DB2DBName + '.T0103_CS_ADDRESS A
																	   WHERE A.CASE_NUM = ' + @CaseNumber + ' AND A.DELETE_REASON_CD = '''' '''' AND A.HISTORY_CD = 0
																	   AND A.HISTORY_SEQ_NUM = (SELECT MAX(EE.HISTORY_SEQ_NUM)
																								FROM ' + @DB2DBName + '.T0103_CS_ADDRESS B
																								WHERE B.CASE_NUM = A.CASE_NUM
																								AND EE.HISTORY_CD = E.HISTORY_CD)
																	   WITH UR;'')'

				PRINT @Statement3

				INSERT @TempCaseInfo
				SELECT *
				FROM ##CaseInfo_WWP_Temp
			END

			IF NOT EXISTS (SELECT 1
						   FROM @TempCaseInfo
						   WHERE AddressType = 'Alternate')
			BEGIN
				INSERT @TempCaseInfo (AddressType, CaseNumber)
				VALUES ('Alternate', @CaseNumber)
			END

			SET @Statement4 = 'SELECT @LanguageCd = LANGUAGE_CD
							   FROM OPENQUERY(' + @LSDBName + ', ''SELECT LANGUAGE_CD
																   FROM ' + @DB2DBName + '.T0011_INDIVIDUAL
																   WHERE PIN_NUM = ' + @PinNumber + '
																   WITH UR;'')'
			EXEC sp_executesql @Statement4, N'@LanguageCd NVARCHAR(5) OUTPUT', @LanguageCd = @LanguageCd OUTPUT
			PRINT @LanguageCd

			UPDATE @TempCaseInfo
			SET HomeLanguage = @LanguageCd

			IF OBJECT_ID('tempdb..##CaseInfo_WWP_Temp') IS NOT NULL DROP TABLE ##CaseInfo_WWP_Temp
		END
		ELSE
		BEGIN
			INSERT INTO @TempCaseInfo
			SELECT CASE WHEN PCI.AlternateMailingAddressId IS NOT NULL THEN 'Alternate'
						ELSE 'Primary'
					END, NULL,
					CASE WHEN PCI.AlternateMailingAddressId IS NOT NULL THEN AMA.AddressLine1
						ELSE PCI.AddressLine1
					END,
					CASE WHEN PCI.AlternateMailingAddressId IS NOT NULL THEN AMA.AddressLine2
						ELSE PCI.AddressLine2
					END,
					CASE WHEN PCI.AlternateMailingAddressId IS NOT NULL THEN AC.Name
						ELSE C.Name
					END,
					CASE WHEN PCI.AlternateMailingAddressId IS NOT NULL THEN [AS].Name
						ELSE S.Name
					END,
					CASE WHEN PCI.AlternateMailingAddressId IS NOT NULL THEN AMA.ZipCode
						ELSE PCI.ZipCode
					END,
					CASE WHEN PCI.PrimaryPhoneNumber IS NOT NULL THEN PCI.PrimaryPhoneNumber
						ELSE PCI.SecondaryPhoneNumber
					END,
					NULL
			FROM wwp.ParticipantContactInfo PCI
				FULL OUTER JOIN wwp.AlternateMailingAddress AMA
					ON PCI.AlternateMailingAddressId = AMA.Id
				INNER JOIN wwp.City C
					ON PCI.CityAddressId = C.Id
				INNER JOIN wwp.[State] S
					ON C.StateId = S.Id
				LEFT OUTER JOIN wwp.City AC
					ON AMA.CityAddressId = AC.Id
				LEFT OUTER JOIN wwp.[State] [AS]
					ON [AS].Id = AC.StateId
			WHERE ParticipantId = @ParticipantId

			UPDATE @TempCaseInfo
			SET HomeLanguage = L.MFLanguageCode
			FROM wwp.OtherDemographics O
				INNER JOIN wwp.[Language] L
					ON O.HomeLanguageId = L.Id
			WHERE O.ParticipantId = @ParticipantId
		END

		SELECT *
		FROM @TempCaseInfo
	END TRY
	BEGIN CATCH
	THROW
	END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_GetPlacement_Info]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================
-- Author		: Tholkappian, Silambholi
-- Create date	: 01/29/2020
-- Description	: Get Placement Info
-- ===============================================================================

/* Sample Execute
EXEC [wwp].[USP_GetPlacement_Info] 6009869366, '2020-01-29'
*/

CREATE PROCEDURE [wwp].[USP_GetPlacement_Info]
	@PinNumber VARCHAR(10),
	@TargetDate VARCHAR(10),
	@CaseNumber VARCHAR(10) = NULL,
	@Debug BIT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @SchemaName VARCHAR(10) = DB_NAME(),
		@DB2DBName VARCHAR(25),
		@LSDBName VARCHAR(25),
		@Placement VARCHAR(10),
		@Statement1 NVARCHAR(MAX),
		@Statement2 NVARCHAR(MAX)

		---
		SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
								WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
								WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
								WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
						   END

		---
		SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
								 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
								 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
								 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
							END

		---
		IF @CaseNumber IS NULL
		BEGIN
			SET @Statement1 = 'SELECT @CaseNumber = CaseNumber, @Placement = Placement
							   FROM OPENQUERY(' + @LSDBName + ', ''SELECT CASE_NUM CaseNumber, WI_WORKS_SLOT_CD Placement
																   FROM ' + @DB2DBName + '.T0478_CS_WI_WORKS A
																   WHERE A.PIN_NUM = ' + @PinNumber + ' AND A.DELETE_REASON_CD = ''''  ''''
																   AND A.WW_SLOT_BEGIN_DT <= ''''' + @TargetDate + ''''' AND A.WW_SLOT_END_DT >= ''''' + @TargetDate + '''''
																   -- AND   A.WW_SLOT_END_DT    >=  A.WW_SLOT_BEGIN_DT  
																   AND NOT EXISTS (SELECT B.PIN_NUM
																				   FROM ' + @DB2DBName + '.T0478_CS_WI_WORKS B
																				   WHERE B.CASE_NUM = A.CASE_NUM AND B.WI_WORKS_SEQ_NUM = A.WI_WORKS_SEQ_NUM AND B.HISTORY_CD = 0
																				   AND B.DELETE_REASON_CD  <> ''''  '''')
																   FETCH FIRST 1 ROWS ONLY
																   WITH UR;'')'
			PRINT @Statement1
			EXEC sp_executesql @Statement1, N'@CaseNumber NVARCHAR(10) OUTPUT, @Placement NVARCHAR(10) OUTPUT', @CaseNumber = @CaseNumber OUTPUT, @Placement = @Placement OUTPUT
			PRINT @CaseNumber
			PRINT @Placement
		END

		SELECT @CaseNumber CaseNumber, @Placement Placement
	END TRY
	BEGIN CATCH
	THROW
	END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_GetWWRecoupment_Post]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[USP_GetWWRecoupment_Post] 1
CREATE PROCEDURE [wwp].[USP_GetWWRecoupment_Post]
	@Debug BIT = 0
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@SchemaName VARCHAR(20),
			@SelectStmt VARCHAR(MAX)

	DECLARE @T2650 TABLE
	(
	 Id INT IDENTITY(1,1),
	 CaseNumber VARCHAR(10),
	 EligiblePINList VARCHAR(MAX),
	 AllotmentAmount DECIMAL(9,2)
	)

	---
	SELECT @LSDBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
                            WHEN DB_NAME() = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                            WHEN DB_NAME() = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                            WHEN DB_NAME() = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                       END
	---

	SELECT @DB2DBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS')	   THEN 'PWS639TC'
							 WHEN DB_NAME() = 'WWPACC'  THEN 'PWA639TC'
							 WHEN DB_NAME() = 'WWPTRN'  THEN 'PWE639TC'
							 WHEN DB_NAME() = 'WWP'     THEN 'PWP639TC'
						END
	---
	
	SET @SelectStmt = 'SELECT CASE_NUM, LIST_ELG_PIN_NUM, GR_PYMT_AMT
					   FROM OPENQUERY(' + @LSDBName + ', ''SELECT CASE_NUM, LIST_ELG_PIN_NUM, GR_PYMT_AMT
														   FROM  ' + @DB2DBName + '.T2650_W2_RCOUP_INT
														   WHERE CASE_NUM > 0
														   WITH UR;'')'

	PRINT @SelectStmt

	INSERT INTO @T2650
	EXEC (@SelectStmt)

	SELECT CaseNumber, '["' + REPLACE(RTRIM(EligiblePINList), ',' , '","') + '"]' EligiblePINList, AllotmentAmount, CAST(Id AS varchar(100)) Identifier
	FROM @T2650
END
GO
/****** Object:  StoredProcedure [wwp].[USP_GetWWRecoupment_Response]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*EXEC [wwp].[USP_GetWWRecoupment_Response]
	'<Root>
	 <WWCaseCalcRecoupmentInfoList>
		<CaseNumber>123</CaseNumber>
		<LiablePINList>1000987221,1501146335,1504657918,1504657926</LiablePINList>
		<RecoupmentAmount>100</RecoupmentAmount>
		<Identifier>1</Identifier>
	 </WWCaseCalcRecoupmentInfoList>
	 <WWCaseCalcRecoupmentInfoList>
		<CaseNumber>456</CaseNumber>
		<LiablePINList>733709,501556915</LiablePINList>
		<RecoupmentAmount>75</RecoupmentAmount>
		<Identifier>2</Identifier>
	 </WWCaseCalcRecoupmentInfoList>
	 <WWCaseCalcRecoupmentInfoList>
		<CaseNumber>789</CaseNumber>
		<LiablePINList>5000857445,9527608422</LiablePINList>
		<RecoupmentAmount>20</RecoupmentAmount>
		<Identifier>3</Identifier>
	 </WWCaseCalcRecoupmentInfoList>
	 <MessageCodes>SUCCESS</MessageCodes>
	 <RequestCount>3</RequestCount>
	 <ResponseCount>3</ResponseCount>
	</Root>', 1*/
CREATE PROCEDURE [wwp].[USP_GetWWRecoupment_Response]
	@XML XML,
	@Debug BIT = 0
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@SchemaName VARCHAR(20),
			@SelectStmt VARCHAR(MAX),
			@UpdateStmt VARCHAR(MAX),
			@InsertStmt VARCHAR(MAX),
			@Count INT = 1,
			@Max INT,
			@RecoupmentAmount VARCHAR(MAX),
			@LiablePINList VARCHAR(MAX),
			@CaseNumber VARCHAR(10),
			@Handle INT

	DECLARE @T2650_Response TABLE
	(
	 Id INT IDENTITY(1,1),
	 Identifier INT,
	 CaseNumber VARCHAR(10),
	 LiablePINList VARCHAR(MAX),
	 RecoupmentAmount VARCHAR(MAX)
	)

	---
	SELECT @LSDBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
                            WHEN DB_NAME() = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                            WHEN DB_NAME() = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                            WHEN DB_NAME() = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                       END
	---

	SELECT @DB2DBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS')	   THEN 'PWS639TC'
							 WHEN DB_NAME() = 'WWPACC'  THEN 'PWA639TC'
							 WHEN DB_NAME() = 'WWPTRN'  THEN 'PWE639TC'
							 WHEN DB_NAME() = 'WWP'     THEN 'PWP639TC'
						END
	---

	EXEC sp_xml_preparedocument @Handle OUTPUT, @XML

	INSERT INTO @T2650_Response
	SELECT *
	FROM OPENXML(@handle, '/Root/WWCaseCalcRecoupmentInfoList', 2)
	WITH (Identifier INT, CaseNumber VARCHAR(10), LiablePINList VARCHAR(MAX), RecoupmentAmount DECIMAL(9,2))

	--SELECT * FROM @T2650_Response

	SELECT @Max = MAX(Id)
	FROM @T2650_Response
	PRINT @Max

	IF @Debug = 0
	BEGIN
		WHILE @Count <= @Max
		BEGIN
			PRINT @Count

			SELECT @RecoupmentAmount = CAST(CAST(RecoupmentAmount AS DECIMAL(9,2)) AS INT), @LiablePINList = LiablePINList, @CaseNumber = CaseNumber
			FROM @T2650_Response
			WHERE Id = @Count
			PRINT @RecoupmentAmount
			PRINT @RecoupmentAmount
	
			SET @UpdateStmt = 'UPDATE ' + @DB2DBName + '.T2650_W2_RCOUP_INT
							   SET RCOUP_AMT = ''' + @RecoupmentAmount + ''', LIST_LIAB_PIN_NUM = ''' + @LiablePINList + '''
							   WHERE CASE_NUM = ''' + @CaseNumber + ''';'
			PRINT @UpdateStmt

			EXEC (@UpdateStmt) AT NETWINFO_D00S_DB2

			SET @InsertStmt = 'INSERT INTO ' + @DB2DBName + '.T0510_WW_RCPM (CASE_NUM, EFFECTIVE_MM, AG_SEQ_NUM, CE_RCPM_AMT, FRAUD_RCPM_AMT, LF_RCPM_AMT, NON_CE_RCPM_AMT,
																			 PAYMENT_BEGIN_DT, PAYMENT_END_DT, PROGRAM_CD, SUBPROGRAM_CD, UPDATED_DT, W2_PAYMENT_AMT)
							   SELECT CASE_NUM, EFF_MO, AG_SEQ_NUM, RCOUP_AMT, 0.00, 0.00, 0.00, PYMT_BEG_DT, PYMT_END_DT, PROGRAM_CD, SUBPROGRAM_CD,
									  ''' + CONVERT(VARCHAR(10), GETDATE(), 20) + ''', GR_PYMT_AMT
							   FROM ' + @DB2DBName + '.T2650_W2_RCOUP_INT
							   WHERE CASE_NUM = ''' + @CaseNumber + ''';'
			PRINT @InsertStmt

			EXEC (@InsertStmt) AT NETWINFO_D00S_DB2

			SET @Count += 1
		END
	END
END
GO
/****** Object:  StoredProcedure [wwp].[USP_InsertIntoLogEvent]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Scott V.
-- Create date: 01/30/2019
-- Description:	Insert into LogEvent table 
-- =============================================
CREATE PROCEDURE [wwp].[USP_InsertIntoLogEvent]
	@message		NVARCHAR(MAX),
	@level			TINYINT,
	@timestamp		DATETIMEOFFSET(7),
	@exception		NVARCHAR(MAX),
	@properties		XML,
	@logEvent 		NVARCHAR(MAX)
AS

BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRAN;

		INSERT INTO wwp.LogEvent
		(
			[Message],
			[MessageTemplate],
			[Level],
			[TimeStamp],
			[Exception],
			[Properties],
			[LogEvent]
		)
		VALUES
		(
			@message,
			'n/a',		-- 'MessageTemplate'
			@level,
			@timestamp, --SYSDATETIMEOFFSET(),
			@exception,
			@properties,		-- 'Properties'
			@logEvent
		);
		COMMIT TRAN;
	END TRY  
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRAN;
		END
	END CATCH
END


GO
/****** Object:  StoredProcedure [wwp].[USP_InsertLogEvent]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Scott V.
-- Create date: 09/25/2018
-- Description:	Insert into LogEvent table 
-- =============================================
CREATE PROCEDURE [wwp].[USP_InsertLogEvent]
	@msg			VARCHAR(MAX),
	@level			TINYINT,
	@exception 		VARCHAR(MAX),
	@logEvent		VARCHAR(MAX)
AS

BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRAN;

		INSERT INTO wwp.LogEvent
		(
			[Message],
			MessageTemplate,
			[Level],
			[TimeStamp],
			Exception,
			Properties,
			LogEvent
		)
		VALUES
		(
			@msg,
			NULL,
			@level,
			GETDATE(),
			@exception,
			NULL,
			@logEvent
		);
		COMMIT TRAN;
	END TRY  
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRAN;
		END
	END CATCH
END

GO
/****** Object:  StoredProcedure [wwp].[USP_InsertWebPerformance]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Scott V.
-- Create date: 11/21/2018
-- Description:	Insert performance datapoint 
-- for a given Method 
-- =============================================
CREATE PROCEDURE [wwp].[USP_InsertWebPerformance]
	@methodName 		VARCHAR(50),
	@startTime			DATETIME2,
	@stopTime			DATETIME2,
	@elapsed			TIME(7),
	@cached				INT,
	@web				INT,
	@retries			INT,
	@total				INT,
	@userId				VARCHAR(20)
AS
BEGIN
	SET NOCOUNT ON;

    BEGIN TRY
		BEGIN TRAN;

		INSERT INTO wwp.WebPerformance
		(
			MethodName,
			StartTime,
			StopTime,
			Elapsed,
			Cached,
			Web,
			Retries,
			Total,
			UserId
		)
		VALUES
		(
			@methodName,
			@startTime,
			@stopTime,
			@elapsed,
			@cached,
			@web,
			@retries,
			@total,
			@userId
		);
		COMMIT TRAN;
	END TRY  
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRAN;
		END;

		THROW
	END CATCH
END


GO
/****** Object:  StoredProcedure [wwp].[USP_InsertWebServiceMessage]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Scott V.
-- Create date: 09/25/2018
-- Description:	Insert SOAP messages sent/received 
-- =============================================
CREATE PROCEDURE [wwp].[USP_InsertWebServiceMessage]
	@msgId			UNIQUEIDENTIFIER,	-- SOAP message unique id (guid)
	@msgDateTime	DATETIME2, 			-- SOAP message datetime created (in security header)
	@msgEndpoint 	VARCHAR(75), 		-- SOAP service endpoint (destination)
	@msgOperation 	VARCHAR(75),		-- SOAP service operation invoked
	@msgDirection	CHAR(1),			-- SOAP message direction: 'I' = 'Inbound' / 'O' = 'Outbound'
	@msgXml			VARCHAR(4000)		-- SOAP message copy
AS

BEGIN
	SET NOCOUNT ON

	DECLARE @MsgLocalDateTime DATETIME2;

	SELECT @MsgLocalDateTime = GETDATE();

	BEGIN TRY
		BEGIN TRAN;

		INSERT INTO wwp.WebServiceMessage
		(
			MsgId,
			MsgDateTime,
			MsgEndpoint,
			MsgOperation,
			MsgDirection,
			MsgXml,
			MsgLocalDateTime
		)
		VALUES
		(
			@msgId,
			@msgDateTime,
			@msgEndpoint,
			@msgOperation,
			@msgDirection,
			@msgXml,
			@MsgLocalDateTime
		);
		COMMIT TRAN;
	END TRY  
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRAN;
		END;

		THROW
	END CATCH
END

GO
/****** Object:  StoredProcedure [wwp].[USP_InsertWWPAppLog]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Scott V.
-- Create date: 09/25/2018
-- Description:	Insert into WWPAppLog table 
-- =============================================
CREATE PROCEDURE [wwp].[USP_InsertWWPAppLog]
	@dateTime		DATETIME2(7),
	@level			INT,
	@levelDesc		VARCHAR(5),
	@subSystem		VARCHAR(8),
	@logger			VARCHAR(255),
	@message		VARCHAR(4000),
	@exception 		VARCHAR(2000),
	@wamsId			VARCHAR(50)
AS

BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRAN;

		INSERT INTO wwp.WWPAppLog
		(
			[DateTime],
			[Level],
			[LevelDesc],
			[SubSystem],
			[Logger],
			[Message],
			Exception,
			WamsId
		)
		VALUES
		(
			@dateTime,
			@level,
			@levelDesc,
			@subSystem,
			@logger,
			@message,
			@exception,
			suser_sname()
			--@wamsId	-- TODO: fix this by passing it in as a parm
		);
		COMMIT TRAN;
	END TRY  
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRAN;
		END
	END CATCH
END


GO
/****** Object:  StoredProcedure [wwp].[USP_InsertWWPMetric]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Scott V.
-- Create date: 11/21/2018 (v.2 - 01/15/2019)
-- Description:	Insert performance datapoint 
-- =============================================
CREATE PROCEDURE [wwp].[USP_InsertWWPMetric]
	@methodName 		VARCHAR(50),
	@startTime			DATETIME2,
	@stopTime			DATETIME2,
	@elapsed			TIME(7),
	@cached				INT,
	@web				INT,
	@retries			INT,
	@total				INT,
	@wamsId				VARCHAR(20)
AS
BEGIN
	SET NOCOUNT ON;

    BEGIN TRY
		BEGIN TRAN;

		INSERT INTO wwp.WWPMetric
		(
			MethodName,
			StartTime,
			StopTime,
			Elapsed,
			Cached,
			Web,
			Retries,
			Total,
			WamsId
		)
		VALUES
		(
			@methodName,
			@startTime,
			@stopTime,
			@elapsed,
			@cached,
			@web,
			@retries,
			@total,
			@wamsId
		);
		COMMIT TRAN;
	END TRY  
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRAN;
		END;

		THROW
	END CATCH
END



GO
/****** Object:  StoredProcedure [wwp].[USP_InsertWWPWcfMessage]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Scott V.
-- Create date: 01/15/2019 (v. 2.0)
-- Description:	Insert SOAP messages sent/received 
-- =============================================
CREATE PROCEDURE [wwp].[USP_InsertWWPWcfMessage]
	@messageId		UNIQUEIDENTIFIER,	-- message unique id (guid)
	@dateTimeUTC	DATETIME2, 			-- message datetime created (in security header)
	@endpoint 		VARCHAR(75), 		-- service endpoint (destination)
	@operation 		VARCHAR(75),		-- service operation invoked
	@direction		CHAR(1),			-- message direction: 'I' = 'Inbound' / 'O' = 'Outbound'
	@message		VARCHAR(4000)		-- message copy / payload
AS

BEGIN
	SET NOCOUNT ON

	DECLARE @dateTimeLocal DATETIME2;

	SELECT @dateTimeLocal = GETDATE();

	BEGIN TRY
		BEGIN TRAN;

		INSERT INTO wwp.WWPWcfMessage
		(
			MessageId,
			DateTimeUTC,
			DateTimeLocal,
			[Endpoint],
			Operation,
			Direction,
			[Message]
		)
		VALUES
		(
			@messageId,
			@dateTimeUTC,
			@dateTimeLocal,
			@endpoint,
			@operation,
			@direction,
			@message
		);
		COMMIT TRAN;
	END TRY  
	BEGIN CATCH
		IF @@TRANCOUNT > 0
		BEGIN
			ROLLBACK TRAN;
		END;

		THROW
	END CATCH
END


GO
/****** Object:  StoredProcedure [wwp].[USP_Lookup]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Scott V.
-- Create date: 07/12/2018
-- Description:	Speed-demon Reference Table Lookup ~ lol  ;)
-- This is just an incomplete prototype/idea...
-- =============================================
CREATE PROCEDURE [wwp].[USP_Lookup] 
	
	@RefType VARCHAR(50) = NULL, 
	@Parm    VARCHAR(50) = NULL,
	@SubParm VARCHAR(50) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @Sql    NVARCHAR(500) = '';
	DECLARE @Clause NVARCHAR(500) = '';

    IF @RefType = 'absencereasons'
	BEGIN
		SET @Sql = 'SELECT Name, '''' AS Code, SortOrder FROM wwp.AbsenceReason t ';
	END

	IF @RefType = 'accommodations'
	BEGIN
		SET @Sql = 'SELECT Name, '''' AS Code, SortOrder FROM wwp.Accommodation t ';
	END

	IF @RefType = 'approvalreasons'
	BEGIN
		SET @Sql = 'SELECT Name, Code, 0 AS ''SortOrder'' FROM wwp.ApprovalReason t ';
	END

	-- etc... 





	SET @Clause = 'WHERE IsDeleted = 0 ORDER BY SortOrder';

	SET @Sql = @Sql + ' ' + @Clause;

	EXECUTE sp_executesql @Sql;
END

GO
/****** Object:  StoredProcedure [wwp].[USP_MostRecentPrograms]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 12/17/2018
-- Description:	Get the latest status of each program for a PIN
-- Modified:    10/01/2019 - Added WIUID to the output (US3360)
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_MostRecentPrograms] 3008888224, 'WWPDEV'
*/

CREATE PROCEDURE [wwp].[USP_MostRecentPrograms]
(
@PinNumber DECIMAL(10,0),
@SchemaName VARCHAR(20)
)
AS
BEGIN
BEGIN TRY
	SET FMTONLY OFF

	DECLARE @CheckStatement VARCHAR(MAX)
	DECLARE @Statement1 VARCHAR(MAX)
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @ParticipantId INT
	DECLARE @W2 INT
	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP' THEN 'PWP639TC'
						END
	---

	DECLARE @MostRecentFEP TABLE 
	(
	ProgramCode VARCHAR(5),
	MostRecentMFFepId VARCHAR(10),
	LFFepId VARCHAR(10),
	WIUID VARCHAR(25)
	)

	SELECT @ParticipantId = Id
	FROM wwp.Participant
	WHERE PinNumber = @PinNumber

	SELECT PEP.Id, PEP.EnrolledProgramId, EP.ProgramCode ProgramName, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode,
		   CASE WHEN EnrolledProgramStatusCodeId = 1 THEN MAX(ReferralDate)
				WHEN EnrolledProgramStatusCodeId = 2 THEN MAX(EnrollmentDate)
				WHEN EnrolledProgramStatusCodeId = 3 THEN MAX(DisenrollmentDate)
		   END StatusDate,
		   Rn = ROW_NUMBER() OVER(PARTITION BY IIF(EnrolledProgramId BETWEEN 1 AND 8 OR EnrolledProgramId = 11, 11, EnrolledProgramId) ORDER BY PEP.EnrolledProgramStatusCodeId, PEP.Id DESC)
	INTO #Stage1
	FROM wwp.ParticipantEnrolledProgram PEP
		INNER JOIN wwp.EnrolledProgram EP
			ON PEP.EnrolledProgramId = EP.Id
		INNER JOIN wwp.EnrolledProgramStatusCode EPSC
			ON PEP.EnrolledProgramStatusCodeId = EPSC.Id
	WHERE ParticipantId = @ParticipantId
	GROUP BY PEP.EnrolledProgramId, EP.ProgramCode, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode, PEP.Id
	ORDER BY PEP.EnrolledProgramId

	--SELECT * FROM #Stage1
	---

	DECLARE @Stage2 TABLE
	(
	ProgramName VARCHAR(5),
	StatusCode VARCHAR(20),
	StatusDate DATE,
	CurrentRegCode CHAR(1),
	ReferralRegistrationCode CHAR(1)
	)

	SET @CheckStatement = 'SELECT ProgramName,
						   CASE WHEN StatusCode = ''R'' THEN ''Referred''
								WHEN StatusCode = ''E'' THEN ''Enrolled''
								WHEN StatusCode = ''D'' THEN ''Disenrolled''
						   END StatusCode,
						   CASE WHEN StatusCode = ''R'' THEN WPReferralDate
						   ELSE LAST_CONTACT_DT
						   END StatusDate,
						   CurrentRegCode,
						   ReferralRegistrationCode
						   FROM OPENQUERY (' + @LSDBName +', ''SELECT PROGRAM_CD AS ProgramName, WP_SYSTEM_STS_CD AS StatusCode, WP_REFERRAL_DT AS WPReferralDate,
															   LAST_CONTACT_DT, CURRENT_REG_CD  AS CurrentRegCode, REFERRAL_REG_CD   AS ReferralRegistrationCode
															   FROM ' + @DB2DBName + '.T0018_WP_INDV
															   WHERE PIN_NUM = ' + CAST(@PinNumber AS VARCHAR(10)) + '
															   AND WP_SYSTEM_STS_CD IN (''''R'''')
															   AND PROGRAM_CD NOT IN (''''FS'''',''''  '''',''''ADC'''')'')'

	PRINT @CheckStatement

	INSERT INTO @Stage2
	EXEC (@CheckStatement)

	UPDATE @Stage2
	SET  ProgramName = 'LF'
	WHERE CurrentRegCode = 'L' OR ReferralRegistrationCode = 'L'

	--SELECT * FROM @Stage2
	---

	DECLARE @Stage3 Table
	(
	Id INT,
	ProgramName VARCHAR(5),
	StatusCode VARCHAR(20),
	StatusDate DATE,
	SortOrder INT
	)

	IF EXISTS (SELECT * FROM @Stage2) AND NOT EXISTS (SELECT * FROM wwp.ParticipantEnrolledProgram
													  WHERE ParticipantId = @ParticipantId
													  AND EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13)
													  AND EnrolledProgramStatusCodeId = 1
													  AND (ReferralDate = (SELECT StatusDate FROM @Stage2 WHERE ProgramName = 'WW')
													  OR ReferralDate = (SELECT StatusDate FROM @Stage2 WHERE ProgramName = 'LF')))
	BEGIN
		INSERT INTO @Stage3
		SELECT *,
		CASE WHEN ProgramName = 'WW' THEN 1
			 WHEN ProgramName = 'LF' THEN 2
			 WHEN ProgramName = 'CF' THEN 3
			 WHEN ProgramName = 'TMJ' THEN 4
			 WHEN ProgramName = 'TJ' THEN 5
			 WHEN ProgramName = 'FCD' THEN 6
		END AS SortOrder
		FROM
		(
		SELECT Id, ProgramName, StatusCode, StatusDate
		FROM #Stage1
		WHERE ProgramName NOT LIKE 'WW' AND ProgramName NOT LIKE 'LF'
		AND Rn = 1
		UNION ALL
		SELECT NULL Id, ProgramName, StatusCode, StatusDate
		FROM @Stage2
		) A
	END
	ELSE
	BEGIN
		INSERT INTO @Stage3
		SELECT *,
		CASE WHEN ProgramName = 'WW' THEN 1
			 WHEN ProgramName = 'LF' THEN 2
			 WHEN ProgramName = 'CF' THEN 3
			 WHEN ProgramName = 'TMJ' THEN 4
			 WHEN ProgramName = 'TJ' THEN 5
			 WHEN ProgramName = 'FCD' THEN 6
		END AS SortOrder
		FROM
		(
		SELECT Id, ProgramName, StatusCode, StatusDate
		FROM #Stage1
		WHERE Rn = 1
		) B
	END

	IF EXISTS (SELECT 1
			   FROM @Stage3
			   WHERE (ProgramName = 'WW' OR ProgramName = 'LF') AND StatusCode = 'Referred')
	BEGIN
		SET @Statement1 = 'SELECT ProgramCode, MostRecentMFFepId
						   FROM OPENQUERY(' + @LSDBName + ', ''SELECT A.ASGN_FEP_ID AS MostRecentMFFepId, B.PROGRAM_CD AS ProgramCode
															   FROM ' + @DB2DBName + '.T2536_WP_FEP_WRKR A,
																	' + @DB2DBName + '.T0018_WP_INDV B
															   WHERE B.PIN_NUM = ' + CAST(@PinNumber AS VARCHAR(10)) + '
															   AND B.PROGRAM_CD = ''''WW''''
															   AND A.CASE_NUM = B.CASE_NUM
															   AND A.HISTORY_CD = 0
															   AND A.HISTORY_SEQ_NUM = (SELECT MAX(AA.HISTORY_SEQ_NUM)
																						FROM ' + @DB2DBName + '.T2536_WP_FEP_WRKR  AA
																						WHERE AA.CASE_NUM = A.CASE_NUM
																					   )
						   WITH UR'')'
		PRINT @Statement1

		INSERT INTO @MostRecentFEP (ProgramCode, MostRecentMFFepId)
		EXEC (@Statement1) 
		--SELECT * FROM @MostRecentFEP
	END
	ELSE
	BEGIN
		INSERT INTO @MostRecentFEP
		SELECT EP.ProgramCode, W.MFUserId, W1.MFUserId, W.WIUID
		FROM @Stage3 S
			LEFT OUTER JOIN wwp.ParticipantEnrolledProgram PEP
				ON S.Id = PEP.Id
			LEFT OUTER JOIN wwp.EnrolledProgram EP
				ON IIF(PEP.EnrolledProgramId BETWEEN 1 AND 8 OR PEP.EnrolledProgramId = 11, 11, PEP.EnrolledProgramId) = EP.Id
			LEFT OUTER JOIN wwp.Worker W
				ON PEP.WorkerId = W.Id
			LEFT OUTER JOIN wwp.Worker W1
				ON PEP.LFFEPId = W1.Id
		--SELECT * FROM @MostRecentFEP
	END
	
	SELECT S.ProgramName, S.StatusCode RecentStatus, S.StatusDate RecentStatusDate, M.MostRecentMFFepId AssignedWorker, M.WIUID WIUID
	FROM @Stage3 S
		LEFT OUTER JOIN @MostRecentFEP M
			ON IIF(S.ProgramName = 'LF', 'WW', S.ProgramName) = IIF(M.ProgramCode = 'LF', 'WW', M.ProgramCode)
	ORDER BY S.SortOrder
	---

	IF OBJECT_ID('tempdb..#Stage1') IS NOT NULL DROP TABLE #Stage1
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_Organization_Info]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================
-- Author		: Tholkappian, Silambholi
-- Create date	: 01/29/2020
-- Description	: Get Organization Info
-- ===============================================================================

/* Sample Execute
EXEC [wwp].[USP_Organization_Info] 11, 6
*/

CREATE PROCEDURE [wwp].[USP_Organization_Info]
	@EnrolledProgramId INT,
	@OrganizationId INT,
	@Debug BIT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @SchemaName AS VARCHAR(10) = DB_NAME()
		DECLARE @DB2DBName AS VARCHAR(25)
		DECLARE @LSDBName AS VARCHAR(25)
		
		---
		SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
								WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
								WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
								WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
						   END

		---
		SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
								 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
								 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
								 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
							END

		---
		
		SELECT AgencyName, AddressLine1, C.Name City, S.Name [State], ZipCode
		FROM wwp.Organization O
			INNER JOIN wwp.OrganizationInformation OI
				ON O.Id = OI.OrganizationId
			INNER JOIN wwp.OrganizationLocation OL
				ON OI.Id = OL.OrganizationInformationId
			INNER JOIN wwp.City C
				ON OL.CityId = C.Id
			INNER JOIN wwp.[State] S
				ON C.StateId = S.Id
		WHERE OI.EnrolledProgramId = @EnrolledProgramId AND OI.OrganizationId = @OrganizationId
	END TRY
	BEGIN CATCH
	THROW
	END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_ParticipantbyWorker_ProgramStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 07/11/2018
-- Description:	Get the lates status of each program for Participant by Worker page
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_ParticipantbyWorker_ProgramStatus] 'tholksxofsd', 'FSC', 'W-2'
*/

CREATE PROCEDURE [wwp].[USP_ParticipantbyWorker_ProgramStatus]
(
@WAMSId VARCHAR(25),
@EntsecAgencyCode VARCHAR(100),
@Program VARCHAR(50)
)
AS
BEGIN
BEGIN TRY
	SET FMTONLY OFF

	DECLARE @WorkerId INT
	DECLARE @OrgId INT
	DECLARE @ProgId INT
	DECLARE @AssociatedOrgId INT
	---

	SELECT TOP 1 @WorkerId = Id
	FROM wwp.Worker
	WHERE WAMSId = @WAMSId

	SELECT @OrgId = Id
	FROM wwp.Organization
	WHERE EntsecAgencyCode = @EntsecAgencyCode

	SELECT @AssociatedOrgId = OrganizationId
	FROM wwp.ContractArea
	WHERE Id = (SELECT ContractAreaId
				FROM wwp.AssociatedOrganization
				WHERE OrganizationId = @OrgId)

	SELECT @ProgId = CASE ShortName WHEN 'W-2' THEN 11 ELSE Id END
	FROM wwp.EnrolledProgram
	WHERE DescriptionText = @Program

	DECLARE @ParticipantsByWorker TABLE
	(
	 Id INT IDENTITY(1,1),
	 PinNumber DECIMAL(10,0),
	 ParticipantId INT
	)

	IF @Program = 'All Programs'
		INSERT INTO @ParticipantsByWorker
		SELECT DISTINCT P.PinNumber, PEP.ParticipantId
		FROM wwp.Participant P
			INNER JOIN wwp.ParticipantEnrolledProgram PEP
				ON PEP.ParticipantId = P.Id
		WHERE PEP.WorkerId = @WorkerId AND PEP.EnrolledProgramStatusCodeId <> (SELECT Id
																			  FROM wwp.EnrolledProgramStatusCode
																			  WHERE StatusCode = 'Disenrolled')
		AND PEP.OfficeId IN (SELECT Id
							 FROM wwp.WWPOffice
							 WHERE ContractAreaId IN (SELECT Id
													  FROM wwp.ContractArea
													  WHERE OrganizationId IN (@OrgId, @AssociatedOrgId)))
	ELSE
		INSERT INTO @ParticipantsByWorker
		SELECT DISTINCT P.PinNumber, PEP.ParticipantId
		FROM wwp.Participant P
			INNER JOIN wwp.ParticipantEnrolledProgram PEP
				ON PEP.ParticipantId = P.Id
		WHERE PEP.WorkerId = @WorkerId AND PEP.EnrolledProgramStatusCodeId <> (SELECT Id
																			  FROM wwp.EnrolledProgramStatusCode
																			  WHERE StatusCode = 'Disenrolled')
		AND PEP.OfficeId IN (SELECT Id
							 FROM wwp.WWPOffice
							 WHERE ContractAreaId IN (SELECT Id
													  FROM wwp.ContractArea
													  WHERE OrganizationId IN (@OrgId, @AssociatedOrgId)))
		AND IIF(PEP.EnrolledProgramId BETWEEN 1 AND 8 OR PEP.EnrolledProgramId = 11, 11, PEP.EnrolledProgramId) = @ProgId

	--SELECT * FROM @ParticipantsByWorker

	SELECT PB.Id PBId, PEP.Id PEPId, PEP.EnrolledProgramId, UPPER(EP.Name) ProgramName, EP.ProgramCode, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode,
			CASE WHEN EnrolledProgramStatusCodeId = 1 THEN MAX(ReferralDate)
				WHEN EnrolledProgramStatusCodeId = 2 THEN MAX(EnrollmentDate)
				WHEN EnrolledProgramStatusCodeId = 3 THEN MAX(DisenrollmentDate)
			END StatusDate,
			PEP.OfficeId, P.FirstName ParticipantFirstName, P.MiddleInitialName ParticipantMiddleName, P.LastName ParticipantLastName,
			P.SuffixName ParticipantSuffixName, P.PinNumber, P.DateOfBirth ParticipantDateOfBirth, CPI.IsConfidential IsConfidentialCase, W.MFUserId AssignedWorker,
			Rn = ROW_NUMBER() OVER(PARTITION BY PB.Id, IIF(EnrolledProgramId BETWEEN 1 AND 8 OR EnrolledProgramId = 11, 11, EnrolledProgramId) ORDER BY PEP.EnrolledProgramStatusCodeId, PEP.Id DESC)
	INTO #Stage1
	FROM @ParticipantsByWorker PB
		INNER JOIN wwp.Participant P
			ON PB.ParticipantId = P.Id
		LEFT JOIN wwp.ParticipantEnrolledProgram PEP
			ON PB.ParticipantId = PEP.ParticipantId
		LEFT JOIN wwp.EnrolledProgram EP
			ON PEP.EnrolledProgramId = EP.Id
		LEFT JOIN wwp.EnrolledProgramStatusCode EPSC
			ON PEP.EnrolledProgramStatusCodeId = EPSC.Id
		LEFT JOIN wwp.ConfidentialPinInformation CPI
			ON P.Id = CPI.ParticipantId
		LEFT JOIN wwp.Worker W
			ON PEP.WorkerId = W.Id
	GROUP BY PB.Id, PEP.EnrolledProgramId, EP.Name, EP.ProgramCode, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode, PEP.Id, PEP.OfficeId, P.FirstName, P.MiddleInitialName,
			 P.LastName, P.SuffixName, P.PinNumber, P.DateOfBirth, CPI.IsConfidential, W.MFUserId
	ORDER BY PBId, PEP.EnrolledProgramId

	--SELECT * FROM #Stage1 ORDER BY PBId, EnrolledProgramId
	---

	DECLARE @Stage2 Table
	(
	PBId INT,
	RPParticipantId INT,
	PEPId INT,
	EnrolledProgramId INT,
	ProgramName VARCHAR(100),
	ProgramCode VARCHAR(10),
	StatusCode VARCHAR(20),
	StatusDate DATE,
	ParticipantFirstName VARCHAR(100),
	ParticipantMiddleName VARCHAR(10),
	ParticipantLastName VARCHAR(100),
	ParticipantSuffixName VARCHAR(10),
	PinNumber DECIMAL(10,0),
	ParticipantDateOfBirth DATE,
	OfficeId SMALLINT,
	IsConfidentialCase BIT,
	AssignedWorker VARCHAR(25),
	SortOrder INT
	)

	INSERT INTO @Stage2
	SELECT *,
	CASE WHEN ProgramName = 'W-2' THEN 1
		 WHEN ProgramName = 'Children First' THEN 2
		 WHEN ProgramName = 'Transform Milwaukee Jobs' THEN 3
		 WHEN ProgramName = 'Transitional Jobs' THEN 4
		 WHEN ProgramName = 'Learnfare' THEN 5
		 WHEN ProgramName = 'Five County Demonstration Project' THEN 6
	END AS SortOrder
	FROM
	(
	SELECT S.PBId, PB.ParticipantId, S.PEPId, S.EnrolledProgramId, S.ProgramName, S.ProgramCode, S.StatusCode, S.StatusDate, S.ParticipantFirstName, S.ParticipantMiddleName,
		   S.ParticipantLastName, S.ParticipantSuffixName, S.PinNumber, S.ParticipantDateOfBirth, S.OfficeId, S.IsConfidentialCase, S.AssignedWorker
	FROM #Stage1 S
		INNER JOIN @ParticipantsByWorker PB
			ON S.PBId = PB.Id
	WHERE Rn = 1
	) A

	--SELECT * FROM @Stage2

	DECLARE @Stage3 Table
	(
	ParticipantId INT,
	PEPId INT,
	EnrolledProgramId INT,
	ProgramName VARCHAR(100),
	ProgramCode VARCHAR(10),
	RecentStatus VARCHAR(20),
	RecentStatusDate DATE,
	ParticipantFirstName VARCHAR(100),
	ParticipantMiddleName VARCHAR(10),
	ParticipantLastName VARCHAR(100),
	ParticipantSuffixName VARCHAR(10),
	PinNumber DECIMAL(10,0),
	ParticipantDateOfBirth DATE,
	WorkerId INT,
	WorkerFirstName VARCHAR(100),
	WorkerMiddleInitial VARCHAR(10),
	WorkerLastName VARCHAR(100),
	MFUserId VARCHAR(10),
	WAMSId VARCHAR(50),
	WorkerActiveStatusCode BIT,
	EntsecAgencyCode VARCHAR(10),
	CountyName VARCHAR(100),
	OfficeNumber SMALLINT,
	IsConfidentialCase BIT,
	AssignedWorker VARCHAR(25),
	WorkerAgencyName VARCHAR(100),
	IsTransfer BIT,
	ProgramSort INT
	)

	INSERT INTO @Stage3
	SELECT S.RPParticipantId ParticipantId, S.PEPId, S.EnrolledProgramId, S.ProgramName, S.ProgramCode, S.StatusCode RecentStatus, S.StatusDate RecentStatusDate, S.ParticipantFirstName,
		   S.ParticipantMiddleName, S.ParticipantLastName, S.ParticipantSuffixName, S.PinNumber, S.ParticipantDateOfBirth, W.Id WorkerId, W.FirstName WorkerFirstName,
		   W.MiddleInitial WorkerMiddleInitial, W.LastName WorkerLastName, W.MFUserId, W.WAMSId,
		   CAST(IIF(W.WorkerActiveStatusCode = 'ACTIVE' OR W.WorkerActiveStatusCode = 'A', 1, 0) AS BIT) WorkerActiveStatusCode, O.EntsecAgencyCode, CT.CountyName, WP.OfficeNumber,
		   ISNULL(S.IsConfidentialCase, 0) IsConfidentialCase, S.AssignedWorker, O.AgencyName WorkerAgencyName,
		   CAST(IIF((CASE WHEN EXISTS (SELECT Id FROM wwp.OfficeTransfer OT1 WHERE OT1.ParticipantEnrolledProgramId = PEP.Id) THEN 1 ELSE 0 END = 1) AND 
		   (CAST(IIF(DATEDIFF(DAY, OT.TransferDate, GETDATE()) <= 14, 1, 0) AS BIT) = 1 OR (S.StatusCode = 'Enrolled' AND PEP.WorkerId IS NULL)) AND S.StatusCode <> 'Disenrolled', 1, 0) AS BIT) IsTransfer, S.SortOrder
	FROM @Stage2 S
		LEFT JOIN wwp.ParticipantEnrolledProgram PEP
			ON S.PEPId = PEP.Id
		LEFT JOIN wwp.Worker W
			ON PEP.WorkerId = W.Id
		LEFT JOIN wwp.WWPOffice WP
			ON S.OfficeId = WP.Id
		LEFT JOIN wwp.ContractArea CA
			ON WP.ContractAreaId = CA.Id
		LEFT JOIN wwp.CountyAndTribe CT
			ON WP.CountyandTribeId = CT.Id
		LEFT JOIN wwp.Organization O
			ON CA.OrganizationId = O.Id
		LEFT JOIN wwp.OfficeTransfer OT
			ON OT.Id = (SELECT TOP 1 Id
						FROM wwp.OfficeTransfer
						WHERE ParticipantEnrolledProgramId = PEP.Id
						ORDER BY Id DESC)
		LEFT JOIN wwp.ConfidentialPinInformation CPI
			ON S.RPParticipantId = CPI.ParticipantId
	--WHERE ISNULL((CONVERT(INT, CONVERT(VARCHAR, GETDATE(), 112)) - CONVERT(INT, CONVERT(VARCHAR, S.StatusDate, 112))) / 10000, 0) <= 7

	SELECT S.ParticipantId, PEPId, EnrolledProgramId, ProgramName, ProgramCode, RecentStatus, RecentStatusDate, ParticipantFirstName, ParticipantMiddleName, ParticipantLastName,
		   ParticipantSuffixName, S.PinNumber, ParticipantDateOfBirth, S.WorkerId, WorkerFirstName, WorkerMiddleInitial, WorkerLastName, MFUserId, WAMSId, WorkerActiveStatusCode,
		   EntsecAgencyCode, CountyName, OfficeNumber, AssignedWorker, WorkerAgencyName, IsTransfer, CPI.IsConfidential,
		   CAST(IIF(IsTransfer = 1 AND WAMSId = @WAMSId, 1, 2) AS INT) GroupOrder,
		   Rn = ROW_NUMBER() OVER(PARTITION BY CAST(IIF(IsTransfer = 1 AND WAMSId = @WAMSId, 1, 2) AS INT)
								  ORDER BY ParticipantlastName, ParticipantFirstName, ParticipantMiddleName, ProgramSort)
	FROM @Stage3 S
	LEFT JOIN wwp.ConfidentialPinInformation CPI
		ON S.ParticipantId = CPI.ParticipantId
	ORDER BY GroupOrder, Rn
	---

	IF OBJECT_ID('tempdb..#Stage1') IS NOT NULL DROP TABLE #Stage1
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_PostWWRecoupment_Response]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[USP_PostWWRecoupment_Response] 1
CREATE PROCEDURE [wwp].[USP_PostWWRecoupment_Response]
	@Debug BIT = 0
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@SchemaName VARCHAR(20),
			@SelectStmt VARCHAR(MAX)

	DECLARE @T2650 TABLE
	(
	 Id INT IDENTITY(1,1),
	 CaseNumber VARCHAR(10),
	 LiablePINList VARCHAR(MAX),
	 PostRecoupmentAmount DECIMAL(9,2),
	 BenefitBeginDate VARCHAR(10),
	 AGSequence INT,
	 ProgramCode CHAR(3),
	 SubProgramCode CHAR(1)
	)

	---
	SELECT @LSDBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
                            WHEN DB_NAME() = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                            WHEN DB_NAME() = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                            WHEN DB_NAME() = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                       END
	---

	SELECT @DB2DBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS')	   THEN 'PWS639TC'
							 WHEN DB_NAME() = 'WWPACC'  THEN 'PWA639TC'
							 WHEN DB_NAME() = 'WWPTRN'  THEN 'PWE639TC'
							 WHEN DB_NAME() = 'WWP'     THEN 'PWP639TC'
						END
	---
	
	SET @SelectStmt = 'SELECT CASE_NUM, LIST_ELG_PIN_NUM, RCOUP_APLY_AMT, BNFT_PRD_DT, AG_SEQ_NUM, PROGRAM_CD, SUBPROGRAM_CD
					   FROM OPENQUERY(' + @LSDBName + ', ''SELECT CASE_NUM, LIST_ELG_PIN_NUM, RCOUP_APLY_AMT, BNFT_PRD_DT, AG_SEQ_NUM, PROGRAM_CD, SUBPROGRAM_CD
														   FROM  ' + @DB2DBName + '.T2650_W2_RCOUP_INT
														   WHERE CASE_NUM > 0 AND RCOUP_APLY_SW = ''''Y''''
														   WITH UR;'')'

	PRINT @SelectStmt

	INSERT INTO @T2650
	EXEC (@SelectStmt)

	SELECT CaseNumber, '["' + REPLACE(RTRIM(LiablePINList), ',' , '","') + '"]' LiablePINList, PostRecoupmentAmount, BenefitBeginDate, AGSequence, ProgramCode, SubProgramCode,
		   CAST(Id AS varchar(100)) Identifier
	FROM @T2650
END
GO
/****** Object:  StoredProcedure [wwp].[USP_PrintEP_Info]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================
-- Author		: Tholkappian, Silambholi
-- Create date	: 01/29/2020
-- Description	: Get Info Needed for Print EP
-- ===============================================================================

/* Sample Execute
EXEC [wwp].[USP_PrintEP_Info] 9009879691, 13619, '2020-01-31', 'XCTF50', 2018040215164927, 10, 22
*/

CREATE PROCEDURE [wwp].[USP_PrintEP_Info]
	@PinNumber VARCHAR(10),
	@ParticipantId INT,
	@TargetDate VARCHAR(10),
	@MFUserId VARCHAR(6),
	@WIUID VARCHAR(25),
	@EnrolledProgramId INT,
	@OrganizationId INT,
	@Debug BIT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @SchemaName VARCHAR(10) = DB_NAME(),
		@DB2DBName VARCHAR(25),
		@LSDBName VARCHAR(25)
		
		---
		SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
								WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
								WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
								WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
						   END

		---
		SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
								 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
								 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
								 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
							END

		---
		DECLARE @TempPlacementInfo TABLE (
										  CaseNumber VARCHAR(10),
										  Placement VARCHAR(10)
										 )
		
		IF (@EnrolledProgramId BETWEEN 1 AND 8 OR @EnrolledProgramId = 11)
			INSERT INTO @TempPlacementInfo
			EXEC [wwp].[USP_GetPlacement_Info] @PinNumber, @TargetDate
		ELSE
			INSERT INTO @TempPlacementInfo
			VALUES (NULL, NULL)
		--SELECT * FROM @TempPlacementInfo

		---
		DECLARE @TempCaseInfo TABLE (
									 AddressType VARCHAR(15),
									 CaseNumber DECIMAL(10, 0),
									 AddressLine1 VARCHAR(200),
									 AddressLine2 VARCHAR(100),
									 City VARCHAR(50),
									 [STATE] VARCHAR(50),
									 ZIPCode VARCHAR(10),
									 PhoneNumber VARCHAR(10),
									 HomeLanguage VARCHAR(20)
								   )

		INSERT INTO @TempCaseInfo
		EXEC [wwp].[USP_GetOtherDemographics_Info] @PinNumber, @ParticipantId, @TargetDate, @EnrolledProgramId

		IF EXISTS (SELECT 1
				   FROM @TempCaseInfo
				   WHERE AddressType = 'Alternate' AND (AddressLine1 IS NOT NULL OR AddressLine2 IS NOT NULL OR City IS NOT NULL OR [State] IS NOT NULL OR ZipCode IS NOT NULL))
			DELETE FROM @TempCaseInfo WHERE AddressType = 'Primary'
		ELSE
			DELETE FROM @TempCaseInfo WHERE AddressType = 'Alternate'

		IF NOT EXISTS (SELECT 1
					   FROM @TempCaseInfo)
			INSERT INTO @TempCaseInfo (AddressType)
			VALUES (NULL)

		--SELECT * FROM @TempCaseInfo

		---
		DECLARE @TempWorkerInfo TABLE (
									   FirstName VARCHAR(50),
									   MiddleInitial VARCHAR(5),
									   LastName VARCHAR(50),
									   PhoneNumber VARCHAR(10),
									   Email VARCHAR(120)
									  )

		INSERT INTO @TempWorkerInfo
		EXEC [wwp].[USP_WorkerContact_Info] @WIUID, @MFUserId, @EnrolledProgramId

		IF NOT EXISTS (SELECT 1
					   FROM @TempWorkerInfo)
			INSERT INTO @TempWorkerInfo (FirstName)
			VALUES (NULL)
		--SELECT * FROM @TempWorkerInfo

		---
		DECLARE @TempOrganizationInfo TABLE (
										     AgencyName VARCHAR(100),
										     AddressLine1 VARCHAR(380),
										     City VARCHAR(200),
										     [State] VARCHAR(200),
										     ZipCode VARCHAR(10)
										    )

		INSERT INTO @TempOrganizationInfo
		EXEC [wwp].[USP_Organization_Info] @EnrolledProgramId, @OrganizationId

		IF NOT EXISTS (SELECT 1
					   FROM @TempOrganizationInfo)
			INSERT INTO @TempOrganizationInfo (AgencyName)
			VALUES (NULL)
		--SELECT * FROM @TempOrganizationInfo

		---		
		SELECT A.Placement, B.CaseNumber, B.AddressType, B.PartAddressLine1, B.PartAddressLine2, B.PartCity, B.PartState, B.PartZipCode, B.PartPhoneNumber, B.HomeLanguage,
			   C.WkrFirstName, C.WkrMiddleInitial, C.WkrLastName, C.WkrPhoneNumber, C.WkrEmail, D.AgencyName, D.OrgAddressLine1, D.OrgCity, D.OrgState, D.OrgZipCode
		FROM (SELECT Placement
			  FROM @TempPlacementInfo) A,
			 (SELECT AddressType, CaseNumber, AddressLine1 PartAddressLine1, AddressLine2 PartAddressLine2, City PartCity, [State] PartState, ZIPCode PartZipCode,
					 PhoneNumber PartPhoneNumber, HomeLanguage
					 FROM @TempCaseInfo) B,
			 (SELECT FirstName WkrFirstName, MiddleInitial WkrMiddleInitial, LastName WkrLastName, PhoneNumber WkrPhoneNumber, Email WkrEmail
			  FROM @TempWorkerInfo) C,
			 (SELECT AgencyName, AddressLine1 OrgAddressLine1, City OrgCity, [State] OrgState, ZipCode OrgZipCode
			  FROM @TempOrganizationInfo) D
	END TRY
	BEGIN CATCH
	THROW
	END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_ProgramStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 05/09/2018
-- Description:	Get the lates status of each program for a PIN
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_ProgramStatus] 2007986621, 'WWPSYS', 1
*/

CREATE PROCEDURE [wwp].[USP_ProgramStatus]
(
@PinNumber DECIMAL(10,0),
@SchemaName VARCHAR(20),
@CheckT0018 BIT,
@T0018EnrolledProgramId INT = NULL,
@RecentStatus VARCHAR(20) = NULL OUTPUT,
@ReferralDate DATE = NULL OUTPUT,
@EnrollmentDate DATE = NULL OUTPUT,
@DisEnrollmemtDate DATE = NULL OUTPUT,
@EnrolledProgramId INT = NULL OUTPUT
)
AS
BEGIN
BEGIN TRY
	DECLARE @CheckStatement VARCHAR(MAX)
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @ParticipantId INT
	DECLARE @W2 INT
	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP' THEN 'PWP639TC'
						END
	---

	SELECT @ParticipantId = Id
	FROM wwp.Participant
	WHERE PinNumber = @PinNumber

	SELECT PEP.Id, PEP.EnrolledProgramId, EP.ProgramCode ProgramName, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode,
		   CASE WHEN EnrolledProgramStatusCodeId = 1 THEN MAX(ReferralDate)
				WHEN EnrolledProgramStatusCodeId = 2 THEN MAX(EnrollmentDate)
				WHEN EnrolledProgramStatusCodeId = 3 THEN MAX(DisenrollmentDate)
		   END StatusDate,
		   Rn = ROW_NUMBER() OVER(PARTITION BY IIF(EnrolledProgramId BETWEEN 1 AND 8 OR EnrolledProgramId = 11, 11, EnrolledProgramId) ORDER BY PEP.EnrolledProgramStatusCodeId, PEP.Id DESC)
	INTO #Stage1
	FROM wwp.ParticipantEnrolledProgram PEP
		INNER JOIN wwp.EnrolledProgram EP
			ON PEP.EnrolledProgramId = EP.Id
		INNER JOIN wwp.EnrolledProgramStatusCode EPSC
			ON PEP.EnrolledProgramStatusCodeId = EPSC.Id
	WHERE ParticipantId = @ParticipantId
	GROUP BY PEP.EnrolledProgramId, EP.ProgramCode, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode, PEP.Id
	ORDER BY PEP.EnrolledProgramId

	--SELECT * FROM #Stage1
	---

	DECLARE @Stage2 TABLE
	(
	ProgramName VARCHAR(5),
	StatusCode VARCHAR(20),
	StatusDate DATE,
	CurrentRegCode CHAR(1),
	ReferralRegistrationCode CHAR(1)
	)

	SET @CheckStatement = 'SELECT ProgramName,
						   CASE WHEN StatusCode = ''R'' THEN ''Referred''
								WHEN StatusCode = ''E'' THEN ''Enrolled''
								WHEN StatusCode = ''D'' THEN ''Disenrolled''
						   END StatusCode,
						   CASE WHEN StatusCode = ''R'' THEN WPReferralDate
						   ELSE LAST_CONTACT_DT
						   END StatusDate,
						   CurrentRegCode,
						   ReferralRegistrationCode
						   FROM OPENQUERY (' + @LSDBName +', ''SELECT PROGRAM_CD AS ProgramName, WP_SYSTEM_STS_CD AS StatusCode, WP_REFERRAL_DT AS WPReferralDate,
															   LAST_CONTACT_DT, CURRENT_REG_CD  AS CurrentRegCode, REFERRAL_REG_CD   AS ReferralRegistrationCode
															   FROM ' + @DB2DBName + '.T0018_WP_INDV
															   WHERE PIN_NUM = ' + CAST(@PinNumber AS VARCHAR(10)) + '
															   AND WP_SYSTEM_STS_CD IN (''''R'''')
															   AND PROGRAM_CD NOT IN (''''FS'''',''''  '''',''''ADC'''')'')'

	PRINT @CheckStatement

	IF @CheckT0018 = 1
	BEGIN
		INSERT INTO @Stage2
		EXEC (@CheckStatement)

		UPDATE @Stage2
		SET  ProgramName = 'LF'
		WHERE CurrentRegCode = 'L' OR ReferralRegistrationCode = 'L'
	END

	--SELECT * FROM @Stage2
	---

	DECLARE @Stage3 Table
	(
	Id INT,
	ProgramName VARCHAR(5),
	StatusCode VARCHAR(20),
	StatusDate DATE,
	SortOrder INT
	)

	IF EXISTS (SELECT * FROM @Stage2) AND NOT EXISTS (SELECT * FROM wwp.ParticipantEnrolledProgram
													  WHERE ParticipantId = @ParticipantId
													  AND EnrolledProgramId IN (1,2,3,4,5,6,7,8,11,13)
													  AND EnrolledProgramStatusCodeId = 1
													  AND (ReferralDate = (SELECT StatusDate FROM @Stage2 WHERE ProgramName = 'WW')
													  OR ReferralDate = (SELECT StatusDate FROM @Stage2 WHERE ProgramName = 'LF')))
	BEGIN
		INSERT INTO @Stage3
		SELECT *,
		CASE WHEN ProgramName = 'WW' THEN 1
			 WHEN ProgramName = 'LF' THEN 2
			 WHEN ProgramName = 'CF' THEN 3
			 WHEN ProgramName = 'TMJ' THEN 4
			 WHEN ProgramName = 'TJ' THEN 5
			 WHEN ProgramName = 'FCD' THEN 6
		END AS SortOrder
		FROM
		(
		SELECT Id, ProgramName, StatusCode, StatusDate
		FROM #Stage1
		WHERE ProgramName NOT LIKE 'WW' AND ProgramName NOT LIKE 'LF'
		AND Rn = 1
		UNION ALL
		SELECT NULL Id, ProgramName, StatusCode, StatusDate
		FROM @Stage2
		) A
	END
	ELSE
	BEGIN
		INSERT INTO @Stage3
		SELECT *,
		CASE WHEN ProgramName = 'WW' THEN 1
			 WHEN ProgramName = 'LF' THEN 2
			 WHEN ProgramName = 'CF' THEN 3
			 WHEN ProgramName = 'TMJ' THEN 4
			 WHEN ProgramName = 'TJ' THEN 5
			 WHEN ProgramName = 'FCD' THEN 6
		END AS SortOrder
		FROM
		(
		SELECT Id, ProgramName, StatusCode, StatusDate
		FROM #Stage1
		WHERE Rn = 1
		) B
	END

	IF @T0018EnrolledProgramId IS NULL
		SELECT S.ProgramName, S.StatusCode RecentStatus, S.StatusDate RecentStatusDate, PEP.*, CPI.IsConfidential
		--SELECT PEP.*
		FROM @Stage3 S
			LEFT OUTER JOIN wwp.ParticipantEnrolledProgram PEP
				ON S.Id = PEP.Id
			LEFT OUTER JOIN wwp.ConfidentialPinInformation CPI
				ON PEP.ParticipantId = CPI.ParticipantId
		ORDER BY SortOrder
	ELSE
	BEGIN
		SELECT @RecentStatus = S.StatusCode
		FROM @Stage3 S
			LEFT OUTER JOIN wwp.ParticipantEnrolledProgram PEP
				ON S.Id = PEP.Id
		WHERE PEP.EnrolledProgramId = @T0018EnrolledProgramId

		SELECT @ReferralDate = PEP.ReferralDate
		FROM @Stage3 S
			LEFT OUTER JOIN wwp.ParticipantEnrolledProgram PEP
				ON S.Id = PEP.Id
		WHERE PEP.EnrolledProgramId = @T0018EnrolledProgramId

		SELECT @EnrollmentDate = PEP.EnrollmentDate
		FROM @Stage3 S
			LEFT OUTER JOIN wwp.ParticipantEnrolledProgram PEP
				ON S.Id = PEP.Id
		WHERE PEP.EnrolledProgramId = @T0018EnrolledProgramId

		SELECT @DisEnrollmemtDate = PEP.DisenrollmentDate
		FROM @Stage3 S
			LEFT OUTER JOIN wwp.ParticipantEnrolledProgram PEP
				ON S.Id = PEP.Id
		WHERE PEP.EnrolledProgramId = @T0018EnrolledProgramId

		SELECT @EnrolledProgramId = PEP.EnrolledProgramId
		FROM @Stage3 S
			LEFT OUTER JOIN wwp.ParticipantEnrolledProgram PEP
				ON S.Id = PEP.Id
		WHERE PEP.EnrolledProgramId = @T0018EnrolledProgramId
	END
	---

	IF OBJECT_ID('tempdb..#Stage1') IS NOT NULL DROP TABLE #Stage1
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_RecentlyAccessed_ProgramStatus]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 07/10/2018
-- Description:	Get the lates status of each program for Recently Accessed page
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_RecentlyAccessed_ProgramStatus] 'sbv018'
*/

CREATE PROCEDURE [wwp].[USP_RecentlyAccessed_ProgramStatus]
(
@WAMSId VARCHAR(25)
)
AS
BEGIN
BEGIN TRY
	SET FMTONLY OFF

	DECLARE @WorkerId INT
	---

	SELECT TOP 1 @WorkerId = Id
	FROM wwp.Worker
	WHERE WAMSId = @WAMSId

	DECLARE @RecentParticipants TABLE
	(
	 Id INT IDENTITY(1,1),
	 PinNumber DECIMAL(10,0),
	 ParticipantId INT
	)

	INSERT INTO @RecentParticipants
	SELECT TOP 10 P.PinNumber, RP.ParticipantId
	FROM wwp.Participant P
		INNER JOIN wwp.RecentParticipant RP
			ON RP.ParticipantId = P.Id
	WHERE RP.WorkerId = @WorkerId
	ORDER BY RP.LastAccessed DESC

	--SELECT * FROM @RecentParticipants

	SELECT RP.Id RPId, PEP.Id PEPId, PEP.EnrolledProgramId, UPPER(EP.Name) ProgramName, EP.ProgramCode, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode,
			CASE WHEN EnrolledProgramStatusCodeId = 1 THEN MAX(ReferralDate)
				WHEN EnrolledProgramStatusCodeId = 2 THEN MAX(EnrollmentDate)
				WHEN EnrolledProgramStatusCodeId = 3 THEN MAX(DisenrollmentDate)
			END StatusDate,
			PEP.OfficeId, P.FirstName ParticipantFirstName, P.MiddleInitialName ParticipantMiddleName, P.LastName ParticipantLastName,
			P.SuffixName ParticipantSuffixName, P.PinNumber, P.DateOfBirth ParticipantDateOfBirth, CPI.IsConfidential IsConfidentialCase, W.MFUserId AssignedWorker,
			Rn = ROW_NUMBER() OVER(PARTITION BY RP.Id, IIF(EnrolledProgramId BETWEEN 1 AND 8 OR EnrolledProgramId = 11, 11, EnrolledProgramId) ORDER BY PEP.EnrolledProgramStatusCodeId, PEP.Id DESC)
	INTO #Stage1
	FROM @RecentParticipants RP

		INNER JOIN wwp.Participant P
			ON RP.ParticipantId = P.Id
		LEFT JOIN wwp.ParticipantEnrolledProgram PEP
			ON RP.ParticipantId = PEP.ParticipantId
		LEFT JOIN wwp.EnrolledProgram EP
			ON PEP.EnrolledProgramId = EP.Id
		LEFT JOIN wwp.EnrolledProgramStatusCode EPSC
			ON PEP.EnrolledProgramStatusCodeId = EPSC.Id
		LEFT JOIN wwp.ConfidentialPinInformation CPI
			ON P.Id = CPI.ParticipantId
		LEFT JOIN wwp.Worker W
			ON PEP.WorkerId = W.Id
	GROUP BY RP.Id, PEP.EnrolledProgramId, EP.Name, EP.ProgramCode, PEP.EnrolledProgramStatusCodeId, EPSC.StatusCode, PEP.Id, PEP.OfficeId, P.FirstName, P.MiddleInitialName,
			 P.LastName, P.SuffixName, P.PinNumber, P.DateOfBirth, CPI.IsConfidential, W.MFUserId
	ORDER BY RPId, PEP.EnrolledProgramId

	--SELECT * FROM #Stage1 ORDER BY RPId, EnrolledProgramId
	---

	DECLARE @Stage2 Table
	(
	RPId INT,
	RPParticipantId INT,
	PEPId INT,
	EnrolledProgramId INT,
	ProgramName VARCHAR(100),
	ProgramCode VARCHAR(10),
	StatusCode VARCHAR(20),
	StatusDate DATE,
	ParticipantFirstName VARCHAR(100),
	ParticipantMiddleName VARCHAR(10),
	ParticipantLastName VARCHAR(100),
	ParticipantSuffixName VARCHAR(10),
	PinNumber DECIMAL(10,0),
	ParticipantDateOfBirth DATE,
	OfficeId SMALLINT,
	IsConfidentialCase BIT,
	AssignedWorker VARCHAR(25),
	SortOrder INT
	)

	INSERT INTO @Stage2
	SELECT *,
	CASE WHEN ProgramName = 'W-2' THEN 1
		 WHEN ProgramName = 'Children First' THEN 2
		 WHEN ProgramName = 'Transform Milwaukee Jobs' THEN 3
		 WHEN ProgramName = 'Transitional Jobs' THEN 4
		 WHEN ProgramName = 'Learnfare' THEN 5
		 WHEN ProgramName = 'Five County Demonstration Project' THEN 6
	END AS SortOrder
	FROM
	(
	SELECT S.RPId, RP.ParticipantId, S.PEPId, S.EnrolledProgramId, S.ProgramName, S.ProgramCode, S.StatusCode, S.StatusDate, S.ParticipantFirstName, S.ParticipantMiddleName,
		   S.ParticipantLastName, S.ParticipantSuffixName, S.PinNumber, S.ParticipantDateOfBirth, S.OfficeId, S.IsConfidentialCase, S.AssignedWorker
	FROM #Stage1 S
		INNER JOIN @RecentParticipants RP
			ON S.RPId = RP.Id
	WHERE Rn = 1
	) A

	--SELECT * FROM @Stage2

	SELECT S.RPParticipantId ParticipantId, S.PEPId, S.EnrolledProgramId, S.ProgramName, S.ProgramCode, S.StatusCode RecentStatus, S.StatusDate RecentStatusDate, S.ParticipantFirstName,
		   S.ParticipantMiddleName, S.ParticipantLastName, S.ParticipantSuffixName, S.PinNumber, S.ParticipantDateOfBirth, W.Id WorkerId, W.FirstName WorkerFirstName,
		   W.MiddleInitial WorkerMiddleInitial, W.LastName WorkerLastName, W.MFUserId,
		   CAST(IIF(W.WorkerActiveStatusCode = 'ACTIVE' OR W.WorkerActiveStatusCode = 'A', 1, 0) AS BIT) WorkerActiveStatusCode, O.EntsecAgencyCode, CT.CountyName, WP.OfficeNumber,
		   S.AssignedWorker, O.AgencyName WorkerAgencyName,
		   CAST(IIF((CASE WHEN EXISTS (SELECT Id FROM wwp.OfficeTransfer OT1 WHERE OT1.ParticipantEnrolledProgramId = PEP.Id) THEN 1 ELSE 0 END = 1) AND 
		   (CAST(IIF(DATEDIFF(DAY, OT.TransferDate, GETDATE()) <= 14, 1, 0) AS BIT) = 1 OR (S.StatusCode = 'Enrolled' AND PEP.WorkerId IS NULL)) AND S.StatusCode <> 'Disenrolled', 1, 0) AS BIT) IsTransfer,
		   CPI.IsConfidential
	FROM @Stage2 S
		LEFT JOIN wwp.ParticipantEnrolledProgram PEP
			ON S.PEPId = PEP.Id
		LEFT JOIN wwp.Worker W
			ON PEP.WorkerId = W.Id
		LEFT JOIN wwp.WWPOffice WP
			ON S.OfficeId = WP.Id
		LEFT JOIN wwp.ContractArea CA
			ON WP.ContractAreaId = CA.Id
		LEFT JOIN wwp.CountyAndTribe CT
			ON WP.CountyandTribeId = CT.Id
		LEFT JOIN wwp.Organization O
			ON CA.OrganizationId = O.Id
		LEFT JOIN wwp.OfficeTransfer OT
			ON OT.Id = (SELECT TOP 1 Id
						FROM wwp.OfficeTransfer
						WHERE ParticipantEnrolledProgramId = PEP.Id
						ORDER BY Id DESC)
		LEFT JOIN wwp.ConfidentialPinInformation CPI
			ON S.RPParticipantId = CPI.ParticipantId
	--WHERE ISNULL((CONVERT(INT, CONVERT(VARCHAR, GETDATE(), 112)) - CONVERT(INT, CONVERT(VARCHAR, S.StatusDate, 112))) / 10000, 0) <= 7
	ORDER BY RPId, S.SortOrder
	---

	IF OBJECT_ID('tempdb..#Stage1') IS NOT NULL DROP TABLE #Stage1
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_ReferralsAndTransfers]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 07/10/2018
-- Description:	Get the Partcipants for Referrals&Transfers Tab
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_ReferralsAndTransfers] 'THOLKSXOFSD', 'WWPDEV', 'FSC', 'canAccessProgram_WW,canAccessProgram_LF,canAccessProgram_CF,canAccessProgram_TMJ,canAccessProgram_TJ'
*/

CREATE PROCEDURE [wwp].[USP_ReferralsAndTransfers]
(
@WAMSId VARCHAR(25),
@SchemaName VARCHAR(10),
@EntsecAgencyCode VARCHAR(100),
@Authorizations VARCHAR(MAX)
)
AS
BEGIN
BEGIN TRY
	SET FMTONLY OFF
	
	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @CountyNumber VARCHAR(500)
	DECLARE @OrgId INT
	DECLARE @HasWWAccess BIT
	DECLARE @HasLFAccess BIT
	DECLARE @HasCFAccess BIT
	DECLARE @HasTMJAccess BIT
	DECLARE @HasTJAccess BIT
	DECLARE @HasFCDPAccess BIT
	DECLARE @EntSecOrgCode VARCHAR(10)
	DECLARE @Statement1 VARCHAR(MAX)
	DECLARE @Statement2 VARCHAR(MAX)

	SELECT @OrgId = Id
	FROM wwp.Organization
	WHERE EntsecAgencyCode = @EntsecAgencyCode
	PRINT @OrgId

	SELECT @EntSecOrgCode = @EntsecAgencyCode
	PRINT @EntSecOrgCode

	SELECT @HasWWAccess = MAX(CASE WHEN Name LIKE 'canEnrollW2' OR NAME LIKE 'canAccessProgram_WW' THEN 1 ELSE 0 END),
		   @HasLFAccess = MAX(CASE WHEN NAME LIKE 'canAccessProgram_LF' THEN 1 ELSE 0 END),
		   @HasCFAccess = MAX(CASE WHEN Name LIKE 'canAccessProgram_CF' THEN 1 ELSE 0 END),
		   @HasTMJAccess = MAX(CASE WHEN Name LIKE 'canRfaTmj' OR NAME LIKE 'canAccessProgram_TMJ' THEN 1 ELSE 0 END),
		   @HasTJAccess = MAX(CASE WHEN Name LIKE 'canRfaTj' OR NAME LIKE 'canAccessProgram_TJ' THEN 1 ELSE 0 END),
		   @HasFCDPAccess = MAX(CASE WHEN Name LIKE 'canAccessProgram_FCD' THEN 1 ELSE 0 END)
	FROM sec.[Authorization]
	WHERE Id IN (SELECT AuthorizationId
				 FROM sec.RoleAuthorization
				 WHERE Name IN (SELECT LTRIM(RTRIM(Items)) Roles
									   FROM wwp.SplitCSV(@Authorizations, ',')))
	
	PRINT @HasWWAccess
	PRINT @HasLFAccess
	PRINT @HasCFAccess
	PRINT @HasTMJAccess
	PRINT @HasTJAccess
	PRINT @HasFCDPAccess
---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN N'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN N'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP' THEN N'NETWINFO_D40P_DB2'
						END
---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN N'PWS639TC'
                             WHEN @SchemaName = 'WWPACC' THEN N'PWA639TC'
                             WHEN @SchemaName = 'WWPTRN' THEN N'PWE639TC'
                             WHEN @SchemaName = 'WWP' THEN N'PWP639TC'
                        END
---

	SELECT @CountyNumber = CASE WHEN @EntSecOrgCode IN ('RS','AW','UMS','MAX') THEN N'(40)'
								WHEN @EntSecOrgCode = 'RC' THEN N'(45,64,66,67,30,51)'
								WHEN @EntSecOrgCode = 'FSC' THEN N'(22,23,25,28,33,53,11,13,14,52,56,35,50,60,63,71,58,24,39,68,69,01,29,34,37,43,49,72,19,21,05,15,38,42,20,08,31,36,44,70,59)'
								WHEN @EntSecOrgCode = 'WCI' THEN N'(06,27,32,41,46,61,62,12)'
								WHEN @EntSecOrgCode = 'WRI' THEN N'(02,04,26,54,57,10,03,07,09,16,17,18,47,48,55,65)'
						   END
	PRINT @CountyNumber
---
	
	DECLARE @ReferralsAndTransfers TABLE
	(
	 ParticipantId INT,
	 ParticipantFirstname VARCHAR(100),
	 ParticipantMiddleInitial VARCHAR(1),
	 ParticipantLastName VARCHAR(100),
	 ParticipantSuffix VARCHAR(10),
	 PinNumber DECIMAL(10,0),
	 ParticipantDOB DATE,
	 EnrolledProgram VARCHAR(50),
	 [Status] VARCHAR(25),
	 ReferralDate DATE,
	 MFUserId VARCHAR(10),
	 WorkerFirstName VARCHAR(100),
	 WorkerMiddleInitial VARCHAR(1),
	 WorkerLastName VARCHAR(100),
	 WorkerSuffix VARCHAR(10),
	 AgencyName VARCHAR(100),
	 CountyName VARCHAR(100),
	 OfficeNumber SMALLINT,
	 IsTransfer BIT,
	 IsConfidential BIT,
	 ProgramSort INT,
	 GroupOrder INT
	)

	IF EXISTS (SELECT 1 FROM wwp.Worker WHERE WAMSId = @WAMSId)
	BEGIN
		INSERT INTO @ReferralsAndTransfers
		SELECT P.Id, P.FirstName, P.MiddleInitialName, P.LastName, P.SuffixName, P.PinNumber, P.DateOfBirth, UPPER(EP.Name), 'Referred', PEP.ReferralDate, W.MFUserId,
			   W.FirstName, W.MiddleInitial, W.LastName, W.SuffixName, O.AgencyName, CT.CountyName, WO.OfficeNumber, CAST(0 AS BIT), CPI.IsConfidential,
			   CASE WHEN EP.Name = 'W-2' THEN 1
					WHEN EP.Name = 'LEARNFARE' THEN 2
					WHEN EP.Name = 'CHILDREN FIRST' THEN 3
					WHEN EP.Name = 'TRANSFORM MILWAUKEE JOBS' THEN 4
					WHEN EP.Name = 'TRANSITIONAL JOBS' THEN 5
					WHEN EP.Name = 'Five County Demonstration Project' THEN 6
			   END, 3
		FROM wwp.Participant P
			INNER JOIN wwp.ParticipantEnrolledProgram PEP
				ON P.Id = PEP.ParticipantId
			LEFT JOIN wwp.ConfidentialPinInformation CPI
				ON P.Id = CPI.ParticipantId
			LEFT JOIN wwp.EnrolledProgram EP
				ON PEP.EnrolledProgramId = EP.Id
			LEFT JOIN wwp.Worker W
				ON PEP.WorkerId = W.Id
			LEFT JOIN wwp.WWPOffice WO
				ON PEP.OfficeId = WO.Id
			LEFT JOIN wwp.CountyAndTribe CT
				ON WO.CountyandTribeId = CT.Id
			LEFT JOIN wwp.ContractArea CA
				ON WO.ContractAreaId = CA.Id
			LEFT JOIN wwp.Organization O
				ON CA.OrganizationId = O.Id
		WHERE O.Id = @OrgId AND PEP.EnrolledProgramId IN (9,10,12,14) AND PEP.EnrolledProgramStatusCodeId = 1 AND PEP.IsDeleted = 0

		--SELECT * FROM @ReferralsAndTransfers

		DECLARE @TempInfo TABLE
		(
		  PinNumber DECIMAL(10, 0)
		 ,FirstName VARCHAR(50)
		 ,MiddleInitialName CHAR(1)
		 ,LastName VARCHAR(50)
		 ,SuffixName CHAR(3)
		 ,DOBDate DATE
		 ,CountyNumber SMALLINT
		 ,OfficeNumber SMALLINT
		 ,ReferralStatus VARCHAR(50)
		 ,WPReferralDate DATE
		 ,ProgramCode VARCHAR(50)
		 ,CASENumber DECIMAL(10, 0)
		 ,MFWorkerId VARCHAR(6)
		 ,ConfidentialSwitch BIT
		 ,MFConfidentialWorker VARCHAR(06)
		)

		SET @Statement1 = 'SELECT PinNumber,
								  FirstName,
								  MiddleInitialName,						  
								  LastName,
								  SuffixName,
								  DOBDate,
								  CountyNumber,
								  OfficeNumber,
								  ReferralStatus,
								  WPReferralDate,
								  CASE WHEN LearnFareStatus = N''LEARNFARE'' THEN N''LEARNFARE''
									   WHEN ProgramCode1 = N''WW'' THEN N''W-2''
								  END AS ProgramCode,
								  CASENumber,
								  MFWorkerId					     
						   FROM OPENQUERY('+@LSDBName+', ''SELECT B.PIN_NUM AS PinNumber,
																   C.FIRST_NAM AS FirstName,
																   C.MIDDLE_INITIAL_NAM AS MiddleInitialName,
																   C.LAST_NAM AS LastName,
																   C.SUFFIX_NAM AS SuffixName,
																   C.DOB_DT AS DOBDate,
																   B.COUNTY_NUM AS CountyNumber,
																   B.OFFICE_NUM AS OfficeNumber,
																	''''REFERRED'''' AS ReferralStatus,
																   B.WP_REFERRAL_DT AS WPReferralDate,
 																   B.PROGRAM_CD AS ProgramCode1,
																   CASE B.CURRENT_REG_CD WHEN ''''L'''' THEN ''''LEARNFARE''''
																						 ELSE ''''NA''''
																   END AS LearnFareStatus,
																   B.CASE_NUM AS CASENumber,
																   D.ASGN_FEP_ID as MFWorkerId
		   													FROM  '+@DB2DBName+'.T0018_WP_INDV AS B
																	JOIN '+@DB2DBName+'.T0011_INDIVIDUAL AS C ON B.PIN_NUM = C.PIN_NUM
																	LEFT OUTER JOIN '+@DB2DBName+'.T2536_WP_FEP_WRKR D ON B.CASE_NUM = D.CASE_NUM AND D.HISTORY_CD = 0
															WHERE  B.PIN_NUM > 0 AND B.WP_SYSTEM_STS_CD IN (''''R'''') AND B.COUNTY_NUM IN ' + @CountyNumber + '
																   AND B.PROGRAM_CD NOT IN (''''FS'''',''''  '''',''''ADC'''',''''ZZ'''')
															WITH UR;'')'

		PRINT @Statement1

		SET @Statement2 = 'SELECT PinNumber,
								  FirstName,
								  MiddleInitialName,						  
								  LastName,
								  SuffixName,
								  DOBDate,
								  CountyNumber,
								  OfficeNumber,
								  ReferralStatus,
								  WPReferralDate,
								  CASE WHEN LearnFareStatus = N''LEARNFARE'' THEN N''LEARNFARE''
									   WHEN ProgramCode1 = N''WW'' THEN N''W-2''
								  END AS ProgramCode,
								  CASENumber,
								  '' '' AS MFWorkerId						     
						   FROM OPENQUERY('+@LSDBName+', ''SELECT B.PIN_NUM AS PinNumber,
																	C.FIRST_NAM AS FirstName,
																	C.MIDDLE_INITIAL_NAM AS MiddleInitialName,
																	C.LAST_NAM AS LastName,
																	C.SUFFIX_NAM AS SuffixName,
																	C.DOB_DT AS DOBDate,
																	B.COUNTY_NUM AS CountyNumber,
																	B.OFFICE_NUM AS OfficeNumber,
																	''''PENDING'''' AS ReferralStatus,
																	B.WP_REFERRAL_DT AS WPReferralDate,
 																	B.PROGRAM_CD AS ProgramCode1,
																	CASE B.REFERRAL_REG_CD WHEN ''''L'''' THEN ''''LEARNFARE''''
																						   ELSE ''''NA''''
																	END AS LearnFareStatus,
																	B.CASE_NUM AS CASENumber
															FROM  '+@DB2DBName+'.T0163_WP_PNDNG_RFR AS B
																	JOIN '+@DB2DBName+'.T0011_INDIVIDUAL AS C ON B.PIN_NUM = C.PIN_NUM               
															WHERE  B.PIN_NUM > 0 AND C.PIN_NUM = B.PIN_NUM AND B.COUNTY_NUM IN ' + @CountyNumber + '
																   AND B.PROGRAM_CD NOT IN (''''FS'''','''' '''',''''ADC'''',''''ZZ'''')
															WITH UR;'')'

		PRINT @Statement2

		INSERT INTO @TempInfo (PinNumber,
							   FirstName,
							   MiddleInitialName,						  
							   LastName,
							   SuffixName,
							   DOBDate,
							   CountyNumber,
							   OfficeNumber,
							   ReferralStatus,
							   WPReferralDate,
							   ProgramCode,
							   CASENumber,
							   MFWorkerId
							  )
		EXEC (@Statement1)
		--Union
		INSERT INTO @TempInfo (PinNumber,
							   FirstName,
							   MiddleInitialName,						  
							   LastName,
							   SuffixName,
							   DOBDate,
							   CountyNumber,
							   OfficeNumber,
							   ReferralStatus,
							   WPReferralDate,
							   ProgramCode,
							   CASENumber,
							   MFWorkerId
							  )
		EXEC (@Statement2)
	
		INSERT INTO @ReferralsAndTransfers
		SELECT 0, A.FirstName, A.MiddleInitialName, A.LastName, A.SuffixName, A.PinNumber, A.DOBDate, UPPER(A.ProgramCode), A.ReferralStatus, A.WPReferralDate,
			   A.MFWorkerId, W.FirstName, W.MiddleInitial, W.LastName, A.SuffixName, O.AgencyName, CT.CountyName, A.OfficeNumber, CAST(0 AS BIT), NULL,
			   CASE WHEN ProgramCode = 'W-2' THEN 1
					WHEN ProgramCode = 'LEARNFARE' THEN 2
					WHEN ProgramCode = 'CHILDREN FIRST' THEN 3
					WHEN ProgramCode = 'TRANSFORM MILWAUKEE JOBS' THEN 4
					WHEN ProgramCode = 'TRANSITIONAL JOBS' THEN 5
					WHEN ProgramCode = 'Five County Demonstration Project' THEN 6
			   END,
			   CASE WHEN ReferralStatus = 'Pending' THEN 1
					WHEN ReferralStatus = 'Referred' THEN 3
			   END SortOrder
		FROM  @TempInfo A
		LEFT JOIN wwp.Worker W
			ON A.MFWorkerId = W.MFUserId AND W.OrganizationId = @OrgId
		LEFT JOIN wwp.WWPOffice WO
				ON CASE A.OfficeNumber WHEN 8040 THEN 1581 ELSE A.OfficeNumber END = WO.OfficeNumber
			LEFT JOIN wwp.CountyAndTribe CT
				ON WO.CountyandTribeId = CT.Id
			LEFT JOIN wwp.ContractArea CA
				ON WO.ContractAreaId = CA.Id
			LEFT JOIN wwp.Organization O
				ON CA.OrganizationId = O.Id
		WHERE O.Id = @OrgId AND (CA.EnrolledProgramId = 11 OR CA.EnrolledProgramId IS NULL)

		--SELECT * FROM @ReferralsAndTransfers

		INSERT INTO @ReferralsAndTransfers
		SELECT DISTINCT P.Id, P.FirstName, P.MiddleInitialName, P.LastName, P.SuffixName, P.PinNumber, P.DateOfBirth, UPPER(EP.Name), 'Enrolled', PEP.ReferralDate, W.MFUserId,
			   W.FirstName, W.MiddleInitial, W.LastName, W.SuffixName, O.AgencyName, CT.CountyName, WO.OfficeNumber, CAST(IIF(OT.Id IS NOT NULL, 1, 0) AS BIT) IsTransfer,
			   CPI.IsConfidential,
			   CASE WHEN ProgramCode = 'W-2' THEN 1
					WHEN ProgramCode = 'LEARNFARE' THEN 2
					WHEN ProgramCode = 'CHILDREN FIRST' THEN 3
					WHEN ProgramCode = 'TRANSFORM MILWAUKEE JOBS' THEN 4
					WHEN ProgramCode = 'TRANSITIONAL JOBS' THEN 5
					WHEN ProgramCode = 'Five County Demonstration Project' THEN 6
			   END,
			   2
		FROM wwp.ParticipantEnrolledProgram PEP
			LEFT OUTER JOIN wwp.WWPOffice WO
				ON WO.Id = PEP.OfficeId
			LEFT JOIN wwp.CountyAndTribe CT
				ON WO.CountyandTribeId = CT.Id
			LEFT OUTER JOIN wwp.ContractArea CA
				ON CA.Id = WO.ContractAreaId
			LEFT JOIN wwp.Organization O
				ON O.Id = CA.OrganizationId
			INNER JOIN wwp.Participant P
				ON P.Id = PEP.ParticipantId
			LEFT JOIN wwp.ConfidentialPinInformation CPI
				ON P.Id = CPI.ParticipantId
			LEFT JOIN wwp.OfficeTransfer OT
			ON OT.Id = (SELECT TOP 1 Id
						FROM wwp.OfficeTransfer
						WHERE ParticipantEnrolledProgramId = PEP.Id
						ORDER BY Id DESC)
			LEFT JOIN wwp.EnrolledProgram EP
				ON PEP.EnrolledProgramId = EP.Id
			LEFT JOIN wwp.Worker W
				ON PEP.WorkerId = W.Id
		WHERE PEP.WorkerId IS NULL AND PEP.EnrolledProgramStatusCodeId = 2 AND O.Id = @OrgId
	END
	
	--SELECT * FROM @ReferralsAndTransfers

	SELECT ParticipantFirstname, ParticipantMiddleInitial, ParticipantLastName, ParticipantSuffix, PinNumber, ParticipantDOB, EnrolledProgram, [Status], ReferralDate,
			MFUserId, WorkerFirstName, WorkerMiddleInitial, WorkerLastName, WorkerSuffix, AgencyName, CountyName, OfficeNumber, CAST(ISNULL(IsTransfer, 0) AS BIT) IsTransfer,
			IsConfidential, GroupOrder, Rn = ROW_NUMBER() OVER(PARTITION BY GroupOrder
															   ORDER BY ReferralDate DESC, ProgramSort, ParticipantFirstName, ParticipantMiddleInitial)
	FROM @ReferralsAndTransfers
	WHERE EnrolledProgram = CASE WHEN @HasWWAccess = 1 THEN 'W-2'
							END
	OR EnrolledProgram = CASE WHEN @HasLFAccess = 1 THEN 'LEARNFARE'
							END
	OR EnrolledProgram = CASE WHEN @HasCFAccess = 1 THEN 'CHILDREN FIRST'
							END
	OR EnrolledProgram = CASE WHEN @HasTMJAccess = 1 THEN 'TRANSFORM MILWAUKEE JOBS'
							END
	OR EnrolledProgram = CASE WHEN @HasTJAccess = 1 THEN 'TRANSITIONAL JOBS'
							END
	OR EnrolledProgram = CASE WHEN @HasFCDPAccess = 1 THEN 'Five County Demonstration Project'
							END
	OR EnrolledProgram IS NULL
	ORDER BY GroupOrder, Rn
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_RefreshParticipant]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 11/20/2019
-- Description:	Refresh the participant
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_RefreshParticipant] 537114149, 1
*/

CREATE PROCEDURE [wwp].[USP_RefreshParticipant]
	@PinNumber VARCHAR(10),
	@DEBUG BIT = 0
AS
BEGIN
BEGIN TRY
	DECLARE @SchemaName VARCHAR(10) = DB_NAME()
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @DB2DBName VARCHAR(100)
	DECLARE	@PartSelectSQL NVARCHAR(MAX)
	DECLARE @MaxHistorySeqNum SMALLINT

	DECLARE @Participant TABLE
    (
        PinNumber DECIMAL(10, 0) NULL,
        FirstName VARCHAR(50) NULL,
        MiddleInitialName CHAR(1) NULL,
        LastName VARCHAR(50) NULL,
        SuffixName CHAR(3) NULL,
        DateOfBirth DATE NULL,
        DateOfDeath DATE NULL,
        GenderIndicator CHAR(1) NULL,
		AliasResponse CHAR(1) NULL,
        LanguageCode CHAR(1) NULL,
        MaxHistorySequenceNumber SMALLINT NULL,
        RaceCode CHAR(1) NULL,
        USCitizenSwitch CHAR(1) NULL,
        AmericanIndianIndicator CHAR(1) NULL,
        AsianIndicator CHAR(1) NULL,
        BlackIndicator CHAR(1) NULL,
        HispanicIndicator CHAR(1) NULL,
        PacificIslanderIndicator CHAR(1) NULL,
        WhiteIndicator CHAR(1) NULL,
        MCI_ID DECIMAL(10, 0) NULL,
        TribalMemberIndicator CHAR(1) NULL
    )

	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP' THEN 'PWP639TC'
						END
	---

	SET @PartSelectSQL = 'SELECT *
									  FROM OPENQUERY (' + @LSDBName + ', ''SELECT PIN_NUM AS PinNumber, FIRST_NAM AS FirstName, MIDDLE_INITIAL_NAM AS MiddleInitialName,
																		   LAST_NAM AS LastName, SUFFIX_NAM AS SuffixName, DOB_DT AS DateOfBirth, DEATH_DT AS DateOfDeath,
																		   SEX_IND AS GenderIndicator, ALIAS_RSP AS	AliasResponse, LANGUAGE_CD AS LanguageCode,
																		   MAX_HIST_SEQ_NUM AS MaxHistorySequenceNumber, RACE_CD AS	RaceCode, US_CITIZEN_SW AS USCitizenSwitch,
																		   AMR_INDN_IND AS AmericanIndianIndicator, ASN_IND AS AsianIndicator, BLK_IND AS BlackIndicator,
																		   HISP_IND AS HispanicIndicator, PCF_ILD_IND AS PacificIslanderIndicator, WHT_IND AS WhiteIndicator,
																		   MCI_ID AS MCI_ID, TRB_MBR_IND AS	TribalMemberIndicator
																		   FROM  ' + @DB2DBName + '.T0011_INDIVIDUAL  A                                                              
																		   WHERE A.PIN_NUM = ' + @PinNumber + ''')'
	PRINT @PartSelectSQL
	
	IF (@Debug = 0)
	BEGIN
		INSERT @Participant
		EXEC (@PartSelectSQL)

		SELECT @MaxHistorySeqNum = MaxHistorySequenceNumber
		FROM wwp.Participant
		WHERE PinNumber = @PinNumber

		IF @MaxHistorySeqNum = (SELECT MaxHistorySequenceNumber
								FROM @Participant)
		PRINT @MaxHistorySeqNum
		ELSE
		BEGIN
			IF @MaxHistorySeqNum IS NULL
				INSERT wwp.Participant (PinNumber, FirstName, MiddleInitialName, LastName, SuffixName, DateOfBirth, DateOfDeath, GenderIndicator, AliasResponse, LanguageCode,
										MaxHistorySequenceNumber, RaceCode, USCitizenSwitch, AmericanIndianIndicator, AsianIndicator, BlackIndicator, HispanicIndicator,
										PacificIslanderIndicator, WhiteIndicator, MCI_ID, TribalMemberIndicator, ConversionProjectDetails, ConversionDate, IsDeleted)
				SELECT PinNumber, FirstName, MiddleInitialName, LastName, SuffixName, DateOfBirth, DateOfDeath, GenderIndicator, AliasResponse, LanguageCode,
						MaxHistorySequenceNumber, RaceCode, USCitizenSwitch, AmericanIndianIndicator, AsianIndicator, BlackIndicator, HispanicIndicator, PacificIslanderIndicator,
						WhiteIndicator, MCI_ID, TribalMemberIndicator, 'NEW PARTICIPANT', CURRENT_TIMESTAMP, 0
				FROM @Participant
			ELSE
				UPDATE wwp.Participant
				SET FirstName = A.FirstName, MiddleInitialName = A.MiddleInitialName, LastName= A.LastName, SuffixName= A.SuffixName, DateOfBirth = A.DateOfBirth,
					DateOfDeath = A.DateOfDeath, GenderIndicator = A.GenderIndicator, AliasResponse = A.AliasResponse, LanguageCode = A.LanguageCode,
					MaxHistorySequenceNumber = A.MaxHistorySequenceNumber, RaceCode = A.RaceCode, USCitizenSwitch = A.USCitizenSwitch,
					AmericanIndianIndicator = A.AmericanIndianIndicator, AsianIndicator = A.AsianIndicator, BlackIndicator = A.BlackIndicator,
					HispanicIndicator = A.HispanicIndicator, PacificIslanderIndicator = A.PacificIslanderIndicator, WhiteIndicator = A.WhiteIndicator,MCI_ID = A.MCI_ID,
					TribalMemberIndicator = A.TribalMemberIndicator, ConversionProjectDetails = 'Update to Exisiting Participant'
					FROM @Participant A
						INNER JOIN wwp.Participant B
							ON A.PinNumber = B.PinNumber
					WHERE A.PinNumber = @PinNumber
		END
	END
END TRY
BEGIN CATCH
	THROW
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_TJTMJ_NA_Disenrollment_Update]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC [wwp].[USP_TJTMJ_NA_Disenrollment_Update] 1
CREATE PROCEDURE [wwp].[USP_TJTMJ_NA_Disenrollment_Update]
	@Debug BIT = 0
AS
BEGIN
	DECLARE @DB2DBName VARCHAR(100),
			@LSDBName VARCHAR(100),
			@SelectStmt1 VARCHAR(MAX),
			@SelectStmt2 VARCHAR(MAX),
			@PinNumbers VARCHAR(MAX),
			@PinNumber DECIMAL(10, 0),
			@Count INT = 1,
			@Max INT,
			@PEPId INT,
			@OfficeId INT,
			@EnrolledProgramId INT,
			@HasAnyOtherOpenPrograms INT,
			@DisenrollmentDate DATE,
			@CountyNumber SMALLINT,
			@OfficeNumber SMALLINT,
			@MFWorkerId VARCHAR(06),
			@MFUserId VARCHAR(06),
			@ProgramCode VARCHAR(03),
			@SubProgramCode VARCHAR(01),
			@RegistrationCode Varchar(01),
			@CompletionReasonId INT,
			@CompletionReason Varchar(02),
			@AnyOtherProgramOpen Varchar(01),
			@StatusDate DATE,
			@ActivityDate DATE,
			@SchemaName VARCHAR(20),
			@Coenrolled BIT,
			@HasStatus BIT = 0,
			@ParticipantId INT,
			@ModifiedDate DATETIME = GETDATE()

	---
	SELECT @LSDBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
                            WHEN DB_NAME() = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
                            WHEN DB_NAME() = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
                            WHEN DB_NAME() = 'WWP'    THEN 'NETWINFO_D40P_DB2'
                       END
	---

	SELECT @DB2DBName = CASE WHEN DB_NAME() IN ('WWPDEV', 'WWPSYS')	   THEN 'PWS639TC'
							 WHEN DB_NAME() = 'WWPACC'  THEN 'PWA639TC'
							 WHEN DB_NAME() = 'WWPTRN'  THEN 'PWE639TC'
							 WHEN DB_NAME() = 'WWP'     THEN 'PWP639TC'
						END
	---

	DECLARE @CoEnroll TABLE
	(
	 PinNumber DECIMAL(10,0),
	 Rn INT
	)

	;WITH CTE AS (SELECT P.PinNumber, Rn = ROW_NUMBER() OVER(PARTITION BY PEP.ParticipantId ORDER BY PEP.ParticipantId)
			  FROM wwp.Participant P
			  INNER JOIN wwp.ParticipantEnrolledProgram PEP
				  ON P.Id = PEP.ParticipantId
			  WHERE PEP.EnrolledProgramStatusCodeId IN (1,2))

	INSERT INTO @CoEnroll (PinNumber, Rn)
	SELECT PinNumber, Rn
	FROM CTE
	WHERE Rn > 1
	
	--SELECT * FROM @CoEnroll
	
	CREATE TABLE #DisenrollPin
	(
	 Id INT IDENTITY(1,1),
	 ParticipantId INT,
	 PinNumber DECIMAL(10,0),
	 PEPId INT,
	 EPId INT,
	 StatusDate DATE,
	 PEPStatus VARCHAR(50),
	 CoEnrolled BIT
	)

	INSERT INTO #DisenrollPin (ParticipantId, PinNumber, PEPId, EPId, StatusDate, PEPStatus, CoEnrolled)
	SELECT DISTINCT P.Id, P.PinNumber, PEP.Id, PEP.EnrolledProgramId, PEP.EnrollmentDate, EPS.StatusCode,
		   CASE WHEN C.PinNumber IS NULL THEN 0
				WHEN C.PinNumber IS NOT NULL THEN 1
		   END
	FROM wwp.Participant P
		INNER JOIN wwp.ParticipantEnrolledProgram PEP
			ON P.Id = PEP.ParticipantId
		LEFT JOIN wwp.EnrolledProgramStatusCode EPS
			ON PEP.EnrolledProgramStatusCodeId = EPS.Id
		LEFT JOIN @CoEnroll C
			ON P.PinNumber = C.PinNumber
		LEFT JOIN wwp.ParticipationStatus PS
			ON P.Id = PS.ParticipantId
		WHERE PEP.EnrolledProgramId IN (9,12) AND PEP.EnrolledProgramStatusCodeId = 2
		AND DATEDIFF(DAY, CAST(PEP.EnrollmentDate AS DATE), CAST(GETDATE() AS DATE)) >= 60

	--SELECT * FROM #DisenrollPin

	DECLARE @Activity TABLE
	(
	 ParticipantId INT,
	 MaxEndDate DATE
	)

	INSERT INTO @Activity
	SELECT EP.ParticipantId, MAX(ISNULL(A.EndDate, '9999-12-31'))
	FROM wwp.Activity A
		INNER JOIN wwp.EmployabilityPlanActivityBridge EPEA
			ON A.Id = EPEA.ActivityId
		INNER JOIN wwp.EmployabilityPlan EP
			ON EPEA.EmployabilityPlanId = EP.Id
	WHERE EP.ParticipantId IN (SELECT ParticipantId
							   FROM #DisenrollPin)
	AND EP.EnrolledProgramId IN (9, 12)
	GROUP BY ParticipantId
	HAVING MAX(ISNULL(A.EndDate, '9999-12-31')) = '9999-12-31' OR DATEDIFF(DAY, MAX(A.EndDate), CAST(GETDATE() AS DATE)) < 60

	--SELECT * FROM @Activity

	DELETE FROM #DisenrollPin
	WHERE ParticipantId IN (SELECT ParticipantId
							FROM @Activity)

	--SELECT * FROM #DisenrollPin

	CREATE TABLE #T066_Open
	(
	 PIN_NUM DECIMAL(10, 0)
	)
	
	SET @SelectStmt1 = 'SELECT PIN_NUM
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT A.PIN_NUM
														     FROM ' + @DB2DBName + '.T0066_WP_IN_COMP A                 
															 WHERE A.HISTORY_CD = 0 AND A.DELETE_COMP_SW =  '''' '''' AND A.COMPONENT_END_DT = ''''9999-12-31''''
															 WITH UR;'') A
						WHERE EXISTS (SELECT PinNumber
						FROM #DisenrollPin P
						WHERE P.PinNumber = A.PIN_NUM)'

	PRINT @SelectStmt1

	IF ((SELECT COUNT(*) FROM #DisenrollPin) <> 0)
	BEGIN
		INSERT INTO #T066_Open (PIN_NUM)
		EXEC (@SelectStmt1)

		--SELECT * FROM #T066_Open

		DELETE FROM #DisenrollPin
		WHERE PinNumber IN (SELECT PIN_NUM
							FROM #T066_Open)

		--SELECT * FROM #DisenrollPin
	END
	
	CREATE TABLE #T066_NotOpen
	(
	 PIN_NUM DECIMAL(10, 0),
	 COMPONENT_END_DT DATE
	)
	
	SET @SelectStmt1 = 'SELECT DISTINCT PIN_NUM, COMPONENT_END_DT
						FROM OPENQUERY(' + @LSDBName + ', ''SELECT A.PIN_NUM, COMPONENT_END_DT
														    FROM ' + @DB2DBName + '.T0066_WP_IN_COMP A
															WHERE A.HISTORY_CD = 0 AND A.DELETE_COMP_SW =  '''' '''' AND A.COMPONENT_END_DT <>  ''''9999-12-31'''' 
															AND A.COMPONENT_END_DT =  (SELECT MAX(B.COMPONENT_END_DT)
																					   FROM ' + @DB2DBName + '.T0066_WP_IN_COMP B
																					   WHERE  B.PIN_NUM = A.PIN_NUM
																					   AND B.HISTORY_CD = A.HISTORY_CD
																					   AND B.DELETE_COMP_SW = A.DELETE_COMP_SW)
															ORDER BY COMPONENT_END_DT DESC
															WITH UR;'') AB
						WHERE EXISTS (SELECT PinNumber
						FROM #DisenrollPin P
						WHERE P.PinNumber = AB.PIN_NUM)'

	PRINT @SelectStmt1

	IF ((SELECT COUNT(*) FROM #DisenrollPin) <> 0)
	BEGIN
		INSERT INTO #T066_NotOpen (PIN_NUM, COMPONENT_END_DT)
		EXEC (@SelectStmt1)

		--SELECT * FROM #T066_NotOpen
	END

	DECLARE @Disenroll TABLE
	(
	 Id INT IDENTITY(1,1),
	 ParticipantId INT,
	 PinNumber DECIMAL(10, 0),
	 PEPId INT,
	 EPId INT,
	 StatusDate DATE,
	 PEPStatus VARCHAR(25),
	 LAST_ACTIVITY_DT DATE,
	 CoEnrolled BIT
	)
	
	INSERT INTO @Disenroll (ParticipantId, PinNumber, PEPId, EPId, StatusDate, PEPStatus, LAST_ACTIVITY_DT, CoEnrolled)
	SELECT DISTINCT ParticipantId, PinNumber, PEPId, EPId, StatusDate, PEPStatus, COMPONENT_END_DT, CoEnrolled
	FROM #DisenrollPin D
		LEFT JOIN #T066_NotOpen T
			ON D.PinNumber = T.PIN_NUM
	WHERE (DATEDIFF(DAY, CAST(COMPONENT_END_DT AS DATE), CAST(GETDATE() AS DATE)) >= 60 AND COMPONENT_END_DT >= StatusDate) OR (COMPONENT_END_DT IS NULL)

	--SELECT * FROM @DisEnroll WHERE CoEnrolled = 0

	SELECT @Max = COUNT(DISTINCT PEPId)
	FROM @Disenroll
	PRINT @Max

	DECLARE @EP TABLE
	(
		Id INT
	)

	IF @Debug = 0
	BEGIN
		WHILE @Count <= @Max
		BEGIN
			PRINT @Count

			SELECT @Coenrolled = Coenrolled
			FROM @Disenroll
			WHERE Id = @Count

			IF @Coenrolled = 0
			BEGIN
				PRINT 'TRIED ' + CAST(@Count AS VARCHAR(3))
				SELECT @PEPId = PEPId
				FROM @Disenroll
				WHERE Id = @Count
				PRINT @PEPId
			
				SELECT @ParticipantId = ParticipantId, @ProgramCode = ProgramCode, @SubProgramCode = ' ', @RegistrationCode = 'M', @CountyNumber = CountyNumber, @OfficeNumber = OfficeNumber,
					   @EnrolledProgramId = PEP.EnrolledProgramId
				FROM wwp.ParticipantEnrolledProgram PEP
					INNER JOIN wwp.EnrolledProgram EP
						ON PEP.EnrolledProgramId = EP.Id
					INNER JOIN wwp.WWPOffice O
						ON PEP.OfficeId = O.Id
					INNER JOIN wwp.CountyAndTribe CT
						ON O.CountyandTribeId = CT.Id
				WHERE PEP.Id = @PEPId
				PRINT @ParticipantId
				PRINT @EnrolledProgramId
				PRINT @ProgramCode
				PRINT @CountyNumber
				PRINT @OfficeNumber
				PRINT @ProgramCode
				PRINT @SubProgramCode
			
				DELETE FROM @EP
				INSERT INTO @EP
				SELECT Id
				FROM wwp.EmployabilityPlan
				WHERE ParticipantEnrolledProgramId = @PEPId AND EmployabilityPlanStatusTypeId IN (SELECT Id
																								  FROM wwp.EmployabilityPlanStatusType
																								  WHERE Name IN ('In Progress', 'Submitted'))

				--SELECT * FROM @EP

				IF EXISTS(SELECT 1
						  FROM wwp.ParticipationStatus
						  WHERE ParticipantId = @ParticipantId
						  AND EnrolledProgramId IN (9, 12)
						  GROUP BY ParticipantId
						  HAVING MAX(ISNULL(CAST(IsCurrent AS INT), 0)) = 1 OR DATEDIFF(DAY, MAX(EndDate), CAST(GETDATE() AS DATE)) < 60)
				BEGIN
					SET @HasStatus = 1
				END
				ELSE
					SET @HasStatus = 0

				IF @HasStatus = 0
				BEGIN
					UPDATE wwp.EmployabilityPlan
					SET EmployabilityPlanStatusTypeId = (SELECT Id
														 FROM wwp.EmployabilityPlanStatusType
														 WHERE Name = 'Ended'),
						EndDate = CAST(GETDATE() AS DATE), ModifiedBy = 'WWP Batch', ModifiedDate = @ModifiedDate
					WHERE Id IN (SELECT Id
								 FROM @EP)

					UPDATE wwp.Goal
					SET GoalEndReasonId = (SELECT Id
										   FROM wwp.GoalEndReason
										   WHERE Name = 'Disenrollment'),
						EndDate = CAST(GETDATE() AS DATE), ModifiedBy = 'WWP Batch', ModifiedDate = @ModifiedDate
					WHERE Id IN (SELECT GoalId
								 FROM wwp.EmployabilityPlanGoalBridge
								 WHERE EmployabilityPlanId IN (SELECT Id
															   FROM @EP))

					SELECT @PinNumber = PinNumber
					FROM @Disenroll
					WHERE Id = @Count
					PRINT @PinNumber

					SELECT @DisenrollmentDate = CAST(GETDATE() AS DATE)
					PRINT @DisenrollmentDate
			
					SET @MFWorkerId = 'WWP'
					SET @MFUserId = 'WWP'

					SELECT @CompletionReasonId = CASE @EnrolledProgramId WHEN 9 THEN 27
																		 WHEN 12 THEN 28
												 END

					SELECT @CompletionReason = Code
											   FROM wwp.CompletionReason
											   WHERE Id = @CompletionReasonId
					PRINT @CompletionReason

					SELECT @HasAnyOtherOpenPrograms = COUNT(*)
													  FROM wwp.ParticipantEnrolledProgram
													  WHERE ParticipantId = (SELECT Id
																			 FROM wwp.Participant
																			 WHERE PinNumber = @PinNumber)
													  AND EnrolledProgramId <> @EnrolledProgramId AND EnrolledProgramStatusCodeId = 2

					SET @AnyOtherProgramOpen = IIF(@HasAnyOtherOpenPrograms > 0, 1, 0)
					PRINT @AnyOtherProgramOpen
					SET @SchemaName = DB_NAME()
					PRINT @SchemaName
				
					EXEC [wwp].[SP_DB2_Disenrollment_Update] 
							@PinNumber,
							@DisenrollmentDate,
							@CountyNumber,
							@OfficeNumber,
							@MFWorkerId,
							@MFUserId,
							@ProgramCode,
							' ',
							'M',
							@CompletionReason,
							@AnyOtherProgramOpen,
							@SchemaName
			
					EXEC [wwp].[SP_Barrier_Accommodation_Update] @PEPId, @DisenrollmentDate, 1, 'WWP Batch'
			
					UPDATE wwp.ParticipantEnrolledProgram
					SET EnrolledProgramStatusCodeId = (SELECT Id
													   FROM wwp.EnrolledProgramStatusCode
													   WHERE StatusCode = 'Disenrolled'),
						DisenrollmentDate = GETDATE(), CompletionReasonId = @CompletionReasonId, ModifiedBy = 'WWP Batch', ModifiedDate = @ModifiedDate
					WHERE Id = @PEPId
				END
				ELSE
					DELETE FROM @Disenroll
					WHERE Id = @Count

			END
			SET @Count += 1
		END

		SELECT D.PinNumber, D.PEPId, CASE EP.Name WHEN 'Transitional Jobs' THEN 'TJ'
												  WHEN 'Transform Milwaukee Jobs' THEN 'TMJ'
									 END EnrolledProgram, PEP.DisenrollmentDate StatusDate, EPS.StatusCode PEPStatus, T.COMPONENT_END_DT LastActivityDate, D.CoEnrolled
		FROM @Disenroll D
			INNER JOIN wwp.ParticipantEnrolledProgram PEP
				ON D.PEPId = PEP.Id
			LEFT JOIN wwp.EnrolledProgram EP
				ON D.EPId = EP.Id
			LEFT JOIN wwp.EnrolledProgramStatusCode EPS
				ON PEP.EnrolledProgramStatusCodeId = EPS.Id
			LEFT JOIN #T066_NotOpen T
				ON D.PinNumber = T.PIN_NUM
		ORDER BY CoEnrolled DESC, PinNumber
	END
	ELSE
	BEGIN
		SELECT D.PinNumber, D.PEPId, CASE EP.Name WHEN 'Transitional Jobs' THEN 'TJ'
												  WHEN 'Transform Milwaukee Jobs' THEN 'TMJ'
									 END EnrolledProgram, D.StatusDate, D.PEPStatus, T.COMPONENT_END_DT LastActivityDate, D.CoEnrolled
		FROM @Disenroll D
			LEFT JOIN wwp.EnrolledProgram EP
				ON D.EPId = EP.Id
			LEFT JOIN #T066_NotOpen T
			ON D.PinNumber = T.PIN_NUM
		ORDER BY CoEnrolled DESC, PinNumber
	END

	IF OBJECT_ID('tempdb..#DisenrollPin') IS NOT NULL DROP TABLE #DisenrollPin
	IF OBJECT_ID('tempdb..#T066_Open') IS NOT NULL DROP TABLE #T066_Open
	IF OBJECT_ID('tempdb..#T066_NotOpen') IS NOT NULL DROP TABLE #T066_NotOpen
END
GO
/****** Object:  StoredProcedure [wwp].[USP_TotalDataColumnsCount]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 04/11/2018
-- Description:	Count the number of Data and Total Columns
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_TotalDataColumnsCount] 'wwp'
*/

CREATE PROCEDURE [wwp].[USP_TotalDataColumnsCount]
(
@Schema VARCHAR(20)
)
AS
BEGIN
BEGIN TRY
	;WITH TotalColumns (TableName, TotalColumn)
	AS
	(
	SELECT O.name AS TableName, C.name AS TotalColumn
	FROM sys.objects O
		INNER JOIN sys.columns C ON O.object_id = C.object_id
	WHERE C.object_id IN (SELECT object_id FROM sys.objects
						  WHERE schema_id IN (SELECT schema_id FROM sys.schemas WHERE name = @Schema)
						  AND type = 'U')
	), TotalColumnCount (TableName, TotalColumnCount)
	AS
	(
	SELECT TableName, COUNT(TotalColumn) AS TotalColumnCount
	FROM TotalColumns
	GROUP BY TableName
	), DataColumns (TableName, DataColumn)
	AS
	(
	SELECT O.name AS TableName, C.name AS DataColumn
	FROM sys.objects O
		INNER JOIN sys.columns C ON O.object_id = C.object_id
	WHERE C.object_id IN (SELECT object_id FROM sys.objects
						  WHERE schema_id IN (SELECT schema_id FROM sys.schemas WHERE name = @Schema)
						  AND type = 'U')
	AND C.name NOT IN ('Id', 'CreatedBy', 'CreatedDate', 'IsDeleted', 'ModifiedBy', 'ModifiedDate', 'RowVersion')
	AND C.name NOT IN (SELECT name FROM sys.columns
					   WHERE object_id + column_id IN (SELECT parent_object_id + parent_column_id FROM sys.foreign_key_columns
													   WHERE parent_object_id IN (SELECT object_id FROM sys.objects
													   WHERE schema_id IN (SELECT schema_id FROM sys.schemas WHERE name = @Schema)
													   AND type = 'U')))
	GROUP BY O.name, C.name
	), DataTotalColumns (TableName, TotalColumn, DataColumn)
	AS
	(
	SELECT T.TableName, T.TotalColumn, D.DataColumn
	FROM TotalColumns T
		LEFT OUTER JOIN DataColumns D ON T.TableName = D.TableName AND T.TotalColumn = D.DataColumn
	), DataColumnCount (TableName, DataColumnCount)
	AS
	(
	SELECT TableName, COUNT(DataColumn) AS DataColumnCount
	FROM DataTotalColumns
	GROUP BY TableName
	)
	SELECT X.TableName, X.DataColumnCount, Y.TotalColumnCount
	INTO #Temp
	FROM DataColumnCount X
		INNER JOIN TotalColumnCount Y ON X.TableName = Y.TableName

	ALTER TABLE #Temp
	ALTER COLUMN DataColumnCount VARCHAR(MAX)

	ALTER TABLE #Temp
	ALTER COLUMN TotalColumnCount VARCHAR(MAX)

	INSERT INTO #Temp VALUES 
	((SELECT '--' + CAST(COUNT(TableName) AS VARCHAR(MAX)) + ' Tables in ' + @Schema + ' Schema--' FROM #Temp),
	 (SELECT CAST(SUM(CAST(DataColumnCount AS INT)) AS VARCHAR(MAX)) + ' Data Columns' FROM #Temp),
	 (SELECT CAST(SUM(CAST(TotalColumnCount AS INT)) AS VARCHAR(MAX)) + ' Total Columns' FROM #Temp))

	SELECT * FROM #Temp
	ORDER BY TableName
END TRY
BEGIN CATCH
SELECT ERROR_NUMBER() AS [Error_Number],
	   ERROR_SEVERITY() AS [Error_Severity],
	   ERROR_STATE() AS [Error_ State],
	   ERROR_LINE() AS [Error_Line],
	   ISNULL(ERROR_PROCEDURE(), '-') AS [Error_Procedure]
END CATCH
END
GO
/****** Object:  StoredProcedure [wwp].[USP_Transfer_CWWPinComment]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Tholkappian, Silambholi
-- Create date: 11/20/2019
-- Description:	Transfer CWW PIN comments to WWP
-- =============================================

/* Sample Execute
EXEC [wwp].[USP_Transfer_CWWPinComment] 1
*/

CREATE PROCEDURE [wwp].[USP_Transfer_CWWPinComment]
	@Debug BIT = 0
AS
BEGIN
	DECLARE @SchemaName VARCHAR(10) = DB_NAME()
	DECLARE @LSDBName VARCHAR(100)
	DECLARE @DB2DBName VARCHAR(100)
	DECLARE @SelectSQL NVARCHAR(MAX)
	DECLARE @DeleteSQL NVARCHAR(MAX)
	DECLARE @PinCommentDate VARCHAR(10) = (SELECT CONVERT(VARCHAR(10), ParameterValue, 20)
										   FROM wwp.SpecialInitiative
										   WHERE ParameterName = 'PinComments')
	DECLARE @PinNumber DECIMAL(10,0)

	CREATE TABLE #T0107
	(
		PinNumber DECIMAL(10,0),
		ParticipantId INT,
		CommentText VARCHAR(1000),
		CommentSequenceNumber INT,
		MFUserId VARCHAR(6),
		WIUID VARCHAR(25),
		CreatedDate DATETIME,
		ModifiedDate DATETIME
	)

	DECLARE @PCCT TABLE
	(
		PinCommentId INT,
		ModifiedBy VARCHAR(25),
		ModifiedDate DATETIME
	)
	---

	SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
							WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
							WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
							WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
					   END
	---

	SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
							 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
							 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
							 WHEN @SchemaName = 'WWP' THEN 'PWP639TC'
						END
	---

	SET @SelectSQL = 'SELECT PinNumber, CommentText, CommentSequenceNumber, MFUserId, CreatedDate, ModifiedDate
					  FROM OPENQUERY(' + @LSDBName + ', ''SELECT A.PIN_NUM AS PinNumber,
														  A.WP_COMMENT_1_TXT || 
														  CASE WHEN A.WP_COMMENT_2_TXT IS NULL THEN '''''''' ELSE CONCAT('''' '''', A.WP_COMMENT_2_TXT) END ||
														  CASE WHEN A.WP_COMMENT_3_TXT IS NULL THEN '''''''' ELSE CONCAT('''' '''', A.WP_COMMENT_3_TXT) END ||
														  CASE WHEN A.WP_COMMENT_4_TXT IS NULL THEN '''''''' ELSE CONCAT('''' '''', A.WP_COMMENT_4_TXT) END AS CommentText,
														  A.WP_COMMENT_NUM AS CommentSequenceNumber, A.STAFF_ID AS MFUserId, A.WP_COMMENT_DT AS CreatedDate,
														  A.WP_COMMENT_DT AS ModifiedDate
													FROM ' + @DB2DBName + '.T0107_WP_IN_COMM A
													WHERE A.WP_COMMENT_DT >= ''''' + @PinCommentDate + '''''
													ORDER BY A.PIN_NUM, A.WP_COMMENT_DT, A.WP_COMMENT_NUM ASC
													WITH UR;'');'
	PRINT @SelectSQL

	INSERT INTO #T0107 (PinNumber, CommentText, CommentSequenceNumber, MFUserId, CreatedDate, ModifiedDate)
	EXEC (@SelectSQL)

	IF (@Debug = 0)
	BEGIN
		DECLARE PinNumber CURSOR FOR
		SELECT PinNumber
		FROM #T0107
		WHERE PinNumber NOT IN (SELECT PinNumber
								FROM wwp.Participant)

		OPEN PinNumber
		FETCH NEXT FROM PinNumber INTO @PinNumber

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC wwp.USP_RefreshParticipant @PinNumber

			FETCH NEXT FROM PinNumber INTO @PinNumber
		END

		CLOSE PinNumber
		DEALLOCATE PinNumber
	END
	
	UPDATE #T0107
	SET ParticipantId = B.Id, WIUID = ISNULL(C.WIUID, '')
	FROM #T0107 A
		LEFT JOIN wwp.Participant B
			ON A.PinNumber = B.PinNumber
		LEFT JOIN wwp.Worker C
			ON A.MFUserId = C.MFUserId

	SET @DeleteSQL = 'DELETE FROM ' + @LSDBName + '.' + REPLACE(@LSDBName, '_DB2', '') + '.' + @DB2DBName + '.T0107_WP_IN_COMM
					  FROM ' + @LSDBName + '.' + REPLACE(@LSDBName, '_DB2', '') + '.' + @DB2DBName + '.T0107_WP_IN_COMM A
						INNER JOIN #T0107 B
							ON A.PIN_NUM = B.PinNumber AND A.WP_COMMENT_NUM = B.CommentSequenceNumber AND A.WP_COMMENT_DT = B.CreatedDate'
	PRINT @DeleteSQL

	IF (@Debug = 0)
	BEGIN
		INSERT INTO wwp.PinComment (ParticipantId, IsEdited, CommentText, CreatedDate, ModifiedBy, ModifiedDate)
		OUTPUT INSERTED.Id, INSERTED.ModifiedBy, INSERTED.ModifiedDate INTO @PCCT
		SELECT ParticipantId, 0, CommentText, CreatedDate, WIUID, ModifiedDate
		FROM #T0107

		INSERT INTO wwp.PCCTBridge (PinCommentId, CommentTypeId, ModifiedBy, ModifiedDate)
		SELECT PinCommentId, (SELECT Id FROM wwp.PinCommentType WHERE Name = 'CWW PIN Comment'), ModifiedBy, ModifiedDate
		FROM @PCCT

		EXEC (@DeleteSQL)
	END
	ELSE
		SELECT * FROM #T0107

	IF OBJECT_ID('tempdb..#T0107') IS NOT NULL DROP TABLE #T0107
END
GO
/****** Object:  StoredProcedure [wwp].[USP_WorkerContact_Info]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- ===============================================================================
-- Author		: Tholkappian, Silambholi
-- Create date	: 01/29/2020
-- Description	: Get WorkerContact Info
-- ===============================================================================

/* Sample Execute
EXEC [wwp].[USP_WorkerContact_Info] '2018040215164927', 'XCTF5O', 10
*/

CREATE PROCEDURE [wwp].[USP_WorkerContact_Info]
	@WIUID VARCHAR(25),
	@MFUserId VARCHAR(6),
	@EnrolledProgramId INT,
	@Debug BIT = 0
AS
BEGIN
	BEGIN TRY
		DECLARE @SchemaName VARCHAR(10) = DB_NAME(),
		@DB2DBName VARCHAR(25),
		@LSDBName VARCHAR(25),
		@Statement1 NVARCHAR(MAX)
		
		---
		SELECT @LSDBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'NETWINFO_D00S_DB2'
								WHEN @SchemaName = 'WWPACC' THEN 'NETWINFO_D00A_DB2'
								WHEN @SchemaName = 'WWPTRN' THEN 'NETWINFO_D00E_DB2'
								WHEN @SchemaName = 'WWP'    THEN 'NETWINFO_D40P_DB2'
						   END

		---
		SELECT @DB2DBName = CASE WHEN @SchemaName IN ('WWPDEV', 'WWPSYS') THEN 'PWS639TC'
								 WHEN @SchemaName = 'WWPACC' THEN 'PWA639TC'
								 WHEN @SchemaName = 'WWPTRN' THEN 'PWE639TC'
								 WHEN @SchemaName = 'WWP'	 THEN 'PWP639TC'
							END

		---
		DECLARE @TempWorkerInfo TABLE (
									   FirstName VARCHAR(50),
									   MiddleInitial VARCHAR(5),
									   LastName VARCHAR(50),
									   PhoneNumber VARCHAR(10),
									   Email VARCHAR(120)
									  )

		IF (@EnrolledProgramId BETWEEN 1 AND 8 OR @EnrolledProgramId = 11  OR @EnrolledProgramId = 13)
		BEGIN
			IF OBJECT_ID('tempdb..##WkrInfo_WWP_Temp') IS NOT NULL DROP TABLE ##WkrInfo_WWP_Temp
			CREATE TABLE ##WkrInfo_WWP_Temp (
											 FirstName VARCHAR(50),
											 MiddleInitial VARCHAR(5),
											 LastName VARCHAR(50),
											 PhoneNumber VARCHAR(10),
											 Email VARCHAR(120)
											)

			SET @Statement1 = 'INSERT INTO ##WkrInfo_WWP_Temp
							   SELECT FirstName, MiddleInitial, LastName, PhoneNumber, Email
							   FROM OPENQUERY(' + @LSDBName + ', ''SELECT WORKER_FIRST_NAM FirstName, WORKER_MIDDLE_NAM MiddleInitial, WORKER_LAST_NAM LastName,
																   WORK_PHONE_NUM PhoneNumber, EMAIL_ADR Email
																   FROM ' + @DB2DBName + '.T0007_WORKER
																   WHERE USER_ID = ''''' + @MFUserId + '''''
																   WITH UR;'')'
			PRINT @Statement1
			EXEC (@Statement1)

			INSERT INTO @TempWorkerInfo
			SELECT *
			FROM ##WkrInfo_WWP_Temp

			IF OBJECT_ID('tempdb..##WkrInfo_WWP_Temp') IS NOT NULL DROP TABLE ##WkrInfo_WWP_Temp
		END
		ELSE
			INSERT INTO @TempWorkerInfo
			SELECT FirstName, MiddleInitial, LastName, PhoneNumber, Email
			FROM wwp.WorkerContactInfo WCI
				INNER JOIN wwp.Worker W
					ON WCI.WorkerId = W.Id
			WHERE W.WIUID = @WIUID

		SELECT *
		FROM @TempWorkerInfo
	END TRY
	BEGIN CATCH
	THROW
	END CATCH
END
GO
/****** Object:  DdlTrigger [Database_DDL_Audit]    Script Date: 2/7/2020 4:02:35 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [Database_DDL_Audit]
ON DATABASE
FOR DDL_DATABASE_LEVEL_EVENTS
AS
BEGIN
    DECLARE @EventDataXml   XML;
    DECLARE @SchemaName     SYSNAME;
    DECLARE @ObjectName     SYSNAME;
    DECLARE @EventType      SYSNAME;
 
    -- getting back event data
    SET @EventDataXml = EVENTDATA();
    
    SELECT 
        @EventType  = @EventDataXml.value('(/EVENT_INSTANCE/EventType)[1]', 'SYSNAME'),
        @SchemaName = @EventDataXml.value('(/EVENT_INSTANCE/SchemaName)[1]', 'SYSNAME'),
        @ObjectName = @EventDataXml.value('(/EVENT_INSTANCE/ObjectName)[1]', 'SYSNAME') 
    ;
    
    INSERT [dbo].[AuditChangeLog] (
        [CreateDate],[LoginName], [ComputerName],[ProgramName],[DBName],[SQLEvent], [SchemaName], [ObjectName], [SQLCmd], [XmlEvent]
    )
    SELECT
        GETDATE(),
        SUSER_NAME(), 
        HOST_NAME(), 
        PROGRAM_NAME(),
        @EventDataXml.value('(/EVENT_INSTANCE/DatabaseName)[1]', 'SYSNAME'),
        @EventType, 
        @SchemaName, 
        @ObjectName, 
        @EventDataXml.value('(/EVENT_INSTANCE/TSQLCommand)[1]', 'NVARCHAR(MAX)'), 
        @EventDataXml
     ;
END;
GO
DISABLE TRIGGER [Database_DDL_Audit] ON DATABASE
GO
ENABLE TRIGGER [Database_DDL_Audit] ON DATABASE
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Wamsid' , @level0type=N'SCHEMA',@level0name=N'wwp', @level1type=N'TABLE',@level1name=N'Worker', @level2type=N'COLUMN',@level2name=N'WAMSId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "w"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 282
            End
            DisplayFlags = 280
            TopColumn = 2
         End
         Begin Table = "o"
            Begin Extent = 
               Top = 6
               Left = 320
               Bottom = 136
               Right = 511
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ca"
            Begin Extent = 
               Top = 6
               Left = 549
               Bottom = 136
               Right = 740
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "ep"
            Begin Extent = 
               Top = 6
               Left = 778
               Bottom = 136
               Right = 961
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'sec', @level1type=N'VIEW',@level1name=N'WorkerOrgProgram'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'sec', @level1type=N'VIEW',@level1name=N'WorkerOrgProgram'
GO
USE [master]
GO
ALTER DATABASE [WWPDEV] SET  READ_WRITE 
GO
